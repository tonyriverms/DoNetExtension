//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DoNetExtension.System.IO {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class IOResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal IOResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DoNetExtension.System.IO.IOResources", typeof(IOResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The integer to be coded must be non-negative..
        /// </summary>
        internal static string ERR_EliasCode_OnlyNonNegativeIntegerAllowed {
            get {
                return ResourceManager.GetString("ERR_EliasCode_OnlyNonNegativeIntegerAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation is invalid when the current record stream is empty..
        /// </summary>
        internal static string ERR_FRecordStream_Empty {
            get {
                return ResourceManager.GetString("ERR_FRecordStream_Empty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make sure necessary information is loaded before this operation (call LoadInfo method first). Also make sure the current record stream is not empty and there exists at least one data block..
        /// </summary>
        internal static string ERR_FRecordStream_EmptyOrNotLoaded {
            get {
                return ResourceManager.GetString("ERR_FRecordStream_EmptyOrNotLoaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Base stream must be seekable, readable and writable..
        /// </summary>
        internal static string ERR_FRecordStream_InvalidBaseStream {
            get {
                return ResourceManager.GetString("ERR_FRecordStream_InvalidBaseStream", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Necessary information must be loaded before this operation. Call LoadInfo method first..
        /// </summary>
        internal static string ERR_FRecordStream_NotLoaded {
            get {
                return ResourceManager.GetString("ERR_FRecordStream_NotLoaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Length of a section must be positive..
        /// </summary>
        internal static string ERR_IRecord_InvalidSectionLength {
            get {
                return ResourceManager.GetString("ERR_IRecord_InvalidSectionLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Those two System.IO.IRecord objects are not compatible. Compatible records must be based on same System.IO.Stream and have the same section length..
        /// </summary>
        internal static string ERR_IRecord_NotCompatible {
            get {
                return ResourceManager.GetString("ERR_IRecord_NotCompatible", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The section information has not been loaded..
        /// </summary>
        internal static string ERR_IRecord_NotLoaded {
            get {
                return ResourceManager.GetString("ERR_IRecord_NotLoaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not in the same info-stream and data-stream and without the same section length, the System.IO.IRecord object is not compatible with the System.IO.IRecordManager object..
        /// </summary>
        internal static string ERR_IRecordManager_IRecordNotCompatible {
            get {
                return ResourceManager.GetString("ERR_IRecordManager_IRecordNotCompatible", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The underlying stream does not support reading..
        /// </summary>
        internal static string ERR_RecordStream_CannotRead {
            get {
                return ResourceManager.GetString("ERR_RecordStream_CannotRead", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The underlying stream does not support writing..
        /// </summary>
        internal static string ERR_RecordStream_CannotWrite {
            get {
                return ResourceManager.GetString("ERR_RecordStream_CannotWrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to count must be positive..
        /// </summary>
        internal static string ERR_RecordStream_InvalidCount {
            get {
                return ResourceManager.GetString("ERR_RecordStream_InvalidCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This record has been created before. You cannot create it twice..
        /// </summary>
        internal static string ERR_RecordStream_InvalidCreation {
            get {
                return ResourceManager.GetString("ERR_RecordStream_InvalidCreation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The total length of the data in the stream must not exceeds the stream&apos;s current capacity..
        /// </summary>
        internal static string ERR_RecordStream_InvalidLength {
            get {
                return ResourceManager.GetString("ERR_RecordStream_InvalidLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to offset must not be negative..
        /// </summary>
        internal static string ERR_RecordStream_InvalidOffset {
            get {
                return ResourceManager.GetString("ERR_RecordStream_InvalidOffset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sum of offset and count is larger than the buffer length..
        /// </summary>
        internal static string ERR_RecordStream_InvalidOffsetAndCount {
            get {
                return ResourceManager.GetString("ERR_RecordStream_InvalidOffsetAndCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The position exceeds the length of this stream..
        /// </summary>
        internal static string ERR_RecordStream_InvalidPosition {
            get {
                return ResourceManager.GetString("ERR_RecordStream_InvalidPosition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New data has been written into this record stream, and you must save them or abandon them before you unload this record..
        /// </summary>
        internal static string ERR_RecordStream_UpdateNotSaved {
            get {
                return ResourceManager.GetString("ERR_RecordStream_UpdateNotSaved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The data at the current position of the stream is irrecognizable or contaminated..
        /// </summary>
        internal static string ERR_StreamExtension_DataIrrecognizable {
            get {
                return ResourceManager.GetString("ERR_StreamExtension_DataIrrecognizable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The data read from the stream is not enough for the decoding operation..
        /// </summary>
        internal static string ERR_StreamExtension_DataNotEnough {
            get {
                return ResourceManager.GetString("ERR_StreamExtension_DataNotEnough", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A integer check code must be positive..
        /// </summary>
        internal static string ERR_StreamExtension_InvalidCheckCode {
            get {
                return ResourceManager.GetString("ERR_StreamExtension_InvalidCheckCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified size of data to read is invalid. For this method, the size must be {0}..
        /// </summary>
        internal static string ERR_StreamExtension_InvalidSizeOfData {
            get {
                return ResourceManager.GetString("ERR_StreamExtension_InvalidSizeOfData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The length of the written string in Unicode should not exceeds 4G..
        /// </summary>
        internal static string ERR_Text4GLimit {
            get {
                return ResourceManager.GetString("ERR_Text4GLimit", resourceCulture);
            }
        }
    }
}
