        /// <summary>
        /// Iterates <see cref="$Key1$"/>-<see cref="$Val1$"/> <see cref="KeyValuePair{TKey,TValue}"/> pairs from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="Iter$Key2$$Val2$Tuples" /> instead.
        /// </summary>
        /// <param name="stream">The stream to read from.</param>
        /// <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        public static IEnumerator<KeyValuePair<$Key1$, $Val1$>> Iter$Key2$$Val2$DictPairs(this Stream stream, bool validityCheck = false)
        {
            if (!validityCheck || stream.Check((Int64)0x212DF455DFABE3C))
            {
                var count = stream.ReadInt32();
				if (count < 0) throw new InvalidDataException(IOResources.ERR_StreamExtension_DataNotEnough);
                for (var i = 0; i < count; ++i)
                {
                    var key = stream.Read$Key2$();
                    var value = stream.Read$Val2$();
                    yield return new KeyValuePair<$Key1$, $Val1$>(key, value);
                }
            }
        }
		
        /// <summary>
        /// Iterates <see cref="$Key1$"/>-<see cref="$Val1$"/> key-value tuples from the stream.
        /// </summary>
        /// <param name="stream">The stream to read from.</param>
        public static IEnumerator<($Key1$, $Val1$)> Iter$Key2$$Val2$Tuples(this Stream stream)
        {
            var key = stream.Read$Key2$();
            var value = stream.Read$Val2$();
            yield return (key, value);
        }

        /// <summary>
        /// Iterates <see cref="$Key1$"/>-<see cref="IBinarySavable"/> <see cref="KeyValuePair{TKey,TValue}"/> pairs from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="Iter$Key2$BinarySavableDictTuples" /> instead.
        /// </summary>
        /// <param name="stream">The stream to read from.</param>
        /// <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        public static IEnumerator<KeyValuePair<$Key1$, T>> Iter$Key2$BinarySavableDictPairs<T>(this Stream stream, bool validityCheck = false) where T : IBinarySavable, new()
        {
            if (!validityCheck || stream.Check((Int64)0x212DF455DFABE3C))
            {
                var count = stream.ReadInt32();
				if (count < 0) throw new InvalidDataException(IOResources.ERR_StreamExtension_DataNotEnough);
                for (var i = 0; i < count; ++i)
                {
                    var key = stream.Read$Key2$();
                    var value = stream.ReadBinarySavable<T>();
                    yield return new KeyValuePair<$Key1$, T>(key, value);
                }
            }
        }

		/// <summary>
        /// Iterates <see cref="$Key1$"/>-<see cref="IBinarySavable"/> key-value tuples from the stream.
        /// </summary>
        /// <param name="stream">The stream to read from.</param>
        public static IEnumerator<($Key1$, T)> Iter$Key2$BinarySavableTuples<T>(this Stream stream) where T : IBinarySavable, new()
        {
            var key = stream.Read$Key2$();
            var value = stream.ReadBinarySavable<T>();
            yield return (key, value);
        }

		
$Key1$,bool,byte,sbyte,short,int,long,ushort,uint,ulong,string,DateTime
$Key2$,Boolean,Byte,SByte,Int16,Int32,Int64,UInt16,UInt32,UInt64,String,DateTime

$Val1$,bool,byte,sbyte,short,int,long,ushort,uint,ulong,float,double,string,DateTime
$Val2$,Boolean,Byte,SByte,Int16,Int32,Int64,UInt16,UInt32,UInt64,Single,Double,String,DateTime

