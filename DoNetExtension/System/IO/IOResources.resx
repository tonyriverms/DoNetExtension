<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ERR_EliasCode_OnlyNonNegativeIntegerAllowed" xml:space="preserve">
    <value>The integer to be coded must be non-negative.</value>
  </data>
  <data name="ERR_FRecordStream_Empty" xml:space="preserve">
    <value>This operation is invalid when the current record stream is empty.</value>
  </data>
  <data name="ERR_FRecordStream_EmptyOrNotLoaded" xml:space="preserve">
    <value>Make sure necessary information is loaded before this operation (call LoadInfo method first). Also make sure the current record stream is not empty and there exists at least one data block.</value>
  </data>
  <data name="ERR_FRecordStream_InvalidBaseStream" xml:space="preserve">
    <value>Base stream must be seekable, readable and writable.</value>
  </data>
  <data name="ERR_FRecordStream_NotLoaded" xml:space="preserve">
    <value>Necessary information must be loaded before this operation. Call LoadInfo method first.</value>
  </data>
  <data name="ERR_IRecordManager_IRecordNotCompatible" xml:space="preserve">
    <value>Not in the same info-stream and data-stream and without the same section length, the System.IO.IRecord object is not compatible with the System.IO.IRecordManager object.</value>
  </data>
  <data name="ERR_IRecord_InvalidSectionLength" xml:space="preserve">
    <value>Length of a section must be positive.</value>
  </data>
  <data name="ERR_IRecord_NotCompatible" xml:space="preserve">
    <value>Those two System.IO.IRecord objects are not compatible. Compatible records must be based on same System.IO.Stream and have the same section length.</value>
  </data>
  <data name="ERR_IRecord_NotLoaded" xml:space="preserve">
    <value>The section information has not been loaded.</value>
  </data>
  <data name="ERR_RecordStream_CannotRead" xml:space="preserve">
    <value>The underlying stream does not support reading.</value>
  </data>
  <data name="ERR_RecordStream_CannotWrite" xml:space="preserve">
    <value>The underlying stream does not support writing.</value>
  </data>
  <data name="ERR_RecordStream_InvalidCount" xml:space="preserve">
    <value>count must be positive.</value>
  </data>
  <data name="ERR_RecordStream_InvalidCreation" xml:space="preserve">
    <value>This record has been created before. You cannot create it twice.</value>
  </data>
  <data name="ERR_RecordStream_InvalidLength" xml:space="preserve">
    <value>The total length of the data in the stream must not exceeds the stream's current capacity.</value>
  </data>
  <data name="ERR_RecordStream_InvalidOffset" xml:space="preserve">
    <value>offset must not be negative.</value>
  </data>
  <data name="ERR_RecordStream_InvalidOffsetAndCount" xml:space="preserve">
    <value>The sum of offset and count is larger than the buffer length.</value>
  </data>
  <data name="ERR_RecordStream_InvalidPosition" xml:space="preserve">
    <value>The position exceeds the length of this stream.</value>
  </data>
  <data name="ERR_RecordStream_UpdateNotSaved" xml:space="preserve">
    <value>New data has been written into this record stream, and you must save them or abandon them before you unload this record.</value>
  </data>
  <data name="ERR_StreamExtension_DataIrrecognizable" xml:space="preserve">
    <value>The data at the current position of the stream is irrecognizable or contaminated.</value>
  </data>
  <data name="ERR_StreamExtension_DataNotEnough" xml:space="preserve">
    <value>The data read from the stream is not enough for the decoding operation.</value>
  </data>
  <data name="ERR_StreamExtension_InvalidCheckCode" xml:space="preserve">
    <value>A integer check code must be positive.</value>
  </data>
  <data name="ERR_StreamExtension_InvalidSizeOfData" xml:space="preserve">
    <value>The specified size of data to read is invalid. For this method, the size must be {0}.</value>
  </data>
  <data name="ERR_Text4GLimit" xml:space="preserve">
    <value>The length of the written string in Unicode should not exceeds 4G.</value>
  </data>
</root>