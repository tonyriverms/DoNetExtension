<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DoNetExtension</name>
    </assembly>
    <members>
        <member name="M:System.ArrayEx.ToArrayOrNull``1(System.Collections.Generic.List{``0})">
            <summary>
            Returns <c>null</c> if the current list is empty or <c>null</c>; otherwise returns a new array containing the elements of the current list.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The current list.</param>
            <returns><c>null</c> if the current list is empty or <c>null</c>; otherwise, a new array containing the elements of the current list.</returns>
        </member>
        <member name="M:System.ArrayEx.ToArrayOrNull``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns <c>null</c> if the current list is empty or <c>null</c>; otherwise returns a new array containing the elements of the current list.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The current list.</param>
            <returns><c>null</c> if the current list is empty or <c>null</c>; otherwise, a new array containing the elements of the current list.</returns>
        </member>
        <member name="M:System.ArrayEx.ToArrayOrNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns <c>null</c> if the current collection is empty or <c>null</c>; otherwise returns a new array containing the elements of the current list.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <param name="collection">The current collection.</param>
            <returns><c>null</c> if the current collection is empty or <c>null</c>; otherwise, a new array containing the elements of the current collection.</returns>
        </member>
        <member name="M:System.ArrayEx.ToArrayOrNull``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Returns a new array containing the elements of the current list starting at the specified <paramref name="startIndex" />.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The current list.</param>
            <param name="startIndex">The element at and after this position in the <paramref name="list"/> are copied to the new array.</param>
            <returns><c>null</c> if the current list is empty or <c>null</c>, or there is no element at or after the specified <paramref name="startIndex"/>; otherwise, a new array containing the elements at and after the specified <paramref name="startIndex"/> of the current list.</returns>
        </member>
        <member name="M:System.ArrayEx.ToArrayOrNull``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Returns a new array containing the elements of the current list starting at the specified <paramref name="startIndex" />.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The current list.</param>
            <param name="startIndex">The element at and after this position in the <paramref name="list"/> are copied to the new array.</param>
            <returns><c>null</c> if the current list is empty or <c>null</c>, or there is no element at or after the specified <paramref name="startIndex"/>; otherwise, a new array containing the elements at and after the specified <paramref name="startIndex"/> of the current list.</returns>
        </member>
        <member name="M:System.ArrayEx.ToArrayOrNull``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns a new array containing the elements of the current collection starting at the specified <paramref name="startIndex" />.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <param name="collection">The current collection.</param>
            <param name="startIndex">The element at and after this position in the <paramref name="collection"/> are copied to the new array.</param>
            <returns><c>null</c> if the current collection is empty or <c>null</c>, or there is no element at or after the specified <paramref name="startIndex"/>; otherwise, a new array containing the elements at and after the specified <paramref name="startIndex"/> of the current collection.</returns>
        </member>
        <member name="M:System.ArrayEx.ToArrayThenClear``1(System.Collections.Generic.List{``0})">
            <summary>
            Copies the elements of this <see cref="T:System.Collections.Generic.List`1"/> to an array of <typeparamref name="T"/> and then clear this <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <typeparam name="T">The type of elements in this <see cref="T:System.Collections.Generic.List`1"/>.</typeparam>
            <param name="list">This list.</param>
            <returns>An array containing copies of the elements of the <see cref="T:System.Collections.Generic.List`1"/>.</returns>
        </member>
        <member name="M:System.ArrayEx.ToArrayThenClear``1(System.Collections.Generic.IList{``0})">
            <summary>
            Copies the elements of this <see cref="T:System.Collections.Generic.IList`1"/> to an array of <typeparamref name="T"/> and then clear this <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">The type of elements in this <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="list">This list.</param>
            <returns>An array containing copies of the elements of the <see cref="T:System.Collections.Generic.IList`1"/>.</returns>
        </member>
        <member name="M:System.ArrayEx.ToArrayOrNullThenClear``1(System.Collections.Generic.List{``0})">
            <summary>
            Copies the elements of this <see cref="T:System.Collections.Generic.List`1"/> to an array of <typeparamref name="T"/> if this <see cref="T:System.Collections.Generic.List`1"/> is not <c>null</c> or empty, and then clear this <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <typeparam name="T">The type of elements in this <see cref="T:System.Collections.Generic.List`1"/>.</typeparam>
            <param name="list">This list.</param>
            <returns>An array containing copies of the elements of the <see cref="T:System.Collections.Generic.List`1"/> if it is neither <c>null</c> or empty; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:System.ArrayEx.ToArrayOrNullThenClear``1(System.Collections.Generic.IList{``0})">
            <summary>
            Copies the elements of this <see cref="T:System.Collections.Generic.IList`1"/> to an array of <typeparamref name="T"/> if this <see cref="T:System.Collections.Generic.IList`1"/> is not <c>null</c> or empty, and then clear this <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">The type of elements in this <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="list">This list.</param>
            <returns>An array containing copies of the elements of the <see cref="T:System.Collections.Generic.IList`1"/> if it is neither <c>null</c> or empty; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:System.ArrayEx.IsEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Determines whether the current collection is empty.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <param name="collection">The current collection.</param>
            <returns><c>true</c> if the current collection is an empty collection.</returns>
        </member>
        <member name="M:System.ArrayEx.IsNotEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Determines whether the current collection is not empty.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <param name="collection">The current collection.</param>
            <returns><c>true</c> if the current collection is not empty; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.ArrayEx.IsEmpty``1(System.Collections.Generic.List{``0})">
            <summary>
            Determines whether the current list is empty.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The current list.</param>
            <returns><c>true</c> if the current list is empty.</returns>
        </member>
        <member name="M:System.ArrayEx.IsNotEmpty``1(System.Collections.Generic.List{``0})">
            <summary>
            Determines whether the current list is not empty.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The current list.</param>
            <returns><c>true</c> if the current list is not empty; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.ArrayEx.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Determines whether the current collection is <c>null</c> or empty.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <param name="collection">The current collection.</param>
            <returns><c>true</c> if the current collection is a <c>null</c> reference or an empty collection.</returns>
        </member>
        <member name="M:System.ArrayEx.IsNotNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Determines whether the current collection is not <c>null</c> or empty.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <param name="collection">The current collection.</param>
            <returns><c>true</c> if the current collection is not a <c>null</c> reference or an empty collection; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.ArrayEx.IsNullOrEmpty``1(``0[])">
            <summary>
            Determines whether the current <see cref="T:System.Array"/> is <c>null</c> or empty.
            </summary>
            <typeparam name="T">The type of elements in the current array.</typeparam>
            <param name="array">The current array.</param>
            <returns><c>true</c> if the current array is a <c>null</c> reference or an empty array.</returns>
        </member>
        <member name="M:System.ArrayEx.IsNullOrEmpty``1(System.Collections.Generic.Stack{``0})">
            <summary>
            Determines whether the current <see cref="T:System.Collections.Generic.Stack`1"/> is <c>null</c> or empty.
            </summary>
            <typeparam name="T">The type of elements in the current stack.</typeparam>
            <param name="stack">The current stack.</param>
            <returns><c>true</c> if the current stack is a <c>null</c> reference or an empty stack.</returns>
        </member>
        <member name="M:System.ArrayEx.Insert``1(``0[],``0[],System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Array"/> instance that duplicates the current array with items from another array inserted at the specified index.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="sourceArray">The current array.</param>
            <param name="array">All elements of this array will be inserted at the specified <paramref name="index"/>.</param>
            <param name="index">The zero-based index at which items from argument <paramref name="array"/> should be inserted.</param>
            <returns>A new <see cref="T:System.Array"/> instance with all elements of the current array and items from another specified array inserted at the specified index.</returns>
        </member>
        <member name="M:System.ArrayEx.Insert``1(``0[],``0,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Array"/> instance that duplicates the current array with a given item inserted at the specified index.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="sourceArray">The current array.</param>
            <param name="item">The item to be inserted at the specified <paramref name="index"/>.</param>
            <param name="index">The zero-based index at which the <paramref name="item"/> should be inserted.</param>
            <returns>A new <see cref="T:System.Array"/> instance with all elements of the current array and the given item inserted at the specified index. </returns>
        </member>
        <member name="M:System.ArrayEx.InternalShiftInsert``1(``0[],``0,System.Int32,System.Int32)">
            <summary>
            For internal use only. Inserts an element into the current array at a specified position by shifting rightward a number of elements at and after the insert position. The number is specified by <c><paramref name="shiftLimit"/> - <paramref name="index"/> - 1</c>. The element at position <c><paramref name="shiftLimit"/> - 1</c> will be removed. NOTE that this method bypasses the argument check for better performance.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="array">The current array.</param>
            <param name="item">The new element to be inserted into the array.</param>
            <param name="index">The shift begins at this position. <paramref name="item"/> will be placed at this position after the shift.</param>
            <param name="shiftLimit">Defining the segment of the array where shift occurs starting at the position specified by <paramref name="index"/>. The number of elements shifted backward is determined by <c><paramref name="shiftLimit"/> - <paramref name="index"/> - 1</c>.</param>
        </member>
        <member name="M:System.ArrayEx.ShiftInsert``1(``0[],``0,System.Int32)">
            <summary>
            Inserts an element into the current array at a specified position by shifting rightward all the elements at and after the position. The last element of the array will be removed.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="array">The current array.</param>
            <param name="item">The new element to be inserted into the array.</param>
            <param name="index">The shift begins at this position. <paramref name="item"/> will be placed at this position after the shift.</param>
        </member>
        <member name="M:System.ArrayEx.ShiftInsert``1(``0[],``0,System.Int32,System.Int32)">
            <summary>
            Inserts an element into the current array at a specified position by shifting rightward a number of elements at and after the insert position. The number is specified by <c><paramref name="shiftLength"/> - 1</c>. The element at position <c><paramref name="index"/> + <paramref name="shiftLength"/> - 1</c> will be removed.
            </summary>
            <typeparam name="T">The type of elements in the arrray.</typeparam>
            <param name="array">The current array.</param>
            <param name="item">The new element to be inserted into the array.</param>
            <param name="index">The shift begins at this position. <paramref name="item"/> will be placed at this position after the shift.</param>
            <param name="shiftLength">Defining the segment of the array where shift occurs starting at position specified by <paramref name="index"/>. The number of elements shifted backward is determined by <c><paramref name="shiftLength"/> - 1</c>.</param>
        </member>
        <member name="M:System.ArrayEx.RemoveAt``1(``0[],System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Array"/> instance that duplicates the current array with the item at the specified index removed.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="sourceArray">The current array.</param>
            <param name="index">The index of the item to be removed.</param>
            <returns>A new <see cref="T:System.Array"/> instance that duplicates the current array with the item at the specified index removed. </returns>
        </member>
        <member name="M:System.ArrayEx.Remove``1(``0[],``0)">
            <summary>
            Creates a new <see cref="T:System.Array"/> instance that duplicates the current array with the specified <paramref name="item"/> removed if it is found; or returns the current array if <paramref name="item"/> is not found.
            <para>You may check if the item is found be checking if the reference to the returned array equals the current array.</para>
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="sourceArray">The current array.</param>
            <param name="item">The item to remove.</param>
            <returns>A new <see cref="T:System.Array"/> instance that duplicates the current array with the specified <paramref name="item"/> removed if it is found; otherwise, the current array.</returns>
        </member>
        <member name="M:System.ArrayEx.Remove``1(``0[],``0[])">
            <summary>
            Creates a new <see cref="T:System.Array"/> instance that duplicates the current array with the specified <paramref name="items"/> removed if they are found. This method always returns a new array.
            <para>You may check if the item is found be checking if the reference to the returned array equals the current array.</para>
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="sourceArray">The current array.</param>
            <param name="items">The items to remove.</param>
            <returns>A new <see cref="T:System.Array"/> instance that duplicates the current array with the specified <paramref name="items"/> removed if they are found.</returns>
        </member>
        <member name="M:System.ArrayEx.Remove``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns an array that duplicates elements in the current collectino with the specified <paramref name="item"/> removed.
            </summary>
            <typeparam name="T">The type of elements in the current collection.</typeparam>
            <param name="collection">The current collection.</param>
            <param name="item">The item to remove.</param>
            <returns>An array that duplicates elements in the current collectino with the specified <paramref name="item"/> removed.</returns>
        </member>
        <member name="M:System.ArrayEx.Remove``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an array that duplicates elements in the current collectino with the specified <paramref name="items"/> removed.
            </summary>
            <typeparam name="T">The type of elements in the current collection.</typeparam>
            <param name="collection">The current collection.</param>
            <param name="items">The items to remove.</param>
            <returns>An array that duplicates elements in the current collectino with the specified <paramref name="items"/> removed.</returns>
        </member>
        <member name="M:System.ArrayEx.InternalShiftRemove``1(``0[],System.Int32,System.Int32)">
            <summary>
            For internal use only. Removes an element in the current array at a specified position by shifting a number of elements after the position foward. The number is specified by <c><paramref name="shiftLimit"/> - <paramref name="index"/> - 1</c>. The element at position <c><paramref name="shiftLimit"/> - 1</c> will be replaced the default value of type <typeparamref name="T"/>. NOTE that this method bypasses the argument check for better performance.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="array">The current array.</param>
            <param name="index">The element at this position will be removed.</param>
            <param name="shiftLimit">Defining the segment of the array where shift occurs starting at the position specified by <paramref name="index"/>. The number of elements shifted leftward is determined by <c><paramref name="shiftLimit"/> - <paramref name="index"/> - 1</c>.</param>
        </member>
        <member name="M:System.ArrayEx.ShiftRemove``1(``0[],System.Int32,System.Int32)">
            <summary>
            Removes an element in the current array at a specified position by shifting a number of elements after the position foward. The number is specified by <c><paramref name="shiftLength"/> - 1</c>. The element at position <c><paramref name="index"/> + <paramref name="shiftLength"/> - 1</c> will be replaced the default value of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of elements in the arrray.</typeparam>
            <param name="array">The current array.</param>
            <param name="index">The element at this position will be removed.</param>
            <param name="shiftLength">Defining the segment of the array where shift occurs starting at position specified by <paramref name="index"/>. The number of elements shifted leftward is determined by <c><paramref name="shiftLength"/> - 1</c>.</param>
        </member>
        <member name="M:System.ArrayEx.ShiftRemove``1(``0[],System.Int32)">
            <summary>
            Removes an element in the current array at a specified position by shifting all the elements after the position foward. The last element of the array will be replaced the default value of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="array">The current array.</param>
            <param name="index">The element at this position will be removed.</param>
        </member>
        <member name="M:System.ArrayEx.RemoveFirst``1(``0[])">
            <summary>
            Creates a new <see cref="T:System.Array" /> instance that duplicates the current array with the first item removed.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="sourceArray">The current array.</param>
            <returns>
            A new <see cref="T:System.Array" /> instance that duplicates the current array with the first item removed.
            </returns>
        </member>
        <member name="M:System.ArrayEx.RemoveLast``1(``0[])">
            <summary>
            Creates a new <see cref="T:System.Array" /> instance that duplicates the current array with the last item removed.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="sourceArray">The current array.</param>
            <returns>
            A new <see cref="T:System.Array" /> instance that duplicates the current array with the last item removed.
            </returns>
        </member>
        <member name="M:System.ArrayEx.AddLast``1(``0[],System.Collections.Generic.ICollection{``0})">
            <summary>
            Creates a new <see cref="T:System.Array"/> instance that duplicates the current array with specified collection of items appended at the end. However, if <paramref name="items"/> is <c>null</c> or empty, the instance of the current array will be returned. ALSO NOTE that the current array can be a <c>null</c> reference, in which case a new array containing objects in <paramref name="items"/> will be returned.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="sourceArray">The current array.</param>
            <param name="items">The collection of items to be appended at the end.</param>
            <returns>A new <see cref="T:System.Array"/> instance that duplicates the current array with the specified itmes appended at the end.</returns>
        </member>
        <member name="M:System.ArrayEx.AddLast``1(``0[],System.Collections.Generic.IList{``0})">
            <summary>
            Creates a new <see cref="T:System.Array"/> instance that duplicates the current array with specified list of items appended at the end. However, if <paramref name="items"/> is <c>null</c> or empty, the instance of the current array will be returned. ALSO NOTE that the current array can be a <c>null</c> reference, in which case a new array containing objects in <paramref name="items"/> will be returned.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="sourceArray">The current array.</param>
            <param name="items">The list of items to be appended at the end.</param>
            <returns>A new <see cref="T:System.Array"/> instance that duplicates the current array with the specified itmes appended at the end.</returns>
        </member>
        <member name="M:System.ArrayEx.AddLast``1(``0[],``0[])">
            <summary>
            Creates a new <see cref="T:System.Array"/> instance that duplicates the current array with specified items appended at the end. However, if <paramref name="items"/> is <c>null</c> or empty, the instance of the current array will be returned. ALSO NOTE that the current array can be a <c>null</c> reference, in which case a copy of <paramref name="items"/> will be returned.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="sourceArray">The current array.</param>
            <param name="items">The items to be appended at the end.</param>
            <returns>A new <see cref="T:System.Array"/> instance that duplicates the current array with the specified itmes appended at the end.</returns>
        </member>
        <member name="M:System.ArrayEx.AddFirst``1(``0[],``0[])">
            <summary>
            Creates a new <see cref="T:System.Array"/> instance that duplicates the current array with spcified items inserted at the beginning. However, if <paramref name="items"/> is <c>null</c> or empty, the instance of the current array will be returned. ALSO NOTE that the current array can be a <c>null</c> reference.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="sourceArray">The current array.</param>
            <param name="items">The items to be inserted at the beginning.</param>
            <returns>A new <see cref="T:System.Array"/> instance that duplicates the current array with the specified items inserted at the beginning.</returns>
        </member>
        <member name="M:System.ArrayEx.AddFirst``1(``0[],System.Collections.Generic.IList{``0})">
            <summary>
            Creates a new <see cref="T:System.Array"/> instance that duplicates the current array with specified list of items inserted at the beginning. However, if <paramref name="items"/> is <c>null</c> or empty, the instance of the current array will be returned. ALSO NOTE that the current array can be a <c>null</c> reference.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="sourceArray">The current array.</param>
            <param name="items">The list of items to be inserted at the beginning.</param>
            <returns>A new <see cref="T:System.Array"/> instance that duplicates the current array with the specified items inserted at the beginning.</returns>
        </member>
        <member name="M:System.ArrayEx.AddLast``1(``0[],``0[][])">
            <summary>
            Creates a new <see cref="T:System.Array"/> instance that duplicates the current array with specified items appended at the end.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="sourceArray">The current array.</param>
            <param name="arrayOfItems">Elements from all provided arrays will be appended at the end.</param>
            <returns>A new <see cref="T:System.Array"/> instance that duplicates the current array with the specified itmes appended at the end.</returns>
        </member>
        <member name="M:System.ArrayEx.AddFirst``1(``0[],``0[][])">
            <summary>
            Creates a new <see cref="T:System.Array"/> instance that duplicates the current array with spcified items inserted at the beginning.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="sourceArray">The current array.</param>
            <param name="arrayOfItems">Elements from all provided arrays will be appended at the beginning.</param>
            <returns>A new <see cref="T:System.Array"/> instance that duplicates the current array with the specified items inserted at the beginning.</returns>
        </member>
        <member name="M:System.ArrayEx.AddLast``1(``0[],``0)">
            <summary>
            Creates a new <see cref="T:System.Array"/> instance that duplicates the current array with a specified item appended at the end.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="sourceArray">The current array.</param>
            <param name="item">The item to be appended at the end.</param>
            <returns>A new <see cref="T:System.Array"/> instance that duplicates the current array with the specified item appended at the end.</returns>
        </member>
        <member name="M:System.ArrayEx.AddFirst``1(``0[],``0)">
            <summary>
            Creates a new <see cref="T:System.Array"/> instance that duplicates the current array with a specified item inserted at the beginning.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="sourceArray">The current array.</param>
            <param name="item">The item to be inserted at the beginning.</param>
            <returns>A new <see cref="T:System.Array"/> instance that duplicates the current array with the specified item inserted at the beginning.</returns>
        </member>
        <member name="M:System.ArrayEx.GetValueOrDefault``1(System.Object[],System.Int32)">
            <summary>
            Gets the value at the specified position from this array; of the position is invalid (e.g. this array is <c>null</c> or empty, or the position exceeds this array's length), then a <c>default<typeparamref name="T"/>)</c> is returned.
            </summary>
            <typeparam name="T">They type of elements in the array.</typeparam>
            <param name="array">The current array.</param>
            <param name="index">The position of the element to retrieve.</param>
            <returns>The value at the specified position from this array, if the position is valid; otherwise, <c>default<typeparamref name="T"/>)</c>.</returns>
        </member>
        <member name="M:System.ArrayEx.GetValueOrDefault``1(System.Object[],System.Int32,``0)">
            <summary>
            Gets the value at the specified position from this array; of the position is invalid (e.g. this array is <c>null</c> or empty, or the position exceeds this array's length), then the specified <paramref name="default" /> is returned.
            </summary>
            <typeparam name="T">They type of elements in the array.</typeparam>
            <param name="array">The current array.</param>
            <param name="index">The position of the element to retrieve.</param>
            <param name="default">The default object to return when the <paramref name="index"/> is invalid.</param>
            <returns>The value at the specified position from this array, if the position is valid; otherwise, the specified <paramref name="default" />.</returns>
        </member>
        <member name="M:System.ArrayEx.Swap``1(``0[],System.Int32,System.Int32)">
            <summary>
            Swaps two elements at the specified indexes.
            </summary>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="arr">The current array.</param>
            <param name="indexA">The element at this index will be replaced by the element at <paramref name="indexB"/>.</param>
            <param name="indexB">The element at this index will be replaced by the element at <paramref name="indexA"/>.</param>
        </member>
        <member name="M:System.ArrayEx.AsReadOnly``1(``0[])">
            <summary>
            Returns a read-only wrapper for the current array.
            </summary>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The current array.</param>
            <returns>A read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> wrapper for the current array.</returns>
        </member>
        <member name="M:System.ArrayEx.AsReadOnly``1(``0[],System.Int32,System.Int32)">
            <summary>
            Returns a read-only wrapper for a segment of the current array.
            </summary>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="offset">The zero-based index of the first element of the segment.</param>
            <param name="count">The number of elements in the segment.</param>
            <param name="array">The current array.</param>
            <returns>A read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> wrapper for the specified segment of the current array.</returns>
        </member>
        <member name="M:System.ArrayEx.Copy``1(``0[])">
            <summary>
            Creates a shallow copy of the current <see cref="T:System.Array"/>. This method is a simple wrap of the <see cref="!:Clone"/> method but returns a strong-typed array.
            </summary>
            <typeparam name="T">The type of elements in the current array.</typeparam>
            <param name="array">The current array.</param>
            <returns>A shallow copy of the current <see cref="T:System.Array"/>.</returns>
        </member>
        <member name="M:System.ArrayEx.Copy``1(``0[],System.Int32,System.Int32)">
            <summary>
            Creates a shallow copy of the current <see cref="T:System.Array" />, starting from <paramref name="startIndex" />, of length <paramref name="length" />.
            </summary>
            <typeparam name="T">The type of elements in the current array.</typeparam>
            <param name="array">The current array.</param>
            <param name="startIndex">The start position of the copy.</param>
            <param name="length">The number of elements to copy.</param>
            <returns>A shallow copy of the current <see cref="T:System.Array" />, starting from <paramref name="startIndex" />, of length <paramref name="length" />.</returns>
        </member>
        <member name="M:System.ArrayEx.Merge``1(``0[][])">
            <summary>
            Creates a new <see cref="T:System.Array"/> instance that merges all elements of the current <see cref="T:System.Array"/> objects.
            </summary>
            <typeparam name="T">The type of elements in every <see cref="T:System.Array"/>.</typeparam>
            <param name="arrays">The current <see cref="T:System.Array"/> objects.</param>
            <returns>A new <see cref="T:System.Array"/> instance that merges all elements of the current <see cref="T:System.Array"/> objects.</returns>
        </member>
        <member name="M:System.ArrayEx.Merge``1(System.Collections.Generic.IEnumerable{``0[]})">
            <summary>
            Creates a new <see cref="T:System.Array"/> instance that merges all elements of the current collection of <see cref="T:System.Array"/> objects.
            </summary>
            <typeparam name="T">The type of elements in every <see cref="T:System.Array"/>.</typeparam>
            <param name="arraySeq">The current collection of <see cref="T:System.Array"/> objects.</param>
            <returns>A new <see cref="T:System.Array"/> instance that merges all elements of the current <see cref="T:System.Array"/> collection.</returns>
        </member>
        <member name="M:System.ArrayEx.ToConcatString(System.Collections.IEnumerable,System.String)">
            <summary>
            Returns a string that concatenates all string representations of the elements in the current <see cref="T:System.Collections.IEnumerable"/> sequence by the specified <paramref name="connector"/>.
            </summary>
            <param name="sequence">The sequence of which the elements' string representations are to be concatenated.</param>
            <param name="connector">The connector that connects the string representations.</param>
            <returns>A string that concatenates all string representations of the elements in the current enumerable sequence.</returns>
        </member>
        <member name="M:System.ArrayEx.ToConcatString(System.Collections.IEnumerable,System.Char)">
            <summary>
            Returns a string that concatenates all string representations of the elements in the current <see cref="T:System.Collections.IEnumerable"/> sequence by the specified <paramref name="connector"/>.
            </summary>
            <param name="sequence">The sequence of which the elements' string representations are to be concatenated.</param>
            <param name="connector">The connector that connects the string representations.</param>
            <returns>A string that concatenates all string representations of the elements in the current enumerable sequence.</returns>
        </member>
        <member name="M:System.ArrayEx.SubArray``1(``0[],System.Int32,System.Int32)">
            <summary>
            Retrieves a subarray from the current <see cref="T:System.Array"/> starting at a specified position.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="array">The current array.</param>
            <param name="offset">The position of the first element of the subarray.</param>
            <param name="length">The length of the subarray.</param>
            <returns>
            A subarray from the current array.
            </returns>
        </member>
        <member name="M:System.ArrayEx.SubArray``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Retrieves a subarray from the current list starting at a specified position.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The current list.</param>
            <param name="offset">The position of the first element of the subarray.</param>
            <param name="length">The length of the subarray.</param>
            <returns>
            A subarray from the current list starting at the specified position.
            </returns>
        </member>
        <member name="M:System.ArrayEx.SubFirst``1(``0[],System.Int32)">
            <summary>
            Retrieves the first few elements of the current array.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="array">The current array.</param>
            <param name="length">The number of elements to retrieve.</param>
            <returns>
            A subarray containing the first few elements of the current array..
            </returns>
        </member>
        <member name="M:System.ArrayEx.SubFirst``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Retrieves the first few elements of the current list.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The current list.</param>
            <param name="length">The number of elements to retrieve.</param>
            <returns>
            A subarray containing the first few elements of the current list..
            </returns>
        </member>
        <member name="M:System.ArrayEx.SubLast``1(``0[],System.Int32)">
            <summary>
            Retrieves the last few elements of the current array.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="array">The current array.</param>
            <param name="length">The number of elements to retrieve.</param>
            <returns>
            A subarray containing the last few elements of the current array.
            </returns>
        </member>
        <member name="M:System.ArrayEx.SubLast``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Retrieves the last few elements of the current list.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The current list.</param>
            <param name="length">The number of elements to retrieve.</param>
            <returns>
            A subarray containing the last few elements of the current list.
            </returns>
        </member>
        <member name="M:System.ArrayEx.ForEach(System.Int32,System.Action{System.Int32})">
            <summary>
            Run the <paramref name="action"/> for a number of iterations specified by the current integer.
            </summary>
            <param name="iterations">The current integer specifying the number of iterations.</param>
            <param name="action">The <see cref="T:System.Action"/> to execute for a number of iterations specified by the current integer. It accepts a single parameter indicating the index of the current iteration.</param>
        </member>
        <member name="M:System.ArrayEx.ForEach(System.ValueTuple{System.Int32,System.Int32},System.Action{System.Int32})">
            <summary>
            Run the <paramref name="action"/> for a number of iterations with iteration indexes specified by the current <see cref="T:System.ValueTuple"/>. For example, <c>(2,6).Foreach(i=>Console.WriteLine(i))</c> prints out numbers from 2 to 5.
            </summary>
            <param name="iterationIndexRange">The current <see cref="T:System.ValueTuple"/> specifying the iteration index range.</param>
            <param name="action">The <see cref="T:System.Action"/> to execute for a number of iterations specified by the current integer. It accepts a single parameter indicating the index of the current iteration.</param>
        </member>
        <member name="M:System.ArrayEx.ForEach(System.ValueTuple{System.Int32,System.Int32,System.Int32},System.Action{System.Int32})">
            <summary>
            Run the <paramref name="action"/> for a number of iterations with iteration indexes specified by the current <see cref="T:System.ValueTuple"/>. For example, <c>(2,8,2).Foreach(i=>Console.WriteLine(i))</c> prints out numbers 2, 4, 6.
            </summary>
            <param name="iterationIndexRange">The current <see cref="T:System.ValueTuple"/> specifying the iteration index range.</param>
            <param name="action">The <see cref="T:System.Action"/> to execute for a number of iterations specified by the current integer. It accepts a single parameter indicating the index of the current iteration.</param>
        </member>
        <member name="M:System.ArrayEx.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Do some action for each element in the current sequence.
            </summary>
            <typeparam name="T">The type of elements in the current collection.</typeparam>
            <param name="collection">The current collection.</param>
            <param name="action">A delegate that will be invoked on each element of the current collection. 
            The only argument is the element of the current collection.</param>
        </member>
        <member name="M:System.ArrayEx.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Int32,``0})">
            <summary>
            Do some action for each element in the current sequence.
            </summary>
            <typeparam name="T">The type of elements in the current collection.</typeparam>
            <param name="collection">The current collection.</param>
            <param name="action">A delegate that will be invoked on each element of the current collection. 
            The first argument indicates the position of the element in the current collection, and the second is the element.</param>
        </member>
        <member name="M:System.ArrayEx.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Do some action for each element in the current sequence.
            </summary>
            <typeparam name="T">The type of elements in the current collection.</typeparam>
            <param name="collection">The current collection.</param>
            <param name="action">A delegate that will be invoked on each element of the current collection. 
            The only argument is the element of the current collection. A Boolean value must be returned indicating whether the iteration should continue.</param>
        </member>
        <member name="M:System.ArrayEx.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,System.Boolean})">
            <summary>
            Do some action for each element in the current sequence.
            </summary>
            <typeparam name="T">The type of elements in the current collection.</typeparam>
            <param name="collection">The current collection.</param>
            <param name="action">A delegate that will be invoked on each element of the current collection. 
            The first argument indicates the position of the element in the current collection, and the second is the element. A Boolean value must be returned indicating whether the iteration should continue.</param>
        </member>
        <member name="M:System.ArrayEx.ForEach``1(System.Collections.Generic.IList{``0},System.Action{``0})">
            <summary>
            Do some action for each element in the current list/array.
            </summary>
            <typeparam name="T">The type of element in the current list/array.</typeparam>
            <param name="list">The current list/array.</param>
            <param name="action">A delegate that will be invoked on each element of the current list/array. 
            The only argument is the element of the current list/array.</param>
        </member>
        <member name="M:System.ArrayEx.ForEach``1(System.Collections.Generic.IList{``0},System.Action{System.Int32,``0})">
            <summary>
            Do some action for each element in the current list/array.
            </summary>
            <typeparam name="T">The type of element in the current list/array.</typeparam>
            <param name="list">The current list/array.</param>
            <param name="action">A delegate that will be invoked on each element of the current list/array. 
            The first argument indicates the position of the element in the current list/array, and the second is the element.</param>
        </member>
        <member name="M:System.ArrayEx.ForEach``1(System.Collections.Generic.IList{``0},System.Func{System.Int32,``0,System.Boolean})">
            <summary>
            Do some action for each element in the current list/array.
            </summary>
            <typeparam name="T">The type of element in the current list/array.</typeparam>
            <param name="list">The current list/array.</param>
            <param name="action">A delegate that will be invoked on each element of the current list/array. 
            The first argument indicates the position of the element in the current list/array, and the second is the element. A Boolean value must be returned indicating whether the iteration should continue.</param>
        </member>
        <member name="M:System.ArrayEx.ForEach``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Do some action for each element in the current list/array.
            </summary>
            <typeparam name="T">The type of element in the current list/array.</typeparam>
            <param name="list">The current list/array.</param>
            <param name="action">A delegate that will be invoked on each element of the current list/array. 
            The only argument is the element of the current list/array. A Boolean value must be returned indicating whether the iteration should continue.</param>
        </member>
        <member name="M:System.ArrayEx.ForEach``1(``0[],System.Func{``0,System.Boolean})">
            <summary>
            Do some action for each element in the current array.
            </summary>
            <typeparam name="T">The type of element in the current array.</typeparam>
            <param name="list">The current array.</param>
            <param name="action">A delegate that will be invoked on each element of the current array. 
            The only argument is the element of the current array. A Boolean value must be returned indicating whether the iteration should continue.</param>
        </member>
        <member name="M:System.ArrayEx.Sort``1(``0[])">
            <summary>
            Sorts the elements in the one-dimensional <see cref="T:System.Array"/> using the <see cref="T:System.IComparable`1"/> interface implementation of each element of the <see cref="T:System.Array"/>.
            <para>
            Note this method does not create a new array but stores the sorted elements in the original array.
            The returned array is the same instance as the passed-in argument <paramref name="array"/>.
            </para>
            </summary>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-base <see cref="T:System.Array"/> to sort.</param>
            <returns>The same instance as the passed-in argument <paramref name="array"/> with elements sorted.</returns>
        </member>
        <member name="M:System.ArrayEx.SortDesc``1(``0[])">
            <summary>
            Sorts the elements in the one-dimensional <see cref="T:System.Array"/> in the descending order using the <see cref="T:System.IComparable`1"/> interface implementation of each element of the <see cref="T:System.Array"/>.
            <para>
            Note this method does not create a new array but stores the sorted elements in the original array.
            The returned array is the same instance as the passed-in argument <paramref name="array"/>.
            </para>
            </summary>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-base <see cref="T:System.Array"/> to sort.</param>
            <returns>The same instance as the passed-in argument <paramref name="array"/> with elements sorted in the descending order.</returns>
        </member>
        <member name="M:System.ArrayEx.SortWithValues``2(``0[],``1[])">
            <summary>
            Sorts a pair of <see cref="T:System.Array"/> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array"/> using the <see cref="T:System.IComparable`1"/> generic interface implementation of each key.
            </summary>
            <typeparam name="TKey">TThe type of the elements of the <paramref name="keys"/> array.</typeparam>
            <typeparam name="TValue">The type of the elements of the <paramref name="values "/> array.</typeparam>
            <param name="keys">The one-dimensional, zero-based <see cref="T:System.Array"/> that contains the keys to sort.</param>
            <param name="values">The one-dimensional, zero-based <see cref="T:System.Array"/> that contains the items that correspond to the keys in keys, or <c>null</c> to sort only keys.</param>
        </member>
        <member name="M:System.ArrayEx.SortDescWithValues``2(``0[],``1[])">
            <summary>
            Sorts a pair of <see cref="T:System.Array"/> objects (one contains the keys and the other contains the corresponding items) in the descending order based on the keys in the first <see cref="T:System.Array"/> using the <see cref="T:System.IComparable`1"/> generic interface implementation of each key.
            </summary>
            <typeparam name="TKey">TThe type of the elements of the <paramref name="keys"/> array.</typeparam>
            <typeparam name="TValue">The type of the elements of the <paramref name="values "/> array.</typeparam>
            <param name="keys">The one-dimensional, zero-based <see cref="T:System.Array"/> that contains the keys to sort.</param>
            <param name="values">The one-dimensional, zero-based <see cref="T:System.Array"/> that contains the items that correspond to the keys in keys, or <c>null</c> to sort only keys.</param>
        </member>
        <member name="M:System.ArrayEx.Sort``1(``0[],System.Int32,System.Int32)">
            <summary>
            Sorts a range the specified array.
            </summary>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"/> to sort</param>
            <param name="start">The starting index of the range to sort.</param>
            <param name="length">The number of elements in the range to sort.</param>
            <returns>The same instance as the passed-in argument <paramref name="array"/> with elements in the specified range sorted.</returns>
        </member>
        <member name="M:System.ArrayEx.SortDesc``1(``0[],System.Int32,System.Int32)">
            <summary>
            Sorts a range the specified array in the descending order.
            </summary>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"/> to sort</param>
            <param name="start">The starting index of the range to sort.</param>
            <param name="length">The number of elements in the range to sort.</param>
            <returns>The same instance as the passed-in argument <paramref name="array"/> with elements in the specified range sorted.</returns>
        </member>
        <member name="M:System.ArrayEx.SortWithValues``2(``0[],``1[],System.Int32,System.Int32)">
            <summary>
            Sorts a range of a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array"/> using the <see cref="T:System.IComparable`1" /> generic interface implementation of each key.
            </summary>
            <typeparam name="TKey">TThe type of the elements of the <paramref name="keys" /> array.</typeparam>
            <typeparam name="TValue">The type of the elements of the <paramref name="values " /> array.</typeparam>
            <param name="keys">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort.</param>
            <param name="values">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in keys, or <c>null</c> to sort only keys.</param>
            <param name="start">The starting index of the range to sort.</param>
            <param name="length">The number of elements in the range to sort.</param>
        </member>
        <member name="M:System.ArrayEx.SortDescWithValues``2(``0[],``1[],System.Int32,System.Int32)">
            <summary>
            Sorts a range of a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) in the descending order based on the keys in the first <see cref="T:System.Array"/> using the <see cref="T:System.IComparable`1" /> generic interface implementation of each key.
            </summary>
            <typeparam name="TKey">TThe type of the elements of the <paramref name="array" /> array.</typeparam>
            <typeparam name="TValue">The type of the elements of the <paramref name="values " /> array.</typeparam>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort.</param>
            <param name="values">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in keys, or <c>null</c> to sort only keys.</param>
            <param name="start">The starting index of the range to sort.</param>
            <param name="length">The number of elements in the range to sort.</param>
        </member>
        <member name="M:System.ArrayEx.Sort``1(``0[],System.Comparison{``0})">
            <summary>
            Sorts the elements in the one-dimensional <see cref="T:System.Array" /> using the specified <see cref="T:System.Comparison`1"/>.
            <para>
            Note this method does not create a new array but stores the sorted elements in the original array.
            The returned array is the same instance as the passed-in argument <paramref name="array" />.
            </para>
            </summary>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-base <see cref="T:System.Array"/> to sort.</param>
            <param name="comparison">The <see cref="T:System.Comparison`1"/> to use when comparing elements.</param>
            <returns>
            The same instance as the passed-in argument <paramref name="array" /> with elements sorted.
            </returns>
        </member>
        <member name="M:System.ArrayEx.Sort``1(``0[],System.Func{``0,System.IComparable})">
            <summary>
            Sorts the elements in the one-dimensional <see cref="T:System.Array" />. A method can be specified to convert each element to a comparable object before comparison.
            <para>
            NOTE this method does not create a new array but stores the sorted elements in the original array.
            The returned array is the same instance as the passed-in argument <paramref name="array" />.
            </para>
            </summary>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-base <see cref="T:System.Array"/> to sort.</param>
            <param name="toComparable">A method converting elements of the <see cref="T:System.Array" /> to comparable values.</param>
            <returns>
            The same instance as the passed-in argument <paramref name="array" /> with elements sorted.
            </returns>
        </member>
        <member name="M:System.ArrayEx.SortDesc``1(``0[],System.Func{``0,System.IComparable})">
            <summary>
            Sorts the elements in the one-dimensional <see cref="T:System.Array" /> descendingly. A method can be specified to convert each element to a comparable object before comparison.
            <para>
            NOTE this method does not create a new array but stores the sorted elements in the original array.
            The returned array is the same instance as the passed-in argument <paramref name="array" />.
            </para>
            </summary>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-base <see cref="T:System.Array"/> to sort.</param>
            <param name="toComparable">A method converting elements of the <see cref="T:System.Array" /> to comparable values.</param>
            <returns>
            The same instance as the passed-in argument <paramref name="array" /> with elements sorted.
            </returns>
        </member>
        <member name="M:System.ArrayEx.TopK``1(``0[],System.Int32)">
            <summary>
            Selects the <paramref name="k"/>th element in the current array, based on ascending order. After execution of this method, the current array will be reordered, and its first <paramref name="k"/> elements are smaller or equal to the selected <paramref name="k"/>th element.
            </summary>
            <typeparam name="T">The type of the elements of the current array.</typeparam>
            <param name="array">The one-dimensional, zero-base <see cref="T:System.Array"/> to sort.</param>
            <param name="k">The <paramref name="k"/>th element in the current array based on ascending order will be returned.</param>
            <returns>The <paramref name="k"/>th element in the current array based on ascending order.</returns>
        </member>
        <member name="M:System.ArrayEx.TopK``1(``0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Selects the <paramref name="k"/>th element in the selection range (specified by <paramref name="start"/> and <paramref name="length"/>) of the current array, based on ascending order. After execution of this method, the current array will be reordered, and its first <paramref name="k"/> elements are smaller or equal to the selected <paramref name="k"/>th element.
            </summary>
            <typeparam name="T">The type of the elements of the current array.</typeparam>
            <param name="array">The one-dimensional, zero-base <see cref="T:System.Array"/> to sort.</param>
            <param name="start">The starting index of the selection range.</param>
            <param name="length">The number of elements in the selection range.</param>
            <param name="k">The <paramref name="k"/>th element in the selection range (specified by <paramref name="start"/> and <paramref name="length"/>) of the current array base on ascending order will be returned.</param>
            <returns>The <paramref name="k"/>th element in the selection range specified by <paramref name="start"/> and <paramref name="length"/> based on ascending order.</returns>
        </member>
        <member name="M:System.ArrayEx.TopKDesc``1(``0[],System.Int32)">
            <summary>
            Selects the <paramref name="k"/>th element in the current array, based on descending order. After execution of this method, the current array will be reordered, and its first <paramref name="k"/> elements are smaller or equal to the selected <paramref name="k"/>th element.
            </summary>
            <typeparam name="T">The type of the elements of the current array.</typeparam>
            <param name="array">The one-dimensional, zero-base <see cref="T:System.Array"/> to sort.</param>
            <param name="k">The <paramref name="k"/>th element in the current array based on descending order will be returned.</param>
            <returns>The <paramref name="k"/>th element in the current array based on descending order.</returns>
        </member>
        <member name="M:System.ArrayEx.TopKDesc``1(``0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Selects the <paramref name="k"/>th element in the selection range (specified by <paramref name="start"/> and <paramref name="length"/>) of the current array, based on descending order. After execution of this method, the current array will be reordered, and its first <paramref name="k"/> elements are smaller or equal to the selected <paramref name="k"/>th element.
            </summary>
            <typeparam name="T">The type of the elements of the current array.</typeparam>
            <param name="array">The one-dimensional, zero-base <see cref="T:System.Array"/> to sort.</param>
            <param name="start">The starting index of the selection range.</param>
            <param name="length">The number of elements in the selection range.</param>
            <param name="k">The <paramref name="k"/>th element in the selection range (specified by <paramref name="start"/> and <paramref name="length"/>) of the current array based on descending order will be returned.</param>
            <returns>The <paramref name="k"/>th element in the selection range specified by <paramref name="start"/> and <paramref name="length"/> based on descending order.</returns>
        </member>
        <member name="M:System.ArrayEx.TopKWithValues``2(``0[],``1[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Selects the <paramref name="k" />th element in the selection range (specified by <paramref name="start" /> and <paramref name="length" />) from the current array, based on ascending order. After execution of this method, the current array will be reordered along with <paramref name="values" />, and its first <paramref name="k" /> elements are smaller or equal to the selected <paramref name="k" />th element.
            </summary>
            <typeparam name="TKey">The type of the elements of the current array.</typeparam>
            <typeparam name="TValue">The type of the elements of the <paramref name="values"/>.</typeparam>
            <param name="array">The one-dimensional, zero-base <see cref="T:System.Array" /> to sort.</param>
            <param name="values">The values whose element order will be changed along with the current array.</param>
            <param name="start">The starting index of the selection range.</param>
            <param name="length">The number of elements in the selection range.</param>
            <param name="k">The <paramref name="k" />th element in the selection range (specified by <paramref name="start" /> and <paramref name="length" />) of the current array will be returned.</param>
            <returns>The <paramref name="k" />th element in the selection range specified by <paramref name="start" /> and <paramref name="length" />.</returns>
        </member>
        <member name="M:System.ArrayEx.TopKDescWithValues``2(``0[],``1[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Selects the <paramref name="k" />th element in the selection range (specified by <paramref name="start" /> and <paramref name="length" />) from the current array, based on descending order. After execution of this method, the current array will be reordered along with <paramref name="values" />, and its first <paramref name="k" /> elements are smaller or equal to the selected <paramref name="k" />th element.
            </summary>
            <typeparam name="TKey">The type of the elements of the current array.</typeparam>
            <typeparam name="TValue">The type of the elements of the <paramref name="values"/>.</typeparam>
            <param name="array">The one-dimensional, zero-base <see cref="T:System.Array" /> to sort.</param>
            <param name="values">The values whose element order will be changed along with the current array.</param>
            <param name="start">The starting index of the selection range.</param>
            <param name="length">The number of elements in the selection range.</param>
            <param name="k">The <paramref name="k" />th element in the selection range (specified by <paramref name="start" /> and <paramref name="length" />) of the current array will be returned.</param>
            <returns>The <paramref name="k" />th element in the selection range specified by <paramref name="start" /> and <paramref name="length" />.</returns>
        </member>
        <member name="M:System.ArrayEx.Min``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            Returns the minimum value in a generic sequence. Items in the sequence are compared using the specified <paramref name="comparison"/>.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The generic sequence.</param>
            <param name="comparison">The comparison method.</param>
            <returns>The minimum value.</returns>
        </member>
        <member name="M:System.ArrayEx.Max``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            Returns the maximum value in a generic sequence. Items in the sequence are compared using the specified <paramref name="comparison"/>.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The generic sequence.</param>
            <param name="comparison">The comparison method.</param>
            <returns>The maximum value.</returns>
        </member>
        <member name="M:System.ArrayEx.Min``1(``0[],System.Comparison{``0})">
            <summary>
            Returns the minimum value in an array. Items in the array are compared using the specified <paramref name="comparison" />.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="array" />.</typeparam>
            <param name="array">The array.</param>
            <param name="comparison">The comparison method.</param>
            <returns>The minimum value.</returns>
        </member>
        <member name="M:System.ArrayEx.Max``1(``0[],System.Comparison{``0})">
            <summary>
            Returns the maximum value in an array. Items in the array are compared using the specified <paramref name="comparison"/>.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="array"/>.</typeparam>
            <param name="array">The array.</param>
            <param name="comparison">The comparison method.</param>
            <returns>The maximum value.</returns>
        </member>
        <member name="M:System.ArrayEx.SelectMin``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.IComparable})">
            <summary>
            Selects an element in the sequence with the minimum comparable value.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The generic sequence.</param>
            <param name="toComparable">Coverts each element in the sequence to comparable values.</param>
            <returns>An element in the sequence with the minimum comparable value.</returns>
        </member>
        <member name="M:System.ArrayEx.SelectMax``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.IComparable})">
            <summary>
            Selects an element in the sequence with the maximum comparable value.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The generic sequence.</param>
            <param name="toComparable">Coverts each element in the sequence to comparable values.</param>
            <returns>An element in the sequence with the maximum comparable value.</returns>
        </member>
        <member name="M:System.ArrayEx.CreateConsecutiveBytes(System.Byte,System.Byte,System.Boolean)">
            <summary>
            Gets an array of ordered consecutive 8-bit bytes.
            </summary>
            <param name="min">The minimum value in the array.</param>
            <param name="max">The maximum value in the array.</param>
            <param name="descending">Indicates whether the array elements are in descending order or ascending order.
            If <c>true</c>, argument <paramref name="min" /> will be placed at the end of the array and argument <paramref name="max" /> be the first element;
            if <c>false</c>, argument <paramref name="min" /> will be placed at the beginning of the array and argument <paramref name="max" /> be the last element.</param>
            <returns>
            An array of consecutive 8-bit bytes.
            </returns>
            <exception cref="T:System.ArgumentException">Occurs when <paramref name="min" /> is larger than <paramref name="max" />.</exception>
        </member>
        <member name="M:System.ArrayEx.CreateConsecutiveSBytes(System.SByte,System.SByte,System.Boolean)">
            <summary>
            Gets an array of ordered consecutive 8-bit signed bytes.
            </summary>
            <param name="min">The minimum value in the array.</param>
            <param name="max">The maximum value in the array.</param>
            <param name="descending">Indicates whether the array elements are in descending order or ascending order.
            If <c>true</c>, argument <paramref name="min" /> will be placed at the end of the array and argument <paramref name="max" /> be the first element;
            if <c>false</c>, argument <paramref name="min" /> will be placed at the beginning of the array and argument <paramref name="max" /> be the last element.</param>
            <returns>
            An array of consecutive 8-bit signed bytes.
            </returns>
            <exception cref="T:System.ArgumentException">Occurs when <paramref name="min" /> is larger than <paramref name="max" />.</exception>
        </member>
        <member name="M:System.ArrayEx.CreateConsecutiveShorts(System.Int16,System.Int16,System.Boolean)">
            <summary>
            Gets an array of ordered consecutive 16-bit integers.
            </summary>
            <param name="min">The minimum value in the array.</param>
            <param name="max">The maximum value in the array.</param>
            <param name="descending">Indicates whether the array elements are in descending order or ascending order.
            If <c>true</c>, argument <paramref name="min" /> will be placed at the end of the array and argument <paramref name="max" /> be the first element;
            if <c>false</c>, argument <paramref name="min" /> will be placed at the beginning of the array and argument <paramref name="max" /> be the last element.</param>
            <returns>
            An array of consecutive 16-bit integers.
            </returns>
            <exception cref="T:System.ArgumentException">Occurs when <paramref name="min" /> is larger than <paramref name="max" />.</exception>
        </member>
        <member name="M:System.ArrayEx.CreateConsecutiveUShorts(System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Gets an array of ordered consecutive 16-bit unsigned integers.
            </summary>
            <param name="min">The minimum value in the array.</param>
            <param name="max">The maximum value in the array.</param>
            <param name="descending">Indicates whether the array elements are in descending order or ascending order.
            If <c>true</c>, argument <paramref name="min" /> will be placed at the end of the array and argument <paramref name="max" /> be the first element;
            if <c>false</c>, argument <paramref name="min" /> will be placed at the beginning of the array and argument <paramref name="max" /> be the last element.</param>
            <returns>
            An array of consecutive 16-bit unsigned integers.
            </returns>
            <exception cref="T:System.ArgumentException">Occurs when <paramref name="min" /> is larger than <paramref name="max" />.</exception>
        </member>
        <member name="M:System.ArrayEx.CreateConsecutiveIntegers(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets an array of ordered consecutive integers.
            </summary>
            <param name="min">The minimum value in the array.</param>
            <param name="max">The maximum value in the array.</param>
            <param name="descending">Indicates whether the array elements are in descending order or ascending order.
            If <c>true</c>, argument <paramref name="min" /> will be placed at the end of the array and argument <paramref name="max" /> be the first element;
            if <c>false</c>, argument <paramref name="min" /> will be placed at the beginning of the array and argument <paramref name="max" /> be the last element.</param>
            <returns>
            An array of consecutive integers.
            </returns>
            <exception cref="T:System.ArgumentException">Occurs when <paramref name="min" /> is larger than <paramref name="max" />.</exception>
        </member>
        <member name="M:System.ArrayEx.CreateConsecutiveUIntegers(System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Gets an array of ordered consecutive unsigned integers.
            </summary>
            <param name="min">The minimum value in the array.</param>
            <param name="max">The maximum value in the array.</param>
            <param name="descending">Indicates whether the array elements are in descending order or ascending order.
            If <c>true</c>, argument <paramref name="min" /> will be placed at the end of the array and argument <paramref name="max" /> be the first element;
            if <c>false</c>, argument <paramref name="min" /> will be placed at the beginning of the array and argument <paramref name="max" /> be the last element.</param>
            <returns>
            An array of consecutive unsigned integers.
            </returns>
            <exception cref="T:System.ArgumentException">Occurs when <paramref name="min" /> is larger than <paramref name="max" />.</exception>
        </member>
        <member name="M:System.ArrayEx.CreateConsecutiveLongs(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Gets an array of ordered consecutive 64-bit integers.
            </summary>
            <param name="min">The minimum value in the array.</param>
            <param name="max">The maximum value in the array.</param>
            <param name="descending">Indicates whether the array elements are in descending order or ascending order.
            If <c>true</c>, argument <paramref name="min" /> will be placed at the end of the array and argument <paramref name="max" /> be the first element;
            if <c>false</c>, argument <paramref name="min" /> will be placed at the beginning of the array and argument <paramref name="max" /> be the last element.</param>
            <returns>
            An array of consecutive 64-bit integers.
            </returns>
            <exception cref="T:System.ArgumentException">Occurs when <paramref name="min" /> is larger than <paramref name="max" />.</exception>
        </member>
        <member name="M:System.ArrayEx.CreateConsecutiveULongs(System.UInt64,System.UInt64,System.Boolean)">
            <summary>
            Gets an array of ordered consecutive 64-bit unsigned integers.
            </summary>
            <param name="min">The minimum value in the array.</param>
            <param name="max">The maximum value in the array.</param>
            <param name="descending">Indicates whether the array elements are in descending order or ascending order.
            If <c>true</c>, argument <paramref name="min" /> will be placed at the end of the array and argument <paramref name="max" /> be the first element;
            if <c>false</c>, argument <paramref name="min" /> will be placed at the beginning of the array and argument <paramref name="max" /> be the last element.</param>
            <returns>
            An array of consecutive 64-bit unsigned integers.
            </returns>
            <exception cref="T:System.ArgumentException">Occurs when <paramref name="min" /> is larger than <paramref name="max" />.</exception>
        </member>
        <member name="M:System.ArrayEx.CreateRandomStrings(System.Char,System.Char,System.Int32,System.Int32,System.Int32,System.Int32,System.Random)">
            <summary>
            Gets a random string array.
            </summary>
            <param name="minChr">The "minimum" possible character in each element of the string array. 
            A character is considered "smaller" than another if its representation integer is also smaller.</param>
            <param name="maxChr">The "maximum" possible character in each element of the string array.
            A character is considered "larger" than another if its representation integer is also larger.</param>
            <param name="minStringLen">Specifies the minimum possible string length in the array.</param>
            <param name="maxStringLen">Specifies the maximum possible string length in the array.</param>
            <param name="minLength">Specifies the minimum length of the string array.</param>
            <param name="maxLength">Specifies the maximum length of the string array.</param>
            <param name="random">A <see cref="T:System.Random" /> object that generates random values.
            If this argument is not specified, a new <see cref="T:System.Random" /> instance will be used.</param>
            <returns>A random string array.</returns>
        </member>
        <member name="M:System.ArrayEx.CreateRandomBoolArray(System.Int32,System.Random)">
            <summary>
            Gets a random bool array.
            </summary>
            <param name="length">The length of the array.</param>
            <param name="random">A <see cref="T:System.Random" /> object that generates random numbers.
            If this argument is not specified, a new <see cref="T:System.Random" /> instance will be used.</param>
            <returns>
            A random bool array.
            </returns>
        </member>
        <member name="M:System.ArrayEx.CreateRandomBoolArray(System.Int32,System.Int32,System.Random)">
            <summary>
            Gets a random bool array whose length is inclusively between <paramref name="minLength" /> and <paramref name="maxLength" />.
            </summary>
            <param name="minLength">Specifies the minimum length of the random array.</param>
            <param name="maxLength">Specifies the maximum length of the random array.</param>
            <param name="random">
            A <see cref="T:System.Random"/> object that generates random values. 
            If this argument is not specified, a new <see cref="T:System.Random"/> instance will be used.
            </param>
            <returns>
            A random bool array.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when <paramref name="minLength"/> or <paramref name="maxLength"/> is non-positive.</exception>
            <exception cref="T:System.ArgumentException">
            Occurs when <paramref name="minLength"/> is larger than <paramref name="maxLength"/> or 
            <paramref name="maxLength"/> equals the maximum integer a <see cref="T:System.Int32"/> integer can represent.
            </exception>
        </member>
        <member name="M:System.ArrayEx.CreateDistinctRandomBytes(System.Byte,System.DistinctRandomAlgorithms,System.Random)">
            <summary>
            Gets a random byte array without repetition of elements.
            </summary>
            <param name="length">Specifies the length of the random array.</param>
            <returns>A random byte array without repetition of elements.</returns>
        </member>
        <member name="M:System.ArrayEx.CreateDistinctRandomBytes(System.Byte,System.Byte,System.DistinctRandomAlgorithms,System.Random)">
            <summary>
            Gets a random byte array of random length without repetition of elements.
            </summary>
            <param name="minLength">The minimum length of the array.</param>
            <param name="maxLength">The maximum length of the array.</param>
            <param name="algorithm">Specifies the algorithm used.</param>
            <param name="random">A <see cref="T:System.Random" /> object that generates random bytes.
            If this argument is not specified, a new <see cref="T:System.Random" /> instance will be used.</param>
            <returns>
            A random byte array without repetition of elements.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when <paramref name="minLength"/> or <paramref name="maxLength"/> is non-positive.</exception>
            <exception cref="T:System.ArgumentException">Occurs when <paramref name="minLength"/> is larger than <paramref name="maxLength"/> or <paramref name="maxLength"/> equals the maximum integer a <see cref="T:System.Int32"/> integer can represent.</exception>
        </member>
        <member name="M:System.ArrayEx.CreateDistinctRandomBytes(System.Byte,System.Byte,System.Byte,System.DistinctRandomAlgorithms,System.Random)">
            <summary>
            Gets a random byte array without repetition of elements.
            </summary>
            <param name="min">The minium possible value in the random array.</param>
            <param name="max">The maxium possible value in the random array.</param>
            <param name="length">Specifies the length of the random array.</param>
            <param name="algorithm">Specifies the algorithm used.</param>
            <param name="random">A <see cref="T:System.Random" /> object that generates random bytes.
            If this argument is not specified, a new <see cref="T:System.Random" /> instance will be used.</param>
            <returns>
            A random byte array without repetition of elements.
            </returns>
            <exception cref="T:System.ArgumentException">Occurs when <paramref name="min" /> is larger than <paramref name="max" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when <paramref name="max" /> equals the maximum number a <see cref="T:System.Int32" /> integer can represent.</exception>
            <exception cref="T:System.InvalidOperationException">Occurs when the value of <paramref name="length" /> is smaller than <paramref name="max" /> - <paramref name="min" /> + 1.</exception>
        </member>
        <member name="M:System.ArrayEx.CreateRandomBytes">
            <summary>
            Gets a non-empty random byte array that contains at most 102400 bytes.
            </summary>
            <returns>A random byte array.</returns>
        </member>
        <member name="M:System.ArrayEx.CreateRandomBytes(System.Int64,System.Random)">
            <summary>
            Gets a random byte array of the specified length.
            </summary>
            <param name="length">Specifies the length of the random array.</param>
            <param name="random">
            A <see cref="T:System.Random"/> object that generates random numbers. 
            If this argument is not specified, a new <see cref="T:System.Random"/> instance will be used.
            </param>
            <returns>
            A random byte array.
            </returns>
        </member>
        <member name="M:System.ArrayEx.CreateRandomBytes(System.Int64,System.Int64,System.Random)">
            <summary>
            Gets a random byte array whose length is inclusively between <paramref name="minLength" /> and <paramref name="maxLength" />.
            </summary>
            <param name="minLength">Specifies the minimum length of the random array.</param>
            <param name="maxLength">Specifies the maximum length of the random array.</param>
            <param name="random">A <see cref="T:System.Random" /> object that generates random numbers.
            If this argument is not specified, a new <see cref="T:System.Random" /> instance will be used.</param>
            <returns>
            A random byte array.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when <paramref name="minLength" /> or <paramref name="maxLength" /> is non-positive.</exception>
            <exception cref="T:System.ArgumentException">Occurs when <paramref name="minLength" /> is larger than <paramref name="maxLength" /> or
            <paramref name="maxLength" /> equals the maximum integer a <see cref="T:System.Int64" /> integer can represent.</exception>
        </member>
        <member name="M:System.ArrayEx.CreateRandomBytes(System.Byte,System.Byte,System.Int64,System.Int64,System.Random)">
            <summary>
            Gets a random byte array whose length is inclusively between <paramref name="minLength" /> and <paramref name="maxLength" />.
            You may specify the maximum and minimum possible value that occurs in the returned array.
            </summary>
            <param name="min">The minium possible value in the random array.</param>
            <param name="max">The maxium possible value in the random array.</param>
            <param name="minLength">Specifies the minimum length of the random array.</param>
            <param name="maxLength">Specifies the maximum length of the random array.</param>
            <param name="random">A <see cref="T:System.Random" /> object that generates random numbers.
            If this argument is not specified, a new <see cref="T:System.Random" /> instance will be used.</param>
            <returns>
            A random byte array.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when <paramref name="minLength"/> or <paramref name="maxLength"/> is non-positive.</exception>
            <exception cref="T:System.ArgumentException">Occurs when <paramref name="minLength" /> is larger than <paramref name="maxLength" /> or
            <paramref name="maxLength" /> equals the maximum integer a <see cref="T:System.Int64" /> integer can represent.</exception>
        </member>
        <member name="M:System.ArrayEx.CreateRandomBytes(System.Byte,System.Byte,System.Int64,System.Random)">
            <summary>
            Gets a random byte array of the specified length.
            </summary>
            <param name="min">The minium possible value in the random array.</param>
            <param name="max">The maxium possible value in the random array.</param>
            <param name="length">Specifies the length of the random array.</param>
            <param name="random">A <see cref="T:System.Random" /> object that generates random numbers.
            If this argument is not specified, a new <see cref="T:System.Random" /> instance will be used.</param>
            <returns>
            A random byte array.
            </returns>
            <exception cref="T:System.ArgumentException">Occurs when <paramref name="min" /> is larger than <paramref name="max" />.</exception>
        </member>
        <member name="M:System.ArrayEx.CreateDistinctRandomShorts(System.UInt16,System.DistinctRandomAlgorithms,System.Random)">
            <summary>
            Gets a random <see cref="T:System.Int16"/> integer array without repetition of elements.
            </summary>
            <param name="length">Specifies the length of the random array.</param>
            <returns>A random <see cref="T:System.Int16"/> integer array without repetition of elements.</returns>
        </member>
        <member name="M:System.ArrayEx.CreateDistinctRandomShorts(System.UInt16,System.UInt16,System.DistinctRandomAlgorithms,System.Random)">
            <summary>
            Gets a random short <see cref="T:System.Int16"/> integer array of random length without repetition of elements.
            </summary>
            <param name="minLength">The minimum length of the array.</param>
            <param name="maxLength">The maximum length of the array.</param>
            <param name="algorithm">Specifies the algorithm used.</param>
            <param name="random">A <see cref="T:System.Random" /> object that generates random numbers.
            If this argument is not specified, a new <see cref="T:System.Random" /> instance will be used.</param>
            <returns>
            A random short integer array without repetition of elements.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when <paramref name="minLength"/> or <paramref name="maxLength"/> is non-positive.</exception>
            <exception cref="T:System.ArgumentException">Occurs when <paramref name="minLength"/> is larger than <paramref name="maxLength"/> or <paramref name="maxLength"/> equals the maximum integer a <see cref="T:System.Int32"/> integer can represent.</exception>
        </member>
        <member name="M:System.ArrayEx.CreateDistinctRandomShorts(System.Int16,System.Int16,System.UInt16,System.DistinctRandomAlgorithms,System.Random)">
            <summary>
            Gets a random <see cref="T:System.Int16"/> integer array without repetition of elements.
            </summary>
            <param name="min">The minium possible value in the random array.</param>
            <param name="max">The maxium possible value in the random array.</param>
            <param name="length">Specifies the length of the random array.</param>
            <param name="algorithm">Specifies the algorithm used.</param>
            <param name="random">A <see cref="T:System.Random" /> object that generates random numbers.
            If this argument is not specified, a new <see cref="T:System.Random" /> instance will be used.</param>
            <returns>
            A random <see cref="T:System.Int16"/> integer array without repetition of elements.
            </returns>
            <exception cref="T:System.ArgumentException">Occurs when <paramref name="min" /> is larger than <paramref name="max" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when <paramref name="max" /> equals the maximum number a <see cref="T:System.Int32" /> integer can represent.</exception>
            <exception cref="T:System.InvalidOperationException">Occurs when the value of <paramref name="length" /> is smaller than <paramref name="max" /> - <paramref name="min" /> + 1.</exception>
        </member>
        <member name="M:System.ArrayEx.CreateRandomShorts">
            <summary>
            Gets a non-empty random <see cref="T:System.Int16"/> integer array that contains at most 2621440 integers.
            </summary>
            <returns>A random <see cref="T:System.Int16"/> integer array.</returns>
        </member>
        <member name="M:System.ArrayEx.CreateRandomShorts(System.Int64,System.Random)">
            <summary>
            Gets a random <see cref="T:System.Int16"/> integer array of the specified length.
            </summary>
            <param name="length">Specifies the length of the random array.</param>
            <param name="random">
            A <see cref="T:System.Random"/> object that generates random numbers. 
            If this argument is not specified, a new <see cref="T:System.Random"/> instance will be used.
            </param>
            <returns>
            A random <see cref="T:System.Int16"/> integer array.
            </returns>
        </member>
        <member name="M:System.ArrayEx.CreateRandomShorts(System.Int64,System.Int64,System.Random)">
            <summary>
            Gets a random <see cref="T:System.Int16" /> integer array whose length is inclusively between <paramref name="minLength" /> and <paramref name="maxLength" />.
            </summary>
            <param name="minLength">Specifies the minimum length of the random array.</param>
            <param name="maxLength">Specifies the maximum length of the random array.</param>
            <param name="random">A <see cref="T:System.Random" /> object that generates random numbers.
            If this argument is not specified, a new <see cref="T:System.Random" /> instance will be used.</param>
            <returns>
            A random <see cref="T:System.Int16" /> integer array.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when <paramref name="minLength" /> or <paramref name="maxLength" /> is non-positive.</exception>
            <exception cref="T:System.ArgumentException">Occurs when <paramref name="minLength" /> is larger than <paramref name="maxLength" /> or
            <paramref name="maxLength" /> equals the maximum integer a <see cref="T:System.Int64" /> integer can represent.</exception>
        </member>
        <member name="M:System.ArrayEx.CreateRandomShorts(System.Int16,System.Int16,System.Int64,System.Int64,System.Random)">
            <summary>
            Gets a random <see cref="T:System.Int16"/> integer array whose length is inclusively between <paramref name="minLength" /> and <paramref name="maxLength" />.
            You may specify the maximum and minimum possible value that occurs in the returned array.
            </summary>
            <param name="min">The minium possible value in the random array.</param>
            <param name="max">The maxium possible value in the random array.</param>
            <param name="minLength">Specifies the minimum length of the random array.</param>
            <param name="maxLength">Specifies the maximum length of the random array.</param>
            <param name="random">A <see cref="T:System.Random" /> object that generates random numbers.
            If this argument is not specified, a new <see cref="T:System.Random" /> instance will be used.</param>
            <returns>
            A random <see cref="T:System.Int16"/> integer array.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when <paramref name="minLength"/> or <paramref name="maxLength"/> is non-positive.</exception>
            <exception cref="T:System.ArgumentException">Occurs when <paramref name="minLength" /> is larger than <paramref name="maxLength" /> or
            <paramref name="maxLength" /> equals the maximum integer a <see cref="T:System.Int64" /> integer can represent.</exception>
        </member>
        <member name="M:System.ArrayEx.CreateRandomShorts(System.Int16,System.Int16,System.Int64,System.Random)">
            <summary>
            Gets a random <see cref="T:System.Int16"/> integer array of the specified length.
            </summary>
            <param name="min">The minium possible value in the random array.</param>
            <param name="max">The maxium possible value in the random array.</param>
            <param name="length">Specifies the length of the random array.</param>
            <param name="random">A <see cref="T:System.Random"/> object that generates random numbers. 
            If this argument is not specified, a new <see cref="T:System.Random"/> instance will be used.</param>
            <returns>
            A random <see cref="T:System.Int16"/> integer array.
            </returns>
            <exception cref="T:System.ArgumentException">Occurs when <paramref name="min"/> is larger than <paramref name="max"/>.</exception>
        </member>
        <member name="M:System.ArrayEx.CreateDistinctRandomIntegers(System.Int32,System.DistinctRandomAlgorithms,System.Random)">
            <summary>
            Gets a random integer array without repetition of elements.
            </summary>
            <param name="length">Specifies the length of the random array.</param>
            <returns>A random integer array without repetition of elements.</returns>
        </member>
        <member name="M:System.ArrayEx.CreateDistinctRandomIntegers(System.Int32,System.Int32,System.DistinctRandomAlgorithms,System.Random)">
            <summary>
            Gets a random integer array of random length without repetition of elements.
            </summary>
            <param name="minLength">The minimum length of the array.</param>
            <param name="maxLength">The maximum length of the array.</param>
            <param name="algorithm">Specifies the algorithm used.</param>
            <param name="random">A <see cref="T:System.Random" /> object that generates random numbers.
            If this argument is not specified, a new <see cref="T:System.Random" /> instance will be used.</param>
            <returns>
            A random integer array without repetition of elements.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when <paramref name="minLength"/> or <paramref name="maxLength"/> is non-positive.</exception>
            <exception cref="T:System.ArgumentException">Occurs when <paramref name="minLength"/> is larger than <paramref name="maxLength"/> or <paramref name="maxLength"/> equals the maximum integer a <see cref="T:System.Int32"/> integer can represent.</exception>
        </member>
        <member name="M:System.ArrayEx.CreateDistinctRandomIntegers(System.Int32,System.Int32,System.Int32,System.DistinctRandomAlgorithms,System.Random)">
            <summary>
            Gets a random integer array without repetition of elements.
            </summary>
            <param name="min">The minium possible value in the random array.</param>
            <param name="max">The maxium possible value in the random array.</param>
            <param name="length">Specifies the length of the random array.</param>
            <param name="algorithm">Specifies the algorithm used.</param>
            <param name="random">A <see cref="T:System.Random" /> object that generates random numbers.
            If this argument is not specified, a new <see cref="T:System.Random" /> instance will be used.</param>
            <returns>
            A random integer array without repetition of elements.
            </returns>
            <exception cref="T:System.ArgumentException">Occurs when <paramref name="min" /> is larger than <paramref name="max" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when <paramref name="max" /> equals the maximum number a <see cref="T:System.Int32" /> integer can represent.</exception>
            <exception cref="T:System.InvalidOperationException">Occurs when the value of <paramref name="length" /> is smaller than <paramref name="max" /> - <paramref name="min" /> + 1.</exception>
        </member>
        <member name="M:System.ArrayEx.CreateRandomIntegers">
            <summary>
            Gets a non-empty random integer array that contains at most 2621440 integers.
            </summary>
            <returns>A random integer array.</returns>
        </member>
        <member name="M:System.ArrayEx.CreateRandomIntegers(System.Int64,System.Random)">
            <summary>
            Gets a random integer array of the specified length.
            </summary>
            <param name="length">Specifies the length of the random array.</param>
            <param name="random">
            A <see cref="T:System.Random"/> object that generates random numbers. 
            If this argument is not specified, a new <see cref="T:System.Random"/> instance will be used.
            </param>
            <returns>
            A random integer array.
            </returns>
        </member>
        <member name="M:System.ArrayEx.CreateRandomIntegers(System.Int64,System.Int64,System.Random)">
            <summary>
            Gets a random integer array whose length is inclusively between <paramref name="minLength" /> and <paramref name="maxLength" />.
            </summary>
            <param name="minLength">Specifies the minimum length of the random array.</param>
            <param name="maxLength">Specifies the maximum length of the random array.</param>
            <param name="random">A <see cref="T:System.Random" /> object that generates random numbers.
            If this argument is not specified, a new <see cref="T:System.Random" /> instance will be used.</param>
            <returns>
            A random integer array.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when <paramref name="minLength" /> or <paramref name="maxLength" /> is non-positive.</exception>
            <exception cref="T:System.ArgumentException">Occurs when <paramref name="minLength" /> is larger than <paramref name="maxLength" /> or
            <paramref name="maxLength" /> equals the maximum integer a <see cref="T:System.Int64" /> integer can represent.</exception>
        </member>
        <member name="M:System.ArrayEx.CreateRandomIntegers(System.Int32,System.Int32,System.Int64,System.Int64,System.Random)">
            <summary>
            Gets a random integer array whose length is inclusively between <paramref name="minLength" /> and <paramref name="maxLength" />.
            You may specify the maximum and minimum possible value that occurs in the returned array.
            </summary>
            <param name="min">The minium possible value in the random array.</param>
            <param name="max">The maxium possible value in the random array.</param>
            <param name="minLength">Specifies the minimum length of the random array.</param>
            <param name="maxLength">Specifies the maximum length of the random array.</param>
            <param name="random">A <see cref="T:System.Random" /> object that generates random numbers.
            If this argument is not specified, a new <see cref="T:System.Random" /> instance will be used.</param>
            <returns>
            A random integer array.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when <paramref name="minLength"/> or <paramref name="maxLength"/> is non-positive.</exception>
            <exception cref="T:System.ArgumentException">Occurs when <paramref name="minLength" /> is larger than <paramref name="maxLength" /> or
            <paramref name="maxLength" /> equals the maximum integer a <see cref="T:System.Int64" /> integer can represent.</exception>
        </member>
        <member name="M:System.ArrayEx.CreateRandomIntegers(System.Int32,System.Int32,System.Int64,System.Random)">
            <summary>
            Gets a random integer array of the specified length.
            </summary>
            <param name="min">The minimum possible value in the random array.</param>
            <param name="max">The maximum possible value in the random array.</param>
            <param name="length">Specifies the length of the random array.</param>
            <param name="random">A <see cref="T:System.Random"/> object that generates random numbers. 
            If this argument is not specified, a new <see cref="T:System.Random"/> instance will be used.</param>
            <returns>
            A random integer array.
            </returns>
            <exception cref="T:System.ArgumentException">Occurs when <paramref name="min"/> is larger than <paramref name="max"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when <paramref name="max"/> equals the maximum number a <see cref="T:System.Int32"/> integer can represent.</exception>
        </member>
        <member name="M:System.ArrayEx.CreateDistinctRandomLongs(System.Int64,System.DistinctRandomAlgorithms,System.Random)">
            <summary>
            Gets a random <see cref="T:System.Int64"/> integer array without repetition of elements.
            </summary>
            <param name="length">Specifies the length of the random array.</param>
            <returns>A random <see cref="T:System.Int64"/> integer array without repetition of elements.</returns>
        </member>
        <member name="M:System.ArrayEx.CreateDistinctRandomLongs(System.Int64,System.Int64,System.DistinctRandomAlgorithms,System.Random)">
            <summary>
            Gets a random <see cref="T:System.Int64"/> array of random length without repetition of elements.
            </summary>
            <param name="minLength">The minimum length of the array.</param>
            <param name="maxLength">The maximum length of the array.</param>
            <param name="algorithm">Specifies the algorithm used.</param>
            <param name="random">A <see cref="T:System.Random" /> object that generates random numbers.
            If this argument is not specified, a new <see cref="T:System.Random" /> instance will be used.</param>
            <returns>
            A random <see cref="T:System.Int64"/> integer array without repetition of elements.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when <paramref name="minLength"/> or <paramref name="maxLength"/> is non-positive.</exception>
            <exception cref="T:System.ArgumentException">Occurs when <paramref name="minLength"/> is larger than <paramref name="maxLength"/> or <paramref name="maxLength"/> equals the maximum integer a <see cref="T:System.Int32"/> integer can represent.</exception>
        </member>
        <member name="M:System.ArrayEx.CreateDistinctRandomLongs(System.Int64,System.Int64,System.Int64,System.DistinctRandomAlgorithms,System.Random)">
            <summary>
            Gets a random <see cref="T:System.Int64"/> integer array without repetition of elements.
            </summary>
            <param name="min">The minium possible value in the random array.</param>
            <param name="max">The maxium possible value in the random array.</param>
            <param name="length">Specifies the length of the random array.</param>
            <param name="algorithm">Specifies the algorithm used.</param>
            <param name="random">A <see cref="T:System.Random" /> object that generates random numbers.
            If this argument is not specified, a new <see cref="T:System.Random" /> instance will be used.</param>
            <returns>
            A random <see cref="T:System.Int64"/> integer array without repetition of elements.
            </returns>
            <exception cref="T:System.ArgumentException">Occurs when <paramref name="min" /> is larger than <paramref name="max" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when <paramref name="max" /> equals the maximum number a <see cref="T:System.Int32" /> integer can represent.</exception>
            <exception cref="T:System.InvalidOperationException">Occurs when the value of <paramref name="length" /> is smaller than <paramref name="max" /> - <paramref name="min" /> + 1.</exception>
        </member>
        <member name="M:System.ArrayEx.CreateRandomLongs">
            <summary>
            Gets a non-empty random <see cref="T:System.Int64"/> integer array that contains at most 2621440 integers.
            </summary>
            <returns>A random <see cref="T:System.Int64"/> integer array.</returns>
        </member>
        <member name="M:System.ArrayEx.CreateRandomLongs(System.Int64,System.Random)">
            <summary>
            Gets a random integer array of the specified length.
            </summary>
            <param name="length">Specifies the length of the random array.</param>
            <param name="random">
            A <see cref="T:System.Random"/> object that generates random numbers. 
            If this argument is not specified, a new <see cref="T:System.Random"/> instance will be used.
            </param>
            <returns>
            A random <see cref="T:System.Int64"/> integer array.
            </returns>
        </member>
        <member name="M:System.ArrayEx.CreateRandomLongs(System.Int64,System.Int64,System.Random)">
            <summary>
            Gets a random <see cref="T:System.Int64"/> integer array whose length is inclusively between <paramref name="minLength" /> and <paramref name="maxLength" />.
            </summary>
            <param name="minLength">Specifies the minimum length of the random array.</param>
            <param name="maxLength">Specifies the maximum length of the random array.</param>
            <param name="random">
            A <see cref="T:System.Random"/> object that generates random numbers. 
            If this argument is not specified, a new <see cref="T:System.Random"/> instance will be used.
            </param>
            <returns>
            A random <see cref="T:System.Int64"/> integer array.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when <paramref name="minLength"/> or <paramref name="maxLength"/> is non-positive.</exception>
            <exception cref="T:System.ArgumentException">
            Occurs when <paramref name="minLength"/> is larger than <paramref name="maxLength"/> or 
            <paramref name="maxLength"/> equals the maximum integer a <see cref="T:System.Int64"/> integer can represent.
            </exception>
        </member>
        <member name="M:System.ArrayEx.CreateRandomLongs(System.Int64,System.Int64,System.Int64,System.Int64,System.Random)">
            <summary>
            Gets a random <see cref="T:System.Int64" /> integer array whose length is inclusively between <paramref name="minLength" /> and <paramref name="maxLength" />.
            You may specify the maximum and minimum possible value that occurs in the returned array.
            </summary>
            <param name="min">The minium possible value in the random array.</param>
            <param name="max">The maxium possible value in the random array.</param>
            <param name="minLength">Specifies the minimum length of the random array.</param>
            <param name="maxLength">Specifies the maximum length of the random array.</param>
            <param name="random">A <see cref="T:System.Random" /> object that generates random numbers.
            If this argument is not specified, a new <see cref="T:System.Random" /> instance will be used.</param>
            <returns>
            A random <see cref="T:System.Int64" /> integer array.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when <paramref name="minLength" /> or <paramref name="maxLength" /> is non-positive.</exception>
            <exception cref="T:System.ArgumentException">Occurs when <paramref name="minLength" /> is larger than <paramref name="maxLength" /> or
            <paramref name="maxLength" /> equals the maximum integer a <see cref="T:System.Int64" /> integer can represent.</exception>
        </member>
        <member name="M:System.ArrayEx.CreateRandomLongs(System.Int64,System.Int64,System.Int64,System.Random)">
            <summary>
            Gets a random <see cref="T:System.Int64"/> integer array of the specified length.
            </summary>
            <param name="min">The minium possible value in the random array.</param>
            <param name="max">The maxium possible value in the random array.</param>
            <param name="length">Specifies the length of the random array.</param>
            <param name="random">A <see cref="T:System.Random"/> object that generates random numbers. 
            If this argument is not specified, a new <see cref="T:System.Random"/> instance will be used.</param>
            <returns>
            A random <see cref="T:System.Int64"/> integer array.
            </returns>
            <exception cref="T:System.ArgumentException">Occurs when <paramref name="min"/> is larger than <paramref name="max"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when <paramref name="max"/> equals the maximum number a <see cref="T:System.Int32"/> integer can represent.</exception>
        </member>
        <member name="M:System.ArrayEx.Singleton``1(``0)">
            <summary>
            Creates a new one-dimensional <see cref="T:System.Array"/> instance containing this object as its only element.
            </summary>
            <typeparam name="T">The type of this object.</typeparam>
            <param name="obj">This object.</param>
            <returns>A new  one-dimensional <see cref="T:System.Array"/> instance containing this object as its only element.</returns>
        </member>
        <member name="M:System.ArrayEx.CreateArray``1(``0,System.Int32)">
            <summary>
            Creates a new one-dimensional <see cref="T:System.Array"/> instance with each element equal to this object.
            </summary>
            <typeparam name="T">The type of this object.</typeparam>
            <param name="obj">This object.</param>
            <param name="length">The length of the created array.</param>
            <returns>A new  one-dimensional <see cref="T:System.Array"/> instance with each element equal to this object.</returns>
        </member>
        <member name="M:System.ArrayEx.GetCachedEnumerator``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Caches the current <see cref="T:System.Collections.Generic.IEnumerable`1"/>. For details on enumerator cache, see <see cref="T:System.CachedEnumerator`2"/>
            </summary>
            <typeparam name="T">The type of objects to enumerate.</typeparam>
            <param name="enumerable">The enumerable to cache.</param>
            <returns>An resetable enumerator that can enumerate each element in the provided <paramref name="enumerable"/>.</returns>
        </member>
        <member name="M:System.ArrayEx.GetCachedEnumerator``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Caches the current <see cref="T:System.Collections.Generic.IEnumerable`1"/>. For details on enumerator cache, see <see cref="T:System.CachedEnumerator`2"/>
            </summary>
            <typeparam name="T1">The type of objects in the <paramref name="enumerable"/> to enumerate.</typeparam>
            <typeparam name="T2">The type of objects the cached enumerator yields.</typeparam>
            <param name="enumerable">The enumerable to cache.</param>
            <param name="converter">Provides a method that converts an element of type <c>T1</c> to the other type <c>T2</c> when that element is yielded by the cached enumerator. This argument can be <c>null</c>, indicating the implicit conversion is used. The date in the original <paramref name="enumerable"/> will not be affected.</param>
            <returns>An resetable enumerator that can enumerate each element (converted to type <c>T2</c> when the element is yielded) in the provided <paramref name="enumerable"/>.</returns>
        </member>
        <member name="M:System.ArrayEx.GetCachedEnumerator``1(System.Collections.IEnumerable)">
            <summary>
            Caches the current <see cref="T:System.Collections.IEnumerable"/>. For details on enumerator cache, see <see cref="T:System.CachedEnumerator`2"/>
            </summary>
            <typeparam name="T">The type of objects to enumerate.</typeparam>
            <param name="enumerable">The enumerable to cache.</param>
            <returns>An resetable enumerator that can enumerate each element in the provided <paramref name="enumerable"/>.</returns>
        </member>
        <member name="M:System.ArrayEx.GetCachedEnumerator``1(System.Collections.IEnumerable,System.Func{System.Object,``0})">
            <summary>
            Caches the current <see cref="T:System.Collections.IEnumerable"/>. For details on enumerator cache, see <see cref="T:System.CachedEnumerator`2"/>
            </summary>
            <typeparam name="T">The type of objects the cached enumerator yields.</typeparam>
            <param name="enumerable">The enumerable to cache.</param>
            <param name="converter">Provides a method that converts an object to type <c>T</c> when that object is yielded by the cached enumerator. This argument can be <c>null</c>, indicating the implicit conversion is used. The date in the original <paramref name="enumerable"/> will not be affected.</param>
            <returns>An resetable enumerator that can enumerate each element (converted to type <c>T</c> when the element is yielded) in the provided <paramref name="enumerable"/>.</returns>
        </member>
        <member name="M:System.ArrayEx.GetCachedEnumerator``1(System.Collections.Generic.IEnumerator{``0})">
            <summary>
            Caches the current <see cref="T:System.Collections.Generic.IEnumerator`1"/>. For details on enumerator cache, see <see cref="T:System.CachedEnumerator`2"/>
            </summary>
            <typeparam name="T">The type of objects to enumerate.</typeparam>
            <param name="enumerator">The enumerator to cache.</param>
            <returns>An resetable enumerator that can enumerate each element in the provided <paramref name="enumerator"/>.</returns>
        </member>
        <member name="M:System.ArrayEx.GetCachedEnumerator``2(System.Collections.Generic.IEnumerator{``0},System.Func{``0,``1})">
            <summary>
            Caches the current <see cref="T:System.Collections.Generic.IEnumerator`1" />. For details on enumerator cache, see <see cref="T:System.CachedEnumerator`2" />
            </summary>
            <typeparam name="T1">The type of objects the <paramref name="enumerator" /> enumerates.</typeparam>
            <typeparam name="T2">The type of objects the cached enumerator yields.</typeparam>
            <param name="enumerator">The enumerator to cache.</param>
            <param name="converter">Provides a method that converts an element of type <c>T1</c> to the other type <c>T2</c> when that element is yielded by the cached enumerator. This argument can be <c>null</c>, indicating the implicit conversion is used.</param>
            <returns>An resetable enumerator that can enumerate each element (converted to type <c>T2</c> when the element is yielded) in the provided <paramref name="enumerator" />.</returns>
        </member>
        <member name="M:System.ArrayEx.GetCachedEnumerator``1(System.Collections.IEnumerator)">
            <summary>
            Caches the current <see cref="T:System.Collections.IEnumerator"/>. For details on enumerator cache, see <see cref="T:System.CachedEnumerator`2"/>
            </summary>
            <typeparam name="T">The type of objects to enumerate.</typeparam>
            <param name="enumerator">The enumerator to cache.</param>
            <returns>An resetable enumerator that can enumerate each element in the provided <paramref name="enumerator"/>.</returns>
        </member>
        <member name="M:System.ArrayEx.GetCachedEnumerator``1(System.Collections.IEnumerator,System.Func{System.Object,``0})">
            <summary>
            Caches the current <see cref="T:System.Collections.IEnumerator" />. For details on enumerator cache, see <see cref="T:System.CachedEnumerator`2" />
            </summary>
            <typeparam name="T">The type of objects the cached enumerator yields.</typeparam>
            <param name="enumerator">The enumerator to cache.</param>
            <param name="converter">Provides a method that converts an object to the other type <c>T</c> when that element is yielded by the cached enumerator. This argument can be <c>null</c>, indicating the implicit conversion is used.</param>
            <returns>An resetable enumerator that can enumerate each element (converted to type <c>T</c> when the element is yielded) in the provided <paramref name="enumerator" />.</returns>
        </member>
        <member name="M:System.ArrayEx.GetCombinationEnumerator``1(``0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets an enumerator that traverse through k-combinations of elements in the current <see cref="T:System.Array"/>. A k-combination is a subset of the current array which contains k elements. For example, {1,2,3}, {2,3,4}, etc., are the 3-combinations of integer array {1,2,3,4,5}. 
            </summary>
            <typeparam name="T">The type of elements in the current array.</typeparam>
            <param name="array">This array.</param>
            <param name="startIndex">The elements in the returned combinations will be limited to elements starting from this index and ending at <paramref name="startIndex"/> + <paramref name="length"/> - 1.</param>
            <param name="length">The elements in the returned combinations will be limited to elements starting from <paramref name="startIndex"/> and ending at <paramref name="startIndex"/> + <paramref name="length"/> - 1.</param>
            <param name="k">The number of elements of each combination returned by the enumerator.</param>
            <returns>An enumerator that traverse through k-combinations of elements in the current array.</returns>
        </member>
        <member name="M:System.ArrayEx.GetCombinationEnumerator``1(``0[],System.Int32,System.Int32)">
            <summary>
            Gets an enumerator that traverse through k-combinations of elements in the current <see cref="T:System.Array"/>. A k-combination is a subset of the current array which contains k elements. For example, {1,2,3}, {2,3,4}, etc., are the 3-combinations of integer array {1,2,3,4,5}.
            </summary>
            <typeparam name="T">The type of elements in the current array.</typeparam>
            <param name="array">This array.</param>
            <param name="startIndex">The elements in the returned combinations will be limited to elements starting from this index.</param>
            <param name="k">The number of elements of each combination returned by the enumerator.</param>
            <returns>
            An enumerator that traverse through k-combinations of elements in the current array.
            </returns>
        </member>
        <member name="M:System.ArrayEx.GetCombinationEnumerator``1(``0[],System.Int32)">
            <summary>
            Gets an enumerator that traverse through k-combinations of elements in the current <see cref="T:System.Array"/>. A k-combination is a subset of the current array which contains k elements. For example, {1,2,3}, {2,3,4}, etc., are the 3-combinations of integer array {1,2,3,4,5}.
            </summary>
            <typeparam name="T">The type of elements in the current array.</typeparam>
            <param name="array">This array.</param>
            <param name="k">The number of elements of each combination returned by the enumerator.</param>
            <returns>
            An enumerator that traverse through k-combinations of elements in the current array.
            </returns>
        </member>
        <member name="M:System.ArrayEx.GetMultiCombinationEnumerator``1(``0[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets an enumerator that traverse through combinations of elements in the current <see cref="T:System.Array"/>. A combination is a subset of the current array. For example, {1,2,3}, {2,3,4}, etc., are the 3-combinations of integer array {1,2,3,4,5}, while {1,2}, {3,4} are its 2-combinations.
            </summary>
            <typeparam name="T">The type of elements in the current array.</typeparam>
            <param name="array">This array.</param>
            <param name="startIndex">The elements in the returned combinations will be limited to elements starting from this index and ending at <paramref name="startIndex" /> + <paramref name="length" /> - 1.</param>
            <param name="length">The elements in the returned combinations will be limited to elements starting from <paramref name="startIndex" /> and ending at <paramref name="startIndex" /> + <paramref name="length" /> - 1.</param>
            <param name="startK">The minimum number of elements of each combination returned by the enumerator if <paramref name="startK"/> is no larger than <paramref name="endK"/>; otherwise, the maximum number of elements of each combination returned by the enumerator.</param>
            <param name="endK">The maximum number of elements of each combination returned by the enumerator if <paramref name="startK"/> is no larger than <paramref name="endK"/>; otherwise, the minimum number of elements of each combination returned by the enumerator.</param>
            <returns>
            An enumerator that traverse through combinations of elements in the current array.
            </returns>
        </member>
        <member name="M:System.ArrayEx.GetMultiCombinationEnumerator``1(``0[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Gets an enumerator that traverse through combinations of elements in the current <see cref="T:System.Array"/>. A combination is a subset of the current array. For example, {1,2,3}, {2,3,4}, etc., are the 3-combinations of integer array {1,2,3,4,5}, while {1,2}, {3,4} are its 2-combinations.
            </summary>
            <typeparam name="T">The type of elements in the current array.</typeparam>
            <param name="array">This array.</param>
            <param name="startIndex">The elements in the returned combinations will be limited to elements starting from this index and ending at <paramref name="startIndex" /> + <paramref name="length" /> - 1.</param>
            <param name="length">The elements in the returned combinations will be limited to elements starting from <paramref name="startIndex" /> and ending at <paramref name="startIndex" /> + <paramref name="length" /> - 1.</param>
            <param name="startK">The minimum number of elements of each combination returned by the enumerator if <paramref name="startK" /> is no larger than <paramref name="endK" />; otherwise, the maximum number of elements of each combination returned by the enumerator.</param>
            <param name="endK">The maximum number of elements of each combination returned by the enumerator if <paramref name="startK" /> is no larger than <paramref name="endK" />; otherwise, the minimum number of elements of each combination returned by the enumerator.</param>
            <param name="returnLimits">Limits the number of combinations the returned enumerator can go through. The first element of this array limits the number of returned <paramref name="startK"/>-combinations, the second element limits the number of returned (<paramref name="startK"/>+1)-combinations (or (<paramref name="startK"/>-1)-combinations if <paramref name="startK"/> is larger than <paramref name="endK"/>), and so forth. NOTE that if k-combination has no corresponding return limit, in which case the length of <paramref name="returnLimits"/> is smaller than k - <paramref name="startK"/> + 1, then the number of returned k-combinations will not be limited.
            <para>For example, if the current array is {1,2,3,4,5}, and <paramref name="startIndex"/> is 0, <paramref name="length"/> 5, <paramref name="startK"/> 2, <paramref name="endK"/> 3, <paramref name="returnLimits"/> {2,3}, then returned enumerator will go through {1,2}, {1,3}, {1,2,3}, {1,2,4}, {1,2,5}. If <paramref name="endK"/> is changed to 4, then all 4-combinations {1,2,3,4},{1,2,3,5},{1,2,4,5},{1,3,4,5},{2,3,4,5} will be returned by the enumerator since there is no limit on 4-combinations.</para>
            </param>
            <returns>
            An enumerator that traverse through combinations of elements in the current array.
            </returns>
        </member>
        <member name="M:System.ArrayEx.GetMultiCombinationEnumerator``1(``0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets an enumerator that traverse through combinations of elements in the current <see cref="T:System.Array"/>. A combination is a subset of the current array. For example, {1,2,3}, {2,3,4}, etc., are the 3-combinations of integer array {1,2,3,4,5}, while {1,2}, {3,4} are its 2-combinations.
            </summary>
            <typeparam name="T">The type of elements in the current array.</typeparam>
            <param name="array">This array.</param>
            <param name="startIndex">The elements in the returned combinations will be limited to elements starting from this index.</param>
            <param name="startK">The minimum number of elements of each combination returned by the enumerator if <paramref name="startK" /> is no larger than <paramref name="endK" />; otherwise, the maximum number of elements of each combination returned by the enumerator.</param>
            <param name="endK">The maximum number of elements of each combination returned by the enumerator if <paramref name="startK" /> is no larger than <paramref name="endK" />; otherwise, the minimum number of elements of each combination returned by the enumerator.</param>
            <returns>
            An enumerator that traverse through combinations of elements in the current array.
            </returns>
        </member>
        <member name="M:System.ArrayEx.GetMultiCombinationEnumerator``1(``0[],System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Gets an enumerator that traverse through combinations of elements in the current <see cref="T:System.Array"/>. A combination is a subset of the current array. For example, {1,2,3}, {2,3,4}, etc., are the 3-combinations of integer array {1,2,3,4,5}, while {1,2}, {3,4} are its 2-combinations.
            </summary>
            <typeparam name="T">The type of elements in the current array.</typeparam>
            <param name="array">This array.</param>
            <param name="startIndex">The elements in the returned combinations will be limited to elements starting from this index.</param>
            <param name="startK">The minimum number of elements of each combination returned by the enumerator if <paramref name="startK" /> is no larger than <paramref name="endK" />; otherwise, the maximum number of elements of each combination returned by the enumerator.</param>
            <param name="endK">The maximum number of elements of each combination returned by the enumerator if <paramref name="startK" /> is no larger than <paramref name="endK" />; otherwise, the minimum number of elements of each combination returned by the enumerator.</param>
            <param name="returnLimits">Limits the number of combinations the returned enumerator can go through. The first element of this array limits the number of returned  <paramref name="startK" />-combinations, the second element limits the number of returned (<paramref name="startK" />+1)-combinations (or (<paramref name="startK" />-1)-combinations if <paramref name="startK" /> is larger than <paramref name="endK" />), and so forth. NOTE that if k-combination has no corresponding return limit, in which case the length of <paramref name="returnLimits" /> is smaller than k - <paramref name="startK" /> + 1, then the number of returned k-combinations will not be limited.
            <para>For example, if the current array is {1,2,3,4,5}, and <paramref name="startIndex" /> is 0, <paramref name="length" /> 5, <paramref name="startK" /> 2, <paramref name="endK" /> 3, <paramref name="returnLimits" /> {2,3}, then returned enumerator will go through {1,2}, {1,3}, {1,2,3}, {1,2,4}, {1,2,5}. If <paramref name="endK" /> is changed to 4, then all 4-combinations {1,2,3,4},{1,2,3,5},{1,2,4,5},{1,3,4,5},{2,3,4,5} will be returned by the enumerator since there is no limit on 4-combinations.</para>
            </param>
            <returns>
            An enumerator that traverse through combinations of elements in the current array.
            </returns>
        </member>
        <member name="M:System.ArrayEx.GetMultiCombinationEnumerator``1(``0[],System.Int32,System.Int32)">
            <summary>
            Gets an enumerator that traverse through combinations of elements in the current <see cref="T:System.Array"/>. A combination is a subset of the current array. For example, {1,2,3}, {2,3,4}, etc., are the 3-combinations of integer array {1,2,3,4,5}, while {1,2}, {3,4} are its 2-combinations.
            </summary>
            <typeparam name="T">The type of elements in the current array.</typeparam>
            <param name="array">This array.</param>
            <param name="startK">The minimum number of elements of each combination returned by the enumerator if <paramref name="startK" /> is no larger than <paramref name="endK" />; otherwise, the maximum number of elements of each combination returned by the enumerator.</param>
            <param name="endK">The maximum number of elements of each combination returned by the enumerator if <paramref name="startK" /> is no larger than <paramref name="endK" />; otherwise, the minimum number of elements of each combination returned by the enumerator.</param>
            <returns>
            An enumerator that traverse through combinations of elements in the current array.
            </returns>
        </member>
        <member name="M:System.ArrayEx.GetMultiCombinationEnumerator``1(``0[],System.Int32,System.Int32,System.Int32[])">
            <summary>
            Gets an enumerator that traverse through combinations of elements in the current <see cref="T:System.Array"/>. A combination is a subset of the current array. For example, {1,2,3}, {2,3,4}, etc., are the 3-combinations of integer array {1,2,3,4,5}, while {1,2}, {3,4} are its 2-combinations.
            </summary>
            <typeparam name="T">The type of elements in the current array.</typeparam>
            <param name="array">This array.</param>
            <param name="startK">The minimum number of elements of each combination returned by the enumerator if <paramref name="startK" /> is no larger than <paramref name="endK" />; otherwise, the maximum number of elements of each combination returned by the enumerator.</param>
            <param name="endK">The maximum number of elements of each combination returned by the enumerator if <paramref name="startK" /> is no larger than <paramref name="endK" />; otherwise, the minimum number of elements of each combination returned by the enumerator.</param>
            <param name="returnLimits">Limits the number of combinations the returned enumerator can go through. The first element of this array limits the number of returned <paramref name="startK" />-combinations, the second element limits the number of returned (<paramref name="startK" />+1)-combinations (or (<paramref name="startK" />-1)-combinations if <paramref name="startK" /> is larger than <paramref name="endK" />), and so forth. NOTE that if k-combination has no corresponding return limit, in which case the length of <paramref name="returnLimits" /> is smaller than k - <paramref name="startK" /> + 1, then the number of returned k-combinations will not be limited.
            <para>For example, if the current array is {1,2,3,4,5}, and <paramref name="startIndex" /> is 0, <paramref name="length" /> 5, <paramref name="startK" /> 2, <paramref name="endK" /> 3, <paramref name="returnLimits" /> {2,3}, then returned enumerator will go through {1,2}, {1,3}, {1,2,3}, {1,2,4}, {1,2,5}. If <paramref name="endK" /> is changed to 4, then all 4-combinations {1,2,3,4},{1,2,3,5},{1,2,4,5},{1,3,4,5},{2,3,4,5} will be returned by the enumerator since there is no limit on 4-combinations.</para>
            </param>
            <returns>
            An enumerator that traverse through combinations of elements in the current array.
            </returns>
        </member>
        <member name="M:System.ArrayEx.GetEnumerator``1(``0[])">
            <summary>
            Returns an generic enumerator for the array.
            </summary>
            <typeparam name="T">The type of elements in the array</typeparam>
            <param name="array">The array.</param>
            <returns>Returns an generic enumerator that iterates through all elements in the array.</returns>
        </member>
        <member name="M:System.ArrayEx.GetEnumerator``1(``0[],``0[][])">
            <summary>
            Gets an enumerator that first goes through all elements in the current <see cref="T:System.Array"/> and then goes through elements of other provided arrays.
            </summary>
            <typeparam name="T">The type of elements in the current array and all other provided arrays.</typeparam>
            <param name="array">This array.</param>
            <param name="otherArrays">Provide other arrays. The enumerator will also go through elements in these arrays.</param>
            <returns>An enumerator that first goes through all elements in the current and then go through elements of <paramref name="otherArrays"/>.</returns>
        </member>
        <member name="M:System.ArrayEx.GetEnumerator``1(``0[],System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Gets an enumerator that first goes through all elements in the current <see cref="T:System.Array"/> and then goes through elements of other provided enumerables.
            </summary>
            <typeparam name="T">The type of elements in the current array and all other provided enumerable sequences.</typeparam>
            <param name="array">This array.</param>
            <param name="otherEnumerables">Provide other enumerable sequences. The enumerator will also go through elements in these enumerables.</param>
            <returns>An enumerator that first goes through all elements in the current and then go through each of the <paramref name="enumerables"/>.</returns>
        </member>
        <member name="M:System.ArrayEx.GetTrivialEnumerator``1(``0)">
            <summary>
            Gets a trivial enumerator that can only yield the current object once. NOTE that this method returns an unresettable enumerator. To return a resettable enumerator, use the other overload.
            </summary>
            <typeparam name="T">The type of the current object.</typeparam>
            <param name="obj">The current object.</param>
            <returns>An un-resettable enumerator that can only yield the current object once.</returns>
            <remarks>This returned enumerator is intended for architecture purpose, not for general use. When a method or an interface requires an enumerator as its argument, a single object can be sent into that method or interface by wrapping it in a trivial enumerator.</remarks>
        </member>
        <member name="M:System.ArrayEx.GetTrivialEnumerator``1(``0,System.Boolean)">
            <summary>
            Gets a trivial enumerator that can only iterate the current object. NOTE that this method returns a resettable enumerator if <paramref name="resettable" /> is assigned <c>true</c>.
            </summary>
            <typeparam name="T">The type of the current object.</typeparam>
            <param name="obj">The current object.</param>
            <param name="resettable"><c>true</c> if the returned enumerator is resettable, otherwise, <c>false</c>.</param>
            <returns>An enumerator that can only iterate the current object.</returns>
        </member>
        <member name="M:System.ArrayEx.GetPermutationEnumerator``1(``0[])">
            <summary>
            Gets an enumerator that traverse through all permutations of the current <see cref="T:System.Array"/>.
            </summary>
            <typeparam name="T">The type of elements in the current array.</typeparam>
            <param name="array">This <see cref="T:System.Array"/>.</param>
            <returns>An enumerator that traverse through all permutations of the current array.</returns>
        </member>
        <member name="M:System.ArrayEx.GetPermutationEnumerator``1(``0[],System.Int32)">
            <summary>
            Gets an enumerator that traverse through all permutations of a sub-array (starting from the specified <paramref name="startIndex"/> to the end) of the current <see cref="T:System.Array" />.
            </summary>
            <typeparam name="T">The type of elements in the current array.</typeparam>
            <param name="array">This <see cref="T:System.Array" />.</param>
            <param name="startIndex">The returned enumerator will go through all permutations of a sub-array starting from this index.</param>
            <returns>
            An enumerator that traverse through all permutations of a sub-array (starting from the element at the specified <paramref name="startIndex"/> to the end) of the current array.
            </returns>
        </member>
        <member name="M:System.ArrayEx.GetPermutationEnumerator``1(``0[],System.Int32,System.Int32)">
            <summary>
            Gets an enumerator that traverse through all permutations of a sub-array (starting from the element at the specified <paramref name="startIndex" /> to the element at index <paramref name="startIndex" /> + <paramref name="length"/> - 1) of the current <see cref="T:System.Array" />.
            </summary>
            <typeparam name="T">The type of elements in the current array.</typeparam>
            <param name="array">This <see cref="T:System.Array" />.</param>
            <param name="startIndex">The returned enumerator will go through all permutations of a sub-array starting from the element at this index to the element at index <paramref name="startIndex" /> + <paramref name="length"/> - 1.</param>
            <param name="length">The returned enumerator will go through all permutations of a sub-array starting from the element at <paramref name="startIndex" /> to the element at index <paramref name="startIndex" /> + <paramref name="length"/> - 1.</param>
            <returns>
            An enumerator that traverse through all permutations of a sub-array (starting from the specified <paramref name="startIndex" /> to the element at index <paramref name="startIndex" /> + <paramref name="length"/> - 1 of the current array.
            </returns>
        </member>
        <member name="M:System.ArrayEx.Shuffle``1(System.Collections.Generic.IList{``0},System.Random)">
            <summary>
            Puts each element of this <see cref="T:System.Collections.Generic.IList`1"/> at a random position. This method implements the Fisher–Yates shuffle.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The current list.</param>
            <param name="random">A <see cref="T:System.Random"/> object used to generate random positions.</param>
        </member>
        <member name="M:System.ArrayEx.Shuffle``1(``0[],System.Random)">
            <summary>
            Puts each element of this <see cref="T:System.Array"/> at a random position. This method implements the Fisher–Yates shuffle.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="array">The current array.</param>
            <param name="random">A <see cref="T:System.Random"/> object used to generate random positions.</param>
        </member>
        <member name="M:System.ArrayEx.ShuffleCopyNonNull``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Random)">
            <summary>
            Randomly copies non-null elements of this <see cref="T:System.Collections.Generic.IList`1" /> to an empty destination list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The current list.</param>
            <param name="destination">The destination list to which the elements of the current list are copied.</param>
            <param name="random">A <see cref="T:System.Random"/> object used to generate random positions.</param>
            <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Occurs when <paramref name="destination"/> is non-empty.</exception>
        </member>
        <member name="M:System.ArrayEx.GetRandomEnumerator``1(``0[],System.Int32,System.DistinctRandomAlgorithms,System.Random)">
            <summary>
            Gets an enumerator that enumerates elements of the array in a random manner.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="array">The array.</param>
            <param name="count">The total number of elements the enumerator should enumerate before reset.</param>
            <param name="algorithm">The algorithm used to prevent an element from being accessed twice.</param>
            <param name="random">A <see cref="T:System.Random" /> object that generates random numbers.
            If this argument is not specified, a new <see cref="T:System.Random" /> instance will be used.</param>
            <returns>An enumerator that randomly enumerates elements of the array.</returns>
        </member>
        <member name="M:System.ArrayEx.GetRandomEnumerator``1(``0[],System.DistinctRandomAlgorithms,System.Random)">
            <summary>
            Gets an enumerator that enumerates all elements of the array in a random manner.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="array">The array.</param>
            <param name="algorithm">The algorithm used to prevent an element from being accessed twice.</param>
            <param name="random">A <see cref="T:System.Random" /> object that generates random numbers.
            If this argument is not specified, a new <see cref="T:System.Random" /> instance will be used.</param>
            <returns>
            An enumerator that randomly enumerates elements of the array.
            </returns>
        </member>
        <member name="M:System.ArrayEx.GetRandomEnumerator``1(System.Collections.Generic.IList{``0},System.Int32,System.DistinctRandomAlgorithms,System.Random)">
            <summary>
            Gets an enumerator that enumerates elements of the <see cref="T:System.Collections.Generic.IList`1"/> in a random manner.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The list.</param>
            <param name="count">The total number of elements the enumerator should enumerate before reset.</param>
            <param name="algorithm">The algorithm used to prevent an element from being accessed twice.</param>
            <param name="random">A <see cref="T:System.Random" /> object that generates random numbers.
            If this argument is not specified, a new <see cref="T:System.Random" /> instance will be used.</param>
            <returns>An enumerator that randomly enumerates elements of the list.</returns>
        </member>
        <member name="M:System.ArrayEx.GetRandomEnumerator``1(System.Collections.Generic.IList{``0},System.DistinctRandomAlgorithms,System.Random)">
            <summary>
            Gets an enumerator that enumerates all elements of the <see cref="T:System.Collections.Generic.IList`1"/> in a random manner.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="array">The list.</param>
            <param name="algorithm">The algorithm used to prevent an element from being accessed twice.</param>
            <param name="random">A <see cref="T:System.Random" /> object that generates random numbers.
            If this argument is not specified, a new <see cref="T:System.Random" /> instance will be used.</param>
            <returns>
            An enumerator that randomly enumerates elements of the list.
            </returns>
        </member>
        <member name="M:System.ArrayEx.GetRandomEnumerator``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.DistinctRandomAlgorithms,System.Random)">
            <summary>
            Gets an enumerator that enumerates elements of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence in a random manner.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="sequence">The enumerable sequence.</param>
            <param name="count">The total number of elements the enumerator should enumerate before reset.</param>
            <param name="algorithm">The algorithm used to prevent an element from being accessed twice.</param>
            <param name="random">A <see cref="T:System.Random" /> object that generates random numbers.
            If this argument is not specified, a new <see cref="T:System.Random" /> instance will be used.</param>
            <returns>An enumerator that randomly enumerates elements of the sequence.</returns>
        </member>
        <member name="M:System.ArrayEx.GetRandomEnumerator``1(System.Collections.Generic.IEnumerable{``0},System.DistinctRandomAlgorithms,System.Random)">
            <summary>
            Gets an enumerator that enumerates elements of the <see cref="T:System.Collections.Generic.IEnumerable`1" /> sequence in a random manner.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="sequence">The enumerable sequence.</param>
            <param name="algorithm">The algorithm used to prevent an element from being accessed twice.</param>
            <param name="random">A <see cref="T:System.Random" /> object that generates random numbers.
            If this argument is not specified, a new <see cref="T:System.Random" /> instance will be used.</param>
            <returns>
            An enumerator that randomly enumerates elements of the sequence.
            </returns>
        </member>
        <member name="M:System.ArrayEx.ToArray``1(System.Collections.IEnumerable)">
            <summary>
            Copies the elements in the sequence to an array.
            </summary>
            <typeparam name="T">The type of elements in the output array.</typeparam>
            <param name="enumerable">An enumerable sequence.</param>
            <returns>A new array containing the elements copied from the enumerable sequence.</returns>
        </member>
        <member name="M:System.ArrayEx.ToArray``2(System.Collections.IEnumerable,System.Func{``0,``1},System.Boolean)">
            <summary>
            Converts and copies the elements in the sequence (treated as <typeparamref name="T"/>) to an array of type <typeparamref name="TOut"/>.
            </summary>
            <typeparam name="T">The elements in the current sequence are treated as this type.</typeparam>
            <typeparam name="TOut">The type of elements in the output array.</typeparam>
            <param name="enumerable">An enumerable sequence of type <typeparamref name="TOut"/>.</param>
            <param name="func">The method to convert each element in the sequence to type <typeparamref name="TOut"/>.</param>
            <param name="excludesNull"><c>true</c> if <c>null</c> refrences in the sequence are ignored; otherwise the <c>null</c> reference will be preserved in the ouptut array.</param>
            <returns>A new array containing the elements copied and converted from the enumerable sequence.</returns>
        </member>
        <member name="M:System.ArrayEx.ToArray``1(System.Collections.Generic.IEnumerator{``0})">
            <summary>
            Copies the REMAINING elements to a new array.
            <para>NOTE that this method only copies the elements not yet enumerated by this <see cref="T:System.Collections.Generic.IEnumerator`1"/> to the new array. To copy all elements, you may call the <c>Reset</c> method of the enumerator first. After copying elements to the array, the enumerator can no longer <c>MoveNext</c> unless you call <c>Reset</c>.</para>
            </summary>
            <typeparam name="T">The type of elements enumerated by the enumerator.</typeparam>
            <param name="enumerator">The current enumerator.</param>
            <returns>A new array containing the elements not yet enumerated by the enumerator before the execution of this method.</returns>
        </member>
        <member name="M:System.ArrayEx.ToArray``1(System.Collections.Generic.IEnumerator{``0},System.Int32)">
            <summary>
            Copies the REMAINING elements to a new array up to a maximum number specified by <paramref name="maxCopy" />.
            <para>NOTE that this method only copies the elements not yet enumerated by this <see cref="T:System.Collections.Generic.IEnumerator`1" /> to the new array. If the number of remainig elements are more than <paramref name="maxCopy" />, which limits the maximum number of elements to be copied, then the method terminates and returns the array when that limit is reached; if the number of remainig elements are less than <paramref name="maxCopy" />, the method terminates when all remaining elements are copied to the new array.</para>
            </summary>
            <typeparam name="T">The type of elements enumerated by the enumerator.</typeparam>
            <param name="enumerator">The current enumerator.</param>
            <param name="maxCopy">The maximum number of elements to return. If the number of remaining elements are less than this argument, then the number of actually returned elements will be less than this argument.</param>
            <returns>A new array containing the elements not yet enumerated by the enumerator before the execution of this method. The length of this returned array is up to <paramref name="maxCopy" />.</returns>
        </member>
        <member name="M:System.ArrayEx.ToArray``2(System.Collections.Generic.IEnumerator{``0},System.Func{``0,``1})">
            <summary>
            Converts the REMAINING elements of type <typeparamref name="T1"/> to objects of another type <typeparamref name="T2"/> and output the conversion results to a new array.
            <para>NOTE that this method only processes the elements not yet enumerated by this <see cref="T:System.Collections.Generic.IEnumerator`1"/> to the new array. To process all elements, you may call the <c>Reset</c> method of the enumerator first. After the execution of this method, the enumerator can no longer <c>MoveNext</c> unless you call <c>Reset</c>.</para>
            </summary>
            <typeparam name="T1">The type of elements enumerated by the enumerator.</typeparam>
            <typeparam name="T2">The type of elements in the returned array.</typeparam>
            <param name="enumerator">The current enumerator.</param>
            <param name="converter">Provides a method to convert elements enumerated by the enumerator.</param>
            <returns>A new array of type <typeparamref name="T2"/> containing objects converted from the elements not yet enumerated by the enumerator before the execution of this method.</returns>
        </member>
        <member name="M:System.ArrayEx.ToArray``1(System.Collections.Generic.IEnumerator{``0},System.Int32[])">
            <summary>
            Copies the REMAINING elements of the specified <paramref name="offsets"/> to a new array.
            <para>NOTE that this method only copies the elements not yet enumerated by this <see cref="T:System.Collections.Generic.IEnumerator`1"/> to the new array. To copy all elements, you may call the <c>Reset</c> method of the enumerator first. After copying elements to the array, the enumerator can no longer <c>MoveNext</c> unless you call <c>Reset</c>.</para>
            </summary>
            <typeparam name="T">The type of elements enumerated by the enumerator.</typeparam>
            <param name="enumerator">The current enumerator.</param>
            <param name="offsets">An element of any of these specified offsets will be copied to the array. For example, an element of offset 0 is the element at the enumerator's current position; an element of offset 1 is the element next to the enumerator's current position; an element of offset 2 is the element next to the element of offset 1; and so forth.</param>
            <returns>A new array containing the elements not yet enumerated by the enumerator before the execution of this method.</returns>
        </member>
        <member name="M:System.ArrayEx.ToArray(System.Collections.IEnumerator)">
            <summary>
            Copies the REMAINING elements to a new array.
            <para>NOTE that this method only copies the elements not yet enumerated by this <see cref="T:System.Collections.IEnumerator"/> to the new array. To copy all elements, you may call the <c>Reset</c> method of the enumerator first. After copying elements to the array, the enumerator can no longer <c>MoveNext</c> unless you call <c>Reset</c>.</para>
            </summary>
            <typeparam name="T">The type of elements enumerated by the enumerator.</typeparam>
            <param name="enumerator">The current enumerator.</param>
            <returns>A new array containing the elements not yet enumerated by the enumerator before the execution of this method.</returns>
        </member>
        <member name="M:System.ArrayEx.ToArray``1(System.Collections.IEnumerator,System.Func{System.Object,``0})">
            <summary>
            Converts the REMAINING element of the current <see cref="T:System.Collections.IEnumerator"/> to objects of another type <typeparamref name="T"/> and output the conversion results to a new array.
            <para>NOTE that this method only processes the elements not yet enumerated by this <see cref="T:System.Collections.IEnumerator"/> to the new array. To process all elements, you may call the <c>Reset</c> method of the enumerator first. After the execution of this method, the enumerator can no longer <c>MoveNext</c> unless you call <c>Reset</c>.</para>
            </summary>
            <typeparam name="T">The type of elements in the returned array.</typeparam>
            <param name="enumerator">The current <see cref="T:System.Collections.IEnumerator"/>.</param>
            <param name="converter">Provides a method to convert elements enumerated by the enumerator.</param>
            <returns>A new array of type <typeparamref name="T"/> containing objects converted from the elements not yet enumerated by the enumerator before the execution of this method.</returns>
        </member>
        <member name="M:System.ArrayEx.ToArray(System.Collections.IEnumerator,System.Int32[])">
            <summary>
            Copies the REMAINING elements of the specified <paramref name="offsets"/> to a new array.
            <para>NOTE that this method only copies the elements not yet enumerated by this <see cref="T:System.Collections.IEnumerator"/> to the new array. To copy all elements, you may call the <c>Reset</c> method of the enumerator first. After copying elements to the array, the enumerator can no longer <c>MoveNext</c> unless you call <c>Reset</c>.</para>
            </summary>
            <typeparam name="T">The type of elements enumerated by the enumerator.</typeparam>
            <param name="enumerator">The current enumerator.</param>
            <param name="offsets">An element of any of these specified offsets will be copied to the array. For example, an element of offset 0 is the element at the enumerator's current position; an element of offset 1 is the element next to the enumerator's current position; an element of offset 2 is the element next to the element of offset 1; and so forth.</param>
            <returns>A new array containing the elements not yet enumerated by the enumerator before the execution of this method.</returns>
        </member>
        <member name="M:System.ArrayEx.IndexOfSubArray``1(``0[],``0[])">
            <summary>
            Searches for the specified one-dimensional <paramref name="target"/> array in the current one-dimensional array of the same type of elements, and returns the index of its first occurrence. This method performs an equality comparison by calling each element's <c>Equals</c> method.
            </summary>
            <typeparam name="T">The type of elements in the current array.</typeparam>
            <param name="src">The current array.</param>
            <param name="target">The target array to locate in array.</param>
            <returns>The index of the first occurrence of <paramref name="target"/> in the current array, if found; otherwise, -1.</returns>
        </member>
        <member name="M:System.ArrayEx.IndexOfSubArray``1(``0[],``0[],System.Func{``0,``0,System.Boolean})">
            <summary>
            Searches for the specified one-dimensional <paramref name="target" /> array in the current one-dimensional array of the same type of elements, and returns the index of its first occurrence. Equality comparison is based on the provided <paramref name="comparer"/>.
            </summary>
            <typeparam name="T">The type of elements in the current array.</typeparam>
            <param name="src">The current array.</param>
            <param name="target">The target array to locate in array.</param>
            <param name="comparer">The comparer to determine if two element of <typeparamref name="T"/> equals.</param>
            <returns>The index of the first occurrence of <paramref name="target" /> in the current array, if found; otherwise, -1.</returns>
        </member>
        <member name="M:System.ArrayEx.IndexOf``1(``0[],``0)">
            <summary>
            Searches for the specified object and returns the index of the first occurrence within the entire one-dimensional array. NOTE that this method performs an equality comparison by calling each element's <c>Equals</c> method.
            </summary>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The current one-dimensional array to search.</param>
            <param name="value">The object to locate in array.</param>
            <returns>The index of the first occurrence of <paramref name="value"/> within the entire array, if found; otherwise, -1.</returns>
            <remarks>This is a dummy method of the <c>Array.IndexOf</c> method for convenience.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
        </member>
        <member name="M:System.ArrayEx.IndexOf``1(``0[],``0,System.Int32)">
            <summary>
            Searches for the specified object and returns the index of the first occurrence within the range of elements in this one-dimensional Array that starts at the specified index. NOTE that this method performs an equality comparison by calling each element's <c>Equals</c> method.
            </summary>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional array to search.</param>
            <param name="value">The object to locate in this array.</param>
            <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
            <returns>The index of the first occurrence of value within the range of elements in array that starts at <paramref name="startIndex"/>, if found; otherwise, -1.</returns>
            <remarks>This is a dummy method of the <c>Array.IndexOf</c> method for convenience.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is outside the range of valid indexes for array.</exception>
        </member>
        <member name="M:System.ArrayEx.IndexOf``1(``0[],``0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the index of the first occurrence within the range of elements in this one-dimensional Array that starts at the specified index and contains the specified number of elements. NOTE that this method performs an equality comparison by calling each element's <c>Equals</c> method.
            </summary>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional array to search.</param>
            <param name="value">The object to locate in this array.</param>
            <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>The index of the first occurrence of value within the range of elements in array that starts at <paramref name="startIndex"/> and contains the number of elements specified in <paramref name="count"/>, if found; otherwise, -1.</returns>
            <remarks>This is a dummy method of the <c>Array.IndexOf</c> method for convenience.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is outside the range of valid indexes for array; or <paramref name="count"/> is less than zero; or <paramref name="startIndex"/> and <paramref name="count"/> do not specify a valid section in array.</exception>
        </member>
        <member name="M:System.ArrayEx.IndexOf``1(System.Array,System.Object)">
            <summary>
            Searches for the specified object and returns the index of the first occurrence within the entire one-dimensional <see cref="T:System.Array"/>. NOTE that this method performs an equality comparison by calling each element's <c>Equals</c> method.
            </summary>
            <param name="array">The current one-dimensional <see cref="T:System.Array"/> to search.</param>
            <param name="obj">The object to locate in array.</param>
            <returns>The index of the first occurrence of value within the entire array, if found; otherwise, the lower bound of the array minus 1, typically -1.</returns>
            <remarks>This is a dummy method of the <c>Array.IndexOf</c> method for convenience.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.RankException"><paramref name="array"/> is multidimensional.</exception>
        </member>
        <member name="M:System.ArrayEx.IndexOf(System.Array,System.Object,System.Int32)">
            <summary>
            Searches for the specified object and returns the index of the first occurrence within the range of elements in this one-dimensional Array that starts at the specified index. NOTE that this method performs an equality comparison by calling each element's <c>Equals</c> method.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
            <param name="value">The object to locate in this array.</param>
            <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
            <returns>The index of the first occurrence of value within the range of elements in array that starts at <paramref name="startIndex"/>, if found; otherwise, the lower bound of the array minus 1 (typically -1).</returns>
            <remarks>This is a dummy method of the <c>Array.IndexOf</c> method for convenience.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.RankException"><paramref name="array"/> is multidimensional.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is outside the range of valid indexes for array.</exception>
        </member>
        <member name="M:System.ArrayEx.IndexOf(System.Array,System.Object,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the index of the first occurrence within the range of elements in this one-dimensional Array that starts at the specified index and contains the specified number of elements. NOTE that this method performs an equality comparison by calling each element's <c>Equals</c> method.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
            <param name="value">The object to locate in this array.</param>
            <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>The index of the first occurrence of value within the range of elements in array that starts at <paramref name="startIndex"/> and contains the number of elements specified in <paramref name="count"/>, if found; otherwise, the lower bound of the array minus 1 (typically -1).</returns>
            <remarks>This is a dummy method of the <c>Array.IndexOf</c> method for convenience.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.RankException"><paramref name="array"/> is multidimensional.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is outside the range of valid indexes for array; or <paramref name="count"/> is less than zero; or <paramref name="startIndex"/> and <paramref name="count"/> do not specify a valid section in array.</exception>
        </member>
        <member name="M:System.ArrayEx.LastIndexOf``1(``0[],``0)">
            <summary>
            Searches for the specified object and returns the index of the last occurrence within the entire one-dimensional <see cref="T:System.Array"/>. NOTE that this method performs an equality comparison by calling each element's <c>Equals</c> method.
            </summary>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The current one-dimensional array to search.</param>
            <param name="value">The object to locate in array.</param>
            <returns>The index of the last occurrence of <paramref name="value"/> within the entire array, if found; otherwise, the lower bound of the array minus 1, typically -1.</returns>
            <remarks>This is a dummy method of the <c>Array.LastIndexOf</c> method for convenience purpose.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
        </member>
        <member name="M:System.ArrayEx.LastIndexOf``1(``0[],``0,System.Int32)">
            <summary>
            Searches for the specified object and returns the index of the last occurrence within the range of elements in this one-dimensional Array that starts at the specified index. NOTE that this method performs an equality comparison by calling each element's <c>Equals</c> method.
            </summary>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional array to search.</param>
            <param name="value">The object to locate in this array.</param>
            <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
            <returns>The index of the last occurrence of value within the range of elements in array that starts at <paramref name="startIndex"/>, if found; otherwise, the lower bound of the array minus 1 (typically -1).</returns>
            <remarks>This is a dummy method of the <c>Array.LastIndexOf</c> method for convenience purpose.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is outside the range of valid indexes for array.</exception>
        </member>
        <member name="M:System.ArrayEx.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the index of the last occurrence within the range of elements in this one-dimensional Array that starts at the specified index and contains the specified number of elements. NOTE that this method performs an equality comparison by calling each element's <c>Equals</c> method.
            </summary>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional array to search.</param>
            <param name="value">The object to locate in this array.</param>
            <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>The index of the last occurrence of value within the range of elements in array that starts at <paramref name="startIndex"/> and contains the number of elements specified in <paramref name="count"/>, if found; otherwise, the lower bound of the array minus 1 (typically -1).</returns>
            <remarks>This is a dummy method of the <c>Array.LastIndexOf</c> method for convenience purpose.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is outside the range of valid indexes for array; or <paramref name="count"/> is less than zero; or <paramref name="startIndex"/> and <paramref name="count"/> do not specify a valid section in array.</exception>
        </member>
        <member name="M:System.ArrayEx.LastIndexOf``1(System.Array,System.Object)">
            <summary>
            Searches for the specified object and returns the index of the last occurrence within the entire one-dimensional <see cref="T:System.Array"/>. NOTE that this method performs an equality comparison by calling each element's <c>Equals</c> method.
            </summary>
            <param name="array">The current one-dimensional <see cref="T:System.Array"/> to search.</param>
            <param name="obj">The object to locate in array.</param>
            <returns>The index of the last occurrence of value within the entire array, if found; otherwise, the lower bound of the array minus 1, typically -1.</returns>
            <remarks>This is a dummy method of the <c>Array.LastIndexOf</c> method for convenience purpose.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.RankException"><paramref name="array"/> is multidimensional.</exception>
        </member>
        <member name="M:System.ArrayEx.LastIndexOf(System.Array,System.Object,System.Int32)">
            <summary>
            Searches for the specified object and returns the index of the last occurrence within the range of elements in this one-dimensional Array that starts at the specified index. NOTE that this method performs an equality comparison by calling each element's <c>Equals</c> method.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
            <param name="value">The object to locate in this array.</param>
            <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
            <returns>The index of the last occurrence of value within the range of elements in array that starts at <paramref name="startIndex"/>, if found; otherwise, the lower bound of the array minus 1 (typically -1).</returns>
            <remarks>This is a dummy method of the <c>Array.LastIndexOf</c> method for convenience purpose.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.RankException"><paramref name="array"/> is multidimensional.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is outside the range of valid indexes for array.</exception>
        </member>
        <member name="M:System.ArrayEx.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the index of the last occurrence within the range of elements in this one-dimensional Array that starts at the specified index and contains the specified number of elements. NOTE that this method performs an equality comparison by calling each element's <c>Equals</c> method.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
            <param name="value">The object to locate in this array.</param>
            <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>The index of the last occurrence of value within the range of elements in array that starts at <paramref name="startIndex"/> and contains the number of elements specified in <paramref name="count"/>, if found; otherwise, the lower bound of the array minus 1 (typically -1).</returns>
            <remarks>This is a dummy method of the <c>Array.LastIndexOf</c> method for convenience purpose.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.RankException"><paramref name="array"/> is multidimensional.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is outside the range of valid indexes for array; or <paramref name="count"/> is less than zero; or <paramref name="startIndex"/> and <paramref name="count"/> do not specify a valid section in array.</exception>
        </member>
        <member name="M:System.ArrayEx.SetValue``1(``0[],``0,System.Int64,System.Int64)">
            <summary>
            Sets all elements of a segment of this one-dimensional <see cref="T:System.Array"/> to the same specified value.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="array">This array.</param>
            <param name="value">All elements of the segment defined by <paramref name="startIndex"/> and <paramref name="length"/> will be assigned to this value.</param>
            <param name="startIndex">A 64-bit integer that represents the position of the first element to set.</param>
            <param name="length">The number of elements to set from the position indicated by <paramref name="startIndex" />.</param>
        </member>
        <member name="M:System.ArrayEx.SetValue``1(``0[],``0,System.Int32,System.Int32)">
            <summary>
            Sets all elements of a segment of this one-dimensional <see cref="T:System.Array"/> to the same specified value.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="array">This array.</param>
            <param name="value">All elements of the segment defined by <paramref name="startIndex"/> and <paramref name="length"/> will be assigned to this value.</param>
            <param name="startIndex">An integer that represents the position of the first element to set.</param>
            <param name="length">The number of elements to set from the position indicated by <paramref name="startIndex" />.</param>
        </member>
        <member name="M:System.ArrayEx.SetValue``1(``0[],``0,System.Int64)">
            <summary>
            Sets all elements from a specified position to the end of this one-dimensional <see cref="T:System.Array"/> to the same value.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="array">This array.</param>
            <param name="value">All elements since position specified by <paramref name="startIndex"/> to the end of this array will be assigned to this value.</param>
            <param name="startIndex">A 64-bit integer that represents the position of the first element to set.</param>
        </member>
        <member name="M:System.ArrayEx.SetValue``1(``0[],``0,System.Int32)">
            <summary>
            Sets all elements since a specified position to the end of this one-dimensional <see cref="T:System.Array"/> to the same specified value.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="array">This array.</param>
            <param name="value">All elements since position specified by <paramref name="startIndex"/> to the end of this array will be assigned to this value.</param>
            <param name="startIndex">An integer that represents the position of the first element to set.</param>
        </member>
        <member name="M:System.ArrayEx.SetAll``1(``0[],``0)">
            <summary>
            Sets all elements of this one-dimensional <see cref="T:System.Array"/> to the same specified value.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="array">This array.</param>
            <param name="value">All elements in the array will be assigned this value.</param>
        </member>
        <member name="M:System.ArrayEx.SetValue``1(System.Collections.Generic.IList{``0},``0,System.Int32,System.Int32)">
            <summary>
            Sets all elements of a segment of this list to the same specified value.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">This list.</param>
            <param name="value">All elements of the segment defined by <paramref name="startIndex"/> and <paramref name="length"/> will be assigned to this value.</param>
            <param name="startIndex">An integer that represents the position of the first element to set.</param>
            <param name="length">The number of elements to set from the position indicated by <paramref name="startIndex" />.</param>
        </member>
        <member name="M:System.ArrayEx.SetValue``1(System.Collections.Generic.IList{``0},``0,System.Int32)">
            <summary>
            Sets all elements since a specified position to the end of this list to the same specified value.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">This list.</param>
            <param name="value">All elements since position specified by <paramref name="startIndex"/> to the end of this list will be assigned to this value.</param>
            <param name="startIndex">An integer that represents the position of the first element to set.</param>
        </member>
        <member name="M:System.ArrayEx.SetValue``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Sets all elements of this list to the same specified value.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">This list.</param>
            <param name="value">All elements in the list will be assigned this value.</param>
        </member>
        <member name="M:System.ArrayEx.SetValue``1(System.Collections.Generic.LinkedList{``0},``0)">
            <summary>
            Sets all elements of this linked list to the same specified value.
            </summary>
            <typeparam name="T">The type of elements in the linked list.</typeparam>
            <param name="list">This linked list.</param>
            <param name="value">All elements in the linked list will be assigned this value.</param>
        </member>
        <member name="M:System.ArrayEx.ToBytes(System.Collections.Generic.IList{System.Object})">
            <summary>
            Converts an array/list of objects to a byte array. Supported objects include
            <para>1. all system integers, numbers and their array/list (except System.Decimal and its array/list);</para>
            <para>2. System.Char and its array/list;</para>
            <para>3. System.DateTime and its array/list;</para>
            <para>4. System.String and its array/list (encoded by Unicode); </para>
            <para>5. a struct whose size is able to be determined by System.Runtime.InteropServices.Marshal.SizeOf method (however, array/list of structs is not supported);</para>
            <para>6. any other type that has a method named ToBytes.</para>
            <para>!!! This is intended to be an one-way conversion and the byte array cannot be converted back to objects 
            unless you know all the details of the byte array's format.</para>
            </summary>
            <param name="array">The current array/list of objects.</param>
            <returns></returns>
        </member>
        <member name="M:System.ArrayEx.ToBytes(System.Collections.Generic.IList{System.SByte})">
            <summary>
            Converts the current array/list of System.SBytes to its equivalent byte array representation.
            </summary>
            <param name="array">The current array/list of System.SBytes.</param>
            <returns>A byte array converted from the current System.SByte array/list.</returns>
        </member>
        <member name="M:System.ArrayEx.ToBytes(System.Collections.Generic.IList{System.SByte},System.Boolean)">
            <summary>
            Converts the current array/list of System.SBytes to its equivalent byte array representation.
            </summary>
            <param name="array">The current array/list of System.SBytes.</param>
            <param name="safe">Specifies whether the safe .NET class System.IO.MemoryStream should be used to perform the conversion rather than unsafe pointers.</param>
            <returns>A byte array converted from the current System.SByte array/list.</returns>
        </member>
        <member name="M:System.ArrayEx.ToBytes(System.Collections.Generic.IList{System.Char})">
            <summary>
            Converts the current array/list of System.Chars to its equivalent byte array representation.
            </summary>
            <param name="array">The current array/list of System.Chars.</param>
            <returns>A byte array converted from the current System.Char array/list.</returns>
        </member>
        <member name="M:System.ArrayEx.ToBytes(System.Collections.Generic.IList{System.Char},System.Boolean)">
            <summary>
            Converts the current array/list of System.Chars to its equivalent byte array representation.
            </summary>
            <param name="array">The current array/list of System.SBytes.</param>
            <param name="safe">Specifies whether the safe .NET class System.IO.MemoryStream should be used to perform the conversion rather than unsafe pointers.</param>
            <returns>A byte array converted from the current System.Char array/list.</returns>
        </member>
        <member name="M:System.ArrayEx.ToBytes(System.Collections.Generic.IList{System.Int16})">
            <summary>
            Converts the current array/list of System.Int16 integers to its equivalent byte array representation.
            </summary>
            <param name="array">The current array/list of System.Int16 integers.</param>
            <returns>A byte array converted from the current System.Int16 array/list.</returns>
        </member>
        <member name="M:System.ArrayEx.ToBytes(System.Collections.Generic.IList{System.Int16},System.Boolean)">
            <summary>
            Converts the current array/list of System.Int16 integers to its equivalent byte array representation.
            </summary>
            <param name="array">The current array/list of System.Int16 integers.</param>
            <param name="safe">Specifies whether the safe .NET class System.IO.MemoryStream should be used to perform the conversion rather than unsafe pointers.</param>
            <returns>A byte array converted from the current System.Int16 array/list.</returns>
        </member>
        <member name="M:System.ArrayEx.ToBytes(System.Collections.Generic.IList{System.UInt16})">
            <summary>
            Converts the current array/list of System.UInt16 integers to its equivalent byte array representation.
            </summary>
            <param name="array">The current array/list of System.UInt16 integers.</param>
            <returns>A byte array converted from the current System.UInt16 array/list.</returns>
        </member>
        <member name="M:System.ArrayEx.ToBytes(System.Collections.Generic.IList{System.UInt16},System.Boolean)">
            <summary>
            Converts the current array/list of System.UInt16 integers to its equivalent byte array representation.
            </summary>
            <param name="array">The current array/list of System.UInt16 integers.</param>
            <param name="safe">Specifies whether the safe .NET class System.IO.MemoryStream should be used to perform the conversion rather than unsafe pointers.</param>
            <returns>A byte array converted from the current System.UInt16 array/list.</returns>
        </member>
        <member name="M:System.ArrayEx.ToBytes(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Converts the current array/list of System.Int32 integers to its equivalent byte array representation.
            </summary>
            <param name="array">The current array/list of System.Int32 integers.</param>
            <returns>A byte array converted from the current System.Int32 array/list.</returns>
        </member>
        <member name="M:System.ArrayEx.ToBytes(System.Collections.Generic.IList{System.Int32},System.Boolean)">
            <summary>
            Converts the current array/list of System.Int32 integers to its equivalent byte array representation.
            </summary>
            <param name="array">The current array/list of System.Int32 integers.</param>
            <param name="safe">Specifies whether the safe .NET class System.IO.MemoryStream should be used to perform the conversion rather than unsafe pointers.</param>
            <returns>A byte array converted from the current System.Int32 array/list.</returns>
        </member>
        <member name="M:System.ArrayEx.ToBytes(System.Collections.Generic.IList{System.UInt32})">
            <summary>
            Converts the current array/list of System.UInt32 integers to its equivalent byte array representation.
            </summary>
            <param name="array">The current array/list of System.UInt32 integers.</param>
            <returns>A byte array converted from the current System.UInt32 array/list.</returns>
        </member>
        <member name="M:System.ArrayEx.ToBytes(System.Collections.Generic.IList{System.UInt32},System.Boolean)">
            <summary>
            Converts the current array/list of System.UInt32 integers to its equivalent byte array representation.
            </summary>
            <param name="array">The current array/list of System.UInt32 integers.</param>
            <param name="safe">Specifies whether the safe .NET class System.IO.MemoryStream should be used to perform the conversion rather than unsafe pointers.</param>
            <returns>A byte array converted from the current System.UInt32 array/list.</returns>
        </member>
        <member name="M:System.ArrayEx.ToBytes(System.Collections.Generic.IList{System.Int64})">
            <summary>
            Converts the current array/list of System.Int64 integers to its equivalent byte array representation.
            </summary>
            <param name="array">The current array/list of System.Int64 integers.</param>
            <returns>A byte array converted from the current System.Int64 array/list.</returns>
        </member>
        <member name="M:System.ArrayEx.ToBytes(System.Collections.Generic.IList{System.Int64},System.Boolean)">
            <summary>
            Converts the current array/list of System.Int64 integers to its equivalent byte array representation.
            </summary>
            <param name="array">The current array/list of System.Int64 integers.</param>
            <param name="safe">Specifies whether the safe .NET class System.IO.MemoryStream should be used to perform the conversion rather than unsafe pointers.</param>
            <returns>A byte array converted from the current System.Int64 array/list.</returns>
        </member>
        <member name="M:System.ArrayEx.ToBytes(System.Collections.Generic.IList{System.UInt64})">
            <summary>
            Converts the current array/list of System.UInt64 integers to its equivalent byte array representation.
            </summary>
            <param name="array">The current array/list of System.UInt64 integers.</param>
            <returns>A byte array converted from the current System.UInt64 array/list.</returns>
        </member>
        <member name="M:System.ArrayEx.ToBytes(System.Collections.Generic.IList{System.UInt64},System.Boolean)">
            <summary>
            Converts the current array/list of System.UInt64 integers to its equivalent byte array representation.
            </summary>
            <param name="array">The current array/list of System.UInt64 integers.</param>
            <param name="safe">Specifies whether the safe .NET class System.IO.MemoryStream should be used to perform the conversion rather than unsafe pointers.</param>
            <returns>A byte array converted from the current System.UInt64 array/list.</returns>
        </member>
        <member name="M:System.ArrayEx.ToBytes(System.Collections.Generic.IList{System.Single})">
            <summary>
            Converts the current array/list of System.Singles to its equivalent byte array representation.
            </summary>
            <param name="array">The current array/list of System.Singles.</param>
            <returns>A byte array converted from the current System.Single array/list.</returns>
        </member>
        <member name="M:System.ArrayEx.ToBytes(System.Collections.Generic.IList{System.Single},System.Boolean)">
            <summary>
            Converts the current array/list of System.Singles to its equivalent byte array representation.
            </summary>
            <param name="array">The current array/list of System.Singles.</param>
            <param name="safe">Specifies whether the safe .NET class System.IO.MemoryStream should be used to perform the conversion rather than unsafe pointers.</param>
            <returns>A byte array converted from the current System.Single array/list.</returns>
        </member>
        <member name="M:System.ArrayEx.ToBytes(System.Collections.Generic.IList{System.Double})">
            <summary>
            Converts the current array/list of System.Doubles to its equivalent byte array representation.
            </summary>
            <param name="array">The current array/list of System.Doubles.</param>
            <returns>A byte array converted from the current System.Double array/list.</returns>
        </member>
        <member name="M:System.ArrayEx.ToBytes(System.Collections.Generic.IList{System.Double},System.Boolean)">
            <summary>
            Converts the current array/list of System.Doubles to its equivalent byte array representation.
            </summary>
            <param name="array">The current array/list of System.Doubles.</param>
            <param name="safe">Specifies whether the safe .NET class System.IO.MemoryStream should be used to perform the conversion rather than unsafe pointers.</param>
            <returns>A byte array converted from the current System.Double array/list.</returns>
        </member>
        <member name="M:System.ArrayEx.ToBytes(System.Collections.Generic.IList{System.DateTime})">
            <summary>
            Converts the current array/list of System.DateTimes to its equivalent byte array representation.
            </summary>
            <param name="array">The current array/list of System.DateTimes.</param>
            <returns>A byte array converted from the current System.DateTime array/list.</returns>
        </member>
        <member name="M:System.ArrayEx.ToBytes(System.Collections.Generic.IList{System.DateTime},System.Boolean)">
            <summary>
            Converts the current array/list of System.DateTimes to its equivalent byte array representation.
            </summary>
            <param name="array">The current array/list of System.DateTimes.</param>
            <param name="safe">Specifies whether the safe .NET class System.IO.MemoryStream should be used to perform the conversion rather than unsafe pointers.</param>
            <returns>A byte array converted from the current System.DateTime array/list.</returns>
        </member>
        <member name="M:System.ArrayEx.ToDictionary``2(``0[],``1[])">
            <summary>
            Converts an array of <typeparamref ref="TKey"/> objects into a <see cref="T:System.Collections.Generic.Dictionary`2"/> using the current array as keys
            and <paramref name="values"/> as corresponding values.
            </summary>
            <typeparam name="TKey">The type of objects in this array. They are used as keys in the returned dictionary.</typeparam>
            <typeparam name="TValue">The type of objects as values in the returned dictionary.</typeparam>
            <param name="keys">The current array as keys.</param>
            <param name="values">The values to be associated with the keys in the returned dictionary.</param>
            <returns>A dictionary with key-value pairs from the current array and the provided <paramref name="values"/>.</returns>
        </member>
        <member name="M:System.ArrayEx.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Converts a sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> into a <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="keyValueCollection">The key/value sequence.</param>
            <returns>A new <see cref="T:System.Collections.Generic.Dictionary`2"/> containing the key/value sequence.</returns>
        </member>
        <member name="M:System.ArrayEx.ToDictionary``2(System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Converts an enumerator of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> objects into a <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="enumerator">The enumerator of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> objects.</param>
            <returns>A new <see cref="T:System.Collections.Generic.Dictionary`2"/> containing all key/value pairs generated by the provided enumerator.</returns>
        </member>
        <member name="M:System.ArrayEx.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Pair{``0,``1}})">
            <summary>
            Converts a sequence of <see cref="T:System.Pair`2"/> into a <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="keyValueCollection">A sequence of pairs where the first item of each pair is used as the key to index the second item.</param>
            <returns>A new <see cref="T:System.Collections.Generic.Dictionary`2"/> containing the key/value sequence.</returns>
        </member>
        <member name="M:System.ArrayEx.ToDictionary``2(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}})">
            <summary>
            Converts a sequence of (<typeparamref name="TKey"/>,<typeparamref name="TValue"/>) tuples into a <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="keyValueCollection">The key/value sequence.</param>
            <returns>A new <see cref="T:System.Collections.Generic.Dictionary`2"/> containing the key/value sequence.</returns>
        </member>
        <member name="M:System.ArrayEx.ToValueIndexedDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Returns a new <see cref="T:System.Collections.Generic.Dictionary`2"/> object that copies key-value pairs from the current dictionary with key and value of each entry exchanged.
            </summary>
            <typeparam name="TKey">The type of the key in the current dictionary.</typeparam>
            <typeparam name="TValue">The type of the value in the current dictionary.</typeparam>
            <param name="dict">The current dictionary.</param>
            <returns>A new <see cref="T:System.Collections.Generic.Dictionary`2"/> object that copies key-value pairs from the current dictionary with key and value of each entry exchanged.</returns>
        </member>
        <member name="M:System.ArrayEx.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Converts a sequence of objects with <c>Item1</c> and <c>Item2</c> fields or properties into a <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="keyValueCollection">A sequence of object with <c>Item1</c> and <c>Item2</c> fields or properties, where the <c>Item1</c> of each pair is used as the key to index the <c>Item2</c>.</param>
            <returns>A new <see cref="T:System.Collections.Generic.Dictionary`2"/> containing the key/value sequence.</returns>
        </member>
        <member name="M:System.ArrayEx.ToValueIndexedDictionary``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``1,``0})">
            <summary>
            Copies all entries in the current dictionary to another dictionary with the key and value of each entry exchanged.
            </summary>
            <typeparam name="TKey">The type of the key in the current dictionary.</typeparam>
            <typeparam name="TValue">The type of the value in the current dictionary.</typeparam>
            <param name="dict">The current dictionary.</param>
            <param name="target">Each key-value pair of the current dictionary will be copied to this target dictionary with key and value exchanged.</param>
        </member>
        <member name="M:System.ArrayEx.ToFirstItemIndexedDictionary``3(System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2}})">
            <summary>
            Returns a new <see cref="T:System.Collections.Generic.Dictionary`2" /> object that uses the first item of each of the tuple in the current dictionary as the key of the new dictionary, while it copies corresponding key of the current dictionary as the value for the new dictionary.
            </summary>
            <typeparam name="TKey">The type of the key in the current dictionary.</typeparam>
            <typeparam name="TValue1">The type of the first item of the tuple value in the current dictionary.</typeparam>
            <typeparam name="TValue2">The type of the second item of the tuple value in the current dictionary.</typeparam>
            <param name="dict">The current dictionary.</param>
            <returns>A new <see cref="T:System.Collections.Generic.Dictionary`2" /> object that uses the first item of each tuple in the current dictionary as the keys to index keys in the current dictionary.</returns>
        </member>
        <member name="M:System.ArrayEx.ToFirstItemIndexedDictionary``4(System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3}})">
            <summary>
            Returns a new <see cref="T:System.Collections.Generic.Dictionary`2" /> object that uses the first item of each of the tuple in the current dictionary as the key of the new dictionary, while it copies corresponding key of the current dictionary as the value for the new dictionary.
            </summary>
            <typeparam name="TKey">The type of the key in the current dictionary.</typeparam>
            <typeparam name="TValue1">The type of the first item of the tuple value in the current dictionary.</typeparam>
            <typeparam name="TValue2">The type of the second item of the tuple value in the current dictionary.</typeparam>
            <typeparam name="TValue3">The type of the third item of the tuple value in the current dictionary.</typeparam>
            <param name="dict">The current dictionary.</param>
            <returns>A new <see cref="T:System.Collections.Generic.Dictionary`2" /> object that uses the first item of each tuple in the current dictionary as the keys to index keys in the current dictionary.</returns>
        </member>
        <member name="M:System.ArrayEx.ToSecondItemIndexedDictionary``3(System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2}})">
            <summary>
            Returns a new <see cref="T:System.Collections.Generic.Dictionary`2" /> object that uses the second item of each of the tuple in the current dictionary as the key of the new dictionary, while it copies corresponding key of the current dictionary as the value for the new dictionary.
            </summary>
            <typeparam name="TKey">The type of the key in the current dictionary.</typeparam>
            <typeparam name="TValue1">The type of the first item of the tuple value in the current dictionary.</typeparam>
            <typeparam name="TValue2">The type of the second item of the tuple value in the current dictionary.</typeparam>
            <param name="dict">The current dictionary.</param>
            <returns>A new <see cref="T:System.Collections.Generic.Dictionary`2" /> object that uses the second item of each tuple in the current dictionary as the keys to index keys in the current dictionary.</returns>
        </member>
        <member name="M:System.ArrayEx.ToSecondItemIndexedDictionary``4(System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3}})">
            <summary>
            Returns a new <see cref="T:System.Collections.Generic.Dictionary`2" /> object that uses the second item of each of the tuple in the current dictionary as the key of the new dictionary, while it copies corresponding key of the current dictionary as the value for the new dictionary.
            </summary>
            <typeparam name="TKey">The type of the key in the current dictionary.</typeparam>
            <typeparam name="TValue1">The type of the first item of the tuple value in the current dictionary.</typeparam>
            <typeparam name="TValue2">The type of the second item of the tuple value in the current dictionary.</typeparam>
            <typeparam name="TValue3">The type of the third item of the tuple value in the current dictionary.</typeparam>
            <param name="dict">The current dictionary.</param>
            <returns>A new <see cref="T:System.Collections.Generic.Dictionary`2" /> object that uses the second item of each tuple in the current dictionary as the keys to index keys in the current dictionary.</returns>
        </member>
        <member name="M:System.ArrayEx.ToThirdItemIndexedDictionary``4(System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3}})">
            <summary>
            Returns a new <see cref="T:System.Collections.Generic.Dictionary`2" /> object that uses the third item of each of the tuple in the current dictionary as the key of the new dictionary, while it copies corresponding key of the current dictionary as the value for the new dictionary.
            </summary>
            <typeparam name="TKey">The type of the key in the current dictionary.</typeparam>
            <typeparam name="TValue1">The type of the first item of the tuple value in the current dictionary.</typeparam>
            <typeparam name="TValue2">The type of the second item of the tuple value in the current dictionary.</typeparam>
            <typeparam name="TValue3">The type of the third item of the tuple value in the current dictionary.</typeparam>
            <param name="dict">The current dictionary.</param>
            <returns>A new <see cref="T:System.Collections.Generic.Dictionary`2" /> object that uses the third item of each tuple in the current dictionary as the keys to index keys in the current dictionary.</returns>
        </member>
        <member name="M:System.ArrayEx.TryGetValue``2(System.Collections.Generic.IDictionary{``0,System.Object},``0,``1@)">
            <summary>
            Gets the value associated with the specified <paramref name="key"/> and converts it to the type specified by <typeparamref name="TValue"/>.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type to which the retrieved value is converted.</typeparam>
            <param name="dict">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="value">Outputs the retrieved and converted value. If <paramref name="key"/> does not exist, the default value of <typeparamref name="TValue"/> will be returned. </param>
            <returns><c>true</c> if <paramref name="key"/> exists in the dictionary, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.ArrayEx.TryGetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Tries to get the the value associated with the specified key. If the specified key does not exists, <paramref name="defaultValue"/> will be returned.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dict">The dictionary.</param>
            <param name="key">The key whose value to get.</param>
            <param name="defaultValue">The default value to be returned if the specified <paramref name="key"/> does not exist in the dictionary.</param>
            <returns>The value associated with the specified key, if the key is found; otherwise, <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:System.ArrayEx.TryGetValues``2(System.Collections.Generic.IDictionary{``0,``1[]},``0[],System.Int32)">
            <summary>
            Tries to get the the values associated with the specified <paramref name="keys" /> and at specified <paramref name="index" /> of the value array. Keys that do not exist in the dictionary are ignored.
            </summary>
            <typeparam name="TKey">The type of keys.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dict">The dictionary.</param>
            <param name="keys">The keys whose values to get.</param>
            <param name="index">The index of the value in the value array.</param>
            <returns>The values associated with the specified specified <paramref name="keys" /> and at the specified <paramref name="index" /> of the value array, if they exist in the dictionary.</returns>
        </member>
        <member name="M:System.ArrayEx.TryGetValues``2(System.Collections.Generic.IDictionary{``0,``1},``0[])">
            <summary>
            Tries to get the the values associated with the specified <paramref name="keys"/>. Keys that do not exist in the dictionary are ignored.
            </summary>
            <typeparam name="TKey">The type of keys.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dict">The dictionary.</param>
            <param name="keys">The keys whose values to get.</param>
            <returns>The values associated with the specified specified <paramref name="keys" />, if they exist in the dictionary.</returns>
        </member>
        <member name="M:System.ArrayEx.Solve``1(System.Collections.Generic.IDictionary{``0,System.Object},``0)">
            <summary>
            Tries to solve the specified <paramref name="key" />. Returns <paramref name="key" /> itself if it cannot be solved.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="dict">The dictionary.</param>
            <param name="key">The key to solve.</param>
            <remarks>This method continues to try to retrieve object if the specified <paramref name="key" /> refers to an object of type <typeparamref name="TKey" />. For example, if the dictionary contains three pairs "(key, obj1)", "(obj1, obj2)" and "(obj2, obj3)", then solving "key" will return "obj3"; if the dictionary contains two pairs "(key, obj1)", "(obj2, obj3)", then solving "key" will return "obj1".</remarks>
            <returns>The solved object, or the <paramref name="key" /> itself if it cannot be solved.</returns>
        </member>
        <member name="M:System.ArrayEx.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Adds an element with the provided key if the key does not exist in the current dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dict">The dictionary.</param>
            <param name="key">The key of the element to add.</param>
            <param name="value">The element to add with the <paramref name="key"/>.</param>
            <returns><c>true</c> if the provided <paramref name="key"/> does not exist in the dictionary and the <paramref name="value"/> is added to the dictionary; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.ArrayEx.SetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Adds an element with the provided key if the key does not exist, or overwrites an existing element associated with the specified key. The operation is the same as <see cref="M:System.ArrayEx.Update``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)"/>, but the return value is different.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dict">The dictionary.</param>
            <param name="key">The key of the element to add or overwrite.</param>
            <param name="value">The element to add or overwrite with the <paramref name="key"/>.</param>
            <returns><c>true</c> if an old value with the specified <paramref name="key"/> already exists and is replaced by the provided <paramref name="value"/>; <c>false</c> if the <paramref name="key"/> does not exist and a new <paramref name="key"/>-<paramref name="value"/> pair is created.</returns>
        </member>
        <member name="M:System.ArrayEx.Update``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Adds an element with the provided key if the key does not exist, or overwrites an existing element associated with the specified key.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dict">The dictionary.</param>
            <param name="key">The key of the element to add or overwrite.</param>
            <param name="value">The element to add or overwrite with the <paramref name="key"/>.</param>
            <returns><c>true</c> if an old value with the specified <paramref name="key"/> already exists and is replaced by the provided <paramref name="value"/>, or if the <paramref name="key"/> does not exist and a new <paramref name="key"/>-<paramref name="value"/> pair is created; <c>false</c> if the dictionary stays unchanged.</returns>
        </member>
        <member name="M:System.ArrayEx.Update``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Func{``1,``1,System.Boolean})">
            <summary>
            Adds an element with the provided key if the key does not exist, or overwrites an existing element associated with the specified key.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dict">The dictionary.</param>
            <param name="key">The key of the element to add or overwrite.</param>
            <param name="newValue">The element to add or overwrite with the <paramref name="key"/>.</param>
            <param name="updateCondition">A method that defines a condition which must be satisfied before an existing value in the dictionary is replaced by the provided new value. This method takes the existing value as first argument, the <paramref name="newValue"/> as the second argument, and outputs a <see cref="T:System.Boolean"/> value indicating if the condition is satisfied.</param>
            <returns>A <see cref="F:System.UpdateResult.Added"/> if a new key-value pair is created; <see cref="F:System.UpdateResult.Updated"/> if the existing value of the same <paramref name="key"/> is updated by the <paramref name="newValue"/>; otherwise <see cref="F:System.UpdateResult.NoChange"/>.</returns>
        </member>
        <member name="M:System.ArrayEx.Add``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Adds the specified key-value pair collection to this dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dict">The dictionary.</param>
            <param name="keyValueCollection">The key-value collection that contains <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to be added.</param>
        </member>
        <member name="M:System.ArrayEx.Add``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Adds the key-value pairs enumerated by the specified enumerator to this dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dict">The dictionary.</param>
            <param name="enumerator">The enumerator that enumerates key-value pairs.</param>
        </member>
        <member name="M:System.ArrayEx.Add``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{``1,``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Adds the specified collection of values to this dictionary. The key of each value is generated by <paramref name="keyGenerator"/>.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dict">The dictionary.</param>
            <param name="keyGenerator">The key generator that produces key for each value in <paramref name="valueCollection"/>.</param>
            <param name="valueCollection">The collection of values to be added to this dictionary.</param>
            <exception cref="T:System.ArgumentNullException">Occurs if <paramref name="keyGenerator"/> is <c>null</c>.</exception>
        </member>
        <member name="M:System.ArrayEx.Add``2(System.Collections.Generic.IDictionary{``0,``1},``0[],``1[])">
            <summary>
            Adds the specified <paramref name="keys"/> and <paramref name="values"/> to this dictionary. If the sizes of these two arrays are not equal, the the smaller size will be used.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dict">The dictionary.</param>
            <param name="keys">The keys to be added. The element of index <c>i</c> will be used as the key of <c>values[i]</c>.</param>
            <param name="values">The values to be added. The element of index <c>i</c> will be keyed by <c>keys[i]</c>.</param>
        </member>
        <member name="M:System.ArrayEx.AddWithDuplicationCheck``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Pair{``0,``1}})">
            <summary>
            Adds the specified key-value pair collection to this dictionary. Duplicate keys will be ignored.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dict">The dictionary.</param>
            <param name="keyValueCollection">The key-value collection that contains <see cref="T:System.Pair`2"/> to be added.</param>
        </member>
        <member name="M:System.ArrayEx.AddWithDuplicationCheck``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Adds the specified key-value pair collection to this dictionary. Duplicate keys will be ignored.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dict">The dictionary.</param>
            <param name="keyValueCollection">The key-value collection that contains <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to be added.</param>
        </member>
        <member name="M:System.ArrayEx.AddWithDuplicationCheck``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Adds the key-value pairs enumerated by the specified enumerator to this dictionary. Duplicate keys will be ignored.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dict">The dictionary.</param>
            <param name="enumerator">The enumerator that enumerates key-value pairs.</param>
        </member>
        <member name="M:System.ArrayEx.ToKeysAndValues``2(System.Collections.Generic.IDictionary{``0,``1},``0[]@,``1[]@)">
            <summary>
            Outputs one array <paramref name="keys"/> that contains all keys in the dictionary, and the other array <paramref name="values"/> that contains all values in the dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dict">The dictionary.</param>
            <param name="keys">Outputs an array keys of this dictionary.</param>
            <param name="values">Outputs an array of values of this dictionary.</param>
        </member>
        <member name="M:System.ArrayEx.Index``1(System.Collections.Generic.IDictionary{``0,System.Int32},System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Use the current dictionary to index the specified sequence of type <typeparamref name="TKey" /> and returns the resulting indices.
            </summary>
            <typeparam name="TKey">The key type of the dictionary.</typeparam>
            <param name="dict">A dictionary with <typeparamref name="TKey" /> as its key type and <see cref="T:System.Int32" /> as its value type.</param>
            <param name="sequence">The sequence of objects to index.</param>
            <param name="baseIndex">The base index. The default is zero.</param>
            <returns>A sequence of indices for objects in the input <paramref name="sequence" />.</returns>
        </member>
        <member name="M:System.ArrayEx.Index``1(System.Collections.Generic.IDictionary{``0,System.Int32},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            Use the current dictionary to index the specified sequence of type <typeparamref name="TKey" /> and the resulting indices are appended to the specified <paramref name="outputList" />.
            </summary>
            <typeparam name="TKey">The key type of the dictionary.</typeparam>
            <param name="dict">A dictionary with <typeparamref name="TKey" /> as its key type and <see cref="T:System.Int32" /> as its value type.</param>
            <param name="sequence">The sequence of objects to index.</param>
            <param name="outputList">The list where resulting indices are appended to.</param>
            <param name="baseIndex">The base index. The default is zero.</param>
        </member>
        <member name="M:System.ArrayEx.Index``1(System.Collections.Generic.IDictionary{``0,System.Int32},``0,System.Int32)">
            <summary>
            Use the current dictionary to index the specified <paramref name="key" />. If the <paramref name="key" /> does not exist in the current dictionary, the the number of keys in the current <see cref="P:System.Collections.Generic.IDictionary`2.Keys" /> will be assigned as the integer index of the provided <paramref name="key" />, and the key-index pair will be saved in the dictionary; otherwise the dictionary is unmodified.
            </summary>
            <typeparam name="TKey">The type of the t <paramref name="key" />.</typeparam>
            <param name="dict">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="baseIndex">The base index. The default is zero.</param>
            <returns>The integer index of <paramref name="key" />.</returns>
        </member>
        <member name="M:System.ArrayEx.Stat``1(System.Collections.Generic.IDictionary{``0,System.Int32},``0,System.Int32)">
            <summary>
            Increaces the counting for the specified <paramref name="key" />. If the <paramref name="key" /> does not exist in the current dictionary, a new entry will be added.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="dict">The current counting dictionary.</param>
            <param name="key">The key whose count is to be increased.</param>
            <param name="increament">The increament, default is <c>1</c>.</param>
            <returns>The current count for <paramref name="key"/> in this counting dictionary.</returns>
        </member>
        <member name="M:System.ArrayEx.StatAndGet``1(System.Collections.Generic.IDictionary{``0,System.Int32},``0,System.Int32)">
            <summary>
            Increaces the counting for the specified <paramref name="key" /> and returns the count after the increment. If the <paramref name="key" /> does not exist in the current dictionary, a new entry will be added.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="dict">The current counting dictionary.</param>
            <param name="key">The key whose count is to be increased.</param>
            <param name="increament">The increament, default is <c>1</c>.</param>
            <returns>The current count for <paramref name="key"/> in this counting dictionary.</returns>
        </member>
        <member name="M:System.ArrayEx.Stat``1(System.Collections.Generic.IDictionary{``0,System.Pair{System.Int32}},``0,System.ValueTuple{System.Int32,System.Int32})">
            <summary>
            Increaces the counting for the specified <paramref name="key"/>. Adds the <paramref name="increament"/> arithmetically to the <see cref="T:System.Pair`1"/> associated with specified <paramref name="key"/>. If the <paramref name="key"/> does not exist in the current dictionary, a new entry will be added.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="dict">The current counting dictionary.</param>
            <param name="key">The key whose count is to be increased.</param>
            <param name="increament">The increament to be added to the <see cref="T:System.Pair`1"/> associated with specified <paramref name="key"/>.</param>
        </member>
        <member name="M:System.ArrayEx.Stat``1(System.Collections.Generic.IDictionary{``0,System.ValueTuple{System.Double,System.Double}},``0,System.ValueTuple{System.Double,System.Double})">
            <summary>
            Increaces the counting for the specified <paramref name="key"/>. Adds the <paramref name="increament"/> arithmetically to the <see cref="T:System.Pair`1"/> associated with specified <paramref name="key"/>. If the <paramref name="key"/> does not exist in the current dictionary, a new entry will be added.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="dict">The current counting dictionary.</param>
            <param name="key">The key whose count is to be increased.</param>
            <param name="increament">The increament to be added to the <see cref="T:System.Double"/> tuple associated with specified <paramref name="key"/>.</param>
        </member>
        <member name="M:System.ArrayEx.StatItem1``1(System.Collections.Generic.IDictionary{``0,System.Pair{System.Int32}},``0,System.Int32)">
            <summary>
            Increaces the first counting for the specified <paramref name="key"/>. Adds the <paramref name="increament"/> to the <c>Item1</c> property of the <see cref="T:System.Pair`1"/> associated with specified <paramref name="key"/>. If the <paramref name="key"/> does not exist in the current dictionary, a new entry will be added.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="dict">The current counting dictionary.</param>
            <param name="key">The key whose first count is to be increased.</param>
            <param name="increament">The increament to the count.</param>
        </member>
        <member name="M:System.ArrayEx.StatItem2``1(System.Collections.Generic.IDictionary{``0,System.Pair{System.Int32}},``0,System.Int32)">
            <summary>
            Increaces the second counting for the specified <paramref name="key"/>. Adds the <paramref name="increament"/> to the <c>Item2</c> property of the <see cref="T:System.Pair`1"/> associated with specified <paramref name="key"/>. If the <paramref name="key"/> does not exist in the current dictionary, a new entry will be added.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="dict">The current counting dictionary.</param>
            <param name="key">The key whose second count is to be increased.</param>
            <param name="increament">The increament to the count.</param>
        </member>
        <member name="M:System.ArrayEx.Stat``1(System.Collections.Generic.IDictionary{``0,System.Double},``0,System.Double)">
            <summary>
            Increaces the counting for the specified <paramref name="key"/>. If the <paramref name="key"/> does not exist in the current dictionary, a new entry will be added.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="dict">The current counting dictionary.</param>
            <param name="key">The key whose count is to be increased.</param>
            <param name="increament">The increament, default is <c>1</c>.</param>
        </member>
        <member name="M:System.ArrayEx.Stat``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Increaces the counting for the specified <paramref name="key" />. Adds the <paramref name="increament"/> arithmetically to the <see cref="T:System.Pair`2"/> associated with specified <paramref name="key"/>. If the <paramref name="key" /> does not exist in the current dictionary, a new entry will be added.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the increament.</typeparam>
            <param name="dict">The current counting dictionary.</param>
            <param name="key">The key whose count is to be increased.</param>
            <param name="increament">The increament.</param>
        </member>
        <member name="M:System.ArrayEx.MergeStat``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{``0,``1}})">
            <summary>
            Merges the countings of a sequence of dictionaries.
            </summary>
            <typeparam name="TKey">The type of the key in the counting dictionaries.</typeparam>
            <typeparam name="TValue">The type of count values in the counting dictionaries.</typeparam>
            <param name="dicts">The sequence of dictionaries to merge.</param>
            <returns>A new dictionary that merges the countings of the provided sequence of dictionaries.</returns>
        </member>
        <member name="M:System.ArrayEx.MergeStat``2(System.Collections.Generic.IEnumerable{System.Collections.IDictionary})">
            <summary>
            Merges the countings of a sequence of dictionaries.
            </summary>
            <typeparam name="TKey">The type of the key in the counting dictionaries.</typeparam>
            <typeparam name="TValue">The type of count values in the counting dictionaries.</typeparam>
            <param name="dicts">The sequence of dictionaries to merge.</param>
            <returns>A new dictionary that merges the countings of the provided sequence of dictionaries.</returns>
        </member>
        <member name="M:System.ArrayEx.Enqueue``2(System.Collections.Generic.Queue{System.Pair{``0,``1}},``0,``1)">
            <summary>
            Adds a pair of values to the end of this pair queue.
            </summary>
            <typeparam name="T1">The type of the first value in a pair.</typeparam>
            <typeparam name="T2">The type of the second value in a pair.</typeparam>
            <param name="queue">This pair queue.</param>
            <param name="value1">The first value of the pair to add.</param>
            <param name="value2">The second value of the pair to add.</param>
        </member>
        <member name="M:System.ArrayEx.Push``2(System.Collections.Generic.Stack{System.Pair{``0,``1}},``0,``1)">
            <summary>
            Inserts a pair of values at the top of this pair stack.
            </summary>
            <typeparam name="T1">The type of the first value in a pair.</typeparam>
            <typeparam name="T2">The type of the second value in a pair.</typeparam>
            <param name="queue">This pair stack.</param>
            <param name="value1">The first value of the pair to push.</param>
            <param name="value2">The second value of the pair to push.</param>
        </member>
        <member name="M:System.ArrayEx.Enqueue``2(System.Collections.Generic.Queue{System.Collections.Generic.KeyValuePair{``0,``1}},``0,``1)">
            <summary>
            Adds a key/value pair to the end of this key/value pair queue.
            </summary>
            <typeparam name="TKey">The type of the key in a key/value pair.</typeparam>
            <typeparam name="TValue">The type of the value in a key/value pair.</typeparam>
            <param name="queue">This key/value pair queue.</param>
            <param name="key">The key to add.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:System.ArrayEx.Push``2(System.Collections.Generic.Stack{System.Collections.Generic.KeyValuePair{``0,``1}},``0,``1)">
            <summary>
            Inserts a key/value pair at the top of this key/value pair stack.
            </summary>
            <typeparam name="TKey">The type of the key in a key/value pair.</typeparam>
            <typeparam name="TValue">The type of the value in a key/value pair.</typeparam>
            <param name="stack">This key/value pair stack.</param>
            <param name="key">The key to insert.</param>
            <param name="value">The value to insert.</param>
        </member>
        <member name="M:System.ArrayEx.Enqueue``1(System.Collections.Generic.Queue{``0},``0[])">
            <summary>
            Adds an array of objects to the end of the <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the queue.</typeparam>
            <param name="queue">This queue.</param>
            <param name="items">The array of objects to add to the <see cref="T:System.Collections.Generic.Queue`1"/>.</param>
        </member>
        <member name="M:System.ArrayEx.Enqueue``1(System.Collections.Generic.Queue{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a sequence of objects to the end of the <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the queue.</typeparam>
            <param name="queue">This queue.</param>
            <param name="items">The sequence of objects to add to the <see cref="T:System.Collections.Generic.Queue`1"/>.</param>
        </member>
        <member name="M:System.ArrayEx.Dequeue``1(System.Collections.Generic.Queue{``0},System.Int32)">
            <summary>
            Removes and returns the object at the beginning of the <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the queue.</typeparam>
            <param name="queue">This queue.</param>
            <param name="count">The number of objects to be removed from the beginning of the queue.</param>
            <returns>The objects that are removed from the beginning of the <see cref="T:System.Collections.Generic.Queue`1"/>.</returns>
        </member>
        <member name="M:System.ArrayEx.Push``1(System.Collections.Generic.Stack{``0},``0[])">
            <summary>
            Inserts objects at the top of the <see cref="T:System.Collections.Generic.Stack`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the stack.</typeparam>
            <param name="stack">This stack.</param>
            <param name="items">The objects to push onto the <see cref="T:System.Collections.Generic.Stack`1"/>.</param>
        </member>
        <member name="M:System.ArrayEx.Pop``1(System.Collections.Generic.Stack{``0},System.Int32)">
            <summary>
            Removes and returns the objects at the top of the <see cref="T:System.Collections.Generic.Stack`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the stack.</typeparam>
            <param name="stack">This stack.</param>
            <param name="count">The number of objects to be removed from the top of the stack.</param>
            <returns>The objects removed from the top of the <see cref="T:System.Collections.Generic.Stack`1"/>.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:System.CachedEnumerator`2" -->
        <member name="M:System.CachedEnumerator`2.#ctor(System.Collections.Generic.IEnumerator{`0},System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:System.CachedEnumerator`2"/> class.
            </summary>
            <param name="enumeratorToCache">An <see cref="T:System.Collections.Generic.IEnumerator`1"/> to cache. DO NOT use this enumerator after it is cached, use the created cached enumerator INSTEAD.</param>
            <param name="converter">Provides a method that converts each yield of the original enumerator to another data type. This argument can be <c>null</c>, indicating the implicit conversion is used.</param>
            <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="enumeratorToCache"/> is <c>null</c>.</exception>
        </member>
        <member name="M:System.CachedEnumerator`2.#ctor(System.Collections.IEnumerator,System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:System.CachedEnumerator`2"/> class.
            </summary>
            <param name="enumeratorToCache">An <see cref="T:System.Collections.IEnumerator"/> to cache. NOTE that this enumerator must yield objects of type <c>T1</c>, and DO NOT use this enumerator after it is cached, use the created cached enumerator INSTEAD.</param>
            <param name="converter">Provides a method that converts each yield of the original enumerator to another data type. This argument can be <c>null</c>, indicating the implicit conversion is used.</param>
            <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="enumeratorToCache"/> is <c>null</c>.</exception>
        </member>
        <member name="M:System.CachedEnumerator`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:System.CachedEnumerator`2.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The current.</value>
            <exception cref="T:System.InvalidOperationException">Occurs when this property is accessed before <see cref="M:System.CachedEnumerator`2.MoveNext"/> is called.</exception>
            <returns>The element in the collection at the current position of the enumerator.</returns>
            <remarks>After an enumerator is created, the <see cref="M:System.CachedEnumerator`2.MoveNext"/> method must be called to advance the enumerator to the first element of the collection before reading the value of the <see cref="P:System.CachedEnumerator`2.Current"/> property; otherwise, <see cref="P:System.CachedEnumerator`2.Current"/> is undefined and an <see cref="T:System.InvalidOperationException"/> will be thrown.</remarks>
        </member>
        <member name="M:System.CachedEnumerator`2.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:System.CachedEnumerator`2.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="T:System.DistinctRandomAlgorithms">
            <summary>
            Specifies algorithms to generate distinct random values.
            </summary>
        </member>
        <member name="F:System.DistinctRandomAlgorithms.SimpleHash">
            <summary>
            Simply uses a hashtable to prevent repetition, suitable for generating few distinct random values from a wide range.
            </summary>
        </member>
        <member name="F:System.DistinctRandomAlgorithms.Swap">
            <summary>
            Suits when the ratio of the number of generated random values to the number of all possible values is high (typically higher than 20%) 
            and the latter is not large (typically smaller than 1000).
            </summary>
        </member>
        <member name="F:System.DistinctRandomAlgorithms.SwapHash">
            <summary>
            Suits when the ratio of the number of generated random values to the number of all possible values is high (typically higher than 20%) 
            and the latter is not quite small (typically larger than 1000).
            </summary>
        </member>
        <member name="F:System.DistinctRandomAlgorithms.Auto">
            <summary>
            Let the system determine which algorithm should be applied.
            </summary>
        </member>
        <member name="T:System.ElementSearchResult`1">
            <summary>
            Stores the result of an element search (usually by the <c>IndexOfAny</c> method of an array).
            </summary>
            <typeparam name="TElement">The type of the found element stored in this object.</typeparam>
        </member>
        <member name="F:System.ElementSearchResult`1.Position">
            <summary>
            The position of the found element (property <see cref="F:System.ElementSearchResult`1.Value"/>) in the original array.
            </summary>
        </member>
        <member name="F:System.ElementSearchResult`1.Value">
            <summary>
            The found element.
            </summary>
        </member>
        <member name="F:System.ElementSearchResult`1.HitIndex">
            <summary>
            The index of the found element in the element array to search.
            </summary>
        </member>
        <member name="T:System.BitOperations">
            <summary>
            Provides methods to operate on byte or bytes at bit level.
            </summary>
        </member>
        <member name="M:System.BitOperations.ToUInt32(System.Boolean[])">
            <summary>
            Converts a section of length 32 of this boolean array to a 32-bit unsigned integer. 
            Each boolean value sequentially represents a bit in the integer, true for 1 and false for 0.
            </summary>
            <param name="values">An array of boolean values.</param>
            <returns>The created integer.</returns>
        </member>
        <member name="M:System.BitOperations.ToUInt32(System.Boolean[],System.Int32)">
            <summary>
            Converts the first 32 values of this boolean array to a 32-bit unsigned integer. 
            Each boolean value sequentially represents a bit in the integer, true for 1 and false for 0.
            </summary>
            <param name="values">An array of boolean values.</param>
            <param name="startIndex">The position in the array where the boolean value represents the leftmost bit of the byte.</param>
            <returns>The created integer.</returns>
        </member>
        <member name="M:System.BitOperations.ToByte(System.Boolean[],System.Int32)">
            <summary>
            Converts a section of length 8 of this boolean array to a 8-bit byte. 
            Each boolean value sequentially represents a bit in the byte, true for 1 and false for 0.
            </summary>
            <param name="values">An array of boolean values.</param>
            <param name="startIndex">The position in the array where the boolean value represents the leftmost bit of the byte.</param>
            <returns>The created byte.</returns>
        </member>
        <member name="M:System.BitOperations.ToByte(System.Boolean[])">
            <summary>
            Converts a the first 8 values of this boolean array to a 8-bit byte. 
            Each boolean value sequentially represents a bit in the byte, true for 1 and false for 0.
            </summary>
            <param name="values">An array of boolean values.</param>
            <returns>The created byte.</returns>
        </member>
        <member name="M:System.BitOperations.SetBit(System.UInt32*,System.Int32,System.Boolean)">
            <summary>
            Sets a bit on a 32-bit integer through a pointer.
            </summary>
            <param name="iptr">The pointer of the integer the method edits.</param>
            <param name="index">The position of the bit to be set.</param>
            <param name="value">A bool value indicating whether the bit will be set 0 or 1; true for 1 and false for 0.</param>
            <returns>The input pointer which now points to the edited value.</returns>
        </member>
        <member name="M:System.BitOperations.SetBit(System.UInt64,System.Int32,System.Boolean)">
            <summary>
            Sets a bit in a 64-bit integer. The returned value is a new integer instance carring the edited value.
            </summary>
            <param name="i">The integer the method edits.</param>
            <param name="index">The position of the bit to be set.</param>
            <param name="value">A bool value indicating whether the bit will be set 0 or 1; true for 1 and false for 0.</param>
            <returns>A new integer instance carrying the edited value.</returns>
        </member>
        <member name="M:System.BitOperations.GetBit(System.UInt64,System.Int32)">
            <summary>
            Reads a bit from a 64-bit integer.
            </summary>
            <param name="i">The integer to read from.</param>
            <param name="index">The position of the bit.</param>
            <returns>A bool value representing the value of the bit, true for 1 while false for 0.</returns>
        </member>
        <member name="M:System.BitOperations.SetBit(System.UInt32,System.Int32,System.Boolean)">
            <summary>
            Sets a bit in a 32-bit integer. The returned value is a new integer instance carring the edited value.
            </summary>
            <param name="i">The integer the method edits.</param>
            <param name="index">The position of the bit to be set.</param>
            <param name="value">A bool value indicating whether the bit will be set 0 or 1; true for 1 and false for 0.</param>
            <returns>A new integer instance carrying the edited value.</returns>
        </member>
        <member name="M:System.BitOperations.GetBit(System.UInt32,System.Int32)">
            <summary>
            Reads a bit from a 32-bit integer.
            </summary>
            <param name="i">The integer to read from.</param>
            <param name="index">The position of the bit.</param>
            <returns>A bool value representing the value of the bit, true for 1 while false for 0.</returns>
        </member>
        <member name="M:System.BitOperations.GetBit(System.Byte,System.Int32)">
            <summary>
            Reads a bit from a byte. The returned value is a bool value representing the value of the retrieved bit, <c>true</c> for 1 while <c>false</c> for 0.
            </summary>
            <param name="b">The byte to read from.</param>
            <param name="index">The index position (the right most bit is of position 0) of the bit to retrieve.</param>
            <returns>A bool value representing the value of the retrieved bit, <c>true</c> for 1 while <c>false</c> for 0.</returns>
        </member>
        <member name="M:System.BitOperations.GetBitAt0(System.Byte)">
            <summary>
            Gets the bit at position 0 (the right most bit) in a byte. The returned value is a bool value representing the value of the retrieved bit, <c>true</c> for 1 while <c>false</c> for 0.
            </summary>
            <param name="b">The byte to read from.</param>
            <returns>A bool value representing the value of the retrieved bit, <c>true</c> for 1 while <c>false</c> for 0.</returns>
        </member>
        <member name="M:System.BitOperations.GetBitAt1(System.Byte)">
            <summary>
            Gets the bit at position 1 (the right most bit is of position 0) in a byte. The returned value is a bool value representing the value of the retrieved bit, <c>true</c> for 1 while <c>false</c> for 0.
            </summary>
            <param name="b">The byte to read from.</param>
            <returns>A bool value representing the value of the retrieved bit, <c>true</c> for 1 while <c>false</c> for 0.</returns>
        </member>
        <member name="M:System.BitOperations.GetBitAt2(System.Byte)">
            <summary>
            Gets the bit at position 2 (the right most bit is of position 0) in a byte. The returned value is a bool value representing the value of the retrieved bit, <c>true</c> for 1 while <c>false</c> for 0.
            </summary>
            <param name="b">The byte to read from.</param>
            <returns>A bool value representing the value of the retrieved bit, <c>true</c> for 1 while <c>false</c> for 0.</returns>
        </member>
        <member name="M:System.BitOperations.GetBitAt3(System.Byte)">
            <summary>
            Gets the bit at position 3 (the right most bit is of position 0) in a byte. The returned value is a bool value representing the value of the retrieved bit, <c>true</c> for 1 while <c>false</c> for 0.
            </summary>
            <param name="b">The byte to read from.</param>
            <returns>A bool value representing the value of the retrieved bit, <c>true</c> for 1 while <c>false</c> for 0.</returns>
        </member>
        <member name="M:System.BitOperations.GetBitAt4(System.Byte)">
            <summary>
            Gets the bit at position 4 (the right most bit is of position 0) in a byte. The returned value is a bool value representing the value of the retrieved bit, <c>true</c> for 1 while <c>false</c> for 0.
            </summary>
            <param name="b">The byte to read from.</param>
            <returns>A bool value representing the value of the retrieved bit, <c>true</c> for 1 while <c>false</c> for 0.</returns>
        </member>
        <member name="M:System.BitOperations.GetBitAt5(System.Byte)">
            <summary>
            Gets the bit at position 5 (the right most bit is of position 0) in a byte. The returned value is a bool value representing the value of the retrieved bit, <c>true</c> for 1 while <c>false</c> for 0.
            </summary>
            <param name="b">The byte to read from.</param>
            <returns>A bool value representing the value of the retrieved bit, <c>true</c> for 1 while <c>false</c> for 0.</returns>
        </member>
        <member name="M:System.BitOperations.GetBitAt6(System.Byte)">
            <summary>
            Gets the bit at position 6 (the right most bit is of position 0) in a byte. The returned value is a bool value representing the value of the retrieved bit, <c>true</c> for 1 while <c>false</c> for 0.
            </summary>
            <param name="b">The byte to read from.</param>
            <returns>A bool value representing the value of the retrieved bit, <c>true</c> for 1 while <c>false</c> for 0.</returns>
        </member>
        <member name="M:System.BitOperations.GetBitAt7(System.Byte)">
            <summary>
            Gets the bit at position 7 (the left most bit) in a byte. The returned value is a bool value representing the value of the retrieved bit, <c>true</c> for 1 while <c>false</c> for 0.
            </summary>
            <param name="b">The byte to read from.</param>
            <returns>A bool value representing the value of the retrieved bit, <c>true</c> for 1 while <c>false</c> for 0.</returns>
        </member>
        <member name="M:System.BitOperations.GetBit(System.Byte[],System.Int32)">
            <summary>
            Gets a bit in a byte array.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="index">The position of the bit (The bit of index position 0 is the right most bit of byte at position 0 in the array) to get.</param>
            <returns><c>true</c> if the bit reads 1; <c>false</c> if the bit reads 0.</returns>
        </member>
        <member name="M:System.BitOperations.SetBit(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Sets a bit in a byte array.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="index">The position of the bit (The bit of index position 0 is the right most bit of byte at position 0 in the array) to set.</param>
            <param name="value">A bool value represents the bit value; <c>true</c> for 1 and <c>false</c> for 0.</param>
        </member>
        <member name="M:System.BitOperations.SetBit(System.Byte,System.Int32,System.Boolean)">
            <summary>
            Sets a bit in a byte. The returned value is a new byte instance carrying the edited value.
            </summary>
            <param name="b">The byte the method edits.</param>
            <param name="index">The position of the bit (the right most bit is of index position 0) to be set.</param>
            <param name="value">A bool value indicating whether the bit will be set 0 or 1; <c>true</c> for 1 and <c>false</c> for 0.</param>
            <returns>A new byte instance carrying the edited value.</returns>
        </member>
        <member name="M:System.BitOperations.SetBit(System.Byte*,System.Int32,System.Boolean)">
            <summary>
            Sets a bit directly on a byte through a byte pointer.
            </summary>
            <param name="bptr">The pointer of the byte the method edits.</param>
            <param name="index">The position (the right most bit is of index position 0) of the bit to be set.</param>
            <param name="value">A bool value indicating whether the bit will be set 0 or 1; true for 1 and false for 0.</param>
        </member>
        <member name="M:System.BitOperations.SetBitOne(System.Byte,System.Int32)">
            <summary>
            Sets a bit to 1 in a byte. The returned value is a new byte instance carrying the edited value.
            </summary>
            <param name="b">The byte the method edits.</param>
            <param name="index">The index position (the right most bit is of index 0) of the bit to be set.</param>
            <returns>A new byte instance carrying the edited value.</returns>
        </member>
        <member name="M:System.BitOperations.SetBitOneAt0(System.Byte)">
            <summary>
            Sets the bit at position 0 (the right most bit) to 1 in a byte. The returned value is a new byte instance carrying the edited value.
            </summary>
            <param name="b">The byte the method edits.</param>
            <returns>A new byte instance carrying the edited value.</returns>
        </member>
        <member name="M:System.BitOperations.SetBitOneAt1(System.Byte)">
            <summary>
            Sets the bit at position 1 (the right most bit is of position 0) to 1 in a byte. The returned value is a new byte instance carrying the edited value.
            </summary>
            <param name="b">The byte the method edits.</param>
            <returns>A new byte instance carrying the edited value.</returns>
        </member>
        <member name="M:System.BitOperations.SetBitOneAt2(System.Byte)">
            <summary>
            Sets the bit at position 2 (the right most bit is of position 0) to 1 in a byte. The returned value is a new byte instance carrying the edited value.
            </summary>
            <param name="b">The byte the method edits.</param>
            <returns>A new byte instance carrying the edited value.</returns>
        </member>
        <member name="M:System.BitOperations.SetBitOneAt3(System.Byte)">
            <summary>
            Sets the bit at position 3 (the right most bit is of position 0) to 1 in a byte. The returned value is a new byte instance carrying the edited value.
            </summary>
            <param name="b">The byte the method edits.</param>
            <returns>A new byte instance carrying the edited value.</returns>
        </member>
        <member name="M:System.BitOperations.SetBitOneAt4(System.Byte)">
            <summary>
            Sets the bit at position 4 (the right most bit is of position 0) to 1 in a byte. The returned value is a new byte instance carrying the edited value.
            </summary>
            <param name="b">The byte the method edits.</param>
            <returns>A new byte instance carrying the edited value.</returns>
        </member>
        <member name="M:System.BitOperations.SetBitOneAt5(System.Byte)">
            <summary>
            Sets the bit at position 5 (the right most bit is of position 0) to 1 in a byte. The returned value is a new byte instance carrying the edited value.
            </summary>
            <param name="b">The byte the method edits.</param>
            <returns>A new byte instance carrying the edited value.</returns>
        </member>
        <member name="M:System.BitOperations.SetBitOneAt6(System.Byte)">
            <summary>
            Sets the bit at position 6 (the right most bit is of position 0) to 1 in a byte. The returned value is a new byte instance carrying the edited value.
            </summary>
            <param name="b">The byte the method edits.</param>
            <returns>A new byte instance carrying the edited value.</returns>
        </member>
        <member name="M:System.BitOperations.SetBitOneAt7(System.Byte)">
            <summary>
            Sets the bit at position 7 (the left most bit) to 1 in a byte. The returned value is a new byte instance carrying the edited value.
            </summary>
            <param name="b">The byte the method edits.</param>
            <returns>A new byte instance carrying the edited value.</returns>
        </member>
        <member name="M:System.BitOperations.SetBitOne(System.Byte[],System.Int32)">
            <summary>
            Sets a bit to 1 in a byte array.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="index">The position of the bit (The bit of index position 0 is the right most bit of byte at position 0 in the array) to set.</param>
        </member>
        <member name="M:System.BitOperations.SetBitOne(System.Byte*,System.Int32)">
            <summary>
            Sets a bit to 1 directly on a byte through a byte pointer.
            </summary>
            <param name="bptr">The pointer of the byte the method edits.</param>
            <param name="index">The position (this right most bit is of position 0) of the bit to be set.</param>
            <returns>The input byte pointer which now points to the altered byte value.</returns>
        </member>
        <member name="M:System.BitOperations.SetBitZero(System.Byte,System.Int32)">
            <summary>
            Sets a bit to 0 in a byte. The returned value is a new byte instance carrying the edited value.
            </summary>
            <param name="b">The byte the method edits.</param>
            <param name="index">The index position (the right most bit is of position 0) of the bit to be set.</param>
            <returns>A new byte instance carrying the edited value.</returns>
        </member>
        <member name="M:System.BitOperations.SetBitZeroAt0(System.Byte)">
            <summary>
            Sets the bit at position 0 (the right most bit) to 0 in a byte. The returned value is a new byte instance carrying the edited value.
            </summary>
            <param name="b">The byte the method edits.</param>
            <returns>A new byte instance carrying the edited value.</returns>
        </member>
        <member name="M:System.BitOperations.SetBitZeroAt1(System.Byte)">
            <summary>
            Sets the bit at position 1 (the right most bit is of position 0) to 0 in a byte. The returned value is a new byte instance carrying the edited value.
            </summary>
            <param name="b">The byte the method edits.</param>
            <returns>A new byte instance carrying the edited value.</returns>
        </member>
        <member name="M:System.BitOperations.SetBitZeroAt2(System.Byte)">
            <summary>
            Sets the bit at position 2 (the right most bit is of position 0) to 0 in a byte. The returned value is a new byte instance carrying the edited value.
            </summary>
            <param name="b">The byte the method edits.</param>
            <returns>A new byte instance carrying the edited value.</returns>
        </member>
        <member name="M:System.BitOperations.SetBitZeroAt3(System.Byte)">
            <summary>
            Sets the bit at position 3 (the right most bit is of position 0) to 0 in a byte. The returned value is a new byte instance carrying the edited value.
            </summary>
            <param name="b">The byte the method edits.</param>
            <returns>A new byte instance carrying the edited value.</returns>
        </member>
        <member name="M:System.BitOperations.SetBitZeroAt4(System.Byte)">
            <summary>
            Sets the bit at position 4 (the right most bit is of position 0) to 0 in a byte. The returned value is a new byte instance carrying the edited value.
            </summary>
            <param name="b">The byte the method edits.</param>
            <returns>A new byte instance carrying the edited value.</returns>
        </member>
        <member name="M:System.BitOperations.SetBitZeroAt5(System.Byte)">
            <summary>
            Sets the bit at position 5 (the right most bit is of position 0) to 0 in a byte. The returned value is a new byte instance carrying the edited value.
            </summary>
            <param name="b">The byte the method edits.</param>
            <returns>A new byte instance carrying the edited value.</returns>
        </member>
        <member name="M:System.BitOperations.SetBitZeroAt6(System.Byte)">
            <summary>
            Sets the bit at position 6 (the right most bit is of position 0) to 0 in a byte. The returned value is a new byte instance carrying the edited value.
            </summary>
            <param name="b">The byte the method edits.</param>
            <returns>A new byte instance carrying the edited value.</returns>
        </member>
        <member name="M:System.BitOperations.SetBitZeroAt7(System.Byte)">
            <summary>
            Sets the bit at position 7 (the left most bit) to 0 in a byte. The returned value is a new byte instance carrying the edited value.
            </summary>
            <param name="b">The byte the method edits.</param>
            <returns>A new byte instance carrying the edited value.</returns>
        </member>
        <member name="M:System.BitOperations.SetBitZero(System.Byte[],System.Int32)">
            <summary>
            Sets a bit to 0 in a byte array.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="index">The position of the bit (The bit of index position 0 is the right most bit of byte at position 0 in the array) to set.</param>
        </member>
        <member name="M:System.BitOperations.SetBitZero(System.Byte*,System.Int32)">
            <summary>
            Sets a bit to 0 directly on a byte through a byte pointer.
            </summary>
            <param name="bptr">The pointer of the byte the method edits.</param>
            <param name="index">The position (the right most bit is of position 0) of the bit to be set.</param>
            <returns>The input byte pointer which now points to the altered byte value.</returns>
        </member>
        <member name="T:System.CharExtension">
            <summary>
            Provides rich methods to operate on a character instance.
            </summary>
        </member>
        <member name="M:System.CharExtension.In(System.Char,System.String)">
            <summary>
            Determines whether this Unicode character exists in the specified string instance.
            </summary>
            <param name="c">This Unicode character.</param>
            <param name="target">The string instance to search the current Unicode character.</param>
            <returns>true if the specified string instance contains the current Unicode character; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.CharExtension.NotIn(System.Char,System.String)">
            <summary>
            Returns <c>true</c> if this Unicode character exists is not contained in the specified string instance.
            </summary>
            <param name="c">This Unicode character.</param>
            <param name="target">The string instance to search the current Unicode character.</param>
            <returns><c>true</c> if the specified string instance does not contain the current Unicode character; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.CharExtension.InAny(System.Char,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether this Unicode character exists in any element of the specified string sequence.
            </summary>
            <param name="c">This Unicode character.</param>
            <param name="target">The string sequence whose elements will be searched for the current Unicode character.</param>
            <returns>true if any element of the specified string sequence contains the current Unicode character; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.CharExtension.InAll(System.Char,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether this Unicode character exists in every element of the specified string sequence.
            </summary>
            <param name="c">This Unicode character.</param>
            <param name="target">The string sequence whose elements will be searched for the current Unicode character.</param>
            <returns>true if every element of the specified string sequence contains the current Unicode character; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.CharExtension.InAny(System.Char,System.String[])">
            <summary>
            Determines whether this Unicode character exists in any element of the specified string array.
            </summary>
            <param name="c">This Unicode character.</param>
            <param name="target">The string array whose elements will be searched for the current Unicode character.</param>
            <returns>true if any element of the specified string array contains the current Unicode character; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.CharExtension.InAll(System.Char,System.String[])">
            <summary>
            Determines whether this Unicode character exists in any element of the specified string array.
            </summary>
            <param name="c">This Unicode character.</param>
            <param name="target">The string array whose elements will be searched for the current Unicode character.</param>
            <returns>true if every element of the specified string array contains the current Unicode character; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.CharExtension.ToString(System.Char,System.Int32)">
            <summary>
            Returns a new instance of the <see cref="T:System.String"/> class to the value indicated by the current Unicode character repeated a specified number of times.
            </summary>
            <param name="c">A Unicode character.</param>
            <param name="repeat">The number of times the current character repeats.</param>
            <returns>A <see cref="T:System.String" /> that contains the current character repeated by the specified number of times.</returns>
        </member>
        <member name="M:System.CharExtension.GetNumericValue(System.Char)">
            <summary>Converts the specified numeric Unicode character to a double-precision floating point number. This is a dummy method of <see cref="M:System.Char.GetNumericValue(System.Char)"/> for convenience.</summary>
            <param name="c">The Unicode character to convert. </param>
            <returns>The numeric value of the current character if that character represents a number; otherwise, -1.0.</returns>
        </member>
        <member name="M:System.CharExtension.ToUpper(System.Char,System.Globalization.CultureInfo)">
            <summary>
            Converts the value of a Unicode character to its uppercase equivalent using the casing rules of the invariant culture. This is a dummy method of <see cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" /> for convenience.
            </summary>
            <param name="c">The Unicode character to convert.</param>
            <param name="culture">An object that supplies culture-specific casing rules.</param>
            <returns>The uppercase equivalent of the current character, or the unchanged value of the current character, if the current character is already uppercase or not alphabetic.</returns>
        </member>
        <member name="M:System.CharExtension.ToLower(System.Char,System.Globalization.CultureInfo)">
            <summary>
            Converts the value of a Unicode character to its lowercase equivalent using the casing rules of the invariant culture. This is a dummy method of <see cref="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" /> for convenience.
            </summary>
            <param name="c">The Unicode character to convert.</param>
            <param name="culture">An object that supplies culture-specific casing rules.</param>
            <returns>The lowercase equivalent of the current character, or the unchanged value of the current character, if  the current character is already lowercase or not alphabetic.</returns>
        </member>
        <member name="M:System.CharExtension.ToUpper(System.Char)">
            <summary>
            Gets the uppercase equivalent of the current Unicode character. This is a dummy method of <see cref="M:System.Char.ToUpperInvariant(System.Char)"/> for convenience.
            </summary>
            <param name="c">This Unicode character</param>
            <returns>The uppercase equivalent of the current Unicode character, or the original value if it is already uppercase, has no uppercase equivalent, or is not alphabetic.</returns>
        </member>
        <member name="M:System.CharExtension.ToLower(System.Char)">
            <summary>
            Gets the lowercase equivalent of the current Unicode character. This is a dummy method of <see cref="M:System.Char.ToLowerInvariant(System.Char)"/> for convenience.
            </summary>
            <param name="c">This Unicode character</param>
            <returns>The lowercase equivalent of the current Unicode character, 
            or the original value if it is already lowercase, has no lowercase equivalent, or is not alphabetic.</returns>
        </member>
        <member name="M:System.CharExtension.IsWhiteSpace(System.Char)">
            <summary>
            Indicates whether this instance of Unicode character is categorized as white space. This is a dummy method of <see cref="M:System.Char.IsWhiteSpace(System.Char)"/> for convenience.
            </summary>
            <param name="c">An instance of <see cref="T:System.Char"/></param>
            <returns><c>true</c> if this instance of Unicode character is white space; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.CharExtension.IsNotWhiteSpace(System.Char)">
            <summary>
            <c>true</c> if this instance of Unicode character is not categorized as white space; otherwise, <c>false</c>.
            </summary>
            <param name="c">An instance of <see cref="T:System.Char"/></param>
            <returns><c>true</c> if this instance of Unicode character is not a white space; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.CharExtension.IsDigit(System.Char)">
            <summary>
            Indicates whether this instance of Unicode character is categorized as a decimal digit. This is a dummy method of <see cref="M:System.Char.IsDigit(System.Char)"/> for convenience.
            </summary>
            <param name="c">An instance of <see cref="T:System.Char"/></param>
            <returns><c>true</c> if this instance of Unicode character is a decimal digit; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.CharExtension.IsLetter(System.Char)">
            <summary>
            Indicates whether this instance of Unicode character is categorized as a letter. This is a dummy method of <see cref="M:System.Char.IsLetter(System.Char)"/> for convenience.
            </summary>
            <param name="c">An instance of <see cref="T:System.Char"/></param>
            <returns><c>true</c> if this instance of Unicode character is a letter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.CharExtension.IsASCIILetter(System.Char)">
            <summary>
            Indicates whether this instance of Unicode character is categoriazed as an ASCII letter.
            </summary>
            <param name="c">An instance of <see cref="T:System.Char"/></param>
            <returns><c>true</c> if this instance of Unicode character is an ASCII letter; otherwise, <c>false</c>.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.CharExtension.IsASCIIUpper(System.Char)" -->
        <!-- Badly formed XML comment ignored for member "M:System.CharExtension.IsASCIILower(System.Char)" -->
        <member name="M:System.CharExtension.IsASCIILetterOrDigit(System.Char)">
            <summary>
            Inidcates whether this instance of Unicode character is categoriazed as an ASCII letter or ASCII digit.
            </summary>
            <param name="c">An instance of <see cref="T:System.Char"/></param>
            <returns><c>true</c> if this instance of Unicode character is an ASCII letter or an ASCII digit; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.CharExtension.IsASCIIDigit(System.Char)">
            <summary>
            Inidcates whether this instance of Unicode character is categoriazed as an ASCII digit (i.e. 0-9).
            </summary>
            <param name="c">An instance of <see cref="T:System.Char"/></param>
            <returns><c>true</c> if this instance of Unicode character is an ASCII digit; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.CharExtension.IsASCII(System.Char)">
            <summary>
            Inidcates whether this instance of Unicode character is categoriazed as an ASCII character (i.e. the character's code is smaller than or equal to 127).
            </summary>
            <param name="c">An instance of <see cref="T:System.Char"/></param>
            <returns><c>true</c> if this instance of Unicode character is an ASCII character; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.CharExtension.IsLetterOrDigit(System.Char)">
            <summary>
            Indicates whether this instance of Unicode character is categorized as a letter or a decimal digit. This is a dummy method of <see cref="M:System.Char.IsLetterOrDigit(System.Char)"/> for convenience.
            </summary>
            <param name="c">An instance of <see cref="T:System.Char"/></param>
            <returns><c>true</c> if this instance of Unicode character is a letter or a decimal digit; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.CharExtension.IsUpper(System.Char)">
            <summary>
            Indicates whether this instance of Unicode character is categorized as an upper case letter. This is a dummy method of <see cref="M:System.Char.IsUpper(System.Char)"/> for convenience.
            </summary>
            <param name="c">An instance of <see cref="T:System.Char"/></param>
            <returns><c>true</c> if this instance of Unicode character is an upper case letter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.CharExtension.IsLower(System.Char)">
            <summary>
            Indicates whether this instance of Unicode character is categorized as a lower case letter. This is a dummy method of <see cref="M:System.Char.IsLower(System.Char)"/> for convenience.
            </summary>
            <param name="c">An instance of <see cref="T:System.Char"/></param>
            <returns><c>true</c> if this instance of Unicode character is a lower case letter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.CharExtension.IsPunctuation(System.Char)">
            <summary>
            Indicates whether this instance of Unicode character is categorized as a punctuation. This is a dummy method of <see cref="M:System.Char.IsPunctuation(System.Char)"/> for convenience.
            </summary>
            <param name="c">An instance of <see cref="T:System.Char"/></param>
            <returns><c>true</c> if this instance of Unicode character is a punctuation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.CharExtension.IsNumber(System.Char)">
            <summary>
            Indicates whether this instance of Unicode character is categorized as a number. This is a dummy method of <see cref="M:System.Char.IsNumber(System.Char)"/> for convenience.
            </summary>
            <param name="c">An instance of <see cref="T:System.Char"/></param>
            <returns><c>true</c> if this instance of Unicode character is a number; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.CharExtension.IsCurrencySymbol(System.Char)">
            <summary>
            Determines whether the current character is the currency symbol under the current culture.
            </summary>
            <param name="c">The current character.</param>
            <returns><c>true</c> the current character is a currency symbol under the current culture; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.CharExtension.IsCurrencySymbol(System.Char,System.Globalization.CultureInfo)">
            <summary>
            Determines whether the current character is the currency symbol under the specified culture.
            </summary>
            <param name="c">The current character.</param>
            <param name="culture">An object that supplies culture-specific casing rules.</param>
            <returns><c>true</c> the current character is a currency symbol under the specified culture; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.CharExtension.IsNegativeSign(System.Char)">
            <summary>
            Determines whether the current character represents the numerical negative sign under the current culture.
            </summary>
            <param name="c">The current character.</param>
            <returns><c>true</c> the current character represents the numerical negative sign under the current culture; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.CharExtension.IsNegativeSign(System.Char,System.Globalization.CultureInfo)">
            <summary>
            Determines whether the current character represents the numerical negative sign under the specified culture.
            </summary>
            <param name="c">The current character.</param>
            <param name="culture">An object that supplies culture-specific casing rules.</param>
            <returns><c>true</c> the current character represents the numerical negative sign under the specified culture; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the current collection to a hash-set.
            </summary>
            <param name="collection">The current collection.</param>
            <returns>A hash-set that contains all distinct elements from the current collection.</returns>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.Concat``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Concats all sequences in the current sequence as a single array.
            </summary>
            <typeparam name="T">They type of elements in the sequences contained in the current sequence.</typeparam>
            <param name="source">The current sequence of collections.</param>
            <returns>An array that contains all elements in the sequences of the current sequence.</returns>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.Count``1(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,``0,System.Boolean})">
            <summary>
            Gets the number of elements in the current sequence that equal the specified target value. 
            </summary>
            <typeparam name="T">The type of elements in the current sequence.</typeparam>
            <param name="source">The current sequence.</param>
            <param name="targetValue">The value that each element in the current sequence is to compare with.</param>
            <param name="equals">A delegate that defines the equality between two objects of type <typeparamref name="T"/>.</param>
            <returns>The number of elements in the current sequence that equal the specified target value. </returns>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.Count``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Gets the number of elements in the current sequence that equal the specified target value. Equality is defined by method Equals of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of elements in the current sequence.</typeparam>
            <param name="source">The current sequence.</param>
            <param name="targetValue">The value that each element in the current sequence is to compare with.</param>
            <returns>The number of elements in the current sequence that equal the specified target value. </returns>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.Count``1(``0[][],``0)">
            <summary>
            Counts the number of occurrences of the specified <paramref name="targetValue"/> in each array of the <paramref name="source"/>.
            </summary>
            <typeparam name="T">The type of elements in the current arrays.</typeparam>
            <param name="source">The current arrays.</param>
            <param name="targetValue">The target value to count.</param>
            <returns>A <see cref="T:System.Int32"/> array that stores the counts of <paramref name="targetValue"/> in each of the current array.</returns>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.Count``1(``0[],``0[])">
            <summary>
            Counts the number of occurrences each <paramref name="targetValues"/> in the current array.
            </summary>
            <typeparam name="T">The type of elements in the current array.</typeparam>
            <param name="source">The current array.</param>
            <param name="targetValues">The target values to count.</param>
            <returns>A <see cref="T:System.Int32"/> array that stores the counts of each of <paramref name="targetValues"/> in the current array.</returns>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.Count``1(``0[][],``0[])">
            <summary>
            Returns a jagged array representing a count matrix of <paramref name="targetValues"/> in the <paramref name="source"/> arrays. 
            <para>The inside arrays of the returned jagged array all have the same size of <paramref name="targetValues"/>.The <c>i</c>th inside array counts the number of occurrences of each of <paramref name="targetValues"/> in the <c>i</c>th <paramref name="source"/> array.</para>
            </summary>
            <typeparam name="T">The type of elements in the current arrays.</typeparam>
            <param name="source">The current arrays.</param>
            <param name="targetValues">The target value to count.</param>
            <returns>A <see cref="T:System.Int32"/> array that stores the counts of <paramref name="targetValues"/> in each array of <paramref name="source"/>.</returns>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines whether the current sequence contains a specified element that satisfies conditions defined by a specified delegate.
            </summary>
            <typeparam name="T">The type of elements in the current sequence.</typeparam>
            <param name="source">The current sequence.</param>
            <param name="predicate"> A delegate to test each element for a condition.</param>
            <returns>true if at least one element in the current sequence satisfies the condition defined by the delegate; otherwise, false.</returns>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.IndexOf``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean},System.Int32)">
            <summary>
            Gets the the position of the first occurrence of an element that satisfies a condition defined by a specified delegate.
            </summary>
            <typeparam name="T">The type of elements in the current <c>List</c>.</typeparam>
            <param name="list">The current <c>List</c>.</param>
            <param name="predicate"> A delegate to test each element for a condition.</param>
            <returns>The position of the first occurrence of an element that satisfies a condition defined by a specified delegate, if found; otherwise -1.</returns>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.ToLinkedList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Copies the objects in the current sequence to a new linked list.
            </summary>
            <typeparam name="T">The type of objects in the sequence.</typeparam>
            <param name="enumerable">The current sequence.</param>
            <returns>A new <see cref="T:System.Collections.Generic.LinkedList`1"/> of objects copied from the current sequence.</returns>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.InsertFirst``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Inserts an item to the beginning of current <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the current <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="list">The current <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="value">The value to insert at the beginning of the current <c>System.Collections.Generic.List{T}</c>.</param>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.ToReversedArray``1(System.Collections.Generic.IList{``0})">
            <summary>
            Creates an array from the current <see cref="T:System.Collections.Generic.IList`1"/>.
            The elements of the output array is in reversed order. For example, the first element in the output array is the last element of the list.
            </summary>
            <typeparam name="T">The type of elements in the current <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="list">The current <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>An array that contains the elements from the current list but in reversed order. </returns>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.TryGetValueOrNew``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets the value associated with the specified key. If there is no such value associated with the key, a new instance will be initialized and associated with the key.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
            <param name="dictionary">The current dictionary.</param>
            <param name="key">The key whose value to get.</param>
            <returns>The value associated with the specified key. If there is no such value associated with the key, a new instance will be initialized, associated and then returned.</returns>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.TryGetValueOrNew``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Boolean@)">
            <summary>
            Gets the value associated with the specified key. If there is no such value associated with the key, a new instance will be initialized and associated with the key.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
            <param name="dictionary">The current dictionary.</param>
            <param name="key">The key whose value to get.</param>
            <param name="isNew">Gets a value indicating whether the returned value is newly initialized.</param>
            <returns>The value associated with the specified key. If there is no such value associated with the key, a new instance will be initialized, associated and then returned.</returns>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.Remove``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.ICollection{``0})">
            <summary>
            Removes key-value pairs with the specified keys from the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
            <param name="dictionary">The current dictionary.</param>
            <param name="keys">The keys of the key-value pairs to remove.</param>
            <returns>The number of key-value pairs removed from the dictionary.</returns>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.RemoveByValue``2(System.Collections.Generic.IDictionary{``0,``1},``1)">
            <summary>
            Removes key-value pairs with the specified value form the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
            <param name="dictionary">The current dictionary.</param>
            <param name="value">Key-value pairs with this specified value will be removed from this dictionary.</param>
            <returns>The number of key-value pairs removed from this dictionary.</returns>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.RemoveByValue``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Removes key-value pairs form the <see cref="T:System.Collections.Generic.IDictionary`2" /> whose value satisfies the specified <paramref name="predicate"/>.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
            <param name="dictionary">The current dictionary.</param>
            <param name="predicate">A method that returns a <see cref="T:System.Boolean"/>. If the value of a key-value pair satisfies this condition, then it will be removed from the dictionary.</param>
            <returns>The number of key-value pairs removed from this dictionary.</returns>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.GetSegmentEnumerator``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Gets an enumerator that enumerates all elements since a specified position in this array/list.
            </summary>
            <typeparam name="T">The type of elements in this array/list.</typeparam>
            <param name="list">Specifies the position in the array/list where the enumerator starts to enumerate. 
            The enumerator will enumerate all elements since this position.</param>
            <param name="startIndex">The index of the first element to enumerate.</param>
            <returns>An enumerator that enumerates all elements since position 
            specified by <paramref name="startIndex"/> in this array/list.</returns>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.GetSegmentEnumerator``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Gets an enumerator that enumerates all elements since a specified position in this array/list.
            </summary>
            <typeparam name="T">The type of elements in this array/list.</typeparam>
            <param name="list">Specifies the position in the array/list where the enumerator starts to enumerate. 
            The enumerator will enumerate all elements since this position.</param>
            <param name="startIndex">The index of the first element to enumerate.</param>
            <param name="count">The total number of elements to enumerate.</param>
            <returns>An enumerator that enumerates all elements since position 
            specified by <paramref name="startIndex"/> in this array/list.</returns>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.GetMergedEnumerator``1(System.Collections.Generic.IEnumerator{``0}[])">
            <summary>
            Gets a merged enumerator of all enumerators in this array.
            </summary>
            <typeparam name="T">The type of element which enumerators in this array enumerate.</typeparam>
            <param name="enumerators">This array of enumerators.</param>
            <returns>A merged enumerator that sequentially enumerates all elements 
            of the collections enumerated by this array of enumerators.</returns>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.GetElements``1(System.Collections.Generic.IEnumerator{``0},System.Int32[])">
            <summary>
            Gets an array of elements from this enumerator by giving their relative indexes 
            (0-based, the next element the enumerator will read is with index 0) away from the current element of the enumerator.
            Those indexes are specified in parameter <paramref name="relativeIndexes"/>.
            </summary>
            <typeparam name="T">The type of elements the enumerator enumerates.</typeparam>
            <param name="enumerator">This enumerator.</param>
            <param name="relativeIndexes">The relative indexes 
            (0-based, the next element the enumerator will read is with index 0) 
            of the elements to retrive.</param>
            <returns>An array of elements retrieved from the enumerator.</returns>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.MoveForward``1(System.Collections.Generic.IEnumerator{``0},System.Int32)">
            <summary>
            Advances this enumerator to the next i-th element where i is indicated by the parameter <paramref name="forward"/>.
            <para>NOTE that the number of element the enumerator actually advances may be different from the parameter <paramref name="forward"/>
            since the enumerator could move past the last element.</para>
            </summary>
            <typeparam name="T">The type of the element the enumerator enumerates.</typeparam>
            <param name="enumerator">This enumerator.</param>
            <param name="forward">A value indicating how many elements the enumerator should advance.</param>
            <returns>The number of elements the enumerator actually advances. A returned valued smaller than the parameter <paramref name="forward"/>
            indicates the enumerator has moved past the last element.</returns>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerator{``0},System.Int32[])">
            <summary>
            Adds the REST elements not yet enumerated by a enumerator to the current System.Collections.Generic.IList{T}.
            <para>!!!Note that this method only adds those elements that are not yet enumerated by the enumerator.</para>
            </summary>
            <typeparam name="T">The type of the elements to add.</typeparam>
            <param name="list">The current System.Collections.Generic.IList{T}.</param>
            <param name="enumerator">The enumerator that enumerates the elements.</param>
            <param name="relativeIndexes">Only the elements with relative indexes 
            (0-based, the element the enumerator will read is with index 0) 
            specified in this array will be added to the current list.</param>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.ToArray``1(System.Collections.Generic.IList{``0},System.Int32[])">
            <summary>
            Creates an array from the current System.Collections.Generic.IList{T}.
            </summary>
            <typeparam name="T">The type of elements in the current list.</typeparam>
            <param name="list">The current list.</param>
            <param name="indexes">Sets this parameter to an integer array and then 
            an element will be copied only if it is of an index in this array.</param>
            <returns>A new array holding the elements from the current list.</returns>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Adds elements starting from a given position in another System.Collections.Generic.IList{T} to the current
            System.Collections.Generic.IList{T}.
            </summary>
            <typeparam name="T">The type of elements both lists hold.</typeparam>
            <param name="srcList">The current System.Collections.Generic.IList{T}.</param>
            <param name="list">Elements starting from a position (specified by parameter <paramref name="startIndex"/>) 
            in this System.Collections.Generic.IList{T} will be added to the current list.</param>
            <param name="startIndex">Specifies a position in <paramref name="list"/> 
            starting from which all elements will be added to the current list.</param>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.RemoveLast``1(System.Collections.Generic.IList{``0})">
            <summary>
            Removes the last element from the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The list.</param>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.Remove``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes elements satisfying the specified condition from the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The list.</param>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.ToNodeArray``1(System.Collections.Generic.LinkedList{``0})">
            <summary>
            Creates an array of <see cref="T:System.Collections.Generic.LinkedListNode`1"/> objects from the <see cref="T:System.Collections.Generic.LinkedList`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the linked list.</typeparam>
            <param name="linkedList">The linked list.</param>
            <returns>A <see cref="T:System.Collections.Generic.LinkedListNode`1"/> array created from the <see cref="T:System.Collections.Generic.LinkedList`1"/>.</returns>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.RemoveAll``1(System.Collections.Generic.LinkedList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes all nodes that satisfy conditions defined by <paramref name="predicate"/> from the current <see cref="T:System.Collections.Generic.LinkedList`1"/>.
            </summary>
            <typeparam name="T">The type of element in the current <see cref="T:System.Collections.Generic.LinkedList`1"/>.</typeparam>
            <param name="linkedList">The current <see cref="T:System.Collections.Generic.LinkedList`1"/>.</param>
            <param name="predicate">A delegate defining what elements should be removed from the current <see cref="T:System.Collections.Generic.LinkedList`1"/>.</param>
            <returns>The current <see cref="T:System.Collections.Generic.LinkedList`1"/> with specified nodes removed.</returns>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.RemoveAll``1(System.Collections.Generic.LinkedList{``0},``0)">
            <summary>
            Removes all nodes of the specified <paramref name="value"/> from the current <see cref="T:System.Collections.Generic.LinkedList`1"/>.
            </summary>
            <typeparam name="T">The type of element in the current <see cref="T:System.Collections.Generic.LinkedList`1"/>.</typeparam>
            <param name="linkedList">The current <see cref="T:System.Collections.Generic.LinkedList`1"/>.</param>
            <param name="value">The value to remove from the current <see cref="T:System.Collections.Generic.LinkedList`1"/>.</param>
            <returns>The current <see cref="T:System.Collections.Generic.LinkedList`1"/> with specified nodes removed.</returns>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.AddLast``2(System.Collections.Generic.LinkedList{System.Pair{``0,``1}},``0,``1)">
            <summary>
            Adds a pair of values to the end of the current <see cref="T:System.Collections.Generic.LinkedList`1"/>.
            </summary>
            <typeparam name="TValue1">The type of the first value.</typeparam>
            <typeparam name="TValue2">The type of the second value.</typeparam>
            <param name="linkedList">The current <see cref="T:System.Collections.Generic.LinkedList`1"/>.</param>
            <param name="value1">The first value to add at the end of the current <see cref="T:System.Collections.Generic.LinkedList`1"/>.</param>
            <param name="value2">The second value to add at the end of the current <see cref="T:System.Collections.Generic.LinkedList`1"/>.</param>
            <returns>The current <see cref="T:System.Collections.Generic.LinkedList`1"/> with the pair of values added.</returns>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.AddFirst``2(System.Collections.Generic.LinkedList{System.Pair{``0,``1}},``0,``1)">
            <summary>
            Adds a pair of values to the beginning of the current <see cref="T:System.Collections.Generic.LinkedList`1"/>.
            </summary>
            <typeparam name="TValue1">The type of the first value.</typeparam>
            <typeparam name="TValue2">The type of the second value.</typeparam>
            <param name="linkedList">The current <see cref="T:System.Collections.Generic.LinkedList`1"/>.</param>
            <param name="value1">The first value to add at the beginning of the current <see cref="T:System.Collections.Generic.LinkedList`1"/>.</param>
            <param name="value2">The second value to add at the beginning of the current <see cref="T:System.Collections.Generic.LinkedList`1"/>.</param>
            <returns>The current <see cref="T:System.Collections.Generic.LinkedList`1"/> with the pair of values added.</returns>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.AddLast``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Adds each element in an array/list of values to the end of current <see cref="T:System.Collections.Generic.LinkedList`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the current <see cref="T:System.Collections.Generic.LinkedList`1"/>.</typeparam>
            <param name="linkedList">The current <see cref="T:System.Collections.Generic.LinkedList`1"/>.</param>
            <param name="values">An array/list of values to add at the end of current <see cref="T:System.Collections.Generic.LinkedList`1"/>.</param>
            <returns>The current <see cref="T:System.Collections.Generic.LinkedList`1"/> with values added.</returns>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.AddLast``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds each element in an sequence of values to the end of current <see cref="T:System.Collections.Generic.LinkedList`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the current <see cref="T:System.Collections.Generic.LinkedList`1"/>.</typeparam>
            <param name="linkedList">The current <see cref="T:System.Collections.Generic.LinkedList`1"/>.</param>
            <param name="values">An sequence of values to add at the end of current <see cref="T:System.Collections.Generic.LinkedList`1"/>.</param>
            <returns>The current <see cref="T:System.Collections.Generic.LinkedList`1"/> with values added.</returns>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.AddFirst``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Adds each element in an array/list of values to the beginning of current <see cref="T:System.Collections.Generic.LinkedList`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the current <see cref="T:System.Collections.Generic.LinkedList`1"/>.</typeparam>
            <param name="linkedList">The current <see cref="T:System.Collections.Generic.LinkedList`1"/>.</param>
            <param name="values">An array/list of values to add at the beginning of current <see cref="T:System.Collections.Generic.LinkedList`1"/>.</param>
            <returns>The current <see cref="T:System.Collections.Generic.LinkedList`1"/> with values added.</returns>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.AddFirst``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds each element in an sequence of values to the beginning of current <see cref="T:System.Collections.Generic.LinkedList`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the current <see cref="T:System.Collections.Generic.LinkedList`1"/>.</typeparam>
            <param name="linkedList">The current <see cref="T:System.Collections.Generic.LinkedList`1"/>.</param>
            <param name="values">An sequence of values to add at the beginning of current <see cref="T:System.Collections.Generic.LinkedList`1"/>.</param>
            <returns>The current <see cref="T:System.Collections.Generic.LinkedList`1"/> with values added.</returns>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.SortedAdd``2(System.Collections.Generic.LinkedList{``0},``0,System.Func{``0,``1},System.Boolean)">
            <summary>
            Adds a new node containing the specified value to this <see cref="T:System.Collections.Generic.LinkedList`1"/> in an ordered fasion.
            </summary>
            <typeparam name="TValue">The element type of the linked list.</typeparam>
            <typeparam name="TComparable">The comparable type the element of the linked list should be converted to before comparison.</typeparam>
            <param name="linkedList">A <see cref="T:System.Collections.Generic.LinkedList`1"/>.</param>
            <param name="value">The value to add.</param>
            <param name="toComparable">A method converting elements in the current linked list to comparable values.</param>
            <param name="descending"><c>true</c> if the elements of this linked list should be arranged in descending order; <c>false</c> if ascending order applies.</param>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.SortedAdd``1(System.Collections.Generic.LinkedList{``0},``0,System.Comparison{``0},System.Boolean)">
            <summary>
            Adds a new node containing the specified value to this <see cref="T:System.Collections.Generic.LinkedList`1"/> in an ordered fasion.
            </summary>
            <typeparam name="TValue">The element type of the linked list.</typeparam>
            <param name="linkedList">A <see cref="T:System.Collections.Generic.LinkedList`1"/>.</param>
            <param name="value">The value to add.</param>
            <param name="comparison">A <see cref="T:System.Comparison`1"/> to use when comparing values.</param>
            <param name="descending"><c>true</c> if the elements of this linked list should be arranged in descending order; <c>false</c> if ascending order applies.</param>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.SortedAdd``1(System.Collections.Generic.LinkedList{``0},``0,System.Boolean)">
            <summary>
            Adds a new node containing the specified value to this <see cref="T:System.Collections.Generic.LinkedList`1"/> in an ordered fashion.
            </summary>
            <typeparam name="T">The element type of the linked list. This type must implement <see cref="T:System.IComparable"/> interface.</typeparam>
            <param name="linkedList">A <c>System.Collections.Generic.LinkedList{T}</c>.</param>
            <param name="value">The value to add.</param>
            <param name="descending">true if the elements of this linked list should be arrange in descending order; false if ascending order applies.</param>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.Add``2(System.Collections.Generic.IList{System.Pair{``0,``1}},``0,``1)">
            <summary>
            Adds a pair of values to this list of pairs. 
            </summary>
            <typeparam name="TValue1">The type of the first value of the pair to add.</typeparam>
            <typeparam name="TValue2">The type of the second value of the pair to add.</typeparam>
            <param name="list">The list to operate on.</param>
            <param name="value1">The first value of the pair.</param>
            <param name="value2">The second value of the pair.</param>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.Add``2(System.Collections.Generic.IList{System.ValueTuple{``0,``1}},``0,``1)">
            <summary>
            Adds a pair of values to this list of pairs. 
            </summary>
            <typeparam name="TValue1">The type of the first value of the pair to add.</typeparam>
            <typeparam name="TValue2">The type of the second value of the pair to add.</typeparam>
            <param name="list">The list to operate on.</param>
            <param name="value1">The first value of the pair.</param>
            <param name="value2">The second value of the pair.</param>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.Add``3(System.Collections.Generic.IList{System.Triple{``0,``1,``2}},``0,``1,``2)">
            <summary>
            Adds a triple of values to this list of pairs.
            </summary>
            <typeparam name="TValue1">The type of the first value of the triple to add.</typeparam>
            <typeparam name="TValue2">The type of the second value of the triple to add.</typeparam>
            <typeparam name="TValue3">The type of the thrid value of the triple to add.</typeparam>
            <param name="list">The list to operate on.</param>
            <param name="value1">The first value of the triple.</param>
            <param name="value2">The second value of the triple.</param>
            <param name="value3">The third value of the triple.</param>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.Add``3(System.Collections.Generic.IList{System.ValueTuple{``0,``1,``2}},``0,``1,``2)">
            <summary>
            Adds a triple of values to this list of pairs.
            </summary>
            <typeparam name="TValue1">The type of the first value of the triple to add.</typeparam>
            <typeparam name="TValue2">The type of the second value of the triple to add.</typeparam>
            <typeparam name="TValue3">The type of the thrid value of the triple to add.</typeparam>
            <param name="list">The list to operate on.</param>
            <param name="value1">The first value of the triple.</param>
            <param name="value2">The second value of the triple.</param>
            <param name="value3">The third value of the triple.</param>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.Add``1(System.Collections.Generic.IList{System.Pair{``0}},``0,``0)">
            <summary>
            Adds a pair of values to this list of pairs. 
            </summary>
            <typeparam name="T">The type of the values of the pair.</typeparam>
            <param name="list">The list to operate on.</param>
            <param name="value1">The first value of the pair.</param>
            <param name="value2">The second value of the pair.</param>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.Add``1(System.Collections.Generic.IList{System.Triple{``0}},``0,``0,``0)">
            <summary>
            Adds a triple of values to this list of triples. 
            </summary>
            <typeparam name="T">The type of the values of the triple.</typeparam>
            <param name="list">The list to operate on.</param>
            <param name="value1">The first value of the triple.</param>
            <param name="value2">The second value of the triple.</param>
            <param name="value3">The third value of the triple.</param>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.Add``3(System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2}},``0,``1,``2)">
            <summary>
            Adds a pair of values and its associated key to this dictionary.
            </summary>
            <typeparam name="TKey">The type of the key associated with the value pair.</typeparam>
            <typeparam name="TValue1">The type of the first value of the pair.</typeparam>
            <typeparam name="TValue2">The type of the second value of the pair.</typeparam>
            <param name="dict">The dictionary to operate on.</param>
            <param name="key">The key associated with the value pair.</param>
            <param name="value1">The first value of the pair.</param>
            <param name="value2">The second value of the pair.</param>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.Add``4(System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3}},``0,``1,``2,``3)">
            <summary>
            Adds a triple of values and its associated key to this dictionary.
            </summary>
            <typeparam name="TKey">The type of the key associated with the value triple.</typeparam>
            <typeparam name="TValue1">The type of the first value of the triple.</typeparam>
            <typeparam name="TValue2">The type of the second value of the triple.</typeparam>
            <typeparam name="TValue3">The type of the third value of the triple.</typeparam>
            <param name="dict">The dictionary to operate on.</param>
            <param name="key">The key associated with the value triple.</param>
            <param name="value1">The first value of the triple.</param>
            <param name="value2">The second value of the triple.</param>
            <param name="value3">The third value of the triple.</param>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.Add``3(System.Collections.Generic.IDictionary{``0,System.Pair{``1,``2}},``0,``1,``2)">
            <summary>
            Adds a pair of values and its associated key to this dictionary.
            </summary>
            <typeparam name="TKey">The type of the key associated with the value pair.</typeparam>
            <typeparam name="TValue1">The type of the first value of the pair to add.</typeparam>
            <typeparam name="TValue2">The type of the second value of the pair to add.</typeparam>
            <param name="dict">The dictionary to operate on.</param>
            <param name="key">The key associated with the value pair.</param>
            <param name="value1">The first value of the pair.</param>
            <param name="value2">The second value of the pair.</param>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.Add``2(System.Collections.Generic.IDictionary{``0,System.Pair{``1}},``0,``1,``1)">
            <summary>
            Adds a pair of values and its associated key to this dictionary.
            </summary>
            <typeparam name="TKey">The type of the key associated with the value pair.</typeparam>
            <typeparam name="TValue">The type of the values of the pair.</typeparam>
            <param name="dict">The dictionary to operate on.</param>
            <param name="key">The key associated with the value pair.</param>
            <param name="value1">The first value of the pair.</param>
            <param name="value2">The second value of the pair.</param>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.Add``2(System.Collections.Generic.IDictionary{``0,System.Triple{``1}},``0,``1,``1,``1)">
            <summary>
            Adds a triple of values and its associated key to this dictionary.
            </summary>
            <typeparam name="TKey">The type of the key associated with the value triple.</typeparam>
            <typeparam name="TValue">The type of the values of the triple.</typeparam>
            <param name="dict">The dictionary to operate on.</param>
            <param name="key">The key associated with the value triple.</param>
            <param name="value1">The first value of the triple.</param>
            <param name="value2">The second value of the triple.</param>
            <param name="value3">The second value of the triple.</param>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionEx.Add``4(System.Collections.Generic.IDictionary{``0,System.Triple{``1,``2,``3}},``0,``1,``2,``3)">
            <summary>
            Adds a triple of values and its associated key to this dictionary.
            </summary>
            <typeparam name="TKey">The type of the key associated with the value triple.</typeparam>
            <typeparam name="TValue1">The type of the first value of the triple.</typeparam>
            <typeparam name="TValue2">The type of the second value of the triple.</typeparam>
            <typeparam name="TValue3">The type of the third value of the triple.</typeparam>
            <param name="dict">The dictionary to operate on.</param>
            <param name="key">The key associated with the value triple.</param>
            <param name="value1">The first value of the triple.</param>
            <param name="value2">The second value of the triple.</param>
            <param name="value3">The second value of the triple.</param>
        </member>
        <member name="T:System.Collections.Generic.ArrayDictionary`2">
            <summary>
            Implements <see cref="T:System.Collections.Generic.IDictionary`2" /> and <see cref="T:System.Collections.Generic.IList`1" /> using a <typeparamref name="TKey" /> array and a <typeparamref name="TValue" /> array. Recommended for collections that contain 10 items or less.
            </summary>
            <typeparam name="TKey">The type of keys in this dictionary.</typeparam>
            <typeparam name="TValue">The type of values in this dictionary.</typeparam>
            <remarks>The capacity of an <see cref="T:System.Collections.Generic.ArrayDictionary`2" /> must be specified when it is initialized. After the initialization, the capacity cannot be changed. Another implementation similar to <see cref="T:System.Collections.Generic.ArrayDictionary`2" /> but with growing capacity is <see cref="T:System.Collections.Generic.ListDictionary`2" />, which implements <see cref="T:System.Collections.Generic.IDictionary`2" /> and <see cref="T:System.Collections.Generic.IList`1" /> using a linked list.</remarks>
        </member>
        <member name="M:System.Collections.Generic.ArrayDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.ArrayDictionary`2"/> class with capacity 10.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ArrayDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.ArrayDictionary`2"/> class with a specified capacity.
            </summary>
            <param name="capacity">The capacity of the <see cref="T:System.Collections.Generic.ArrayDictionary`2"/>.</param>
        </member>
        <member name="P:System.Collections.Generic.ArrayDictionary`2.Capacity">
            <summary>
            Gets a number indicating the capacity of this <see cref="T:System.Collections.Generic.ArrayDictionary`2"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ArrayDictionary`2.Add(`0,`1)">
            <summary>
            Adds a value associated with the specified key into this <see cref="T:System.Collections.Generic.ArrayDictionary`2"/>.
            </summary>
            <param name="key">The key associated with the value to add.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:System.Collections.Generic.ArrayDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether this <see cref="T:System.Collections.Generic.ArrayDictionary`2"/> contains a specific key.
            </summary>
            <param name="key">The key to locate in this <see cref="T:System.Collections.Generic.ArrayDictionary`2"/>.</param>
            <returns><c>true</c> if this <see cref="T:System.Collections.Generic.ArrayDictionary`2"/> contains a value with the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:System.Collections.Generic.ArrayDictionary`2.Keys">
            <summary>
            Gets a collection containing the keys in this <see cref="T:System.Collections.Generic.ArrayDictionary`2"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ArrayDictionary`2.IndexOf(`0)">
            <summary>
            Gets the index of specific key.
            </summary>
            <param name="key">The key to locate in this <see cref="T:System.Collections.Generic.ArrayDictionary`2"/>.</param>
            <returns>The index of the specific key if the key exists in this <see cref="T:System.Collections.Generic.ArrayDictionary`2"/>; otherwise -1.</returns>
        </member>
        <member name="M:System.Collections.Generic.ArrayDictionary`2.Remove(`0)">
            <summary>
            Removes the value with the specified key from this <see cref="T:System.Collections.Generic.ArrayDictionary`2"/>.
            </summary>
            <param name="key">The key of the value to remove.</param>
            <returns><c>true</c> if the specific value is successfully found and removed; otherwise, <c>false</c>. This method returns false if the specified key is not found.</returns>
        </member>
        <member name="M:System.Collections.Generic.ArrayDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; 
            otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if this <see cref="T:System.Collections.Generic.ArrayDictionary`2"/> contains a value with the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:System.Collections.Generic.ArrayDictionary`2.Values">
            <summary>
            Gets a collection containing the values in this <see cref="T:System.Collections.Generic.ArrayDictionary`2"/>.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.ArrayDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <returns>The value associated with the specified key. If the specified key is not found, a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException"/>, and a set operation creates a new value with the specified key.</returns>
        </member>
        <member name="M:System.Collections.Generic.ArrayDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds a key/value pair to this <see cref="T:System.Collections.Generic.ArrayDictionary`2"/>.
            </summary>
            <param name="pair">The key/value pair.</param>
        </member>
        <member name="M:System.Collections.Generic.ArrayDictionary`2.Clear">
            <summary>
            Removes all keys and values from this <see cref="T:System.Collections.Generic.ArrayDictionary`2"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ArrayDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies all key/value pairs of this Array Dictionary to an array, starting at a particular array index. 
            </summary>
            <param name="array">The one-dimensional array that is the destination of the key/value pairs copied from this <see cref="T:System.Collections.Generic.ArrayDictionary`2"/>.</param>
            <param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="P:System.Collections.Generic.ArrayDictionary`2.Count">
            <summary>
            Gets the number of key/value pairs contained in this <see cref="T:System.Collections.Generic.ArrayDictionary`2"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ArrayDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection. NOTE that the returned enumerator is not resettable.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:System.Collections.Generic.ArrayDictionary`2.IndexOf(`1)">
            <summary>
            Gets the index of the first occurrence of a specific value.
            </summary>
            <param name="value">The value to locate in this dictionary.</param>
            <returns>The index of the specific value if it is found in this dictionary, otherwise -1.</returns>
        </member>
        <member name="M:System.Collections.Generic.ArrayDictionary`2.Insert(System.Int32,`1)">
            <summary>
            Inserts a value with default key into this <see cref="T:System.Collections.Generic.ArrayDictionary`2"/> at the specified index.
            <para>This method is for implementation of IList{T} interface and may be useless.</para>
            </summary>
            <param name="index">The zero-based index at which the value should be inserted.</param>
            <param name="value">The value to insert.</param>
        </member>
        <member name="M:System.Collections.Generic.ArrayDictionary`2.RemoveAt(System.Int32)">
            <summary>
            Removes the key and value at the specified index of this <see cref="T:System.Collections.Generic.ArrayDictionary`2"/>.
            </summary>
            <param name="index">The zero-based index of the value to remove.</param>
        </member>
        <member name="P:System.Collections.Generic.ArrayDictionary`2.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
            <param name="index">The zero-based index of the value to get or set.</param>
            <returns>The value at the specified index.</returns>
        </member>
        <member name="M:System.Collections.Generic.ArrayDictionary`2.Add(`1)">
            <summary>
            Adds a value with default key into this <see cref="T:System.Collections.Generic.ArrayDictionary`2"/>.
            <para>This method is for implementation of IList{T} interface and may be useless.</para>
            </summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:System.Collections.Generic.ArrayDictionary`2.Contains(`1)">
            <summary>
            Determines whether a value is in this <see cref="T:System.Collections.Generic.ArrayDictionary`2"/>.
            </summary>
            <param name="value">The value to locate in this <see cref="T:System.Collections.Generic.ArrayDictionary`2"/>.</param>
            <returns><c>true</c> if the value is found in this <see cref="T:System.Collections.Generic.ArrayDictionary`2"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.ArrayDictionary`2.CopyTo(`1[],System.Int32)">
            <summary>
            Copies all values to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the values copied from Array Disctionary.</param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:System.Collections.Generic.ArrayDictionary`2.Remove(`1)">
            <summary>
            Removes the first occurrence of a specific value from this <see cref="T:System.Collections.Generic.ArrayDictionary`2"/>.
            </summary>
            <param name="value">The object to remove from this <see cref="T:System.Collections.Generic.ArrayDictionary`2"/>.</param>
            <returns><c>true</c> if the specific value is successfully removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.ArrayDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether this <see cref="T:System.Collections.Generic.ArrayDictionary`2"/> contains a specific key/value pair
            </summary>
            <param name="pair">The key/value pair to locate in this <see cref="T:System.Collections.Generic.ArrayDictionary`2"/>.</param>
            <returns><c>true</c> if the key/value pair is found in this <see cref="T:System.Collections.Generic.ArrayDictionary`2"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:System.Collections.Generic.BiDictionary`2">
            <summary>
            Represents a collection of keys and values that are indexed by both keys and values. The two-way indexing is done by synchronizing a key-value dictionary and a value-key dictionary and ensures one-to-one associations between keys and values.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.BiDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.BiDictionary`2"/> class with a new <see cref="T:System.Collections.Generic.Dictionary`2" /> as the key-value dictionary, and a new <see cref="T:System.Collections.Generic.Dictionary`2" /> as the value-key dictionary.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.BiDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.BiDictionary`2"/> class with a new <see cref="T:System.Collections.Generic.Dictionary`2" /> as the key-value dictionary, and a new <see cref="T:System.Collections.Generic.Dictionary`2" /> as the value-key dictionary.
            </summary>
            <param name="capacity">The initial number of elements the key-value dictionary and the value-key dictionary can contain.</param>
        </member>
        <member name="M:System.Collections.Generic.BiDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IDictionary{`1,`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.BiDictionary`2" /> class.
            </summary>
            <param name="keyValueDictionary">Provides a key-value dictionary. If this dictionary is non-empty, please make sure it is synchronized with <paramref name="valueKeyDictionary"/>.</param>
            <param name="valueKeyDictionary">Provides a value-key dictionary. If this dictionary is non-empty, please make sure it is synchronized with <paramref name="keyValueDictionary"/>.</param>
            <param name="selfSynchronization"><c>true</c> if the key-value dictionary and the value-key dictionary are automatically synchronized and the synchronization defined by this class should be ineffective; <c>false</c> if synchronization defined by this class is needed.</param>
        </member>
        <member name="M:System.Collections.Generic.BiDictionary`2.RemoveByValue(`1)">
            <summary>
            Removes the specified <paramref name="value"/> and its associated key from both the key-value dictionary and the value-key dictionary.
            </summary>
            <param name="value">The value to remove.</param>
            <returns><c>true</c> if the value and its associated key are successfully removed, <c>false</c> otherwise.</returns>
            <exception cref="T:System.InvalidOperationException">Occurs when synchronization between the key-value dictionary and the value-key dictionary failed.</exception>
        </member>
        <member name="M:System.Collections.Generic.BiDictionary`2.Remove(`0)">
            <summary>
            Removes the specified <paramref name="key"/> with its associated value from both the key-value dictionary and the value-key dictionary.
            </summary>
            <param name="key">The key to remove.</param>
            <returns><c>true</c> if the key and its associated value are successfully removed; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.InvalidOperationException">Occurs when synchronization between the key-value dictionary and the value-key dictionary failed.</exception>
        </member>
        <member name="M:System.Collections.Generic.BiDictionary`2.TryGetKey(`1,`0@)">
            <summary>
            Gets the key associated with the specified <paramref name="value"/> from the value-key dictionary.
            </summary>
            <param name="value">The value associated with the key to get.</param>
            <param name="key">When this method returns, contains the key associated with the specified value, if the value is found in the value-key dictionary; otherwise, the default value for the type of the key parameter. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the value-key dictionary contains the specified value, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Collections.Generic.BiDictionary`2.TrySetKey(`1,`0)">
            <summary>
            Associates the value with the specified <paramref name="key"/> in both the key-value dictionary and the value-key dictionary.
            </summary>
            <param name="value">The value to be associated with the <paramref name="key"/>.</param>
            <param name="key">The key to be associated with the <paramref name="value"/>.</param>
            <returns><c>true</c> if the association is successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Collections.Generic.BiDictionary`2.ContainsValue(`1)">
            <summary>
            Determines whether the value-key dictionary contains the specified <paramref name="value"/>.
            </summary>
            <param name="value">The value to located in the value-key dictionary.</param>
            <returns><c>true</c> if the specified value contains value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.BiDictionary`2.GetReversedPairEnumerator">
            <summary>
            Returns an enumerator that iterates through the value/key pairs in the value-key dictionary.
            </summary>
            <returns>A <see cref="!:System.Collections.Generic.IEnumerator`2" /> that can be used to iterate through value/key pairs in the value-key dictionary.</returns>
        </member>
        <member name="M:System.Collections.Generic.BiDictionary`2.Add(`0,`1)">
            <summary>
            Adds a key and its associated value to both the key-value dictionary and the value-key dictionary.
            </summary>
            <param name="key">The key associated with the <paramref name="value"/>.</param>
            <param name="value">The value associated with the <paramref name="key"/>.</param>
        </member>
        <member name="P:System.Collections.Generic.BiDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>The value associated with the specified <paramref name="key"/>.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Occurs when <paramref name="key"/> is not found in the key-value dictionary.</exception>
        </member>
        <member name="M:System.Collections.Generic.BiDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the key-value dictionary contains the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key to locate in the key-value dictionary.</param>
            <returns>true if the key-value dictionary contains the <paramref name="key"/>; otherwise, false.</returns>
        </member>
        <member name="M:System.Collections.Generic.BiDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified <paramref name="key"/> from the key-value dictionary.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the key-value dictionary contains the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:System.Collections.Generic.BiDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:System.Collections.Generic.BiDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="M:System.Collections.Generic.BiDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to both the key-value dictionary and the value-key dictionary.
            </summary>
            <param name="item">The object to add to both dictionaries.</param>
        </member>
        <member name="M:System.Collections.Generic.BiDictionary`2.Clear">
            <summary>
            Removes all items from both the key-value dictionary and the value-key dictionary.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.BiDictionary`2.Count">
            <summary>
            Gets the number of elements contained in both dictionaries. In correct synchronization, the number of elements in the key-value dictionary and the value-key dictionary should equal.
            </summary>
            <value>The number of elements contained in both dictionaries.</value>
        </member>
        <member name="M:System.Collections.Generic.BiDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the key/value pairs in the key-value dictionary.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through key/value pairs in the key-value dictionary.</returns>
        </member>
        <member name="T:System.Collections.Generic.IBiDictionary`2">
            <summary>
            Represents a collection of keys and values that are indexed by both keys and values. The association between keys and values are one-to-one.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.IBiDictionary`2.RemoveByValue(`1)">
            <summary>
            Removes the specified value and its associated key.
            </summary>
            <param name="value">The value to remove.</param>
            <returns><c>true</c> if the value and its associated key are successfully removed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Collections.Generic.IBiDictionary`2.TryGetKey(`1,`0@)">
            <summary>
            Gets the key associated with the specified <paramref name="value"/>.
            </summary>
            <param name="value">The value associated with the key to get.</param>
            <param name="key">When this method returns, contains the key associated with the specified value, if the value is found; otherwise, the default value for the type of <typeparamref name="TKey"/>. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the value is found and its associated key is assigned to parameter <paramref name="key"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Collections.Generic.IBiDictionary`2.TrySetKey(`1,`0)">
            <summary>
            Associates the value with the specified <paramref name="key"/>.
            </summary>
            <param name="value">The value to be associated with the <paramref name="key"/>.</param>
            <param name="key">The key to be associated with the <paramref name="value"/>.</param>
            <returns><c>true</c> if the association is successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Collections.Generic.IBiDictionary`2.ContainsValue(`1)">
            <summary>
            Determines whether the the specified <paramref name="value"/> can be found.
            </summary>
            <param name="value">The value to be located.</param>
            <returns><c>true</c> if the specified value exists; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.IBiDictionary`2.GetReversedPairEnumerator">
            <summary>
            Returns an enumerator that iterates through the value/key pairs. The iteration order may be different from the key/value pair enumerator.
            </summary>
            <returns>A <see cref="!:System.Collections.Generic.IEnumerator&lt;TValue,TKey&gt;" /> that can be used to iterate through value/key pairs.</returns>
        </member>
        <member name="T:System.Collections.Generic.HybridDictionary`2">
            <summary>
            Implements <see cref="T:System.Collections.Generic.IDictionary`2"/> using a <see cref="T:System.Collections.Generic.ListDictionary`2"/> when the size of the collection is no more than 10,
            and then switching to the <see cref="T:System.Collections.Generic.Dictionary`2"/> when the collection gets larger.</summary>
            <typeparam name="TKey">The type of keys in this dictionary.</typeparam>
            <typeparam name="TValue">The type of values in this dictionary.</typeparam>
        </member>
        <member name="F:System.Collections.Generic.HybridDictionary`2.TransformThreshold">
            <summary>
            Gets a value indicating the maximum size of when a <see cref="T:System.Collections.Generic.HybridDictionary`2"/> uses a <see cref="T:System.Collections.Generic.ListDictionary`2"/> implementation.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.HybridDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.HybridDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.HybridDictionary`2.Add(`0,`1)">
            <summary>
            Adds a value associated with the specified key into this dictionary.
            </summary>
            <param name="key">The key associated with the <paramref name="value"/> to add.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:System.Collections.Generic.HybridDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether this dictionary contains a specific key.
            </summary>
            <param name="key">The key to locate in this dictionary.</param>
            <returns><c>true</c> if this dictionary contains a value with the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:System.Collections.Generic.HybridDictionary`2.Keys">
            <summary>
            Gets a collection containing the keys in this dictionary.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.HybridDictionary`2.Remove(`0)">
            <summary>
            Removes the value with the specified key from this dictionary.
            </summary>
            <param name="key">The key of the value to remove.</param>
            <returns><c>true</c> if the specific value is successfully found and removed; 
            otherwise, <c>false</c>. This method returns false if the specified key is not found.</returns>
        </member>
        <member name="M:System.Collections.Generic.HybridDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; 
            otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if this dictionary contains a value with the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.HybridDictionary`2.TrySetOrAddValue(`0,`1)">
            <summary>
            Associates the specified <paramref name="key"/> with the specified <paramref name="value"/> if the key already exists in this dictionary; or adds a new key/value pair into this dictionary if the key is not found.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the specified key already exists in this dictionary; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:System.Collections.Generic.HybridDictionary`2.Values">
            <summary>
            Gets a collection containing the values in this dictionary.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.HybridDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <returns>The value associated with the specified key. If the specified key is not found, a get operation throws a KeyNotFoundException, 
            and a set operation creates a new value with the specified key.</returns>
        </member>
        <member name="M:System.Collections.Generic.HybridDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds a key/value pair to this dictionary.
            </summary>
            <param name="pair">The key/value pair.</param>
        </member>
        <member name="M:System.Collections.Generic.HybridDictionary`2.Clear">
            <summary>
            Removes all keys and values from this dictionary.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.HybridDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether this dictionary contains a specific key/value pair
            </summary>
            <param name="pair">The key/value pair to locate in this dictionary.</param>
            <returns><c>true</c> if the key/value pair is found in this dictionary; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.HybridDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies all key/value pairs of this dictionary to a one-dimensional array at the specified index. 
            </summary>
            <param name="array">The one-dimensional array that is the destination of the key/value pairs copied from this dictionary.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="P:System.Collections.Generic.HybridDictionary`2.Count">
            <summary>
            Gets the number of key/value pairs contained in this dictionary.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.HybridDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.HybridDictionary`2"/>.
            </summary>
            <returns>An enumerator that iterates through the key/value pairs in this <see cref="T:System.Collections.Generic.HybridDictionary`2"/>.</returns>
        </member>
        <member name="T:System.Collections.Generic.ListDictionary`2">
            <summary>
            Implements <see cref="T:System.Collections.Generic.IDictionary`2"/> using a linked list. Recommended for collections that typically contain 10 items or less.
            </summary>
            <remarks>
            Another implementation similar to <see cref="T:System.Collections.Generic.ListDictionary`2"/> but with fixed capacity is <see cref="T:System.Collections.Generic.ArrayDictionary`2"/>, which implements <see cref="T:System.Collections.Generic.IDictionary`2"/> and <see cref="T:System.Collections.Generic.IList`1"/> using an array of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> objects.
            </remarks>
            <typeparam name="TKey">The type of keys in this dictionary.</typeparam>
            <typeparam name="TValue">The type of values in this dictionary.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.ListDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.ListDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ListDictionary`2.Add(`0,`1)">
            <summary>
            Adds a value associated with the specified key into this <see cref="T:System.Collections.Generic.ListDictionary`2"/>.
            </summary>
            <param name="key">The key associated with the value to add. The key can be <c>null</c>.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:System.Collections.Generic.ListDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether this <see cref="T:System.Collections.Generic.ListDictionary`2"/> contains a specific key.
            </summary>
            <param name="key">The key to locate in this <see cref="T:System.Collections.Generic.ListDictionary`2"/>. The key can be <c>null</c>.</param>
            <returns><c>true</c> if this <see cref="T:System.Collections.Generic.ListDictionary`2"/> contains a value with the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:System.Collections.Generic.ListDictionary`2.Keys">
            <summary>
            Gets a collection containing the keys in this <see cref="T:System.Collections.Generic.ListDictionary`2"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ListDictionary`2.Remove(`0)">
            <summary>
            Removes the value associated with a specified key from this <see cref="T:System.Collections.Generic.ListDictionary`2"/>.
            </summary>
            <param name="key">The key associated with the value to remove. The key can be <c>null</c>.</param>
            <returns><c>true</c> if the specific key is successfully found and both this key and its associated value are removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.ListDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value by its associated key.
            </summary>
            <param name="key">The key associated with the value to retrieve. The key can be <c>null</c>.</param>
            <param name="value">When this method returns, this argument contains the value associated with the specified key, if the key is found; otherwise, this argument is assigned the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if this <see cref="T:System.Collections.Generic.ListDictionary`2"/> contains a value with the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.ListDictionary`2.TrySetOrAddValue(`0,`1)">
            <summary>
            Associates the specified <paramref name="key"/> with the specified <paramref name="value"/> if the key already exists in this dictionary; or adds a new key/value pair into this dictionary if the key is not found.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the specified key already exists in this dictionary; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.ListDictionary`2.TrySetValue(`0,`1)">
            <summary>
            Associates the specified <paramref name="key"/> with the specified <paramref name="value"/> if the key already exists in this dictionary.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the specified key already exists in this dictionary; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:System.Collections.Generic.ListDictionary`2.Values">
            <summary>
            Gets a collection containing the values in this <see cref="T:System.Collections.Generic.ListDictionary`2"/>.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.ListDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>The value associated with the specified key.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Occurs when the specified key is not found.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.ListDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds a key/value pair to this <see cref="T:System.Collections.Generic.ListDictionary`2"/>.
            </summary>
            <param name="pair">The key/value pair to add.</param>
        </member>
        <member name="M:System.Collections.Generic.ListDictionary`2.Clear">
            <summary>
            Removes all keys and values from this <see cref="T:System.Collections.Generic.ListDictionary`2"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ListDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether this <see cref="T:System.Collections.Generic.ListDictionary`2"/> contains a specific key/value pair
            </summary>
            <param name="pair">The key/value pair to locate in this <see cref="T:System.Collections.Generic.ListDictionary`2"/>.</param>
            <returns><c>true</c> if the key/value pair is found in this <see cref="T:System.Collections.Generic.ListDictionary`2"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.ListDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies all key/value pairs of this <see cref="T:System.Collections.Generic.ListDictionary`2"/> to an array, starting at a particular array index. 
            </summary>
            <param name="array">The one-dimensional array that is the destination of the key/value pairs copied from this <see cref="T:System.Collections.Generic.ListDictionary`2"/>.</param>
            <param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="P:System.Collections.Generic.ListDictionary`2.Count">
            <summary>
            Gets the number of key/value pairs contained in this <see cref="T:System.Collections.Generic.ListDictionary`2"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ListDictionary`2.GetEnumerator">
            <summary>
            Gets an enumerator that iterates through this <see cref="T:System.Collections.Generic.ListDictionary`2"/>.
            </summary>
            <returns>An enumerator that iterates through the key/value pairs in this <see cref="T:System.Collections.Generic.ListDictionary`2"/>.</returns>
        </member>
        <member name="T:System.Collections.Generic.IMDictionary`2">
            <summary>
            Represents a collection of key/value pairs in which different values can be mapped to the same key.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.IMDictionary`2.Add(`0,`1)">
            <summary>
            Adds a value associated with the specified <paramref name="key"/> to this dictionary.
            </summary>
            <param name="key">The key of the value to add.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:System.Collections.Generic.IMDictionary`2.Remove(`0,`1)">
            <summary>
            Removes a value associated with the specified key from this dictionary.
            </summary>
            <param name="key">The key of the value to remove.</param>
            <param name="value">The value to remove. Multiple values associated with one key are allowed in an <see cref="T:System.Collections.Generic.IMDictionary`2"/> dictionary, so this argument is needed to remove the value.
            </param>
        </member>
        <member name="T:System.Collections.Generic.MDictionary`2">
            <summary>
            Represents a collection of key/value pairs. Different values can be mapped to the same key.
            </summary>
            <typeparam name="TKey">The type of keys in this dictionary.</typeparam>
            <typeparam name="TValue">The type of values in this dictionary.</typeparam>
            <remarks>
            <para>This class inherits from the <see cref="!:Dictionary&lt;TKey,LinkedList&lt;TValue&gt;&gt;"/> class and you may directly operate on the underlying linked list. However, NOTE that the <c>this</c> indexer is modified to return a <typeparamref name="TValue"/> array instead of a linked list.</para>
            <para>This class also implements the <see cref="T:System.Collections.Generic.IMDictionary`2"/> interface, but it is highly not recommended to operate on the underlying linked list through this interface.</para>
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.MDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.MDictionary`2" /> class.
            </summary>
            <param name="capacity">The initial number of lists that the <see cref="T:System.Collections.Generic.MDictionary`2" /> can contain.</param>
        </member>
        <member name="M:System.Collections.Generic.MDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:MDictionary&lt;TValue&gt;" /> class.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.MDictionary`2.Remove(`0,`1)">
            <summary>
            Removes a value associated with the specified key from this dictionary.
            </summary>
            <param name="key">The key of the value to remove.</param>
            <param name="value">The value to remove. Multiple values associated with one key are allowed in this dictionary, so this argument is needed to remove the value.
            </param>
        </member>
        <member name="M:System.Collections.Generic.MDictionary`2.Remove(`0,System.Collections.Generic.IList{`1})">
            <summary>
            Removes values associated with the specified key from this dictionary.
            </summary>
            <param name="key">The key of the values to remove.</param>
            <param name="values">A list of the values to remove.</param>
        </member>
        <member name="M:System.Collections.Generic.MDictionary`2.RemoveByValue(`1)">
            <summary>
            Removes entries with the specified value form this <see cref="T:System.Collections.Generic.MDictionary`2" />.
            </summary>
            <param name="value">Entries with this specified value will be removed from this dictionary.</param>
            <returns>The number of entries removed from this dictionary.</returns>
        </member>
        <member name="M:System.Collections.Generic.MDictionary`2.RemoveByValue(System.Func{`1,System.Boolean})">
            <summary>
            Removes entries satisfying the specified <paramref name="predicate"/> from this <see cref="T:System.Collections.Generic.MDictionary`2" />.
            </summary>
            <param name="predicate">Entries satisfying this predicate will be removed from this dictionary.</param>
            <returns>The number of entries removed from this dictionary.</returns>
        </member>
        <member name="P:System.Collections.Generic.MDictionary`2.TotalCount">
            <summary>
            Gets the total number of key/value pairs contained in this dictionary.
            <para>NOTE that this value may be different from property <c>Keys.Count</c> and <c>Values.Count</c>. To get the number of keys, use <c>Keys.Count</c> instead.</para>
            </summary>
        </member>
        <member name="M:System.Collections.Generic.MDictionary`2.Count(`0)">
            <summary>
            Counts the number of values associated with the specified <paramref name="key"/> in this dictionary.
            </summary>
            <param name="key">The key.</param>
            <returns>The number of values associated with the specified <paramref name="key"/>.</returns>
        </member>
        <member name="M:System.Collections.Generic.MDictionary`2.Add(`0,`1)">
            <summary>
            Adds a value associated with the specified <paramref name="key"/> to this dictionary.
            </summary>
            <param name="key">The key of the value to add.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:System.Collections.Generic.MDictionary`2.Add(`0,`1,System.Collections.Generic.LinkedListNode{`1}@)">
            <summary>
            Adds a value associated with the specified <paramref name="key"/> to this dictionary.
            </summary>
            <param name="key">The key of the value to add.</param>
            <param name="value">The value to add.</param>
            <param name="node">Returns a <see cref="!:LinkedListNode&lt;TValue;&gt;"/> object that contains the added value.</param>
        </member>
        <member name="M:System.Collections.Generic.MDictionary`2.SortedAdd(`0,`1,System.Boolean)">
            <summary>
            Adds a value associated with the specified <paramref name="key"/> to this dictionary in a sorted manner. 
            If this method has been used to ensure all elements associated with the same key are arranged in a sorted manner, 
            the other method <see cref="M:System.Collections.Generic.MDictionary`2.Add(`0,`1)"/> should not be called, or the sort could be disrupted.
            </summary>
            <param name="key">The key of the value to add.</param>
            <param name="value">The value to add.</param>
            <param name="descending"><c>true</c> if the elements associated with the same key should be arrange in descending order; <c>false</c> if ascending order applies.</param>
        </member>
        <member name="M:System.Collections.Generic.MDictionary`2.SortedAdd(`0,`1,System.Collections.Generic.LinkedListNode{`1}@,System.Boolean)">
            <summary>
            Adds a value associated with the specified <paramref name="key"/> to this dictionary in a sorted manner. 
            If this method has been used to ensure all elements associated with the same key are arranged in a sorted manner, 
            the other method <see cref="M:System.Collections.Generic.MDictionary`2.Add(`0,`1)"/> should not be called, or the sort could be disrupted.
            </summary>
            <param name="key">The key of the value to add.</param>
            <param name="value">The value to add.</param>
            <param name="descending"><c>true</c> if the elements associated with the same key should be arrange in descending order; <c>false</c> if ascending order applies.</param>
            <param name="node">Returns a <see cref="!:LinkedListNode&lt;TValue;&gt;"/> object that contains the added value.</param>
        </member>
        <member name="M:System.Collections.Generic.MDictionary`2.SortedAdd(`0,`1,System.Func{`1,System.IComparable},System.Boolean)">
            <summary>
            Adds a value associated with the specified <paramref name="key"/> to this dictionary in a sorted manner.
            If this method has been used to ensure all elements associated with the same key are arranged in a sorted manner,
            the other method <see cref="M:System.Collections.Generic.MDictionary`2.Add(`0,`1)"/> should not be called, or the sort could be disrupted.
            </summary>
            <param name="key">The key of the value to add.</param>
            <param name="value">The value to add.</param>
            <param name="toComparable">A method converting the value to add to a comparable type.</param>
            <param name="descending"><c>true</c> if the elements associated with the same key should be arrange in descending order; <c>false</c> if ascending order applies.</param>
        </member>
        <member name="M:System.Collections.Generic.MDictionary`2.Add(`0,System.Collections.Generic.IList{`1})">
            <summary>
            Adds values associated with the specified <paramref name="key"/> to this dictionary.
            </summary>
            <param name="key">The key of the values to add.</param>
            <param name="values">The list of the values to add.</param>
        </member>
        <member name="P:System.Collections.Generic.MDictionary`2.Item(`0)">
            <summary>
            Gets the values associated with the specified key.
            </summary>
            <param name="key">The key of the values to get.</param>
            <returns>The values associated with the specified key it the key is found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="T:System.Collections.Generic.MListDictionary`2">
            <summary>
            Represents a collection of key/value pairs. Different values can be mapped to the same key. Recommended for collections that typically contain 10 keys or less.
            </summary>
            <typeparam name="TKey">The type of keys in this dictionary.</typeparam>
            <typeparam name="TValue">The type of values in this dictionary.</typeparam>
            <remarks>
            <para>This class inherits from the <see cref="T:System.Collections.Generic.ListDictionary`2"/> class and you may directly operate on the underlying linked list. However, NOTE that the <c>this</c> indexer is modified to return a <typeparamref name="TValue"/> array instead of a linked list.</para>
            <para>This class also implements the <see cref="T:System.Collections.Generic.IMDictionary`2"/> interface, but it is highly not recommended to operate on the underlying linked list through this interface.</para>
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.MListDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.MListDictionary`2" /> class.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.MListDictionary`2.Remove(`0,`1)">
            <summary>
            Removes a value associated with the specified key from this dictionary.
            </summary>
            <param name="key">The key of the value to remove.</param>
            <param name="value">The value to remove. Multiple values associated with one key are allowed in this dictionary, so this argument is needed to remove the value.</param>
        </member>
        <member name="M:System.Collections.Generic.MListDictionary`2.Remove(`0,System.Collections.Generic.IList{`1})">
            <summary>
            Removes values associated with the specified key from this dictionary.
            </summary>
            <param name="key">The key of the values to remove.</param>
            <param name="values">A list of the values to remove.</param>
        </member>
        <member name="P:System.Collections.Generic.MListDictionary`2.TotalCount">
            <summary>
            Gets the total number of key/value pairs contained in this dictionary.
            <para>NOTE that this value may be different from property <c>Keys.Count</c> and <c>Values.Count</c>. To get the number of keys, use <c>Keys.Count</c> instead.</para>
            </summary>
        </member>
        <member name="M:System.Collections.Generic.MListDictionary`2.Add(`0,`1)">
            <summary>
            Adds a value associated with the specified key to this dictionary.
            </summary>
            <param name="key">The key of the value to add.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:System.Collections.Generic.MListDictionary`2.Add(`0,System.Collections.Generic.IList{`1})">
            <summary>
            Adds values associated with the specified key to this dictionary.
            </summary>
            <param name="key">The key of the values to add.</param>
            <param name="value">The list of the values to add.</param>
        </member>
        <member name="P:System.Collections.Generic.MListDictionary`2.Item(`0)">
            <summary>
            Gets the values associated with the specified key.
            </summary>
            <param name="key">The key of the values to get.</param>
            <returns>The values associated with the specified key it the key is found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="T:System.Collections.Generic.MSortedDictionary`2">
            <summary>
            Represents a collection of key/value pairs that are sorted on the key. Different values can be mapped to the same key. NOTE that the values associated with the same key are not sorted.
            </summary>
            <typeparam name="TKey">The type of keys in this dictionary.</typeparam>
            <typeparam name="TValue">The type of values in this dictionary.</typeparam>
            <remarks>
            <para>This class inherits from the <see cref="!:SortedDictionary&lt;TKey,LinkedList&lt;TValue&gt;&gt;"/> class and you may directly operate on the underlying linked list. However, NOTE that the <c>this</c> indexer is modified to return a <typeparamref name="TValue"/> array instead of a linked list.</para>
            <para>This class also implements the <see cref="T:System.Collections.Generic.IMDictionary`2"/> interface, but it is highly not recommended to operate on the underlying linked list through this interface.</para>
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.MSortedDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.MSortedDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.MSortedDictionary`2.Remove(`0,`1)">
            <summary>
            Removes a value associated with the specified key from this dictionary.
            </summary>
            <param name="key">The key of the value to remove.</param>
            <param name="value">The value to remove.
            <para>** Multiple values associated with one key are allowed in this dictionary, so this argument is needed to remove the value.</para>
            </param>
        </member>
        <member name="M:System.Collections.Generic.MSortedDictionary`2.Remove(`0,System.Collections.Generic.IList{`1})">
            <summary>
            Removes values with the specified key from this dictionary.
            </summary>
            <param name="key">The key of the values to remove.</param>
            <param name="values">A list of the values to remove.</param>
        </member>
        <member name="P:System.Collections.Generic.MSortedDictionary`2.TotalCount">
            <summary>
            Gets the number of key/value pairs that are actually contained in this dictionary.
            <para>!!! Not like System.Collection.Generic&lt;TKey,TValue&gt; class, 
            this value may be different from property "Keys.Count" and "Values.Count".</para>
            <para>** To get the number of keys, which may be different from this value, use "Keys.Count" property.</para>
            </summary>
        </member>
        <member name="M:System.Collections.Generic.MSortedDictionary`2.Add(`0,`1)">
            <summary>
            Adds a value associated with the specified key to this dictionary.
            </summary>
            <param name="key">The key of the value to add.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:System.Collections.Generic.MSortedDictionary`2.SortedAdd(`0,`1,System.Boolean)">
            <summary>
            Adds a value associated with the specified key to this dictionary. 
            If this method has been used to ensure all elements associated with the same key are arranged in an ordered fashion, 
            the other method <c>Add</c> should not be called, or the sort could be disrupted.
            </summary>
            <param name="key">The key of the value to add.</param>
            <param name="value">The value to add.</param>
            <param name="descending"><c>true</c> if the elements associated with the same key should be arrange in descending order; <c>false</c> if ascending order applies.</param>
            <remarks>
            Note that this method help keep the order of element associated with the same key, not the order of keys.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.MSortedDictionary`2.SortedAdd(`0,`1,System.Func{`1,System.IComparable},System.Boolean)">
            <summary>
            Adds a value associated with the specified key to this dictionary.
            If this method has been used to ensure all elements associated with the same key are arranged in an ordered fashion,
            the other method <c>Add</c> should not be called, or the sort could be disrupted.
            </summary>
            <param name="key">The key of the value to add.</param>
            <param name="value">The value to add.</param>
            <param name="toComparable">A method converting the value to add to a comparable type.</param>
            <param name="descending"><c>true</c> if the elements associated with the same key should be arrange in descending order; <c>false</c> if ascending order applies.</param>
            <remarks>
            Note that this method help keep the order of element associated with the same key, not the order of keys.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.MSortedDictionary`2.Add(`0,System.Collections.Generic.IList{`1})">
            <summary>
            Adds values associated with the specified key to this dictionary.
            </summary>
            <param name="key">The key of the values to add.</param>
            <param name="values">The list of the values to add.</param>
        </member>
        <member name="M:System.Collections.Generic.MSortedDictionary`2.PickMinimum">
            <summary>
            Picks a value associated with the minimum key from this dictionary.
            <para>!!! When picked out, this value will be removed from this dictionary.</para>
            <para>!!! The returned value is usually the lastest value added to this dictionary.</para>
            </summary>
            <returns>The value picked out.</returns>
        </member>
        <member name="M:System.Collections.Generic.MSortedDictionary`2.PickMaximum">
            <summary>
            Picks a value associated with the maximum key from this dictionary.
            <para>!!! When picked out, this value will be removed from this dictionary.</para>
            <para>!!! The returned value is usually the lastest value added to this dictionary.</para>
            </summary>
            <returns>The value picked out.</returns>
        </member>
        <member name="M:System.Collections.Generic.MSortedDictionary`2.PickMinimum(`0@)">
            <summary>
            Picks a value associated with the minimum key from this dictionary.
            <para>!!! When picked out, this value will be removed from this dictionary.</para>
            <para>!!! The returned value is usually the lastest value added to this dictionary.</para>
            </summary>
            <param name="key">Returns the key associated with the value picked out.</param>
            <returns>The value picked out.</returns>
        </member>
        <member name="M:System.Collections.Generic.MSortedDictionary`2.PickMaximum(`0@)">
            <summary>
            Picks a value associated with the maximum key from this dictionary.
            <para>!!! When picked out, this value will be removed from this dictionary.</para>
            <para>!!! The returned value is usually the lastest value added to this dictionary.</para>
            </summary>
            <param name="key">Returns the key associated with the value picked out.</param>
            <returns>The value picked out.</returns>
        </member>
        <member name="M:System.Collections.Generic.MSortedDictionary`2.PeekMinimum(`0@)">
            <summary>
            Returns a value associated with the minimum key from this dictionary.
            <para>!!! The returned value is usually the lastest value added to this dictionary.</para>
            </summary>
            <param name="key">Returns the key associated with the value picked out.</param>
            <returns>A value associated with the minimum key.</returns>
        </member>
        <member name="M:System.Collections.Generic.MSortedDictionary`2.PeekMaximum(`0@)">
            <summary>
            Returns a value associated with the maximum key from this dictionary.
            <para>!!! The returned value is usually the lastest value added to this dictionary.</para>
            </summary>
            <param name="key">Returns the key associated with the value picked out.</param>
            <returns>A value associated with the maximum key.</returns>
        </member>
        <member name="M:System.Collections.Generic.MSortedDictionary`2.PeekMinimum">
            <summary>
            Returns a value associated with the minimum key from this dictionary.
            <para>!!! The returned value is usually the lastest value added to this dictionary.</para>
            </summary>
            <returns>A value associated with the minimum key.</returns>
        </member>
        <member name="M:System.Collections.Generic.MSortedDictionary`2.PeekMaximum">
            <summary>
            Returns a value associated with the maximum key from this dictionary.
            <para>!!! The returned value is usually the lastest value added to this dictionary.</para>
            </summary>
            <returns>A value associated with the maximum key.</returns>
        </member>
        <member name="P:System.Collections.Generic.MSortedDictionary`2.Item(`0)">
            <summary>
            Gets the values associated with the specified key.
            </summary>
            <param name="key">The key of the values to get.</param>
            <returns>The values associated with the specified key it the key is found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="T:System.Collections.Generic.MSortedList`2">
            <summary>
            Represents a collection of key/value pairs that are sorted on the key. Different values can be mapped to the same key. NOTE that the values associated with the same key are not sorted.
            </summary>
            <typeparam name="TKey">The type of keys in this dictionary.</typeparam>
            <typeparam name="TValue">The type of values in this dictionary.</typeparam>
            <remarks>
            <para>This class inherits from the <see cref="!:SortedList&lt;TKey,LinkedList&lt;TValue&gt;&gt;"/> class and you may directly operate on the underlying linked list. However, NOTE that the <c>this</c> indexer is modified to return a <typeparamref name="TValue"/> array instead of a linked list.</para>
            <para>This class also implements the <see cref="T:System.Collections.Generic.IMDictionary`2"/> interface, but it is highly not recommended to operate on the underlying linked list through this interface.</para>
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.MSortedList`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.MSortedList`2"/> class.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.MSortedList`2.Remove(`0,`1)">
            <summary>
            Removes a value associated with the specified key from this dictionary.
            </summary>
            <param name="key">The key of the value to remove.</param>
            <param name="value">The value to remove.
            <para>** Multiple values associated with one key are allowed in this dictionary, so this argument is needed to remove the value.</para>
            </param>
        </member>
        <member name="M:System.Collections.Generic.MSortedList`2.Remove(`0,System.Collections.Generic.IList{`1})">
            <summary>
            Removes values with the specified key from this dictionary.
            </summary>
            <param name="key">The key of the values to remove.</param>
            <param name="values">A list of the values to remove.</param>
        </member>
        <member name="P:System.Collections.Generic.MSortedList`2.TotalCount">
            <summary>
            Gets the number of key/value pairs that are actually contained in this dictionary.
            <para>!!! Not like System.Collection.Generic&lt;TKey,TValue&gt; class, 
            this value may be different from property "Keys.Count" and "Values.Count".</para>
            <para>** To get the number of keys, which may be different from this value, use "Keys.Count" property.</para>
            </summary>
        </member>
        <member name="M:System.Collections.Generic.MSortedList`2.Add(`0,`1)">
            <summary>
            Adds a value associated with the specified key to this dictionary.
            </summary>
            <param name="key">The key of the value to add.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:System.Collections.Generic.MSortedList`2.SortedAdd(`0,`1,System.Boolean)">
            <summary>
            Adds a value associated with the specified key to this dictionary. 
            If this method has been used to ensure all elements associated with the same key are arranged in an ordered fashion, 
            the other method <c>Add</c> should not be called, or the sort could be disrupted.
            </summary>
            <param name="key">The key of the value to add.</param>
            <param name="value">The value to add.</param>
            <param name="descending"><c>true</c> if the elements associated with the same key should be arrange in descending order; <c>false</c> if ascending order applies.</param>
            <remarks>
            Note that this method help keep the order of element associated with the same key, not the order of keys.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.MSortedList`2.SortedAdd(`0,`1,System.Func{`1,System.IComparable},System.Boolean)">
            <summary>
            Adds a value associated with the specified key to this dictionary.
            If this method has been used to ensure all elements associated with the same key are arranged in an ordered fashion,
            the other method <c>Add</c> should not be called, or the sort could be disrupted.
            </summary>
            <param name="key">The key of the value to add.</param>
            <param name="value">The value to add.</param>
            <param name="toComparable">A method converting the value to add to a comparable type.</param>
            <param name="descending"><c>true</c> if the elements associated with the same key should be arrange in descending order; <c>false</c> if ascending order applies.</param>
            <remarks>
            Note that this method help keep the order of element associated with the same key, not the order of keys.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.MSortedList`2.Add(`0,System.Collections.Generic.IList{`1})">
            <summary>
            Adds values associated with the specified key to this dictionary.
            </summary>
            <param name="key">The key of the values to add.</param>
            <param name="values">The list of the values to add.</param>
        </member>
        <member name="M:System.Collections.Generic.MSortedList`2.PickMinimum">
            <summary>
            Picks a value associated with the minimum key from this dictionary.
            <para>!!! When picked out, this value will be removed from this dictionary.</para>
            <para>!!! The returned value is usually the lastest value added to this dictionary.</para>
            </summary>
            <returns>The value picked out.</returns>
        </member>
        <member name="M:System.Collections.Generic.MSortedList`2.PickMaximum">
            <summary>
            Picks a value associated with the maximum key from this dictionary.
            <para>!!! When picked out, this value will be removed from this dictionary.</para>
            <para>!!! The returned value is usually the lastest value added to this dictionary.</para>
            </summary>
            <returns>The value picked out.</returns>
        </member>
        <member name="M:System.Collections.Generic.MSortedList`2.PickMinimum(`0@)">
            <summary>
            Picks a value associated with the minimum key from this dictionary.
            <para>!!! When picked out, this value will be removed from this dictionary.</para>
            <para>!!! The returned value is usually the latest value added to this dictionary.</para>
            </summary>
            <param name="key">Returns the key associated with the value picked out.</param>
            <returns>The value picked out.</returns>
        </member>
        <member name="M:System.Collections.Generic.MSortedList`2.PickMaximum(`0@)">
            <summary>
            Picks a value associated with the maximum key from this dictionary.
            <para>!!! When picked out, this value will be removed from this dictionary.</para>
            <para>!!! The returned value is usually the latest value added to this dictionary.</para>
            </summary>
            <param name="key">Returns the key associated with the value picked out.</param>
            <returns>The value picked out.</returns>
        </member>
        <member name="M:System.Collections.Generic.MSortedList`2.PeekMinimum(`0@)">
            <summary>
            Returns a value associated with the minimum key from this dictionary.
            <para>!!! The returned value is usually the lastest value added to this dictionary.</para>
            </summary>
            <param name="key">Returns the key associated with the value picked out.</param>
            <returns>A value associated with the minimum key.</returns>
        </member>
        <member name="M:System.Collections.Generic.MSortedList`2.PeekMaximum(`0@)">
            <summary>
            Returns a value associated with the maximum key from this dictionary.
            <para>!!! The returned value is usually the lastest value added to this dictionary.</para>
            </summary>
            <param name="key">Returns the key associated with the value picked out.</param>
            <returns>A value associated with the maximum key.</returns>
        </member>
        <member name="M:System.Collections.Generic.MSortedList`2.PeekMinimum">
            <summary>
            Returns a value associated with the minimum key from this dictionary.
            <para>!!! The returned value is usually the lastest value added to this dictionary.</para>
            </summary>
            <returns>A value associated with the minimum key.</returns>
        </member>
        <member name="M:System.Collections.Generic.MSortedList`2.PeekMaximum">
            <summary>
            Returns a value associated with the maximum key from this dictionary.
            <para>!!! The returned value is usually the lastest value added to this dictionary.</para>
            </summary>
            <returns>A value associated with the maximum key.</returns>
        </member>
        <member name="P:System.Collections.Generic.MSortedList`2.Item(`0)">
            <summary>
            Gets the values associated with the specified key.
            </summary>
            <param name="key">The key of the values to get.</param>
            <returns>The values associated with the specified key it the key is found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="T:System.Collections.Generic.ReadOnlyArrayDictionary`2">
            <summary>
            Implements <see cref="T:System.Collections.Generic.IDictionary`2"/>, <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/> and <see cref="T:System.Collections.Generic.IList`1"/> using a <typeparamref name="TKey"/> array and a <typeparamref name="TValue"/> array. 
            </summary>
            <typeparam name="TKey">The type of keys in this dictionary.</typeparam>
            <typeparam name="TValue">The type of values in this dictionary.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyArrayDictionary`2.#ctor(`0[],`1[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.ReadOnlyArrayDictionary`2"/> class using a <typeparamref name="TKey"/> array and a <typeparamref name="TValue"/> array.
            </summary>
            <param name="keys">An <typeparamref name="TKey"/> array whose element at an index <c>i</c> is the key associated with the <c>i</c>th element in <paramref name="values"/>.</param>
            <param name="values">The <typeparamref name="TValue"/> array whose element at an index <c>i</c> is using the <c>i</c>th element in <paramref name="values"/> as the key.</param>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyArrayDictionary`2.IndexOf(`0)">
            <summary>
            Gets the index of specific key.
            </summary>
            <param name="key">The key to locate in this <see cref="T:System.Collections.Generic.ReadOnlyArrayDictionary`2"/>.</param>
            <returns>The index of the specific key if the key exists in this <see cref="T:System.Collections.Generic.ReadOnlyArrayDictionary`2"/>; otherwise -1.</returns>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyArrayDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether this <see cref="T:System.Collections.Generic.ReadOnlyArrayDictionary`2"/> contains a specific key.
            </summary>
            <param name="key">The key to locate in this <see cref="T:System.Collections.Generic.ReadOnlyArrayDictionary`2"/>.</param>
            <returns><c>true</c> if this <see cref="T:System.Collections.Generic.ReadOnlyArrayDictionary`2"/> contains a value with the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:System.Collections.Generic.ReadOnlyArrayDictionary`2.Keys">
            <summary>
            Gets a collection containing the keys in this <see cref="T:System.Collections.Generic.ReadOnlyArrayDictionary`2"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyArrayDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if this <see cref="T:System.Collections.Generic.ReadOnlyArrayDictionary`2"/> contains a value with the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:System.Collections.Generic.ReadOnlyArrayDictionary`2.Values">
            <summary>
            Gets a collection containing the values in this <see cref="T:System.Collections.Generic.ReadOnlyArrayDictionary`2"/>.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.ReadOnlyArrayDictionary`2.Item(`0)">
            <summary>
            Gets the value associated with the specified index.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <returns>The value associated with the specified key. If the specified key is not found, a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException"/>, and a set operation creates a new value with the specified key.</returns>
        </member>
        <member name="P:System.Collections.Generic.ReadOnlyArrayDictionary`2.Count">
            <summary>
            Gets the number of key/value pairs contained in this <see cref="T:System.Collections.Generic.ReadOnlyArrayDictionary`2"/>.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.SinglyLinkedList`1">
            <summary>
            Represents a singly-linked list.
            </summary>
            <typeparam name="T">Specifies the element type of the linked list.</typeparam>
            <remarks>
            SinglyLinkedList{T} is a general-purpose singly-linked list. It supports enumerators and implements the <see cref="T:System.Collections.ICollection"/> interface, consistent with other collection classes in the .NET Framework. In comparison with <see cref="T:System.Collections.Generic.LinkedList`1"/>, which is doubly-linked, this class saves some memory and has slightly higher performance. Each node of this singly-linked list is represented by a <see cref="T:System.Collections.Generic.SinglyLinkedListNode`1"/>, which only points forward to the next node and DOES NOT provide a reference to its attached list like <see cref="T:System.Collections.Generic.LinkedListNode`1"/>. In other words, each node only has two properties - <c>Value</c> and <c>Next</c>.
            <para>Because each node of a <see cref="T:System.Collections.Generic.SinglyLinkedListNode`1"/> does not refer to the attached list, the list does not perform attachment validation when a node is added or removed from the list. In this case, any usage of this singly-linked list must ensure the attachment.</para>
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.SinglyLinkedList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.SinglyLinkedList`1"/> class.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SinglyLinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.SinglyLinkedList`1"/> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> and has sufficient capacity to accommodate the number of elements copied.
            </summary>
            <param name="enumerable">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are copied to the new <see cref="T:System.Collections.Generic.SinglyLinkedList`1"/>.</param>
        </member>
        <member name="P:System.Collections.Generic.SinglyLinkedList`1.First">
            <summary>
            Gets the first node of the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.
            </summary>
            <value>The first node of the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.</value>
        </member>
        <member name="P:System.Collections.Generic.SinglyLinkedList`1.Last">
            <summary>
            Gets the last node of the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.
            </summary>
            <value>The last node of the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.</value>
        </member>
        <member name="M:System.Collections.Generic.SinglyLinkedList`1.AddFirst(`0)">
            <summary>
            Adds a new node containing the specified value at the start of the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.
            </summary>
            <param name="value">The value to add at the start of the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.</param>
            <remarks>
            <see cref="T:System.Collections.Generic.SinglyLinkedList`1" /> accepts <c>null</c> as a valid Value for reference types and allows duplicate values. If the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" /> is empty, the new node becomes the <see cref="P:System.Collections.Generic.SinglyLinkedList`1.First"/> and the <see cref="P:System.Collections.Generic.SinglyLinkedList`1.Last"/>.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.SinglyLinkedList`1.AddFirst(System.Collections.Generic.SinglyLinkedListNode{`0})">
            <summary>
            Adds the specified node at the start of the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.
            </summary>
            <param name="node">The <see cref="T:System.Collections.Generic.SinglyLinkedListNode`1"/> to add at the start of the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.</param>
        </member>
        <member name="M:System.Collections.Generic.SinglyLinkedList`1.AddFirst(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a sequence of values at the beginning of the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.
            </summary>
            <param name="values">The values to add at the beginning of the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.</param>
        </member>
        <member name="M:System.Collections.Generic.SinglyLinkedList`1.AddFirst(`0[])">
            <summary>
            Adds an array of values at the beginning of the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.
            </summary>
            <param name="values">The values to add at the beginning of the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.</param>
        </member>
        <member name="M:System.Collections.Generic.SinglyLinkedList`1.AddLast(`0)">
            <summary>
            Adds the specified value at the end of the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.
            </summary>
            <param name="value">The value to add at the end of the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.</param>
            <remarks>
            <see cref="T:System.Collections.Generic.SinglyLinkedList`1" /> accepts <c>null</c> as a valid Value for reference types and allows duplicate values. If the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" /> is empty, the new node becomes the <see cref="P:System.Collections.Generic.SinglyLinkedList`1.First"/> and the <see cref="P:System.Collections.Generic.SinglyLinkedList`1.Last"/>.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.SinglyLinkedList`1.AddLast(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a sequence of values at the end of the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.
            </summary>
            <param name="values">The values to add at the end of the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.</param>
        </member>
        <member name="M:System.Collections.Generic.SinglyLinkedList`1.AddLast(`0[])">
            <summary>
            Adds an array of values at the end of the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.
            </summary>
            <param name="values">The values to add at the end of the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.</param>
        </member>
        <member name="M:System.Collections.Generic.SinglyLinkedList`1.AddLast(System.Collections.Generic.SinglyLinkedListNode{`0})">
            <summary>
            Adds the specified node at the end of the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.
            </summary>
            <param name="node">The <see cref="T:System.Collections.Generic.SinglyLinkedListNode`1"/> to add at the end of the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.</param>
        </member>
        <member name="M:System.Collections.Generic.SinglyLinkedList`1.AddAfter(System.Collections.Generic.SinglyLinkedListNode{`0},`0)">
            <summary>
            Adds a new node containing the specified value after the specified existing node in the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.
            </summary>
            <param name="node">The <see cref="T:System.Collections.Generic.SinglyLinkedListNode`1" /> after which to insert another <see cref="T:System.Collections.Generic.SinglyLinkedListNode`1" /> containing value.</param>
            <param name="value">The value to add to the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.</param>
        </member>
        <member name="M:System.Collections.Generic.SinglyLinkedList`1.AddAfter(System.Collections.Generic.SinglyLinkedListNode{`0},System.Collections.Generic.SinglyLinkedListNode{`0})">
            <summary>
            Adds the specified <paramref name="nodeToAdd"/> after the specified existing node in the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.
            </summary>
            <param name="node">The <see cref="T:System.Collections.Generic.SinglyLinkedListNode`1" /> after which to insert <paramref name="nodeToAdd"/>.</param>
            <param name="nodeToAdd">Another <see cref="T:System.Collections.Generic.SinglyLinkedListNode`1" /> to add after the <paramref name="node"/>.</param>
        </member>
        <member name="M:System.Collections.Generic.SinglyLinkedList`1.Clear">
            <summary>
            Removes all nodes from the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SinglyLinkedList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" /> contains a specific value.
            </summary>
            <param name="value">The value to locate in the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.</param>
            <returns>true if <paramref name="value" /> is found in the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />; otherwise, false.</returns>
        </member>
        <member name="M:System.Collections.Generic.SinglyLinkedList`1.Find(`0)">
            <summary>
            Finds the first node that contains the specified value. The <see cref="T:System.Collections.Generic.SinglyLinkedList`1" /> is searched forward starting at First and ending at Last.
            </summary>
            <param name="value">The value to locate in the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.</param>
            <returns>The first <see cref="T:System.Collections.Generic.SinglyLinkedListNode`1" /> that contains the specified value, if found; otherwise, <c>null</c>.</returns>
            <remarks>This method performs a linear search; therefore, this method is an O(<c>n</c>) operation, where <c>n</c> is <see cref="P:System.Collections.Generic.SinglyLinkedList`1.Count"/>.</remarks>
        </member>
        <member name="M:System.Collections.Generic.SinglyLinkedList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:System.Collections.Generic.SinglyLinkedList`1" /> to a compatible one-dimensional <see cref="T:System.Array"/>, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:System.Collections.Generic.SinglyLinkedList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.
            </summary>
            <value>The number of nodes actually contained in the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.</value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.</returns>
        </member>
        <member name="M:System.Collections.Generic.SinglyLinkedList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific <paramref name="value"/> from the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.
            </summary>
            <param name="value">The value to remove from the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.</param>
            <returns><c>true</c> if <paramref name="value" /> was successfully removed from the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.SinglyLinkedList`1.Remove(System.Collections.Generic.SinglyLinkedListNode{`0})">
            <summary>
            Removes the specified node from the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.
            </summary>
            <param name="node">The node to remove from the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.</param>
            <returns><c>true</c> if <paramref name="node"/> was successfully removed from the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.SinglyLinkedList`1.RemoveFirst">
            <summary>
            Removes the node at the start of the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SinglyLinkedList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.</returns>
            <remarks>At first the enumerator is positioned before the first node. At this position, <c>Current</c> is undefined. When you first call the <c>MoveNext</c> method, the enumerator move to the first node. After that, the enumerator moves to the next node each time <c>MoveNext</c> is called, until the last node is reached. When the last node is reached after <c>MoveNext</c> is called, the next call of <c>MoveNext</c> will return <c>false</c>.</remarks>
        </member>
        <member name="T:System.Collections.Generic.SinglyLinkedListNode`1">
            <summary>
            Represents a node in a <see cref="T:System.Collections.Generic.SinglyLinkedList`1"/>.
            </summary>
            <typeparam name="T">Specifies the element type of the linked list.</typeparam>
            <remarks>
            Each element of the <see cref="T:System.Collections.Generic.SinglyLinkedList`1"/> collection is a <see cref="T:System.Collections.Generic.SinglyLinkedListNode`1"/>. The <see cref="T:System.Collections.Generic.SinglyLinkedListNode`1"/> contains a value and a reference to the next node. Unlike a <see cref="T:System.Collections.Generic.LinkedListNode`1"/>, this class does not reference to the previous node and the list it belongs to, which saves 8 Bytes on a machine that uses 32-bit memory architecture (like a x86 machine), and 16 Bytes on a machine that uses 64-bit memory architecture (like a x64 machine).
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.SinglyLinkedListNode`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.SinglyLinkedListNode`1" /> class.
            </summary>
            <param name="value">The value to contain in the <see cref="T:System.Collections.Generic.SinglyLinkedListNode`1" />.</param>
        </member>
        <member name="M:System.Collections.Generic.SinglyLinkedListNode`1.#ctor(`0,System.Collections.Generic.SinglyLinkedListNode{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.SinglyLinkedListNode`1"/> class.
            </summary>
            <param name="value">The value to contain in the <see cref="T:System.Collections.Generic.SinglyLinkedListNode`1" />.</param>
            <param name="next">The next <see cref="T:System.Collections.Generic.SinglyLinkedListNode`1" />, or <c>null</c> if the current node is the last in the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.</param>
        </member>
        <member name="P:System.Collections.Generic.SinglyLinkedListNode`1.Next">
            <summary>
            Gets the next <see cref="T:System.Collections.Generic.SinglyLinkedListNode`1" /> node.
            </summary>
            <value>A reference to the next node in the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />, or <c>null</c> if the current node is the last element of the <see cref="T:System.Collections.Generic.SinglyLinkedList`1" />.</value>
        </member>
        <member name="P:System.Collections.Generic.SinglyLinkedListNode`1.Value">
            <summary>
            Gets or sets the value contained in the node.
            </summary>
            <value>The value contained in the node.</value>
        </member>
        <member name="T:System.Collections.Generic.IBinaryTree`1">
            <summary>
            Represents a binary tree (or a binary tree node, which can be viewed as a binary tree).
            </summary>
            <typeparam name="T">The type of values stored in the binary tree.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.IBinaryTree`1.LeftChild">
            <summary>
            Gets the left child of this binary tree node.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.IBinaryTree`1.RightChild">
            <summary>
            Gets the right child of this binary tree node.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.BinaryTree`1">
            <summary>
            Represents a binary tree (or a tree node, which can be viewed as a tree).
            </summary>
            <typeparam name="T">The type of values stored in this tree node.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.BinaryTree`1.Value">
            <summary>
            Gets or set the value of this binary tree node.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.BinaryTree`1.Parent">
            <summary>
            Gets the parent of this binary tree node. If this tree node is root, a null reference will be returned.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.BinaryTree`1.LeftChild">
            <summary>
            Gets or sets the left child.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.BinaryTree`1.RightChild">
            <summary>
            Gets or sets the right child.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.BinaryTree`1.Equals(System.Collections.Generic.IBinaryTree{`0})">
            <summary>
            Determines whether the specified <see cref="!:System.IBinaryTree&lt;T&gt;"/> is identical (same structure same data, but not necessarily same type) to the current <see cref="!:System.BinaryTree&lt;T&gt;"/>.
            </summary>
            <param name="tree">The <see cref="!:System.IBinaryTree&lt;T&gt;"/> to compare.</param>
            <returns>true if the two trees are identical, otherwise false.</returns>
        </member>
        <member name="M:System.Collections.Generic.BinaryTree`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="!:System.BinaryTree&lt;T&gt;"/>.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>true if the objects are equal, otherwise false.</returns>
        </member>
        <member name="P:System.Collections.Generic.DTree`2.Value">
            <summary>
            Gets or sets the value of this tree node.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.DTree`2.Key">
            <summary>
            Gets the key associated with this tree node.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.DTree`2.Parent">
            <summary>
            Gets or sets the parent of this tree node. If this tree node is root, a null reference will be returned.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.DTree`2.AddChild(`0,`1)">
            <summary>
            Adds a new child node with the specified key/value pair to this tree node.
            </summary>
            <param name="key">The key of the child node to add.</param>
            <param name="value">The value of the child node to add.</param>
            <returns>
            The added new child node.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.DTree`2.AddChild(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds a new child node with the specified key/value pair to this tree node.
            </summary>
            <param name="pair">The key/value pair of the child node to add.</param>
            <returns>
            The added new child node.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.DTree`2.AddChild(System.Collections.Generic.DTree{`0,`1})">
            <summary>
            Adds a child node to this tree node.
            </summary>
            <param name="node">The child node to add.</param>
        </member>
        <member name="P:System.Collections.Generic.DTree`2.Item(`0)">
            <summary>
            Gets the child node associated with the specified key.
            </summary>
            <param name="childKey">The key of the child node.</param>
            <returns>The child node associated with the specified key.</returns>
        </member>
        <member name="M:System.Collections.Generic.DTree`2.TryGetChild(`0,System.Collections.Generic.DTree{`0,`1}@)">
            <summary>
            Gets the child node associated with the specified key.
            </summary>
            <param name="childKey">The key of the child node.</param>
            <param name="child">Returns the child node associated with the specified key, if the key is found; otherwise, <c>null</c>.</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.DTree`2.RemoveChild(`0)">
            <summary>
            Removes the child node associated with the specified key.
            </summary>
            <param name="childKey">The key of the child remove.</param>
            <returns><c>true</c> if the child node associated with the specified key is successfully removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.DTree`2.RemoveChild(System.Collections.Generic.DTree{`0,`1})">
            <summary>
            Removes the specified child node from this tree node.
            </summary>
            <param name="node">The child node to remove.</param>
            <returns>
            <c>true</c> if the child node is successfully removed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.DTree`2.Next">
            <summary>
            Randomly returns a leaf descendant of this tree node.
            </summary>
            <returns>A random leaf descendant of this tree node.</returns>
        </member>
        <member name="M:System.Collections.Generic.DTree`2.Clear">
            <summary>
            Clears all descendants from this tree node.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.DTree`2.HasChildren">
            <summary>
            Gets a value indicating whether this tree node has children.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.DTree`2.CopyTo(System.Collections.Generic.KeyValuePair{System.Collections.Generic.IList{`0},`1}[],System.Int32)">
            <summary>
            Copies all path-value pairs in this tree to an existing one-dimensional <see cref="T:System.Array"/>, starting at the specified array index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the path-value pairs copied from this tree.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins. </param>
        </member>
        <member name="P:System.Collections.Generic.DTree`2.Count">
            <summary>
            Gets the number of direct children in this tree node.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.DTree`2.ContainsPath(System.Collections.Generic.IList{`0})">
            <summary>
            Determines whether the specified path exists in this tree.
            </summary>
            <param name="path">A path consists of several keys.</param>
            <returns><c>true</c> if the specified path exists in the current tree; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.DTree`2.Contains(System.Collections.Generic.KeyValuePair{System.Collections.Generic.IList{`0},`1})">
            <summary>
            Determines whether the specified path-value pair exists in this tree.
            </summary>
            <param name="path">A path-value pair.</param>
            <returns><c>true</c> if the specified path-value pair exists in the current tree; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.DTree`2.Remove(System.Collections.Generic.IList{`0})">
            <summary>
            Removes a descendant node associated with the specified path.
            </summary>
            <param name="path">A path consists of several keys.</param>
            <returns><c>true</c> if the specified path exists in this tree and the descendant node associated with that path is successfully removed.</returns>
        </member>
        <member name="M:System.Collections.Generic.DTree`2.Remove(System.Collections.Generic.KeyValuePair{System.Collections.Generic.IList{`0},`1})">
            <summary>
            Removes a descendant node associated with the specified path-value pair. 
            </summary>
            <param name="pair">The path-value pair to remove.</param>
            <returns><c>true</c> if the specified path exists in this tree and the descendant node associated with that path is successfully removed.</returns>
        </member>
        <member name="M:System.Collections.Generic.DTree`2.TryGetNode(System.Collections.Generic.IList{`0},System.Collections.Generic.DTree{`0,`1}@)">
            <summary>
            Gets the descendant node of this tree associated with the specified path. The path should already exist in this tree.
            </summary>
            <param name="path">A path consists of several keys.</param>
            <param name="node">Returns the descendant node associated with the specified path, if the path exists in this tree; otherwise, <c>null</c>.</param>
            <returns><c>true</c> if the specified path exists in this tree and the descendant node associated with that path is returned.</returns>
        </member>
        <member name="M:System.Collections.Generic.DTree`2.TryGetValue(System.Collections.Generic.IList{`0},`1@)">
            <summary>
            Gets the value associated with the specified path in this tree. The path should already exist in this tree.
            </summary>
            <param name="path">A path consists of several keys.</param>
            <param name="value">Returns the value asociated with the specified path, if the path exists in this tree; otherwise, <c>null</c>.</param>
            <returns><c>true</c> if the specified path exists in this tree and the value associated with that path is returned.</returns>
        </member>
        <member name="M:System.Collections.Generic.DTree`2.TrySetValue(System.Collections.Generic.IList{`0},`1)">
            <summary>
            Sets the value associated with the specified path in this tree. The path should already exist in this tree.
            </summary>
            <param name="path">A path consists of several keys.</param>
            <param name="value">The value to be associated with the specified path.</param>
            <returns><c>true</c> if the specified path exists in this tree and the value is successfully associated with that path.</returns>
        </member>
        <member name="P:System.Collections.Generic.DTree`2.Item(System.Collections.Generic.IList{`0})">
            <summary>
            Gets or sets the value associated with the specified path in this tree.
            An exception will be thrown if the path does not exist in this tree.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.DTree`2.TryAdd(System.Collections.Generic.IList{`0},`1,System.Action{System.Collections.Generic.DTree{`0,`1}})">
            <summary>
            Adds a value together with the path it is to associate to this tree.
            </summary>
            <param name="path">A path consists of several keys.</param>
            <param name="value">The value associated with the specified path.</param>
            <param name="nodeCreated">A function called everytime a new node is created.</param>
            <returns>A node that stores the value associated with the specified path, if the path and value are both successfully added; 
            <c>null</c> if a value is already associated with the path. 
            This node is also the last node along the path.</returns>
        </member>
        <member name="M:System.Collections.Generic.DTree`2.Add(System.Collections.Generic.IList{`0},`1,System.Action{System.Collections.Generic.DTree{`0,`1}})">
            <summary>
            Adds a value together with the path it is to associate to this tree.
            An exception will be thrown if the path already exists in this tree.
            </summary>
            <param name="path">A path consists of several keys.</param>
            <param name="value">The value to be associated with the specified path.</param>
            <param name="nodeCreated">A function called everytime a new node is created.</param>
            <returns>
            The node that stores the value associated with the specified path, 
            if the path and value are successfully added; 
            otherwise a <see cref="T:System.ArgumentException"/> will be thrown.
            This node is also the last node along the path.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.DTree`2.Add(System.Collections.Generic.KeyValuePair{System.Collections.Generic.IList{`0},`1})">
            <summary>
            Adds a value together with its associated path to this tree. 
            An exception will be thrown if the path already exists in this tree.
            </summary>
            <param name="pair">The path-value pair to add.</param>
        </member>
        <member name="M:System.Collections.Generic.DTree`2.Add(System.Collections.Generic.IList{`0},`1)">
            <summary>
            Adds a value together with the path it is to associate to this tree.
            An exception will be thrown if the path already exists in this tree.
            </summary>
            <param name="path">A path consists of several keys.</param>
            <param name="value">The value to be associated with the specified path.</param>
            <returns>
            The node that stores the value associated with the specified path, 
            if the path and value are successfully added; 
            otherwise a <see cref="T:System.ArgumentException"/> will be thrown.
            This node is also the last node along the path.
            </returns>
        </member>
        <member name="P:System.Collections.Generic.DTree`2.Paths">
            <summary>
            Gets a collection containing all paths in this tree.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.DTree`2.Values">
            <summary>
            Gets a collection containing all values in this tree.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.DTree`2.GetKeyEnumerator">
            <summary>
            Returns an enumerator that iterates through all keys in this tree.
            </summary>
            <returns>An enumerator that iterates through all keys in this tree.</returns>
        </member>
        <member name="M:System.Collections.Generic.DTree`2.GetPathEnumerator">
            <summary>
            Returns an enumerator that iterates through all paths in this tree.
            </summary>
            <returns>An enumerator that iterates through all paths in this tree.</returns>
        </member>
        <member name="M:System.Collections.Generic.DTree`2.GetValueEnumerator">
            <summary>
            Returns an enumerator that iterates through all values in this tree.
            </summary>
            <returns>An enumerator that iterates through all values in this tree.</returns>
        </member>
        <member name="T:System.Collections.Generic.MinHeap`1">
            <summary>
            A heap data structure for retrieving smallest element in a collection.
            </summary>
            <typeparam name="T">Type of elements in the heap.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.MinHeap`1.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.MinHeap`1"/> class.
            </summary>
            <param name="capacity">The initial capacity of the heap.</param>
            <param name="comparer">Provides an <see cref="T:System.Collections.Generic.IComparer`1"/> to compare values in the heap.</param>
        </member>
        <member name="P:System.Collections.Generic.MinHeap`1.Count">
            <summary>
            Gets the number of items in the priority queue.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.MinHeap`1.Top">
            <summary>
            Gets the first or topmost object in the priority queue, which is the
            object with the minimum value.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.MinHeap`1.Push(`0[])">
            <summary>
            Pushes multiple object to the heap.
            </summary>
            <param name="obj">The objects to push.</param>
        </member>
        <member name="M:System.Collections.Generic.MinHeap`1.Push(`0)">
            <summary>
            Pushes an object to the heap.
            </summary>
            <param name="obj">The object to push.</param>
        </member>
        <member name="M:System.Collections.Generic.MinHeap`1.Pop">
            <summary>
            Removes the root from the heap, which is the minimum or maximum element depending on the comparer.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.MinHeap`1.PopAll">
            <summary>
            Pops all elements in the heap.
            </summary>
            <returns>A sorted array of all elements in the heap.</returns>
        </member>
        <member name="F:System.Collections.Generic.MinHeap`1.DefaultCapacity">
            <summary>
            The default capacity of a <see cref="T:System.Collections.Generic.MinHeap`1"/> class.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.MEnumerator`1">
            <summary>
            Supports a simple sequential iteration over multiple generic collections enumerated by their own enumerators. 
            This class can be viewed as an enumerator of enumerators and the initial "M" stands for "multiple", "merged".
            </summary>
            <typeparam name="T">The type of the elements this enumerator enumerates.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.MEnumerator`1.#ctor(System.Collections.Generic.IEnumerator{`0}[])">
            <summary>
            Initializes a new instance of System.Collections.MEnumerator{T} class.
            </summary>
            <param name="enumerators">An array of enumerators that enumerate the same type of elements.
            <para>Initially, this class sets the first enumerator in this array as the current enumerator. 
            You may advance the current enumerator by MoveNext method.
            If the current enumerator moves past the last element of the collection it enumerats, 
            then the next one in this array will become the current enumerator.
            </para></param>
        </member>
        <member name="P:System.Collections.Generic.MEnumerator`1.Current">
            <summary>
            Gets the current element.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.MEnumerator`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.MEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the current enumerator.
            <para>When this class is initialized, an array of enumerators is passed into the contructor. 
            Initially the first enumerator is the current enumerator and this method advances the current enumerator. 
            When the current enumerator moves past the last element of the collection it enumerates, 
            the next enumerator in the enumerator array will become the current enumerator. 
            If the current enumerator is the last one in the enumerator array, 
            and there is no more elements to enumerate, false will be returned by this method.</para>
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; 
            false if the enumerator has passed the end of the last enumerator.</returns>
        </member>
        <member name="M:System.Collections.Generic.MEnumerator`1.Reset">
            <summary>
            Sets the the current enumerator to the first enumerator and 
            sets the first enumerator to its initial position, which is before its first element.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.SegmentEnumerator`1">
            <summary>
            Supports a simple iteration over all/part of elements in an array/list.
            </summary>
            <typeparam name="T">The type of the elements of the array this enumerator enumerates.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.SegmentEnumerator`1.Count">
            <summary>
            Gets a value indicating how many elements this enumerator enumerates.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SegmentEnumerator`1.#ctor(System.Collections.Generic.IList{`0},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of System.Collections.Generic.ListEnumerator{T} object.
            </summary>
            <param name="list">The array/list this enumerator enumerates.</param>
            <param name="startIndex">Specifies the position in the array/list where the enumerator starts to enumerate. 
            The enumerator will enumerate a number of elements since this position.</param>
            <param name="count">The total number of elements to enumerate.</param>
        </member>
        <member name="M:System.Collections.Generic.SegmentEnumerator`1.#ctor(System.Collections.Generic.IList{`0},System.Int32)">
            <summary>
            Initializes a new instance of System.Collections.Generic.ListEnumerator{T} object.
            </summary>
            <param name="list">Specifies the position in the array/list where the enumerator starts to enumerate. 
            The enumerator will enumerate all elements since this position.</param>
            <param name="startIndex">The index of the first element to enumerate.</param>
        </member>
        <member name="M:System.Collections.Generic.SegmentEnumerator`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of System.Collections.Generic.ListEnumerator{T} object.
            </summary>
            <param name="list">The array/list this enumerator enumerates.</param>
        </member>
        <member name="T:System.Collections.Generic.ITree`1">
            <summary>
            Represents a general tree (or a tree node, which can be viewed as a tree).
            </summary>
            <typeparam name="T">The type of values stored in the tree.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.ITree`1.Children">
            <summary>
            Gets the children of this tree node.
            In any implementation, a null reference should be returned if this tree node has no children.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.ITree`1.Parent">
            <summary>
            Gets the parent of this tree node.
            In any implementation, a null reference should be returned if this tree node is the root.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.ITree`1.Value">
            <summary>
            Gets the value of this tree node.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.Tree`1">
            <summary>
            Represents a general tree (or a tree node, which can be viewed as a tree).
            </summary>
            <typeparam name="T">The type of values stored in this tree node.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.Tree`1.Value">
            <summary>
            Gets or sets the value of this tree node.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.Tree`1.Parent">
            <summary>
            Gets or sets the parent of this tree node. If this tree node is root, a null reference will be returned.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Tree`1.Equals(System.Collections.Generic.ITree{`0})">
            <summary>
            Determines whether the specified <see cref="!:System.ITree&lt;T&gt;"/> is identical (same structure and same data, but not necessarily same type) to the current <see cref="!:System.Tree&lt;T&gt;"/>.
            </summary>
            <param name="tree">The <see cref="!:System.ITree&lt;T&gt;"/> to compare.</param>
            <returns>true if the two trees are identical, otherwise false.</returns>
        </member>
        <member name="M:System.Collections.Generic.Tree`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="!:System.Tree&lt;T&gt;"/>.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>true if the objects are equal, otherwise false.</returns>
        </member>
        <member name="P:System.Collections.Generic.Tree`1.Children">
            <summary>
            Gets or sets the child nodes of this tree node.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Tree`1.SetChildrenListType``1">
            <summary>
            Changes the children list to the specified type.
            </summary>
            <typeparam name="TList">A type that implements <see cref="T:System.Collections.Generic.IList`1" /> interface and has a public default constructor.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.Tree`1.RemoveChild(System.Collections.Generic.Tree{`0})">
            <summary>
            Removes the specified child node from this tree node.
            </summary>
            <param name="child">The child node to remove.</param>
            <returns>true if the child node is successfully removed.</returns>
        </member>
        <member name="M:System.Collections.Generic.Tree`1.AddChild">
            <summary>
            Adds a new child node to this tree node.
            </summary>
            <returns>The added new child node.</returns>
        </member>
        <member name="M:System.Collections.Generic.Tree`1.AddChild(`0)">
            <summary>
            Adds a new child node with the specified value to this tree node.
            </summary>
            <param name="value">The value of the child node to add.</param>
            <returns>
            The added new child node.
            </returns>
        </member>
        <member name="T:System.ConsoleEx">
            <summary>
            Provides additional methods for convenient use of <see cref="T:System.Console"/> class and applications.
            </summary>
        </member>
        <member name="M:System.ConsoleEx.GetArg(System.String,System.String)">
            <summary>
            Gets an string argument from console input.
            </summary>
            <param name="message">The message to display on the console before reading the input.</param>
            <param name="defaultArg">Uses this default argument if the console input is empty.</param>
            <returns>The string argumetn read from the console input.</returns>
        </member>
        <member name="M:System.ConsoleEx.GetArg``1(System.String[],System.Int32,System.Func{System.String,``0},``0,System.String[])">
            <summary>
            Gets the argument of type <typeparamref name="T"/> from one of the console application string arguments, or from console input if the argument is missing.
            </summary>
            <typeparam name="T">The output type of the argument.</typeparam>
            <param name="args">The console application arguments.</param>
            <param name="argIdx">The index of the argument in the <paramref name="args"/> array. If this index exceeds the size of the <paramref name="args"/> array,
            then it displays the <paramref name="messages"/> line by line in the console window and attempts to read an argument from the console.</param>
            <param name="conversion">The conversion method that converts the string argument to an argument of type <typeparamref name="T"/>.</param>
            <param name="defaultArg">The default argument if the string argument is <c>null</c> or empty or just consists of white spaces.</param>
            <param name="messages">The messages to be displayed line by line on the console window. Note if a message starts with symbol '@', then it is specially treated and a short text "the default is ..." is appended to the end of the message to display the default argument value.</param>
            <returns>An argument of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:System.OptionParser.Parse(System.String[],System.String,System.String,System.Boolean)">
            <summary>
            Parses options from the string arguments.
            </summary>
            <param name="args">The string arguments.</param>
            <param name="keyPrefix">The prefix for the arugment key. The default is "--", so an argument key-value pair specification can be written in format <c>--key value</c> (two argument slots). The argument value can be later retrieved by <see cref="M:System.OptionSet.GetArg``1(System.String)"/>method. Flags without arugment values can be set using <c>--flag --key value</c> (the first argument is a flag named "flag", and the second argument is a key-value pair), where the existence of the flag can be determined later by <see cref="M:System.OptionSet.HasKey(System.String)"/> method.</param>
            <param name="keySurfix">The surfix for the argument key. The default is ":", so an argument key-value pair specification can be written in format "key=value" (one argument slot). A flag can be set using <c>falg=""</c>.</param>
            <param name="enableConsole"><c>true</c> if unspecified required argument </param>
            <returns>An <see cref="T:System.OptionSet"/> storing the parsed arguments.</returns>
            <remarks>Three styles of argument specification are supported. Different styles can be mixed.
            <list type="bullet">
                <item>
                    <term><c>--key value</c></term>
                    <description>Occupies two argument slots. The '--' key prefix can be replaced by a customized prefix specified by <paramref name="keyPrefix"/>. The value can be retrieved by <see cref="M:System.OptionSet.GetArg``1(System.String)"/>method from the returned <see cref="T:System.OptionSet"/> object. To specify a flag, simply skip the value. For example, <c>cmd --flag1 --flag2 --arg value</c> specifies two flags 'flag1' and 'flag2' and one argument with key 'arg'.</description>
                </item>
                <item>
                    <term><c>key=value</c></term>
                    <description>Occupies one argument slot. The '=' key surfix can be replaced by a customized prefix specified by <paramref name="keySurfix"/>. The value can be retrieved by <see cref="M:System.OptionSet.GetArg``1(System.String)"/>method from the returned <see cref="T:System.OptionSet"/> object. To specify a flag, make the value empty. For example, <c>cmd flag1= flag2= --arg value</c> specifies two flags 'flag1' and 'flag2' and one argument with key 'arg'. This is also an exmaple that two styles of argument specification can be mixed.</description>
                </item>
                <item>
                    <term>unkeyed argument</term>
                    <description>Unkeyed arguments are matched with unspecified required arguments in order. For example, suppose we define two required arguments "arg1", "arg2" and "arg3", then <c>cmd --arg2 value2 value1</c> has one keyed argument "arg2" with its value being "value2"; and "value1" is an unkeyed argument that will be assigned to "arg1", because "arg1" is the first unspecified argument.</description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="M:System.DateTimeEx.ToHttpHeaderString(System.DateTime)">
            <summary>
            Converts the value of the current <see cref="T:System.DateTime"/> object to its equivalent HTTP-formated string representation.
            </summary>
            <param name="dateTime">This <see cref="T:System.DateTime"/> object to convert.</param>
            <returns>A string representing date and time, usually used as HTTP headers.</returns>
        </member>
        <member name="M:System.DateTimeEx.ToUnixTimeStamp(System.DateTime)">
            <summary>
            Converts the current <see cref="T:System.DateTime"/> object to its equivalent unix time stamp as a <see cref="T:System.Int64"/>. A single unit in this timestamp represents 1 second.
            </summary>
            <param name="dateTime">This <see cref="T:System.DateTime"/> object to convert.</param>
            <returns>A unix time stamp represented by a <see cref="T:System.Int64"/> indicating seconds passed since Jan 01 1970 00:00:00.</returns>
        </member>
        <member name="M:System.DateTimeEx.ToUnixTimeStampMilliseconds(System.DateTime)">
            <summary>
            Converts the current <see cref="T:System.DateTime"/> object to its equivalent unix time stamp a a <see cref="T:System.Int64"/>. A single unit in this timestamp represents 1 millisecond.
            </summary>
            <param name="dateTime">This <see cref="T:System.DateTime"/> object to convert.</param>
            <returns>A unix time stamp represented by a <see cref="T:System.Int64"/> indicating seconds passed since Jan 01 1970 00:00:00.</returns>
        </member>
        <member name="M:System.DateTimeEx.ToUnixTimeStampDouble(System.DateTime)">
            <summary>
            Converts the current <see cref="T:System.DateTime"/> object to its equivalent unix time stamp represented by a <see cref="T:System.Double"/>. The milliseconds are represented by the decimal part of this <see cref="T:System.Double"/>.
            </summary>
            <param name="dateTime">This <see cref="T:System.DateTime"/> object to convert.</param>
            <returns>The unix time stamp represented by a <see cref="T:System.Double"/> indicating seconds passed since Jan 01 1970 00:00:00.</returns>
        </member>
        <member name="M:System.DateTimeEx.ToUnixTimeStampMillisecondsDouble(System.DateTime)">
            <summary>
            Converts the current <see cref="T:System.DateTime"/> object to its equivalent unix time stamp a a <see cref="T:System.Double"/>. A single unit in this timestamp represents 1 millisecond.
            </summary>
            <param name="dateTime">This <see cref="T:System.DateTime"/> object to convert.</param>
            <returns>A unix time stamp represented by a <see cref="T:System.Int64"/> indicating seconds passed since Jan 01 1970 00:00:00.</returns>
        </member>
        <member name="M:System.DateTimeEx.NextSharp(System.DateTime)">
            <summary>
            Gets the next sharp clock from time represented by the current System.DateTime object.
            </summary>
            <param name="dateTime">This System.DateTime object.</param>
            <returns>The next sharp clock represented by a <see cref="T:System.DateTime"/> object.</returns>
        </member>
        <member name="M:System.DateTimeEx.Sharp(System.DateTime)">
            <summary>
            Gets the sharp clock from time represented by the current System.DateTime object.
            </summary>
            <param name="dateTime">This System.DateTime object.</param>
            <returns>The sharp clock represented by a <see cref="T:System.DateTime"/> object.</returns>
        </member>
        <member name="M:System.DateTimeEx.Divide(System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Evenly divides a timespan into several time points between the beginning time point and the end time point. 
            </summary>
            <param name="source">This System.DateTime as the beginning time point.</param>
            <param name="destination">A System.DateTime as the end time point.</param>
            <param name="splitCount">Indicates how many time points between the beginning time point and the end time point are returned.</param>
            <returns>Time points between the beginning time point and the end time point the evenly divide the timespan.</returns>
        </member>
        <member name="M:System.DateTimeEx.IsFuture(System.DateTime)">
            <summary>
            Determines whether the time represented by the current System.DateTime object is a future time.
            </summary>
            <param name="datetime">This System.DateTime object.</param>
            <returns>true if the time represented by the current System.DateTime object is a future time; otherwise, false.</returns>
        </member>
        <member name="M:System.DateTimeEx.IsPast(System.DateTime)">
            <summary>
            Determines whether the time represented by the current System.DateTime object is a past time.
            </summary>
            <param name="datetime">This System.DateTime object.</param>
            <returns>true if the time represented by the current System.DateTime object is a past time; otherwise, false.</returns>
        </member>
        <member name="M:System.DateTimeEx.SecondsPassed(System.DateTime)">
            <summary>
            Gets the passed seconds from the time represented by this System.DateTime object till now.
            <para>NOTE that if this System.DateTime object represents a future time, 
            the returned value will be negative, indicating seconds to go.</para>
            </summary>
            <param name="datetime">This System.DateTime object.</param>
            <returns>The passed seconds from the time represented by this System.DateTime object till now.</returns>
        </member>
        <member name="M:System.DateTimeEx.TicksPassed(System.DateTime)">
            <summary>
            Gets the passed ticks from the time represented by this System.DateTime object till now.
            <para>NOTE that if this System.DateTime object represents a future time, 
            the returned value will be negative, indicating ticks to go.</para>
            </summary>
            <param name="datetime">This System.DateTime object.</param>
            <returns>The passed ticks from the time represented by this System.DateTime object till now.</returns>
        </member>
        <member name="M:System.DateTimeEx.MiliSecondsPassed(System.DateTime)">
            <summary>
            Gets the passed miliseconds from the time represented by this System.DateTime object till now.
            <para>NOTE that if this System.DateTime object represents a future time, 
            the returned value will be negative, indicating seconds to go.</para>
            </summary>
            <param name="datetime">This System.DateTime object.</param>
            <returns>The passed miliseconds from the time represented by this System.DateTime object till now.</returns>
        </member>
        <member name="M:System.DateTimeEx.MinutesPassed(System.DateTime)">
            <summary>
            Gets the passed minutes from the time represented by this System.DateTime object till now.
            <para>NOTE that if this System.DateTime object represents a future time, 
            the returned value will be negative, indicating minutes to go.</para>
            </summary>
            <param name="datetime">This System.DateTime object.</param>
            <returns>The passed minutes from the time represented by this System.DateTime object till now.</returns>
        </member>
        <member name="M:System.DateTimeEx.HoursPassed(System.DateTime)">
            <summary>
            Gets the passed hours from the time represented by this System.DateTime object till now.
            <para>NOTE that if this System.DateTime object represents a future time, 
            the returned value will be negative, indicating hours to go.</para>
            </summary>
            <param name="datetime">This System.DateTime object.</param>
            <returns>The passed hours from the time represented by this System.DateTime object till now.</returns>
        </member>
        <member name="M:System.DateTimeEx.DaysPassed(System.DateTime)">
            <summary>
            Gets the passed days from the time represented by this System.DateTime object till now.
            <para>NOTE that if this System.DateTime object represents a future time, 
            the returned value will be negative, indicating hours to go.</para>
            </summary>
            <param name="datetime">This System.DateTime object.</param>
            <returns>The passed days from the time represented by this System.DateTime object till now.</returns>
        </member>
        <member name="M:System.DateTimeEx.TimeSpanPassed(System.DateTime)">
            <summary>
            Gets the timespan from the time represented by this System.DateTime object till now.
            <para>NOTE that if this System.DateTime object represents a future time, 
            the returned value is a timespan to go.</para>
            </summary>
            <param name="datetime">This System.DateTime object.</param>
            <returns>The timespan from the time represented by this System.DateTime object till now.</returns>
        </member>
        <member name="M:System.DateTimeEx.SecondsToGo(System.DateTime)">
            <summary>
            Gets the seconds to go from now to the time this System.DateTime represents.
            <para>NOTE that if this System.DateTime object represents a past time, 
            the returned value will be negative, indicating seconds passed.</para>
            </summary>
            <param name="datetime">This System.DateTime object.</param>
            <returns>The seconds to go from now to the time this System.DateTime represents.</returns>
        </member>
        <member name="M:System.DateTimeEx.MilisecondsToGo(System.DateTime)">
            <summary>
            Gets the miliseconds to go from now to the time this System.DateTime represents.
            <para>NOTE that if this System.DateTime object represents a past time, 
            the returned value will be negative, indicating seconds passed.</para>
            </summary>
            <param name="datetime">This System.DateTime object.</param>
            <returns>The miliseconds to go from now to the time this System.DateTime represents.</returns>
        </member>
        <member name="M:System.DateTimeEx.TicksToGo(System.DateTime)">
            <summary>
            Gets the ticks to go from now to the time this System.DateTime represents.
            <para>NOTE that if this System.DateTime object represents a past time, 
            the returned value will be negative, indicating ticks passed.</para>
            </summary>
            <param name="datetime">This System.DateTime object.</param>
            <returns>The ticks to go from now to the time this System.DateTime represents.</returns>
        </member>
        <member name="M:System.DateTimeEx.MinutesToGo(System.DateTime)">
            <summary>
            Gets the minutes to go from now to the time this System.DateTime represents.
            <para>NOTE that if this System.DateTime object represents a past time, 
            the returned value will be negative, indicating minutes passed.</para>
            </summary>
            <param name="datetime">This System.DateTime object.</param>
            <returns>The minutes to go from now to the time this System.DateTime represents.</returns>
        </member>
        <member name="M:System.DateTimeEx.HoursToGo(System.DateTime)">
            <summary>
            Gets the hours to go from now to the time this System.DateTime represents.
            <para>NOTE that if this System.DateTime object represents a past time, 
            the returned value will be negative, indicating hours passed.</para>
            </summary>
            <param name="datetime">This System.DateTime object.</param>
            <returns>The hours to go from now to the time this System.DateTime represents.</returns>
        </member>
        <member name="M:System.DateTimeEx.DaysToGo(System.DateTime)">
            <summary>
            Gets the days to go from now to the time this System.DateTime represents.
            <para>NOTE that if this System.DateTime object represents a past time, 
            the returned value will be negative, indicating days passed.</para>
            </summary>
            <param name="datetime">This System.DateTime object.</param>
            <returns>The days to go from now to the time this System.DateTime represents.</returns>
        </member>
        <member name="M:System.DateTimeEx.TimeSpanToGo(System.DateTime)">
            <summary>
            Gets the timespan to go from now to the time this System.DateTime represents.
            <para>NOTE that if this System.DateTime object represents a past time, 
            the returned value will be negative, indicating timespan passed.</para>
            </summary>
            <param name="datetime">This System.DateTime object.</param>
            <returns>The timespan to go from now to the time this System.DateTime represents.</returns>
        </member>
        <member name="T:System.ExceptionHelper">
            <summary>
            Provides frequently used exceptions and messages.
            </summary>
        </member>
        <member name="M:System.ExceptionHelper.ArrayLengthCheck``1(System.Array,System.Int32,System.String)">
            <summary>
            For internal use only. Checks if the length of an array equals a specified value.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="array">The array to check.</param>
            <param name="validLength">The length of the specified <paramref name="array"/> must equal this value.</param>
            <param name="nameForTheArrayToCheck">The name for the array to check.</param>
            <exception cref="T:System.ArgumentException">Occurs when the length of the specified array does not equal the valid value.</exception>
        </member>
        <member name="M:System.ExceptionHelper.MinMaxArgumentCheck(System.Object,System.Object,System.String,System.String)">
            <summary>
            Checks if <paramref name="min"/> is smaller or equal to <paramref name="max"/>. If not, an <see cref="T:System.ArgumentOutOfRangeException"/> will be thrown.
            </summary>
            <param name="min">The "min" argument.</param>
            <param name="max">The "max" argument.</param>
            <param name="argNameForMin">The name for the "min" argument.</param>
            <param name="argNameForMax">The name for the "max argument".</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when <paramref name="min"/> is greater than <paramref name="max"/>.</exception>
        </member>
        <member name="M:System.ExceptionHelper.ForwardCheckStartIndexAndLength(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            For internal use only. Checks whether the arguments <paramref name="startIndex"/> and <paramref name="length"/> are valid for a forward search method.
            </summary>
            <param name="startIndex">The start index indicating the position of the first character of the search scope.</param>
            <param name="length">The length of the search scope.</param>
            <param name="searchLimit">The maximum value that <paramref name="startIndex"/> plus <paramref name="length"/> can reach.</param>
            <param name="argNameForStartIndex">The argument name for <paramref name="startIndex"/> which will be displayed in the exception message.</param>
            <param name="argNameForLength">The argument name for <paramref name="length"/> which will be displayed in the exception message.</param>
            <returns>The end index, namely <paramref name="startIndex"/> plus <paramref name="length"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when the value of either <paramref name="startIndex"/> or <paramref name="length"/> is not valid.</exception>
        </member>
        <member name="M:System.ExceptionHelper.BackwardCheckStartIndexAndLength(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            For internal use only. Checks whether the arguments <paramref name="startIndex"/> and <paramref name="length"/> are valid for a backward search method.
            </summary>
            <param name="startIndex">The start index indicating the position of the last character of the search scope.</param>
            <param name="length">The length of the search scope.</param>
            <param name="startIndexLimit">The integer immediately larger than maximum value which <paramref name="startIndex"/> can reach.</param>
            <param name="argNameForStartIndex">The argument name for <paramref name="startIndex"/> which will be displayed in the exception message.</param>
            <param name="argNameForLength">The argument name for <paramref name="length"/> which will be displayed in the exception message.</param>
            <returns>The end index, namely <paramref name="startIndex"/> plus <paramref name="length"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when the value of either <paramref name="startIndex"/> or <paramref name="length"/> is not valid.</exception>
        </member>
        <member name="M:System.ExceptionHelper.ArgumentRangeRequired``1(System.String,``0,``0,System.Boolean,``0,System.Boolean)">
            <summary>
            Throws a <see cref="T:System.ArgumentOutOfRangeException"/> when the provided argument is out of range.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="argumentName">The name of the argument. This name will be displayed in the exception message.</param>
            <param name="argumentValue">The value of the argument.</param>
            <param name="lowerBound">The lower bound of the valid range.</param>
            <param name="lowerBoundInclusive"><c>true</c> to indicate the lower bound is inclusive; otherwise, <c>false</c>.</param>
            <param name="higherBound">The higher bound of the valid range.</param>
            <param name="higherBoundInclusive"><c>true</c> to indicate the higher bound is inclusive; otherwise, <c>false</c>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:System.ExceptionHelper.GetArgumentOutOfRangeMessage(System.String,System.Object,System.Boolean,System.Object,System.Boolean)">
            <summary>
            Gets a message indicating the value of an argument is out of valid range.
            </summary>
            <param name="argumentName">The name of the argument whose value is out of range.</param>
            <param name="lowerBound">The lower bound of the valid range.</param>
            <param name="lowerBoundInclusive"><c>true</c> to indicate the lower bound is inclusive; otherwise, <c>false</c>.</param>
            <param name="higherBound">The higher bound of the valid range.</param>
            <param name="higherBoundInclusive"><c>true</c> to indicate the higher bound is inclusive; otherwise, <c>false</c>.</param>
            <returns>A message indicating some argument's value is out of valid range.</returns>
        </member>
        <member name="M:System.ExceptionHelper.PositiveArgumentRequired(System.String,System.Object)">
            <summary>
            Throws a <see cref="T:System.ArgumentOutOfRangeException" /> when the provided argument is not positive.
            </summary>
            <param name="argumentName">The name of the argument whose value should be positive. This name will be displayed in the exception message.</param>
            <param name="argumentValue">The value of the argument.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:System.ExceptionHelper.GetPositiveArgumentRequiredMessage(System.String)">
            <summary>
            Gets a message indicating an argument value should be positive yet it is assigned a non-positive value.
            </summary>
            <param name="argumentName">The name of the argument whose value should be positive.</param>
            <returns>A message indicating the argument of the provided name should be positive.</returns>
        </member>
        <member name="M:System.ExceptionHelper.NonNegativeArgumentRequired(System.String,System.Object)">
            <summary>
            Throws a <see cref="T:System.ArgumentOutOfRangeException" /> when the provided argument is negative.
            </summary>
            <param name="argumentName">The name of the argument whose value should not be negative. This name will be displayed in the exception message.</param>
            <param name="argumentValue">The value of the argument.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:System.ExceptionHelper.GetNonNegativeArgumentRequiredMessage(System.String)">
            <summary>
            Gets a message indicating an argument value should be non-negative yet it is assigned a negative value.
            </summary>
            <param name="argumentName">The name of the argument whose value should be non-negative.</param>
            <returns>A message indicating the argument of the provided name should be non-negative.</returns>
        </member>
        <member name="M:System.ExceptionHelper.NonEmptyArrayRequired``1(``0[],System.String)">
            <summary>
            Throws a <see cref="T:System.ArgumentNullException" /> when the provided <paramref name="array" /> is <c>null</c>, or throws a <see cref="T:System.ArgumentException" /> when the provided <paramref name="array" /> is <c>empty</c>.
            </summary>
            <typeparam name="T">The type of the element in the array.</typeparam>
            <param name="array">The array.</param>
            <param name="arrayName">Provides the name of the array that will be shown in the exception message.</param>
            <returns>The number of elements contained in <paramref name="array" />. This return is for your convenience.</returns>
            <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="array" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Occurs when <paramref name="array" /> is empty.</exception>
        </member>
        <member name="M:System.ExceptionHelper.NonEmptyListRequired``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            Throws a <see cref="T:System.ArgumentNullException" /> when the provided <paramref name="list" /> is <c>null</c>, or throws a <see cref="T:System.ArgumentException" /> when the provided <paramref name="list" /> is <c>empty</c>.
            </summary>
            <typeparam name="T">The type of the element in the list.</typeparam>
            <param name="list">The list.</param>
            <param name="listName">Provides the name of the list that will be shown in the exception message.</param>
            <returns>The number of elements contained in <paramref name="list" />. This return is for your convenience.</returns>
            <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="list" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Occurs when <paramref name="list" /> is empty.</exception>
        </member>
        <member name="M:System.ExceptionHelper.NonEmptyCollectionRequired``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws a <see cref="T:System.ArgumentNullException" /> when the provided <paramref name="collection" /> is <c>null</c>, or throws a <see cref="T:System.ArgumentException" /> when the provided <paramref name="collection" /> is <c>empty</c>.
            </summary>
            <typeparam name="T">The type of the element in the collection.</typeparam>
            <param name="collection">The collection.</param>
            <param name="collectionName">Name of the collection.</param>
            <returns>The number of elements contained in <paramref name="collection" />. This return is for your convenience.</returns>
            <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="collection" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Occurs when <paramref name="collection" /> is empty.</exception>
        </member>
        <member name="M:System.ExceptionHelper.EqualArrayLengthRequired``2(``0[],``1[],System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when the lengths of <paramref name="array1"/> and <paramref name="array2"/> are not equal.
            </summary>
            <typeparam name="TArray1">The type of element in <paramref name="array1"/>.</typeparam>
            <typeparam name="TArray2">The type of element in <paramref name="array2"/>.</typeparam>
            <param name="array1">The first array, whose length must be equal to <paramref name="array2"/>. This argument cannot be <c>null</c>.</param>
            <param name="array2">The second array, whose length must be equal to <paramref name="array1"/>. This argument cannot be <c>null</c>.</param>
            <param name="array1Name">The name for <paramref name="array1"/>.</param>
            <param name="array2Name">The name for <paramref name="array2"/>.</param>
            <returns>The length of <paramref name="array1"/> and <paramref name="array2"/>.</returns>
            <exception cref="T:System.ArgumentException">Occurs when the lengths of <paramref name="array1"/> and <paramref name="array2"/> are not equal.</exception>
        </member>
        <member name="M:System.ExceptionHelper.EqualArrayLengthRequiredOrBothNull``2(``0[],``1[],System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when the lengths of <paramref name="array1"/> and <paramref name="array2"/> are not equal; or only one of <paramref name="array1"/> and <paramref name="array2"/> is <c>null</c>.
            </summary>
            <typeparam name="TArray1">The type of element in <paramref name="array1"/>.</typeparam>
            <typeparam name="TArray2">The type of element in <paramref name="array2"/>.</typeparam>
            <param name="array1">The first array, whose length must be equal to <paramref name="array2"/>. This argument can be <c>null</c>, in which case <paramref name="array2"/> should also be <c>null</c>.</param>
            <param name="array2">The second array, whose length must be equal to <paramref name="array1"/>. This argument can be <c>null</c>, in which case <paramref name="array1"/> should also be <c>null</c>.</param>
            <param name="array1Name">The name for <paramref name="array1"/>.</param>
            <param name="array2Name">The name for <paramref name="array2"/>.</param>
            <returns>The length of <paramref name="array1"/> and <paramref name="array2"/>.</returns>
            <exception cref="T:System.ArgumentException">Occurs when the lengths of <paramref name="array1"/> and <paramref name="array2"/> are not equal; or only one of <paramref name="array1"/> and <paramref name="array2"/> is <c>null</c>.</exception>
        </member>
        <member name="T:System.CharacterMismatchException">
            <summary>
            The exception that is thrown when a character mismatch is found in a string. Many formated string require matches of quotes or brackets (like <c>{</c> and <c>}</c>, <c>[</c> and <c>]</c>, etc.).
            </summary>
        </member>
        <member name="P:System.CharacterMismatchException.MatchTargetPosition">
            <summary>
            Gets the position of the character that is mismatched.
            </summary>
            <value>The position of the mismatched target.</value>
        </member>
        <member name="P:System.CharacterMismatchException.MatchTarget">
            <summary>
            Gets the character that is mismatched.
            </summary>
            <value>The mismatched target character.</value>
        </member>
        <member name="P:System.CharacterMismatchException.MissingMatch">
            <summary>
            Gets the missing character that should have matched <see cref="P:System.CharacterMismatchException.MatchTarget"/>.
            </summary>
            <value>The missing match.</value>
        </member>
        <member name="M:System.CharacterMismatchException.#ctor(System.Int32,System.Char,System.Char,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.CharacterMismatchException"/> class.
            </summary>
            <param name="matchTargetPosition">The position of the target character that is mismatched.</param>
            <param name="matchTarget">The target character that should be matched.</param>
            <param name="missingMatch">The missing match.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not a <c>null</c> reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:System.CharacterMismatchException.#ctor(System.String,System.Int32,System.Char,System.Char,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.CharacterMismatchException"/> class.
            </summary>
            <param name="message">The message string that explains the mismatch error.</param>
            <param name="matchTargetPosition">The position of the target character that is mismatched.</param>
            <param name="matchTarget">The target character that should be matched.</param>
            <param name="missingMatch">The missing match.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not a <c>null</c> reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="T:System.StringMismatchException">
            <summary>
            The exception that is thrown when a string mismatch is found in a string. A similar exception is <see cref="T:System.CharacterMismatchException"/> that handles character mismatch.
            </summary>
        </member>
        <member name="P:System.StringMismatchException.MatchTargetPosition">
            <summary>
            Gets the position of the substring that is mismatched.
            </summary>
            <value>The position of the mismatched target.</value>
        </member>
        <member name="P:System.StringMismatchException.MatchTarget">
            <summary>
            Gets the substring that is mismatched.
            </summary>
            <value>The mismatched target substring.</value>
        </member>
        <member name="P:System.StringMismatchException.MissingMatch">
            <summary>
            Gets the missing string that should have matched <see cref="P:System.StringMismatchException.MatchTarget"/>.
            </summary>
            <value>The missing match.</value>
        </member>
        <member name="M:System.StringMismatchException.#ctor(System.Int32,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.StringMismatchException"/> class.
            </summary>
            <param name="matchTargetPosition">The position of the target substring that is mismatched.</param>
            <param name="matchTarget">The target substring that should be matched.</param>
            <param name="missingMatch">The missing match.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not a <c>null</c> reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:System.StringMismatchException.#ctor(System.String,System.Int32,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.StringMismatchException"/> class.
            </summary>
            <param name="message">The message string that explains the mismatch error.</param>
            <param name="matchTargetPosition">The position of the target substring that is mismatched.</param>
            <param name="matchTarget">The target substring that should be matched.</param>
            <param name="missingMatch">The missing match.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not a <c>null</c> reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="T:System.GeneralEx">
            <summary>
            Provides extension methods for a variety of built-in framework classes.
            </summary>
        </member>
        <member name="M:System.GeneralEx.Swap(System.Int64@,System.Int64@)">
            <summary>
            Swaps the values of two long integers.
            </summary>
            <param name="x">The first long integer.</param>
            <param name="y">The second long integer.</param>
        </member>
        <member name="M:System.GeneralEx.Swap(System.UInt64@,System.UInt64@)">
            <summary>
            Swaps the values of two unsigned long integers.
            </summary>
            <param name="x">The first unsigned long integer.</param>
            <param name="y">The second unsigned long integer.</param>
        </member>
        <member name="M:System.GeneralEx.Swap(System.Int32@,System.Int32@)">
            <summary>
            Swaps the values of two integers.
            </summary>
            <param name="x">The first integer.</param>
            <param name="y">The second integer.</param>
        </member>
        <member name="M:System.GeneralEx.Swap(System.UInt32@,System.UInt32@)">
            <summary>
            Swaps the values of two unsigned integers.
            </summary>
            <param name="x">The first unsigned integer.</param>
            <param name="y">The second unsigned integer.</param>
        </member>
        <member name="M:System.GeneralEx.Swap(System.Int16@,System.Int16@)">
            <summary>
            Swaps the values of two short integers.
            </summary>
            <param name="x">The first short integer.</param>
            <param name="y">The second short integer.</param>
        </member>
        <member name="M:System.GeneralEx.Swap(System.UInt16@,System.UInt16@)">
            <summary>
            Swaps the values of two unsigned short integers.
            </summary>
            <param name="x">The first unsigned short integer.</param>
            <param name="y">The second unsigned short integer.</param>
        </member>
        <member name="M:System.GeneralEx.Swap(System.Byte@,System.Byte@)">
            <summary>
            Swaps the values of two bytes.
            </summary>
            <param name="x">The first byte.</param>
            <param name="y">The second byte.</param>
        </member>
        <member name="M:System.GeneralEx.Swap(System.SByte@,System.SByte@)">
            <summary>
            Swaps the values of two signed bytes.
            </summary>
            <param name="x">The first signed byte.</param>
            <param name="y">The second signed byte.</param>
        </member>
        <member name="M:System.GeneralEx.Swap(System.Char@,System.Char@)">
            <summary>
            Swaps the values of two characters.
            </summary>
            <param name="x">The first character.</param>
            <param name="y">The second character.</param>
        </member>
        <member name="M:System.GeneralEx.Swap(System.Boolean@,System.Boolean@)">
            <summary>
            Swaps the values of two bool values.
            </summary>
            <param name="x">The first bool value.</param>
            <param name="y">The second bool value.</param>
        </member>
        <member name="M:System.GeneralEx.Swap(System.Single@,System.Single@)">
            <summary>
            Swaps the values of two <see cref="T:System.Single"/> values.
            </summary>
            <param name="x">The first <see cref="T:System.Single"/> value.</param>
            <param name="y">The second <see cref="T:System.Single"/> value.</param>
        </member>
        <member name="M:System.GeneralEx.Swap(System.Double@,System.Double@)">
            <summary>
            Swaps the values of two <see cref="T:System.Double"/> values.
            </summary>
            <param name="x">The first <see cref="T:System.Double"/> value.</param>
            <param name="y">The second <see cref="T:System.Double"/> value.</param>
        </member>
        <member name="M:System.GeneralEx.Swap(System.DateTime@,System.DateTime@)">
            <summary>
            Swaps the values of two <see cref="T:System.DateTime"/> values.
            </summary>
            <param name="x">The first <see cref="T:System.DateTime"/> value.</param>
            <param name="y">The second <see cref="T:System.DateTime"/> value.</param>
        </member>
        <member name="M:System.GeneralEx.Swap``1(``0@,``0@)">
            <summary>
            Swaps the values of two <see cref="T:System.DateTime"/> values.
            </summary>
            <param name="x">The first <see cref="T:System.DateTime"/> value.</param>
            <param name="y">The second <see cref="T:System.DateTime"/> value.</param>
        </member>
        <member name="M:System.GeneralEx.In(System.String,System.String)">
            <summary>
            Determines whether this string is a substring of another string instance.
            </summary>
            <param name="str">The current string.</param>
            <param name="target">Checks if this string contains the current string as a substring.</param>
            <returns>
              <c>true</c> if <paramref name="target"/> contains the current string as a substring; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.GeneralEx.In``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether this object is in a sequence. If the sequence is null or empty, <c>false</c> is always returned.
            </summary>
            <typeparam name="T">The type of this object.</typeparam>
            <param name="obj">This object.</param>
            <param name="sequence">A sequence of objects.</param>
            <returns><c>true</c> if this object is found in the specified sequence; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.InAny``1(``0,System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Determines whether this object is in any of the provided sequences. If <paramref name="sequences"/> is null or empty, <c>false</c> is always returned.
            </summary>
            <typeparam name="T">The type of this object.</typeparam>
            <param name="obj">This object.</param>
            <param name="sequences">An array of sequences to check.</param>
            <returns><c>true</c> if this object is found in any of the provided sequences; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.InAll``1(``0,System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Determines whether this object is in all of the provided sequences. If <paramref name="sequences"/> is null or empty, <c>false</c> is always returned.
            </summary>
            <typeparam name="T">The type of this object.</typeparam>
            <param name="obj">This object.</param>
            <param name="sequences">An array of sequences to check.</param>
            <returns><c>true</c> if this object is found in all of the provided sequences; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.In``2(``0,System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Determines whether this object is a key in a dictionary. If the dictionary is null or empty, <c>false</c> is always returned.
            </summary>
            <typeparam name="T">The type of the object as well as the key of the dictionary.</typeparam>
            <typeparam name="TValue">The type of value of the dictionary.</typeparam>
            <param name="obj">This object.</param>
            <param name="dict">The dictionary.</param>
            <returns><c>true</c> if <paramref name="obj"/> is a key in <paramref name="dict"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.GeneralEx.InAny``2(``0,System.Collections.Generic.IDictionary{``0,``1}[])">
            <summary>
            Determines whether this object is a key in any of the provided dictionaries. If the <paramref name="dicts"/> is null or empty, <c>false</c> is always returned.
            </summary>
            <typeparam name="T">The type of the object as well as the key of the dictionary.</typeparam>
            <typeparam name="TValue">The type of value of the dictionary.</typeparam>
            <param name="obj">This object.</param>
            <param name="dicts">The dictionaryies to check.</param>
            <returns><c>true</c> if <paramref name="obj"/> is a key in any of the provided <paramref name="dicts"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.GeneralEx.InAll``2(``0,System.Collections.Generic.IDictionary{``0,``1}[])">
            <summary>
            Determines whether this object is a key in all of the provided dictionaries. If the <paramref name="dicts"/> is null or empty, <c>false</c> is always returned.
            </summary>
            <typeparam name="T">The type of the object as well as the key of the dictionary.</typeparam>
            <typeparam name="TValue">The type of value of the dictionary.</typeparam>
            <param name="obj">This object.</param>
            <param name="dicts">The dictionaryies to check.</param>
            <returns><c>true</c> if <paramref name="obj"/> is a key in all of the provided <paramref name="dicts"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.GeneralEx.In``1(``0,System.Collections.Generic.IList{``0})">
            <summary>
            Determines whether this object is in an array/list. If the array/list is null or empty, this method always returns <c>false</c>.
            </summary>
            <typeparam name="T">The type of this object.</typeparam>
            <param name="obj">This object.</param>
            <param name="list">An array/list of objects.</param>
            <returns><c>true</c> if this object is in the specified array/list; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.In``1(``0,``0[])">
            <summary>
            Determines whether this object is in an array of objects. NOTE that if the array is <c>null</c> or empty, this method always returns <c>false</c>.
            </summary>
            <typeparam name="T">The type of this object.</typeparam>
            <param name="obj">This object.</param>
            <param name="array">An array of objects.</param>
            <returns><c>true</c> if this object is in the specified array; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.In``1(``0,``0,``0)">
            <summary>
            Determines whether this comparable object is in a range. The lowerbound is included; the upperbound is excluded.
            <para>For example, either 1 or 2 is in the range from 1 to 3, but 3 is not in the range from 1 to 3.</para>
            </summary>
            <typeparam name="T">A type that implements <see cref="T:System.IComparable`1"/> interface.</typeparam>
            <param name="obj">This comparable object.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <returns><c>true</c> if this comparable object is inside the range specified by <paramref name="lowerBound"/> and <paramref name="upperBound"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.In(System.Byte,System.Byte,System.Byte)">
            <summary>
            Determines whether this byte is in a range. The lowerbound is included; the upperbound is excluded.
            <para>For example, either 1 or 2 is in the range from 1 to 3, but 3 is not in the range from 1 to 3.</para>
            </summary>
            <param name="val">This byte.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <returns><c>true</c> if this byte is inside the range specified by <paramref name="lowerBound"/> and <paramref name="upperBound"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.In(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Determines whether this byte is in a range with steps. The lowerbound is included; the upperbound is excluded.
            <para>For example, either 1 or 3 is in the range from 1 to 5 with step 2, but 5 is not in this range with step.</para></summary>
            <param name="val">This byte.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <param name="step">The step size of the range.</param>
            <returns>
              <c>true</c> if this byte is inside the range specified by <paramref name="lowerBound" /> and <paramref name="upperBound" /> with step <paramref name="step"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.GeneralEx.In(System.SByte,System.SByte,System.SByte)">
            <summary>
            Determines whether this signed byte is in a range. The lowerbound is included; the upperbound is excluded.
            <para>For example, either 1 or 2 is in the range from 1 to 3, but 3 is not in the range from 1 to 3.</para>
            </summary>
            <param name="val">This signed byte.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <returns><c>true</c> if this signed byte is inside the range specified by <paramref name="lowerBound"/> and <paramref name="upperBound"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.In(System.SByte,System.SByte,System.SByte,System.SByte)">
            <summary>
            Determines whether this signed byte is in a range with steps. The lowerbound is included; the upperbound is excluded.
            <para>For example, either 1 or 3 is in the range from 1 to 5 with step 2, but 5 is not in this range with step.</para></summary>
            <param name="val">This signed byte.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <param name="step">The step size of the range.</param>
            <returns>
              <c>true</c> if this signed byte is inside the range specified by <paramref name="lowerBound" /> and <paramref name="upperBound" /> with step <paramref name="step"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.GeneralEx.In(System.Int16,System.Int16,System.Int16)">
            <summary>
            Determines whether this integer is in a range. The lowerbound is included; the upperbound is excluded.
            <para>For example, either 1 or 2 is in the range from 1 to 3, but 3 is not in the range from 1 to 3.</para>
            </summary>
            <param name="val">This integer.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <returns><c>true</c> if this integer is inside the range specified by <paramref name="lowerBound"/> and <paramref name="upperBound"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.In(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Determines whether this integer is in a range with steps. The lowerbound is included; the upperbound is excluded.
            <para>For example, either 1 or 3 is in the range from 1 to 5 with step 2, but 5 is not in this range with step.</para></summary>
            <param name="val">This integer.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <param name="step">The step size of the range.</param>
            <returns>
              <c>true</c> if this integer is inside the range specified by <paramref name="lowerBound" /> and <paramref name="upperBound" /> with step <paramref name="step"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.GeneralEx.In(System.UInt16,System.Int16,System.UInt16)">
            <summary>
            Determines whether this integer is in a range. The lowerbound is included; the upperbound is excluded.
            <para>For example, either 1 or 2 is in the range from 1 to 3, but 3 is not in the range from 1 to 3.</para>
            </summary>
            <param name="val">This integer.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <returns><c>true</c> if this integer is inside the range specified by <paramref name="lowerBound"/> and <paramref name="upperBound"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.In(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Determines whether this integer is in a range with steps. The lowerbound is included; the upperbound is excluded.
            <para>For example, either 1 or 3 is in the range from 1 to 5 with step 2, but 5 is not in this range with step.</para></summary>
            <param name="val">This integer.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <param name="step">The step size of the range.</param>
            <returns>
              <c>true</c> if this integer is inside the range specified by <paramref name="lowerBound" /> and <paramref name="upperBound" /> with step <paramref name="step"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.GeneralEx.In(System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether this integer is in a range. The lowerbound is included; the upperbound is excluded.
            <para>For example, either 1 or 2 is in the range from 1 to 3, but 3 is not in the range from 1 to 3.</para>
            </summary>
            <param name="val">This integer.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <returns><c>true</c> if this integer is inside the range specified by <paramref name="lowerBound"/> and <paramref name="upperBound"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.In(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether this integer is in a range with steps. The lowerbound is included; the upperbound is excluded.
            <para>For example, either 1 or 3 is in the range from 1 to 5 with step 2, but 5 is not in this range with step.</para></summary>
            <param name="val">This integer.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <param name="step">The step size of the range.</param>
            <returns>
              <c>true</c> if this integer is inside the range specified by <paramref name="lowerBound" /> and <paramref name="upperBound" /> with step <paramref name="step"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.GeneralEx.In(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Determines whether this integer is in a range. The lowerbound is included; the upperbound is excluded.
            <para>For example, either 1 or 2 is in the range from 1 to 3, but 3 is not in the range from 1 to 3.</para>
            </summary>
            <param name="val">This integer.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <returns><c>true</c> if this integer is inside the range specified by <paramref name="lowerBound"/> and <paramref name="upperBound"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.In(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Determines whether this integer is in a range with steps. The lowerbound is included; the upperbound is excluded.
            <para>For example, either 1 or 3 is in the range from 1 to 5 with step 2, but 5 is not in this range with step.</para></summary>
            <param name="val">This integer.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <param name="step">The step size of the range.</param>
            <returns>
              <c>true</c> if this integer is inside the range specified by <paramref name="lowerBound" /> and <paramref name="upperBound" /> with step <paramref name="step"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.GeneralEx.In(System.Int64,System.Int64,System.Int64)">
            <summary>
            Determines whether this integer is in a range. The lowerbound is included; the upperbound is excluded.
            <para>For example, either 1 or 2 is in the range from 1 to 3, but 3 is not in the range from 1 to 3.</para>
            </summary>
            <param name="val">This integer.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <returns><c>true</c> if this integer is inside the range specified by <paramref name="lowerBound"/> and <paramref name="upperBound"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.In(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Determines whether this integer is in a range with steps. The lowerbound is included; the upperbound is excluded.
            <para>For example, either 1 or 3 is in the range from 1 to 5 with step 2, but 5 is not in this range with step.</para></summary>
            <param name="val">This integer.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <param name="step">The step size of the range.</param>
            <returns>
              <c>true</c> if this integer is inside the range specified by <paramref name="lowerBound" /> and <paramref name="upperBound" /> with step <paramref name="step"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.GeneralEx.In(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Determines whether this integer is in a range. The lowerbound is included; the upperbound is excluded.
            <para>For example, either 1 or 2 is in the range from 1 to 3, but 3 is not in the range from 1 to 3.</para>
            </summary>
            <param name="val">This integer.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <returns><c>true</c> if this integer is inside the range specified by <paramref name="lowerBound"/> and <paramref name="upperBound"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.In(System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Determines whether this integer is in a range with steps. The lowerbound is included; the upperbound is excluded.
            <para>For example, either 1 or 3 is in the range from 1 to 5 with step 2, but 5 is not in this range with step.</para></summary>
            <param name="val">This integer.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <param name="step">The step size of the range.</param>
            <returns>
              <c>true</c> if this integer is inside the range specified by <paramref name="lowerBound" /> and <paramref name="upperBound" /> with step <paramref name="step"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.GeneralEx.In(System.Double,System.Double,System.Double)">
            <summary>
            Determines whether this floating number is in a range. The lowerbound is included; the upperbound is excluded.
            <para>For example, either 1 or 1.5 is in the range from 1.0 to 3.0, but 3.0 is not in the range from 1.0 to 3.0.</para>
            </summary>
            <param name="val">This floating number.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <returns><c>true</c> if this floating number is inside the range specified by <paramref name="lowerBound"/> and <paramref name="upperBound"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.In(System.Single,System.Single,System.Single)">
            <summary>
            Determines whether this floating number is in a range. The lowerbound is included; the upperbound is excluded.
            <para>For example, either 1 or 1.5 is in the range from 1.0 to 3.0, but 3.0 is not in the range from 1.0 to 3.0.</para>
            </summary>
            <param name="val">This floating number.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <returns><c>true</c> if this floating number is inside the range specified by <paramref name="lowerBound"/> and <paramref name="upperBound"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.In(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Determines whether this <see cref="T:System.Decimal"/> is in a range. The lowerbound is included; the upperbound is excluded.
            <para>For example, either 1 or 1.5 is in the range from 1.0 to 3.0, but 3.0 is not in the range from 1.0 to 3.0.</para>
            </summary>
            <param name="val">This <see cref="T:System.Decimal"/> number.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <returns><c>true</c> if this <see cref="T:System.Decimal"/> number is inside the range specified by <paramref name="lowerBound"/> and <paramref name="upperBound"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.In(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Determines whether this <see cref="T:System.DateTime"/> is in a range. The lowerbound is included; the upperbound is excluded.
            <para>For example, either "12:00, March 21, 2018" or "14:00, March 21, 2018" is in the range from "12:00, March 21, 2018" to "23:00, March 21, 2018", but "23:00, March 21, 2018" is not in this range.</para>
            </summary>
            <param name="val">This <see cref="T:System.DateTime"/>.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <returns><c>true</c> if this provided <see cref="T:System.DateTime"/> is inside the range specified by <paramref name="lowerBound"/> and <paramref name="upperBound"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.InclusiveBetween``1(``0,``0,``0)">
            <summary>
            Determines whether this comparable object is inclusively between two bounds.
            <para>For example, both 1,2 is inclusively between 1 and 3.</para>
            </summary>
            <typeparam name="T">A type that conforms to System.IComparable{T} interface.</typeparam>
            <param name="obj">This comparable object.</param>
            <param name="lowerBound">The lower bound to compare.</param>
            <param name="upperBound">The upper bound to compare.</param>
            <returns>true if this comparable object is inclusively between the given bounds; otherwise, false.</returns>
        </member>
        <member name="M:System.GeneralEx.Between``1(``0,``0,``0)">
            <summary>
            Determines whether this comparable object is between two bounds.
            <para>For example, both 2 is between 1 and 3, but 1 is not between 1 and 3.</para>
            </summary>
            <typeparam name="T">A type that conforms to System.IComparable{T} interface.</typeparam>
            <param name="obj">This comparable object.</param>
            <param name="lowerBound">The lower bound to compare.</param>
            <param name="upperBound">The upper bound to compare.</param>
            <returns>true if this comparable object is between the given bounds; otherwise, false.</returns>
        </member>
        <member name="M:System.GeneralEx.NotIn``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether this object is in a sequence. If the sequence is null or empty, <c>false</c> is always returned.
            </summary>
            <typeparam name="T">The type of this object.</typeparam>
            <param name="obj">This object.</param>
            <param name="sequence">A sequence of objects.</param>
            <returns><c>true</c> if this object is found in the specified sequence; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.NotIn``2(``0,System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Determines whether this object is a key in a dictionary. If the dictionary is null or empty, <c>false</c> is always returned.
            </summary>
            <typeparam name="T">The type of the object as well as the key of the dictionary.</typeparam>
            <typeparam name="TValue">The type of value of the dictionary.</typeparam>
            <param name="obj">This object.</param>
            <param name="dict">The dictionary.</param>
            <returns><c>true</c> if <paramref name="obj"/> is a key in <paramref name="dict"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.GeneralEx.NotIn``1(``0,System.Collections.Generic.IList{``0})">
            <summary>
            Determines whether this object is in an array/list. If the array/list is null or empty, this method always returns <c>false</c>.
            </summary>
            <typeparam name="T">The type of this object.</typeparam>
            <param name="obj">This object.</param>
            <param name="list">An array/list of objects.</param>
            <returns><c>true</c> if this object is in the specified array/list; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.NotIn``1(``0,``0[])">
            <summary>
            Determines whether this object is in an array of objects. NOTE that if the array is <c>null</c> or empty, this method always returns <c>false</c>.
            </summary>
            <typeparam name="T">The type of this object.</typeparam>
            <param name="obj">This object.</param>
            <param name="array">An array of objects.</param>
            <returns><c>true</c> if this object is in the specified array; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.NotIn``1(``0,``0,``0)">
            <summary>
            Determines whether this comparable object is NOT in a range. The lowerbound for the range is included for the range; the upperbound is excluded.
            <para>For example, either 0 or 3 is NOT in the range from 1 to 3, but 1 is in the range from 1 to 3.</para>
            </summary>
            <typeparam name="T">A type that implements <see cref="T:System.IComparable`1"/> interface.</typeparam>
            <param name="obj">This comparable object.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <returns><c>true</c> if this comparable object is NOT inside the range specified by <paramref name="lowerBound"/> and <paramref name="upperBound"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.NotIn(System.Byte,System.Byte,System.Byte)">
            <summary>
            Determines whether this byte is NOT in a range. The lowerbound for the range is included for the range; the upperbound is excluded.
            <para>For example, either 0 or 3 is NOT in the range from 1 to 3, but 1 is in the range from 1 to 3.</para>
            </summary>
            <param name="val">This byte.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <returns><c>true</c> if this byte is NOT inside the range specified by <paramref name="lowerBound"/> and <paramref name="upperBound"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.NotIn(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Determines whether this byte is NOT in a range with some step. The lowerbound for the range is included for the range; the upperbound is excluded.
            <para>For example, range from 1 to 5 with step 2 represents two numbers 1,3. Therefore only 1 or 3 is in this range while others are not.</para></summary>
            <param name="val">This byte.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <param name="step">The step of this range.</param>
            <returns>
              <c>true</c> if this byte is NOT inside the range specified by <paramref name="lowerBound" /> and <paramref name="upperBound" /> with step <paramref name="step"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.GeneralEx.NotIn(System.SByte,System.SByte,System.SByte)">
            <summary>
            Determines whether this signed byte is NOT in a range. The lowerbound for the range is included for the range; the upperbound is excluded.
            <para>For example, either 0 or 3 is NOT in the range from 1 to 3, but 1 is in the range from 1 to 3.</para>
            </summary>
            <param name="val">This signed byte.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <returns><c>true</c> if this signed byte is NOT inside the range specified by <paramref name="lowerBound"/> and <paramref name="upperBound"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.NotIn(System.SByte,System.SByte,System.SByte,System.SByte)">
            <summary>
            Determines whether this signed byte is NOT in a range with some step. The lowerbound for the range is included for the range; the upperbound is excluded.
            <para>For example, range from 1 to 5 with step 2 represents two numbers 1,3. Therefore only 1 or 3 is in this range while others are not.</para></summary>
            <param name="val">This signed byte.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <param name="step">The step of this range.</param>
            <returns>
              <c>true</c> if this signed byte is NOT inside the range specified by <paramref name="lowerBound" /> and <paramref name="upperBound" /> with step <paramref name="step"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.GeneralEx.NotIn(System.Int16,System.Int16,System.Int16)">
            <summary>
            Determines whether this integer is NOT in a range. The lowerbound for the range is included for the range; the upperbound is excluded.
            <para>For example, either 0 or 3 is NOT in the range from 1 to 3, but 1 is in the range from 1 to 3.</para>
            </summary>
            <param name="val">This integer.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <returns><c>true</c> if this integer is NOT inside the range specified by <paramref name="lowerBound"/> and <paramref name="upperBound"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.NotIn(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Determines whether this integer is NOT in a range with some step. The lowerbound for the range is included for the range; the upperbound is excluded.
            <para>For example, range from 1 to 5 with step 2 represents two numbers 1,3. Therefore only 1 or 3 is in this range while others are not.</para></summary>
            <param name="val">This integer.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <param name="step">The step of this range.</param>
            <returns>
              <c>true</c> if this integer is NOT inside the range specified by <paramref name="lowerBound" /> and <paramref name="upperBound" /> with step <paramref name="step"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.GeneralEx.NotIn(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Determines whether this integer is NOT in a range. The lowerbound for the range is included for the range; the upperbound is excluded.
            <para>For example, either 0 or 3 is NOT in the range from 1 to 3, but 1 is in the range from 1 to 3.</para>
            </summary>
            <param name="val">This integer.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <returns><c>true</c> if this integer is NOT inside the range specified by <paramref name="lowerBound"/> and <paramref name="upperBound"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.NotIn(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Determines whether this integer is NOT in a range with some step. The lowerbound for the range is included for the range; the upperbound is excluded.
            <para>For example, range from 1 to 5 with step 2 represents two numbers 1,3. Therefore only 1 or 3 is in this range while others are not.</para></summary>
            <param name="val">This integer.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <param name="step">The step of this range.</param>
            <returns>
              <c>true</c> if this integer is NOT inside the range specified by <paramref name="lowerBound" /> and <paramref name="upperBound" /> with step <paramref name="step"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.GeneralEx.NotIn(System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether this integer is NOT in a range. The lowerbound for the range is included for the range; the upperbound is excluded.
            <para>For example, either 0 or 3 is NOT in the range from 1 to 3, but 1 is in the range from 1 to 3.</para>
            </summary>
            <param name="val">This integer.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <returns><c>true</c> if this integer is NOT inside the range specified by <paramref name="lowerBound"/> and <paramref name="upperBound"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.NotIn(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether this integer is NOT in a range with some step. The lowerbound for the range is included for the range; the upperbound is excluded.
            <para>For example, range from 1 to 5 with step 2 represents two numbers 1,3. Therefore only 1 or 3 is in this range while others are not.</para></summary>
            <param name="val">This integer.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <param name="step">The step of this range.</param>
            <returns>
              <c>true</c> if this integer is NOT inside the range specified by <paramref name="lowerBound" /> and <paramref name="upperBound" /> with step <paramref name="step"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.GeneralEx.NotIn(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Determines whether this integer is NOT in a range. The lowerbound for the range is included for the range; the upperbound is excluded.
            <para>For example, either 0 or 3 is NOT in the range from 1 to 3, but 1 is in the range from 1 to 3.</para>
            </summary>
            <param name="val">This integer.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <returns><c>true</c> if this integer is NOT inside the range specified by <paramref name="lowerBound"/> and <paramref name="upperBound"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.NotIn(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Determines whether this integer is NOT in a range with some step. The lowerbound for the range is included for the range; the upperbound is excluded.
            <para>For example, range from 1 to 5 with step 2 represents two numbers 1,3. Therefore only 1 or 3 is in this range while others are not.</para></summary>
            <param name="val">This integer.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <param name="step">The step of this range.</param>
            <returns>
              <c>true</c> if this integer is NOT inside the range specified by <paramref name="lowerBound" /> and <paramref name="upperBound" /> with step <paramref name="step"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.GeneralEx.NotIn(System.Int64,System.Int64,System.Int64)">
            <summary>
            Determines whether this integer is NOT in a range. The lowerbound for the range is included for the range; the upperbound is excluded.
            <para>For example, either 0 or 3 is NOT in the range from 1 to 3, but 1 is in the range from 1 to 3.</para>
            </summary>
            <param name="val">This integer.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <returns><c>true</c> if this integer is NOT inside the range specified by <paramref name="lowerBound"/> and <paramref name="upperBound"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.NotIn(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Determines whether this integer is NOT in a range with some step. The lowerbound for the range is included for the range; the upperbound is excluded.
            <para>For example, range from 1 to 5 with step 2 represents two numbers 1,3. Therefore only 1 or 3 is in this range while others are not.</para></summary>
            <param name="val">This integer.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <param name="step">The step of this range.</param>
            <returns>
              <c>true</c> if this integer is NOT inside the range specified by <paramref name="lowerBound" /> and <paramref name="upperBound" /> with step <paramref name="step"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.GeneralEx.NotIn(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Determines whether this integer is NOT in a range. The lowerbound for the range is included for the range; the upperbound is excluded.
            <para>For example, either 0 or 3 is NOT in the range from 1 to 3, but 1 is in the range from 1 to 3.</para>
            </summary>
            <param name="val">This integer.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <returns><c>true</c> if this integer is NOT inside the range specified by <paramref name="lowerBound"/> and <paramref name="upperBound"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.NotIn(System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Determines whether this integer is NOT in a range with some step. The lowerbound for the range is included for the range; the upperbound is excluded.
            <para>For example, range from 1 to 5 with step 2 represents two numbers 1,3. Therefore only 1 or 3 is in this range while others are not.</para></summary>
            <param name="val">This integer.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <param name="step">The step of this range.</param>
            <returns>
              <c>true</c> if this integer is NOT inside the range specified by <paramref name="lowerBound" /> and <paramref name="upperBound" /> with step <paramref name="step"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.GeneralEx.NotIn(System.Double,System.Double,System.Double)">
            <summary>
            Determines whether this floating number is NOT in a range. The lowerbound for the range is included for the range; the upperbound is excluded.
            <para>For example, either 0.0 or 3.0 is NOT in the range from 1.0 to 3.0, but 1.0 is in this range.</para>
            </summary>
            <param name="val">This floating number.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <returns><c>true</c> if this floating number is NOT inside the range specified by <paramref name="lowerBound"/> and <paramref name="upperBound"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.NotIn(System.Double,System.Single,System.Single)">
            <summary>
            Determines whether this floating number is NOT in a range. The lowerbound for the range is included for the range; the upperbound is excluded.
            <para>For example, either 0.0 or 3.0 is NOT in the range from 1.0 to 3.0, but 1.0 is in this range.</para>
            </summary>
            <param name="val">This floating number.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <returns><c>true</c> if this floating number is NOT inside the range specified by <paramref name="lowerBound"/> and <paramref name="upperBound"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.NotIn(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Determines whether this decimal number is NOT in a range. The lowerbound for the range is included for the range; the upperbound is excluded.
            <para>For example, either 0.0 or 3.0 is NOT in the range from 1.0 to 3.0, but 1.0 is in this range.</para>
            </summary>
            <param name="val">This decimal number.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <returns><c>true</c> if this decimal number is NOT inside the range specified by <paramref name="lowerBound"/> and <paramref name="upperBound"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.NotIn(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Determines whether this <see cref="T:System.DateTime"/> is NOT in a range. The lowerbound is included for the range; the upperbound is excluded.
            <para>For example, either "23:00, March 21, 2018" or "16:00, March 20, 2018" is NOT in the range from "12:00, March 21, 2018" to "23:00, March 21, 2018", but "12:00, March 21, 2018" is in this range.</para>
            </summary>
            <param name="val">This <see cref="T:System.DateTime"/>.</param>
            <param name="lowerBound">The inclusive lower bound for the range.</param>
            <param name="upperBound">The exclusive upper bound for the range.</param>
            <returns><c>true</c> if this provided <see cref="T:System.DateTime"/> is NOT inside the range specified by <paramref name="lowerBound"/> and <paramref name="upperBound"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.Low(System.Byte)">
            <summary>
            Gets the lower 4 bits of this byte positioned the lower half of the returned byte. For example, the return value of <see cref="M:System.GeneralEx.Low(System.Byte)"/> of 01100100 is 00000100.
            </summary>
            <param name="value">This byte.</param>
            <returns>The lower 4 bits of this byte.</returns>
        </member>
        <member name="M:System.GeneralEx.High(System.Byte)">
            <summary>
            Gets the higher 4 bits of this byte positioned the lower half of the returned byte. For example, the return value of <see cref="M:System.GeneralEx.High(System.Byte)"/> of 01100100 is 00000110.
            </summary>
            <param name="value">This byte.</param>
            <returns>The higher 4 bits of this byte.</returns>
        </member>
        <member name="M:System.GeneralEx.Low(System.Int16)">
            <summary>
            Gets the lower 8 bits of this 16-bit integer, represented by a 8-bit byte.
            </summary>
            <param name="value">This 16-bit integer.</param>
            <returns>The lower 8 bits of this 16-bit integer, represented by a 8-bit byte.</returns>
        </member>
        <member name="M:System.GeneralEx.High(System.Int16)">
            <summary>
            Gets the higher 8 bits of this 16-bit integer.
            </summary>
            <param name="value">This 16-bit integer.</param>
            <returns>The higher 8 bits of this 16-bit integer, represented by a 8-bit byte.</returns>
        </member>
        <member name="M:System.GeneralEx.Low(System.UInt16)">
            <summary>
            Gets the lower 8 bits of this 16-bit unsigned integer, represented by a 8-bit byte.
            </summary>
            <param name="value">This 16-bit integer.</param>
            <returns>The lower 8 bits of this 16-bit unsigned integer, represented by a 8-bit byte.</returns>
        </member>
        <member name="M:System.GeneralEx.High(System.UInt16)">
            <summary>
            Gets the higher 8 bits of this 16-bit unsigned integer, represented by a 8-bit byte.
            </summary>
            <param name="value">This 16-bit integer.</param>
            <returns>The higher 8 bits of this 16-bit unsigned integer, represented by a 8-bit byte.</returns>
        </member>
        <member name="M:System.GeneralEx.Low(System.Int32)">
            <summary>
            Gets the lower 16 bits of this 32-bit integer, represented by a 16-bit unsigned integer.
            </summary>
            <param name="value">This 32-bit integer.</param>
            <returns>The lower 16 bits of this 32-bit integer, represented by a 16-bit unsigned integer.</returns>
        </member>
        <member name="M:System.GeneralEx.High(System.Int32)">
            <summary>
            Gets the higher 16 bits of this 32-bit integer, represented by a 16-bit unsigned integer.
            </summary>
            <param name="value">This 32-bit integer.</param>
            <returns>The higher 16 bits of this 32-bit unsigned integer, represented by a 16-bit unsigned integer.</returns>
        </member>
        <member name="M:System.GeneralEx.Low(System.UInt32)">
            <summary>
            Gets the lower 16 bits of this 32-bit unsigned integer, represented by a 16-bit unsigned integer.
            </summary>
            <param name="value">This 32-bit integer.</param>
            <returns>The lower 16 bits of this 32-bit integer, represented by a 16-bit unsigned integer.</returns>
        </member>
        <member name="M:System.GeneralEx.High(System.UInt32)">
            <summary>
            Gets the higher 16 bits of this 32-bit unsigned integer, represented by a 16-bit unsigned integer.
            </summary>
            <param name="value">This 32-bit integer.</param>
            <returns>The higher 16 bits of this 32-bit unsigned integer, represented by a 16-bit unsigned integer.</returns>
        </member>
        <member name="M:System.GeneralEx.Low(System.Int64)">
            <summary>
            Gets the lower 32 bits of this 64-bit integer, represented by a 32-bit unsigned integer.
            </summary>
            <param name="value">This 64-bit integer.</param>
            <returns>The lower 32 bits of this 64-bit integer, represented by a 32-bit unsigned integer.</returns>
        </member>
        <member name="M:System.GeneralEx.High(System.Int64)">
            <summary>
            Gets the higher 32 bits of this 64-bit integer, represented by a 32-bit unsigned integer.
            </summary>
            <param name="value">This 64-bit integer.</param>
            <returns>The lower 32 bits of this 64-bit integer, represented by a 32-bit unsigned integer.</returns>
        </member>
        <member name="M:System.GeneralEx.Low(System.UInt64)">
            <summary>
            Gets the lower 32 bits of this 64-bit unsigned integer, represented by a 32-bit unsigned integer.
            </summary>
            <param name="value">This 64-bit integer.</param>
            <returns>The lower 32 bits of this 64-bit unsigned integer, represented by a 32-bit unsigned integer.</returns>
        </member>
        <member name="M:System.GeneralEx.High(System.UInt64)">
            <summary>
            Gets the higher 32 bits of this 64-bit unsigned integer, represented by a 32-bit unsigned integer
            </summary>
            <param name="value">This 64-bit integer.</param>
            <returns>The lower 32 bits of this 64-bit unsigned integer, represented by a 32-bit unsigned integer.</returns>
        </member>
        <member name="M:System.GeneralEx.ToHex(System.UInt64,System.Boolean)">
            <summary>
            Converts the numeric value of this instance to its equivalent hex string representation.
            </summary>
            <param name="number">This integer.</param>
            <param name="fullLength">Indicates whether this integer will be converted to a full-length hex equivalent. 
            For example, integer 10 will be converted to "A" if this parameter is set false and "000000000000000A" if otherwise.</param>
            <returns>A hex string equivalent to the current integer.</returns>
        </member>
        <member name="M:System.GeneralEx.ToHex(System.Int64,System.Boolean)">
            <summary>
            Converts the numeric value of this instance to its equivalent hex string representation.
            </summary>
            <param name="number">This integer.</param>
            <param name="fullLength">Indicates whether this integer will be converted to a full-length hex equivalent. 
            For example, integer 10 will be converted to "A" if this parameter is set false and "000000000000000A" if otherwise.</param>
            <returns>A hex string equivalent to the current integer.</returns>
        </member>
        <member name="M:System.GeneralEx.ToHex(System.UInt32,System.Boolean)">
            <summary>
            Converts the numeric value of this instance to its equivalent hex string representation.
            </summary>
            <param name="number">This integer.</param>
            <param name="fullLength">Indicates whether this integer will be converted to a full-length hex equivalent. 
            For example, integer 10 will be converted to "A" if this parameter is set false and "0000000A" if otherwise.</param>
            <returns>A hex string equivalent to the current integer.</returns>
        </member>
        <member name="M:System.GeneralEx.ToHex(System.Int32,System.Boolean)">
            <summary>
            Converts the numeric value of this instance to its equivalent hex string representation.
            </summary>
            <param name="number">This integer.</param>
            <param name="fullLength">Indicates whether this integer will be converted to a full-length hex equivalent. 
            For example, integer 10 will be converted to "A" if this parameter is set false and "0000000A" if otherwise.</param>
            <returns>A hex string equivalent to the current integer.</returns>
        </member>
        <member name="M:System.GeneralEx.ToHex(System.UInt16,System.Boolean)">
            <summary>
            Converts the numeric value of this instance to its equivalent hex string representation.
            </summary>
            <param name="number">This integer.</param>
            <param name="fullLength">Indicates whether this integer will be converted to a full-length hex equivalent. 
            For example, integer 10 will be converted to "A" if this parameter is set false and "000A" if otherwise.</param>
            <returns>A hex string equivalent to the current integer.</returns>
        </member>
        <member name="M:System.GeneralEx.ToHex(System.Int16,System.Boolean)">
            <summary>
            Converts the numeric value of this instance to its equivalent hex string representation.
            </summary>
            <param name="number">This integer.</param>
            <param name="fullLength">Indicates whether this integer will be converted to a full-length hex equivalent. 
            For example, integer 10 will be converted to "A" if this parameter is set false and "000A" if otherwise.</param>
            <returns>A hex string equivalent to the current integer.</returns>
        </member>
        <member name="M:System.GeneralEx.ToHex(System.Byte,System.Boolean)">
            <summary>
            Converts this byte to its equivalent hex string representation.
            </summary>
            <param name="number">This integer.</param>
            <param name="fullLength">Indicates whether this integer will be converted to a full-length hex equivalent. 
            For example, integer 10 will be converted to "A" if this parameter is set false and "0A" if otherwise.</param>
            <returns>A hex string equivalent to the current byte.</returns>
        </member>
        <member name="M:System.GeneralEx.ToHex(System.SByte,System.Boolean)">
            <summary>
            Converts this byte to its equivalent hex string representation.
            </summary>
            <param name="number">This integer.</param>
            <param name="fullLength">Indicates whether this integer will be converted to a full-length hex equivalent. 
            For example, integer 10 will be converted to "A" if this parameter is set false and "0A" if otherwise.</param>
            <returns>A hex string equivalent to the current byte.</returns>
        </member>
        <member name="M:System.GeneralEx.ToHex(System.Byte[])">
            <summary>
            Converts this byte array to its equivalent hex string representation. For example, array {5, 18, 123, 214} will be converted to "05127BD6".
            </summary>
            <param name="bytes">This byte array.</param>
            <returns>A hex string equivalent to the current byte array.</returns>
        </member>
        <member name="M:System.GeneralEx.ToHex(System.Byte[],System.Char)">
            <summary>
            Converts this byte array to its equivalent hex string representation. A Unicode character is used to delimiter values.
            For example, array {5, 18, 123, 214} will be converted to "05 12 7B D6" if a single space is used as the delimiter.
            </summary>
            <param name="bytes">This byte array.</param>
            <param name="delimiter">The delimiter used to delimit the hex string representations in the output string.</param>
            <returns>A hex string equivalent to the current byte array.</returns>
        </member>
        <member name="M:System.GeneralEx.ToHex(System.Byte[],System.String)">
            <summary>
            Converts this byte array to its equivalent hex string representation. A string is used to delimiter values.
            For example, array {5, 18, 123, 214} will be converted to "05 , 12 , 7B , D6" if string " , " is used as the delimiter.
            </summary>
            <param name="bytes">This byte array.</param>
            <param name="delimiter">The delimiter used to delimit the hex string representations in the output string.</param>
            <returns>A hex string equivalent to the current byte array.</returns>
        </member>
        <member name="M:System.GeneralEx.ToBytes(System.UInt32)">
            <summary>
            Converts the numeric value of this instance to a byte array.
            </summary>
            <param name="value">This value.</param>
            <returns>A byte array converted from the numeric value of the current instance.</returns>
        </member>
        <member name="M:System.GeneralEx.ToBytes(System.UInt64)">
            <summary>
            Converts the numeric value of this instance to a byte array.
            </summary>
            <param name="value">This value.</param>
            <returns>A byte array converted from the numeric value of the current instance.</returns>
        </member>
        <member name="M:System.GeneralEx.ToBytes(System.UInt16)">
            <summary>
            Converts the numeric value of this instance to a byte array.
            </summary>
            <param name="value">This value.</param>
            <returns>A byte array converted from the numeric value of the current instance.</returns>
        </member>
        <member name="M:System.GeneralEx.ToBytes(System.Int32)">
            <summary>
            Converts the numeric value of this instance to a byte array.
            </summary>
            <param name="value">This value.</param>
            <returns>A byte array converted from the numeric value of the current instance.</returns>
        </member>
        <member name="M:System.GeneralEx.ToBytes(System.Int64)">
            <summary>
            Converts the numeric value of this instance to a byte array.
            </summary>
            <param name="value">This value.</param>
            <returns>A byte array converted from the numeric value of the current instance.</returns>
        </member>
        <member name="M:System.GeneralEx.ToBytes(System.Int16)">
            <summary>
            Converts the numeric value of this instance to a byte array.
            </summary>
            <param name="value">This value.</param>
            <returns>A byte array converted from the numeric value of the current instance.</returns>
        </member>
        <member name="M:System.GeneralEx.ToBytes(System.Double)">
            <summary>
            Converts the numeric value of this instance to a byte array.
            </summary>
            <param name="value">This value.</param>
            <returns>A byte array converted from the numeric value of the current instance.</returns>
        </member>
        <member name="M:System.GeneralEx.ToBytes(System.Single)">
            <summary>
            Converts the numeric value of this instance to a byte array.
            </summary>
            <param name="value">This value.</param>
            <returns>A byte array converted from the numeric value of the current instance.</returns>
        </member>
        <member name="M:System.GeneralEx.ToBytes(System.DateTime)">
            <summary>
            Converts the numeric value of this instance to a byte array.
            </summary>
            <param name="value">This value.</param>
            <returns>A byte array converted from the numeric value of the current instance.</returns>
        </member>
        <member name="M:System.GeneralEx.IsNull(System.Object)">
            <summary>
            Returns <c>true</c> if the current object is a <c>null</c> reference.
            </summary>
            <param name="obj">The current object.</param>
            <returns>Returns <c>true</c> if the current object is a <c>null</c> reference; otherwise, returns <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.IsNotNull(System.Object)">
            <summary>
            Returns <c>true</c> if the current object is not a <c>null</c> reference.
            </summary>
            <param name="obj">The current object.</param>
            <returns>Returns <c>true</c> if the current object is not a <c>null</c> reference; otherwise, returns <c>false</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.Reset(System.Timers.Timer)">
            <summary>
            Restarts this System.Timers.Timer object.
            </summary>
            <param name="timer">The System.Timers.Timer object to reset.</param>
        </member>
        <member name="M:System.GeneralEx.ToString(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Converts the value of this instance to a string.
            </summary>
            <param name="builder">A System.StringBuilder object.</param>
            <param name="clear">Specifies whether to clear the content of this System.StringBuilder object after conversion.</param>
            <returns>A string whose value is the same as this instance.</returns>
        </member>
        <member name="M:System.GeneralEx.ToChar``1(``0)">
            <summary>
            Converts the value of this value to a System.Char value.
            </summary>
            <param name="value">This value.</param>
            <returns>A <see cref="T:System.Char"/> value that is equivalent to <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.GeneralEx.ToChar(System.String)">
            <summary>
            Converts the string instance to a <see cref="T:System.Char"/> value if it represents such a value in a recognizable format.
            </summary>
            <param name="str">The string instance.</param>
            <returns>An <see cref="T:System.Char"/> value that is equivalent to the string instance.</returns>
        </member>
        <member name="M:System.GeneralEx.ToBoolean``1(``0)">
            <summary>
            Converts the value of this value to a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">This value.</param>
            <returns>A <see cref="T:System.Boolean"/> value that is equivalent to <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.GeneralEx.ToBoolean(System.String)">
            <summary>
            Converts the string instance to a <see cref="T:System.Boolean"/> value if it represents such a value in a recognizable format.
            </summary>
            <param name="str">The string instance.</param>
            <returns>An <see cref="T:System.Boolean"/> value that is equivalent to the string instance.</returns>
        </member>
        <member name="M:System.GeneralEx.ToDateTime``1(``0)">
            <summary>
            Converts the <paramref name="value"/> to a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">This value.</param>
            <returns>A <see cref="T:System.DateTime"/> equivalent to <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.GeneralEx.ToDateTime(System.Byte[])">
            <summary>
            Converts the first 8 bytes (defined by <c>sizeof(DateTime)</c>) of this byte array <paramref name="bytes"/> to a <see cref="T:System.DateTime"/>. 
            </summary>
            <param name="bytes">This bytes array.</param>
            <returns>A <see cref="T:System.DateTime"/> equivalent to the current byte array.</returns>
        </member>
        <member name="M:System.GeneralEx.ToDateTime(System.String)">
            <summary>
            Converts the string instance to a <see cref="T:System.DateTime"/> value if it represents such a value in a recognizable format.
            </summary>
            <param name="str">The string instance.</param>
            <returns>An <see cref="T:System.DateTime"/> value that is equivalent to the string instance.</returns>
        </member>
        <member name="M:System.GeneralEx.ToSByte``1(``0)">
            <summary>
            Converts the value of this value to a 8-bit signed integer.
            </summary>
            <param name="value">This value.</param>
            <returns>An 8-bit signed integer that is equivalent to <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.GeneralEx.ToSByte(System.String)">
            <summary>
            Converts the string instance to a 8-bit unsigned integer if it represents such an integer in a recognizable format.
            </summary>
            <param name="str">The string instance.</param>
            <returns>An 8-bit unsigned integer that is equivalent to the string instance.</returns>
        </member>
        <member name="M:System.GeneralEx.ToByte``1(``0)">
            <summary>
            Converts the value of this value to a 8-bit unsigned integer.
            </summary>
            <param name="value">This value.</param>
            <returns>An 8-bit unsigned integer that is equivalent to <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.GeneralEx.ToByte(System.String)">
            <summary>
            Converts the string instance to a 8-bit signed integer if it represents such an integer in a recognizable format.
            </summary>
            <param name="str">The string instance.</param>
            <returns>An 8-bit signed integer that is equivalent to the string instance.</returns>
        </member>
        <member name="M:System.GeneralEx.ToInt16``1(``0)">
            <summary>
            Converts the value of this value to a 16-bit signed integer.
            </summary>
            <param name="value">This value.</param>
            <returns>A 16-bit signed integer that is equivalent to <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.GeneralEx.ToInt16(System.String)">
            <summary>
            Converts the string instance to a 16-bit signed integer if it represents such an integer in a recognizable format.
            </summary>
            <param name="str">The string instance.</param>
            <returns>A 16-bit signed integer that is equivalent to the string instance.</returns>
        </member>
        <member name="M:System.GeneralEx.ToUInt16``1(``0)">
            <summary>
            Converts the value of this value to a 16-bit signed integer.
            </summary>
            <param name="value">This value.</param>
            <returns>A 16-bit signed integer that is equivalent to <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.GeneralEx.ToUInt16(System.String)">
            <summary>
            Converts the string instance to a 16-bit unsigned integer if it represents such an integer in a recognizable format.
            </summary>
            <param name="str">The string instance.</param>
            <returns>A 16-bit unsigned integer that is equivalent to the string instance.</returns>
        </member>
        <member name="M:System.GeneralEx.ToInt32``1(``0)">
            <summary>
            Converts the current object to a 32-bit signed integer.
            </summary>
            <param name="value">This value.</param>
            <returns>A 32-bit signed integer that is equivalent to <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.GeneralEx.ToInt32OrNull``1(``0)">
            <summary>
            Converts the current object to a 32-bit signed integer if it is not <c>null</c>; otherwise, returns a <c>null</c> reference.
            </summary>
            <param name="value">This value.</param>
            <returns>A 32-bit signed integer that is equivalent to <paramref name="value"/> if it is not <c>null</c>; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:System.GeneralEx.ToInt32(System.String)">
            <summary>
            Converts the string instance to a 32-bit signed integer if it represents such an integer in a recognizable format.
            </summary>
            <param name="str">The string instance.</param>
            <returns>A 32-bit signed integer that is equivalent to the string instance.</returns>
        </member>
        <member name="M:System.GeneralEx.ToUInt32``1(``0)">
            <summary>
            Converts the value of this value to a 32-bit unsigned integer.
            </summary>
            <param name="value">This value.</param>
            <returns>A 32-bit unsigned integer that is equivalent to <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.GeneralEx.ToUInt32(System.String)">
            <summary>
            Converts the string instance to a 32-bit unsigned integer if it represents such an integer in a recognizable format.
            </summary>
            <param name="str">The string instance.</param>
            <returns>A 32-bit signed uninteger that is equivalent to the string instance.</returns>
        </member>
        <member name="M:System.GeneralEx.ToInt64``1(``0)">
            <summary>
            Converts the value of this value to a 64-bit signed integer.
            </summary>
            <param name="value">This value.</param>
            <returns>A 64-bit signed integer that is equivalent to <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.GeneralEx.ToInt64(System.String)">
            <summary>
            Converts the string instance to a 64-bit signed integer if it represents such an integer in a recognizable format.
            </summary>
            <param name="str">The string instance.</param>
            <returns>A 64-bit signed integer that is equivalent to the string instance.</returns>
        </member>
        <member name="M:System.GeneralEx.ToUInt64``1(``0)">
            <summary>
            Converts the value of this value to a 64-bit unsigned integer.
            </summary>
            <param name="value">This value.</param>
            <returns>A 64-bit unsigned integer that is equivalent to <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.GeneralEx.ToUInt64(System.String)">
            <summary>
            Converts the string instance to a 64-bit unsigned integer if it represents such an integer in a recognizable format.
            </summary>
            <param name="str">The string instance.</param>
            <returns>A 64-bit signed uninteger that is equivalent to the string instance.</returns>
        </member>
        <member name="M:System.GeneralEx.ToDouble``1(``0)">
            <summary>
            Converts the value of this value to a double-precision floating-point number.
            </summary>
            <param name="value">This value.</param>
            <returns>A double-precision floating-point number that is equivalent to <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.GeneralEx.ToDouble(System.String)">
            <summary>
            Converts the string instance to a double-precision floating-point number if it represents such a number in a recognizable format.
            </summary>
            <param name="str">The string instance.</param>
            <returns>A double-precision floating-point number that is equivalent to the string instance.</returns>
        </member>
        <member name="M:System.GeneralEx.ToSingle``1(``0)">
            <summary>
            Converts the value of this value to a single-precision floating-point number.
            </summary>
            <param name="value">This value.</param>
            <returns>A single-precision floating-point number that is equivalent to <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.GeneralEx.ToSingle(System.String)">
            <summary>
            Converts the string instance to a single-precision floating-point number if it represents such a number in a recognizable format.
            </summary>
            <param name="str">The string instance.</param>
            <returns>A single-precision floating-point number that is equivalent to the string instance.</returns>
        </member>
        <member name="T:System.Swapper">
            <summary>
            Provides methods to swap values of two objects.
            </summary>
        </member>
        <member name="M:System.Swapper.Swap``1(``0@,``0@)">
            <summary>
            Swap the values of two objects.
            </summary>
            <param name="x">The first object.</param>
            <param name="y">The second object.</param>
        </member>
        <member name="M:System.HashEx.SystemHash(System.Byte[])">
            <summary>
            Serves as a hash function for this byte array using system algorithm provided by Microsoft.NET 4 platform.
            <para>NOTE that the <c>GetHashCode</c> of a byte array DOES NOT hash the content. Use this method instead.</para>
            </summary>
            <param name="bytes">A byte array.</param>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.HashEx.GetHashCode64(System.String)">
            <summary>
            Serves as a hash function that returns a 64-bit integer hash code for this string instance. This method uses a 64-bit variant of the hash algorithm provided by Microsoft.NET 4 platform.
            </summary>
            <param name="str">This string instance.</param>
            <returns>A 64-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.HashEx.GetHashCode(System.String,System.Int32,System.Int32)">
            <summary>
            Serves as a hash function for a sub string of this string instance.
            </summary>
            <param name="str">This string instance.</param>
            <param name="startIndex">Indicating the position where the hash begins.</param>
            <param name="length">Indication the length of the substring to hash.</param>
            <returns>A 32-bit signed integer as the hash code of the specified sub string.</returns>
        </member>
        <member name="T:System.IO.IBitStream">
            <summary>
            Represents
            </summary>
        </member>
        <member name="M:System.IO.BitStreamEx.ToGammaCode(System.Int32)">
            <summary>
            Codes this integer using Elias Gamma coding.
            <para>!!!The integer must be non-negative.</para>
            </summary>
            <param name="num">The integer to be coded.</param>
            <returns>A Elias Gamma code representing the original integer.</returns>
        </member>
        <member name="M:System.IO.BitStreamEx.ReadGammaCode(System.IO.IBitStream)">
            <summary>
            Reads a non-negative integer coded by Elias Gamma coding from this bit stream.
            </summary>
            <param name="stream">This bit stream.</param>
            <returns>A non-negative integer.</returns>
        </member>
        <member name="M:System.IO.BitStreamEx.ToDeltaCode(System.Int32)">
            <summary>
            Codes this integer using Elias Delta coding.
            <para>!!!The integer must be non-negative.</para>
            </summary>
            <param name="num">The integer to be coded.</param>
            <returns>A Elias Delta code representing the original integer.</returns>
        </member>
        <member name="T:System.IO.Compression.ByteCompressionMethods">
            <summary>
            Representing compression algorithms.
            </summary>
        </member>
        <member name="F:System.IO.Compression.ByteCompressionMethods.None">
            <summary>
            No compression algorithm is used. The original data will be returned.
            </summary>
        </member>
        <member name="F:System.IO.Compression.ByteCompressionMethods.GZipOptimal">
            <summary>
            Uses GZip algorithm and performs an optimal compression.
            </summary>
        </member>
        <member name="F:System.IO.Compression.ByteCompressionMethods.DeflateOptimal">
            <summary>
            Uses Deflate algorithm and performs an optimal compression.
            </summary>
        </member>
        <member name="F:System.IO.Compression.ByteCompressionMethods.GZipFast">
            <summary>
            Uses GZip algorithm and performs a fast compression.
            </summary>
        </member>
        <member name="F:System.IO.Compression.ByteCompressionMethods.DeflateFast">
            <summary>
            Uses Deflate algorithm and performs a fast compression.
            </summary>
        </member>
        <member name="T:System.IO.Compression.CompressionEx">
            <summary>
            Provides methods to easily compress byte arrays.
            </summary>
        </member>
        <member name="M:System.IO.Compression.CompressionEx.Compress(System.Byte[],System.IO.Compression.ByteCompressionMethods@)">
            <summary>
            Compresses a byte array using a specified algorithm.
            </summary>
            <param name="dataToCompress">The byte array to compress.</param>
            <param name="algorithm">The algorithm used to compress the array. 
            This method will check the compression rate after the compression is done, 
            and if it is not smaller than 1 (indicating the "compressed" data takes even more space than the original data and the compression is ineffective), 
            the original data will be returned and this argument will be set <c>ByteCompressionMethods.None</c>.</param>
            <returns>
            The compressed byte array if the compression is successful; 
            or the original bytes if the compression is ineffective.
            </returns>
        </member>
        <member name="M:System.IO.Compression.CompressionEx.Compress(System.Byte[],System.Int32,System.IO.Compression.ByteCompressionMethods@)">
            <summary>
            Compresses a byte array using a specified algorithm.
            </summary>
            <param name="dataToCompress">The byte array to compress.</param>
            <param name="startIndex">The zero-based position in the array where the compression begins.</param>
            <param name="algorithm">The algorithm used to compress the array. 
            This method will check the compression rate after the compression is done, 
            and if it is not smaller than 1 (indicating the "compressed" data takes even more space than the original data and the compression is ineffective), 
            the original data will be returned and this argument will be set <c>ByteCompressionMethods.None</c>.</param>
            <returns>
            The compressed byte array if the compression is successful; 
            or the bytes in the original byte array from <paramref name="startIndex"/> to the end if the compression is ineffective.
            </returns>
        </member>
        <member name="M:System.IO.Compression.CompressionEx.DeCompress(System.Byte[],System.IO.Compression.ByteCompressionMethods)">
            <summary>
            Decompresses a byte array using a specified algorithm.
            </summary>
            <param name="dataToDecompress">The byte array to decompress.</param>
            <param name="algorithm">The algorithm used to decompress the array.</param>
            <returns>The decompressed byte array.</returns>
        </member>
        <member name="M:System.IO.Compression.CompressionEx.DeCompress(System.Byte[],System.Int32,System.IO.Compression.ByteCompressionMethods)">
            <summary>
            Decompresses a byte array using a specified algorithm.
            </summary>
            <param name="dataToDecompress">The byte array to decompress.</param>
            <param name="startIndex">The zero-based position in the array where the decompression begins.</param>
            <param name="algorithm">The algorithm used to decompress the array.</param>
            <returns>The decompressed byte array.</returns>
        </member>
        <member name="T:System.IO.FileStreamCollection`1">
            <summary>
            Provides a collection class that simplifies management of a variety of file streams.
            </summary>
            <typeparam name="TDictionary">The type of dictionary used to store and retrieve file streams. 
            This dictionary must use strings as keys and accept System.IO.FileStream objects as values.
            <para>You will retrieve each file stream by its ID (as a key in the dictionary).</para></typeparam>
        </member>
        <member name="P:System.IO.FileStreamCollection`1.Mode">
            <summary>
            Gets a value indicating how the operating system should open a file for every file stream in this collection.
            </summary>
        </member>
        <member name="P:System.IO.FileStreamCollection`1.Access">
            <summary>
            Gets a value indicating how the operating system should access a file for every file stream in this collection.
            </summary>
        </member>
        <member name="P:System.IO.FileStreamCollection`1.Share">
            <summary>
            Gets a value indicating what kind of access all file streams can have to a file at the same time.
            </summary>
        </member>
        <member name="M:System.IO.FileStreamCollection`1.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Initializes a new instance of System.IO.FileStreamCollection class.
            </summary>
            <param name="rootFolder">The default root folder for all file streams.</param>
            <param name="mode">Specifies how the operating system should open a file for every file stream in this collection.</param>
            <param name="access">Specifies how the operating system should access a file for every file stream in this collection.</param>
            <param name="share">Specifies what kind of access all file streams can have to a file at the same time.</param>
        </member>
        <member name="M:System.IO.FileStreamCollection`1.AddFile(System.String)">
            <summary>
            Opens a file stream of a file (specified by a string path) and adds the stream to this collection. The file ID is the file name.
            <para>For example, the ID of file "directory1\directory2\123.txt" is "123.txt".</para>
            </summary>
            <param name="filePath">The path of the file to be added into this collection.</param>
            <returns>The created System.FileStream object of the specified file.</returns>
        </member>
        <member name="M:System.IO.FileStreamCollection`1.AddFile(System.String,System.String)">
            <summary>
            Opens a file stream of a file (specified by a string path) and adds the stream to this collection using specified file ID.
            <para>You may later retrieve the created file stream of the specified file by the file ID.</para>
            </summary>
            <param name="fileID">Specifies the ID of the file stream.
            <para>You may later retrieve the created file stream by this ID.</para></param>
            <param name="filePath">The path of the file to be added into this collection.</param>
            <returns>The created System.FileStream object of the specified file.</returns>
        </member>
        <member name="M:System.IO.FileStreamCollection`1.AddFile(System.String,System.String[])">
            <summary>
            Opens a file stream of a file (specified by a file path represented by a series of strings) 
            and adds the stream to this collection using specified file ID.
            <para>You may later retrieve the created file stream of the specified file by the file ID.</para>
            </summary>
            <param name="fileID">Specifies the ID of the file stream.
            <para>You may later retrieve the created file stream by this ID.</para></param>
            <param name="filePath">The path of the file to be added into this collection.</param>
            <returns>The created System.FileStream object of the specified file.</returns>
        </member>
        <member name="M:System.IO.FileStreamCollection`1.AddFile(System.String[])">
            <summary>
            Opens a file stream of a file (specified by a file path represented by a series of strings) 
            and adds the stream to this collection. The file ID is the file name.
            <para>For example, the ID of file "directory1\directory2\123.txt" is "123.txt".</para>
            </summary>
            <param name="filePath">The path of the file to be added into this collection.</param>
            <returns>The created System.FileStream object of the specified file.</returns>
        </member>
        <member name="P:System.IO.FileStreamCollection`1.Item(System.String)">
            <summary>
            Retrieves a file stream by its ID. 
            <para>**If there exists no file stream in this collection associated with the specified ID, a null reference will be returned.</para>
            </summary>
            <param name="fileID">The ID of the file stream to retrieve.</param>
            <returns>The file stream associated with the specified ID. If there exists no file stream in this collection associated with the specified ID, a null reference will be returned.</returns>
        </member>
        <member name="M:System.IO.FileStreamCollection`1.Replace(System.String,System.IO.FileStream)">
            <summary>
            Replaces an existing file stream in this collection by another file stream.
            <para>!!!Note that the replaced file stream will not be closed by this method.</para>
            </summary>
            <param name="fileID">The ID of the file stream to be replaced.</param>
            <param name="newStream">The file stream to replace the existing one.</param>
        </member>
        <member name="M:System.IO.FileStreamCollection`1.CloseAndReplace(System.String,System.IO.FileStream)">
            <summary>
            Closes an existing file stream in this collection and then replaces it by another file stream.
            </summary>
            <param name="fileID">The ID of the file stream to be closed and replaced.</param>
            <param name="newStream">The file stream to replace the existing one.</param>
        </member>
        <member name="M:System.IO.FileStreamCollection`1.Close(System.String,System.Boolean)">
            <summary>
            Closes an existing file stream in this collection. 
            Optionally, you may remove the file stream after it is closed by setting the second parameter "remove" of this method to "true".
            </summary>
            <param name="fileID">The ID of the file stream to be closed.</param>
            <param name="remove">Specifies whether the file stream should be removed after it is closed.</param>
        </member>
        <member name="M:System.IO.FileStreamCollection`1.Dispose">
            <summary>
            Disposes all file streams in this collection.
            </summary>
        </member>
        <member name="T:System.IO.FRecordStream">
            <summary>
            A forward-only stream that allows storing records of indefinite size on the same base stream. Overhead is remarkably lower than a similar class <see cref="T:System.IO.RecordStream"/>.
            </summary>
            <remarks>
            This class allocate blocks of variable length to store data and works much like a forward-only linked list. In this sense backward-seeking is not supported by this class.
            A similar class <see cref="T:System.IO.RecordStream"/> always allocates blocks of the same length and is able to seek back and forth. 
            However, two methods <c>SaveStatus</c> and <c>RestoreStatus</c> are provided to alleviate this drawback.
            Also note that the memory usage of each instance of this class is fixed, with contrast to <see cref="T:System.IO.RecordStream"/> which uses more memory when new blocks are created.
            </remarks>
        </member>
        <member name="F:System.IO.FRecordStream._base">
            <summary>
            The base stream.
            </summary>
        </member>
        <member name="F:System.IO.FRecordStream._startPosition">
            <summary>
            The position in the base stream where this record stream begins.
            </summary>
        </member>
        <member name="F:System.IO.FRecordStream._info">
            <summary>
            Represents the current data block.
            </summary>
        </member>
        <member name="M:System.IO.FRecordStream.#ctor(System.IO.Stream,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of <see cref="T:System.IO.FRecordStream"/> that represents a new record.
            </summary>
            <param name="baseStream">A <see cref="T:System.IO.Stream"/> where data are actually stored.</param>
            <param name="bytesForLength">Specifies how many bytes are enough to describe the size of a data block. For example, if the maximum size of a data block is 64KB, then 2 bytes are sufficient.</param>
            <param name="bytesForPosition">Specifies how many bytes are enough to describe the total size of data. For example, if the maximum size of all data is 4GB, then 4 bytes are sufficient.</param>
        </member>
        <member name="M:System.IO.FRecordStream.#ctor(System.IO.Stream,System.Int64,System.UInt16,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of <see cref="T:System.IO.FRecordStream"/> that represents either a new record (when <paramref name="startPosition"/> is assigned -1) or an existing record.
            <para>!!! If this instance represents an existing record (<paramref name="startPosition"/> not set -1), invoking <c>LoadInfo</c> method is necessary before many operations. </para>
            <para>!!! Also note its initial position is the previously saved position rather than 0, and call <c>Reset</c> method if reading from the beginning is intended.</para>
            </summary>
            <param name="baseStream">A <see cref="T:System.IO.Stream"/> where data are actually stored.</param>
            <param name="startPosition">Specifies a non-negative integer to indicate the location of an existing record in <paramref name="baseStream"/>, or -1 to create a new record.</param>
            <param name="minimumBlockSize">Specifies the minimum size in bytes of a data block.</param>
            <param name="bytesForLength">Specifies how many bytes are enough to describe the size of a data block. For example, if the maximum size of a data block is 64KB, then 2 bytes are sufficient.</param>
            <param name="bytesForPosition">Specifies how many bytes are enough to describe the total size of data. For example, if the maximum size of all data is 4GB, then 4 bytes are sufficient.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="baseStream"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="baseStream"/> must be seekable, readable and writable.</exception>
        </member>
        <member name="P:System.IO.FRecordStream.BaseStream">
            <summary>
            Gets the base stream where this instance actually stores data.
            </summary>
        </member>
        <member name="P:System.IO.FRecordStream.EndOfStream">
            <summary>
            Gets a value indicating whether the end of this <see cref="T:System.IO.FRecordStream"/> has been reached.
            <para>!!! This property is invalid if necessary meta information has not been loaded. In this case, call <c>LoadInfo</c> method first.</para>
            </summary>
            <exception cref="T:System.InvalidOperationException">Necessary meta information has not been loaded. Call <c>LoadInfo</c> method first.</exception>
        </member>
        <member name="P:System.IO.FRecordStream.StartPosition">
            <summary>
            Gets the positon in the base stream where this <see cref="T:System.IO.FRecordStream"/> begins.
            </summary>
        </member>
        <member name="P:System.IO.FRecordStream.Loaded">
            <summary>
            Gets a value indicating whether this <see cref="T:System.IO.FRecordStream"/> is loaded.
            </summary>
        </member>
        <member name="P:System.IO.FRecordStream.BytesForLength">
            <summary>
            Gets a number indicating how many bytes are used to describe the size of a data block.
            For example, if the maximum size of a data block is 64KB, then the returned value of this property will be 2.
            </summary>
        </member>
        <member name="P:System.IO.FRecordStream.BytesForPosition">
            <summary>
            Gets a number indicating how many bytes are used to describe the position of a data block.
            For example, if the maximum size of all data is 4GB, then the returned value of this property will be 4.
            </summary>
        </member>
        <member name="P:System.IO.FRecordStream.MinimumBlockSize">
            <summary>
            Gets the minimum size in bytes of a data block.
            </summary>
        </member>
        <member name="M:System.IO.FRecordStream.SaveStatus(System.Boolean)">
             <summary>
             Preserves the current status (especially data position) of this <see cref="T:System.IO.FRecordStream"/>. The current status is temporarily stored and will be discarded by <c>UnloadInfo</c> method.
             <para>!!! This method is invalid if necessary meta information has not been loaded. In this case, call <c>LoadInfo</c> method first.</para>
             <para>!!! This method is invalid if there currently exists no data block in this instance. Call <c>Reset</c> method instead of saving the initial position by this method.</para>
             </summary>
             <exception cref="T:System.InvalidOperationException">
             <para>Necessary meta information has not been loaded and you need to call <c>LoadInfo</c> method first;</para>
             <para>or you call this method when the current <see cref="T:System.IO.FRecordStream"/> is empty.</para>
             </exception>
             <example>
             The following codes shows how <c>SaveStatus</c> and <c>RestoreStatus</c> are used to remember and go back to history position.
             <code>
                 var ms = new MemoryStream();
                 var fr = new FRecordStream(ms);
                 fr.LoadInfo();
                 //fr.SaveStatus(); //Invalid operation! This record stream is new and right after LoadInfo it is still empty.
                 fr.WriteString("abcdefg");
                 fr.SaveStatus();
                 fr.WriteString("hijklmn");
                 fr.SaveStatus();
                 fr.WriteString("opqrst");
                 fr.Reset();
                 Console.WriteLine(fr.ReadString()); //"abcdefg"
                 Console.WriteLine(fr.ReadString()); //"hijklmn"
                 Console.WriteLine(fr.ReadString()); //"opqrst"
                 fr.RestoreStatus();
                 Console.WriteLine(fr.ReadString()); //"opqrst"
                 fr.RestoreStatus();
                 Console.WriteLine(fr.ReadString()); //"hijklmn"
            </code>
             </example>
        </member>
        <member name="M:System.IO.FRecordStream.RestoreStatus(System.Boolean)">
             <summary>
             Restores this <see cref="T:System.IO.FRecordStream"/> to its previous status.
             <para>!!! This method is invalid if necessary meta information has not been loaded. In this case, call <c>LoadInfo</c> method first.</para>
             </summary>
             <exception cref="T:System.InvalidOperationException">
             Necessary meta information has not been loaded and you need to call <c>LoadInfo</c> method first;
             </exception>
             <example>
             The following codes shows how <c>SaveStatus</c> and <c>RestoreStatus</c> are used to remember and go back to history position.
             <code>
                 var ms = new MemoryStream();
                 var fr = new FRecordStream(ms);
                 fr.LoadInfo();
                 //fr.SaveStatus(); //Invalid operation! This record stream is new and right after LoadInfo it is still empty.
                 fr.WriteString("abcdefg");
                 fr.SaveStatus();
                 fr.WriteString("hijklmn");
                 fr.SaveStatus();
                 fr.WriteString("opqrst");
                 fr.Reset();
                 Console.WriteLine(fr.ReadString()); //"abcdefg"
                 Console.WriteLine(fr.ReadString()); //"hijklmn"
                 Console.WriteLine(fr.ReadString()); //"opqrst"
                 fr.RestoreStatus();
                 Console.WriteLine(fr.ReadString()); //"opqrst"
                 fr.RestoreStatus();
                 Console.WriteLine(fr.ReadString()); //"hijklmn"
            </code>
             </example>
        </member>
        <member name="P:System.IO.FRecordStream.CanRead">
            <summary>
            Gets a value indicating whether this stream supports reading. <c>true</c> always.
            </summary>
        </member>
        <member name="P:System.IO.FRecordStream.CanSeek">
            <summary>
            Gets a value indicating whether this stream supports seeking. <c>true</c> always.
            <para>!!! The seeking support is limited to forward-only.</para>
            </summary>
        </member>
        <member name="P:System.IO.FRecordStream.CanWrite">
            <summary>
            Gets a value indicating whether this stream supports writing. <c>true</c> always.
            </summary>
        </member>
        <member name="M:System.IO.FRecordStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="P:System.IO.FRecordStream.Length">
            <summary>
            Not supported. Use <c>BaseStream.Length</c> to get the length of the underlying stream.
            </summary>
            <exception cref="T:System.NotSupportedException">Always raises.</exception>
        </member>
        <member name="P:System.IO.FRecordStream.Position">
            <summary>
            Not supported. Use <c>BaseStream.Position</c> to get the position of the underlying stream.
            </summary>
            <exception cref="T:System.NotSupportedException">Always raises.</exception>
        </member>
        <member name="M:System.IO.FRecordStream.Alloc(System.Int32)">
            <summary>
            Allocates new space in the underlying stream to store more data. 
            <para>** It is not necessary to call this method when avaialbe space is not sufficient since new space will be automatically assigned. This method provies a way to manually request space.</para>
            <para>!!! This method is invalid if necessary meta information has not been loaded. In this case, call <c>LoadInfo</c> method first.</para>
            </summary>
            <param name="size"></param>
            <exception cref="T:System.InvalidOperationException">
            Necessary meta information has not been loaded and you need to call <c>LoadInfo</c> method first;
            </exception>
        </member>
        <member name="M:System.IO.FRecordStream.Reset">
            <summary>
            Goes to the beginning of this <see cref="T:System.IO.FRecordStream"/>.
            </summary>
        </member>
        <member name="M:System.IO.FRecordStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            <para>!!! This method is invalid if necessary meta information has not been loaded. In this case, call <c>LoadInfo</c> method first.</para>
            <para>!!! This method is invalid if there currently exists no data block in this instance. Writes some data first.</para>
            </summary>
            <param name="buffer">An array of bytes. When this method returns, 
            the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) 
            replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. 
            This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>Necessary meta information has not been loaded and you need to call <c>LoadInfo</c> method first;</para>
            <para>or you call this method when the current <see cref="T:System.IO.FRecordStream"/> is empty.</para>
            </exception>
        </member>
        <member name="M:System.IO.FRecordStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            <para>!!! This method is invalid if necessary meta information has not been loaded. In this case, call <c>LoadInfo</c> method first.</para>
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="P:System.IO.FRecordStream.Empty">
            <summary>
            Gets a value indicating whether the current <see cref="T:System.IO.FRecordStream"/> is empty and no data block has been created.
            </summary>
        </member>
        <member name="M:System.IO.FRecordStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream. This method is limited in the following ways,
            1. only <c>Current</c> is valid for <paramref name="origin"/>;
            2. backward seeking (negative <paramref name="offset"/>) is only allowed within the current data block.
            <para>!!! This method is invalid if necessary meta information has not been loaded. In this case, call <c>LoadInfo</c> method first.</para>
            <para>!!! This method is invalid if there currently exists no data block in this instance. Writes some data first.</para>
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.
            <para>!!! For <see cref="T:System.IO.FRecordStream"/>, only <c>Current</c> is valid.</para></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">
            <para>Necessary meta information has not been loaded and you need to call <c>LoadInfo</c> method first;</para>
            <para>or you call this method when the current <see cref="T:System.IO.FRecordStream"/> is empty.</para>
            </exception>
        </member>
        <member name="M:System.IO.FRecordStream.MoveToEnd">
            <summary>
            Goes to the end of this <see cref="T:System.IO.FRecordStream"/>.
            </summary>
        </member>
        <member name="M:System.IO.FRecordStream.LoadInfo">
            <summary>
            Loads necessary information before further operations.
            <para>!!! Note that <see cref="T:System.IO.FRecordStream"/> remembers its previous position when the last time <c>UnloadInfo</c> is called. 
            Always call <c>Reset</c> before reading from the beginning. </para>
            </summary>
        </member>
        <member name="M:System.IO.FRecordStream.SaveInfo">
            <summary>
            Permanently saves the current status of this <see cref="T:System.IO.FRecordStream"/>. 
            Note that this method remembers the current position which will be restored the next time <c>LoadInfo</c> is called.
            </summary>
        </member>
        <member name="M:System.IO.FRecordStream.UnloadInfo">
            <summary>
            Permanently preserves the current status of this <see cref="T:System.IO.FRecordStream"/> and unloads some information to save memory.
            This method put this <see cref="T:System.IO.FRecordStream"/> into a status where most operations are invalid. You need to call <c>LoadInfo</c> again.
            <para>!!! All temporary status stored by <c>SaveStatus</c> method will be discarded.</para>
            </summary>
        </member>
        <member name="M:System.IO.FRecordStream.Clear">
            <summary>
            Clears all data stored in this <see cref="T:System.IO.FRecordStream"/>.
            </summary>
        </member>
        <member name="P:System.IO.FRecordStream.Tag">
            <summary>
            Gets or sets a 64-bit integer that carries user-defined information.
            <para>!!! This property is invalid if necessary meta information has not been loaded. In this case, call <c>LoadInfo</c> method first, or use method <c>GetStoredTag</c> instead.</para>
            </summary>
        </member>
        <member name="M:System.IO.FRecordStream.GetStoredTag">
            <summary>
            Gets the stored 64-bit integer tag for this <see cref="T:System.IO.FRecordStream"/> even when property <c>Loaded</c> is false. This tag carries some user-defined addtional information.
            <para>!!! This method is invalid if there currently exists no data block in this instance. Writes some data first.</para>
            </summary>
            <returns>A 64-bit unsigned integer as the tag for this instance.</returns>
            <exception cref="T:System.InvalidOperationException">This <see cref="T:System.IO.FRecordStream"/> is currently empty.</exception>
        </member>
        <member name="T:System.IO.FileBasedInt32IdGenerator">
            <summary>
            A 32-bit identifier generator using a file.
            </summary>
        </member>
        <member name="M:System.IO.FileBasedInt32IdGenerator.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.FileBasedInt32IdGenerator"/> class.
            </summary>
            <param name="path">The path of the file this generator uses.</param>
            <param name="initial">The initial identifier.</param>
            <param name="increment">The next identifier (except the first identifier, which is specified by <paramref name="initial"/>) is the previous identifier incremented by this value.</param>
        </member>
        <member name="M:System.IO.FileBasedInt32IdGenerator.Next">
            <summary>
            Gets the next 32-bit integer identifier.
            </summary>
            <returns>
            A 32-bit integer as an unique identifier if it is successfully generated; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="T:System.IO.FileBasedInt64IdGenerator">
            <summary>
            A 64-bit identifier generator using a file.
            </summary>
        </member>
        <member name="M:System.IO.FileBasedInt64IdGenerator.#ctor(System.String,System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.FileBasedInt64IdGenerator"/> class.
            </summary>
            <param name="path">The path of the file this generator is based on.</param>
            <param name="initial">The initial identifier.</param>
            <param name="increment">The next identifier (except the first identifier, which is specified by <paramref name="initial"/>) is the previous identifier incremented by this value.</param>
        </member>
        <member name="M:System.IO.FileBasedInt64IdGenerator.Next">
            <summary>
            Gets the next 64-bit integer identifier.
            </summary>
            <returns>
            A 64-bit integer as an unique identifier if it is successfully generated; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="T:System.IO.IIntIdentifierGenerator">
            <summary>
            Represents an interface that generates 32-bit integer identifiers.
            </summary>
        </member>
        <member name="M:System.IO.IIntIdentifierGenerator.Next">
            <summary>
            Gets the next 32-bit integer identifier. The implementation must ensure the numbers generated by this method are all different.
            </summary>
            <returns>A 32-bit interner as an unique identifier if it is successfully generated; otherwise, <c>null</c>.</returns>
        </member>
        <member name="T:System.IO.IInt64IdentifierGenerator">
            <summary>
            Represents an interface that generates 64-bit integer identifiers.
            </summary>
        </member>
        <member name="M:System.IO.IInt64IdentifierGenerator.Next">
            <summary>
            Gets the next 64-bit integer identifier. The implementation must ensure the numbers generated by this method are all different.
            </summary>
            <returns>A 64-bit interner as an unique identifier if it is successfully generated; otherwise, <c>null</c>.</returns>
        </member>
        <member name="T:System.IO.IOChecks">
            <summary>
            Defines check codes for IO data check.
            </summary>
        </member>
        <member name="F:System.IO.IOChecks.String">
            <summary>
            Indicating the data to check is a string.
            </summary>
        </member>
        <member name="F:System.IO.IOChecks.Booleans">
            <summary>
            Indicating the data to check are booleans.
            </summary>
        </member>
        <member name="F:System.IO.IOChecks.Common">
            <summary>
            Indicating the data to check is a common object.
            </summary>
        </member>
        <member name="F:System.IO.IOChecks.StringHashSet">
            <summary>
            Indicating the data to check is a string hasheset.
            </summary>
        </member>
        <member name="F:System.IO.IOChecks.StringList">
            <summary>
            Indicating the data to check is a string list.
            </summary>
        </member>
        <member name="F:System.IO.IOChecks.Collection">
            <summary>
            Indicating the data to check is a collection.
            </summary>
        </member>
        <member name="F:System.IO.IOChecks.RecordStream">
            <summary>
            Indicating the data to check is a record stream.
            </summary>
        </member>
        <member name="F:System.IO.IOChecks.DateTimeList">
            <summary>
            Indicating the data to check is a datetime list.
            </summary>
        </member>
        <member name="M:System.IO.IBasicRecord.LoadInfo">
            <summary>
            Loads the section information of this record. 
            This method should presume the info-stream is not at the right position (i.e. call SeekTo method befor reading) and 
            should NOT wind the stream back where it was right before the reading started.
            </summary>
        </member>
        <member name="M:System.IO.IBasicRecord.SaveInfo">
            <summary>
            Saves the section information of this record. 
            This method should presume the info-stream is not at the right position (i.e. call SeekTo method befor writing) and 
            should NOT wind the stream back where it was right before the saving started.
            </summary>
        </member>
        <member name="M:System.IO.IBasicRecord.UnloadInfo">
            <summary>
            Unloads section information of this record. 
            The section information should be able to be loaded again later. 
            Once the section information is unloaded, this record should not be readable before the LoadInfo method is called.
            </summary>
        </member>
        <member name="P:System.IO.IBasicRecord.InfoStream">
            <summary>
            Gets or sets the stream where the section information is stored. 
            This property is meant to be used in the code of class implementing this interface. 
            ANY class implementing this interface SHOULD NOT publicly expose this property.
            Be CAREFULL with the existing data in this stream if you have to tamper with them. 
            If the section information is corrupted, all the data will be lost.
            </summary>
        </member>
        <member name="P:System.IO.IBasicRecord.DataStream">
            <summary>
            Gets or sets the stream where the data is stored. 
            This property is meant to be used in the code of class implementing this interface. 
            ANY class implementing this interface SHOULD NOT publicly expose this property.
            Be CAREFULL with the existing data in this stream if you have to tamper with them.
            </summary>
        </member>
        <member name="P:System.IO.IBasicRecord.InfoPosition">
            <summary>
            Gets or sets the position where the section information is stored in the info-stream. 
            This property is meant to be used in the code of class implementing this interface. 
            ANY class implementing this interface SHOULD NOT publicly expose this property.
            </summary>
        </member>
        <member name="M:System.IO.IBasicRecord.Clear">
            <summary>
            Removes all the data in this record. 
            </summary>
        </member>
        <member name="T:System.IO.IRecord">
            <summary>
            Defines the methods and properties a record that a System.IO.IRecordManager can manage.
            </summary>
        </member>
        <member name="P:System.IO.IRecord.WriteMoreInfo">
            <summary>
            Gets or sets a delegation method to write additional LENGTH-FIXED information. 
            DO NOT write any data of indefinite or changable length, such as a linked list. 
            If this property is set to an bugged method the data in the info-stream can be corrupted.
            </summary>
        </member>
        <member name="P:System.IO.IRecord.ReadMoreInfo">
            <summary>
            Gets or sets a delegation method to read additional LENGTH-FIXED information. 
            If this property is set to an bugged method for the most part a validity-check failure will occure.
            </summary>
        </member>
        <member name="T:System.IO.IBinarySavable">
            <summary>
            Exposes interfaces to preserve the current object state in a <see cref="T:System.IO.Stream"/>, and to load data from a <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:System.IO.IBinarySavable.WriteToStream(System.IO.Stream,System.Object[])">
            <summary>
            Writes the current object state to a <see cref="T:System.IO.Stream" />.
            </summary>
            <param name="stream">The stream.</param>
            <param name="args">Provides additional arguments.</param>
        </member>
        <member name="M:System.IO.IBinarySavable.LoadFromStream(System.IO.Stream,System.Object[])">
            <summary>
            Loads object state from a <see cref="T:System.IO.Stream" />.
            </summary>
            <param name="stream">The stream.</param>
            <param name="args">Provides additional arguments.</param>
        </member>
        <member name="T:System.IO.ITextSavable">
            <summary>
            Exposes an interface to save the current object in a <see cref="T:System.IO.TextWriter"/> instance, and to load data from a <see cref="T:System.IO.TextReader"/> instance.
            </summary>
        </member>
        <member name="M:System.IO.ITextSavable.WriteToText(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the current object state to a <see cref="T:System.IO.TextWriter" />.
            </summary>
            <param name="writer">The writer.</param>
            <param name="arg">Provides the external argument.</param>
        </member>
        <member name="M:System.IO.ITextSavable.LoadFromText(System.IO.TextReader,System.Object)">
            <summary>
            Loads object state from a <see cref="T:System.IO.TextReader" />.
            </summary>
            <param name="reader">The reader.</param>
            <param name="arg">Provides the external argument.</param>
        </member>
        <member name="T:System.IO.ISpaceManager">
            <summary>
            Represents methods supporting record management.
            </summary>
        </member>
        <member name="M:System.IO.ISpaceManager.ApplySection(System.Int32)">
            <summary>
            Trys to get an available section capable of data of specified length. 
            </summary>
            <param name="length">The length of the section you want to apply.</param>
            <returns>The position of the section; -1 if no available section.</returns>
        </member>
        <member name="M:System.IO.ISpaceManager.FreeSection(System.Int64,System.Int32)">
            <summary>
            Frees an occupied section.
            </summary>
            <param name="position">The position of the section to free.</param>
            <param name="length">The length of the section to free.</param>
        </member>
        <member name="M:System.IO.ISpaceManager.FreeSections(System.Collections.Generic.IList{System.Int64},System.Int32)">
            <summary>
            Frees occupied sections of the same length.
            </summary>
            <param name="positions">The positions of the sections to free.</param>
            <param name="length">The length of the section to free.</param>
        </member>
        <member name="T:System.IO.MemoryStreamEx">
            <summary>
            Provides IO methods for System.IO.MemoryStream class.
            </summary>
        </member>
        <member name="M:System.IO.MemoryStreamEx.WriteAllBytesToFile(System.IO.MemoryStream,System.String)">
            <summary>
            Writes all bytes in this memory stream to a file regardless its current position. 
            If this memeory stream is empty, an empty file will be created. 
            If the file already exists, it will be overwritten.
            </summary>
            <param name="ms">A <see cref="T:System.IO.MemoryStream"/>.</param>
            <param name="path">The path of the file to write.</param>
        </member>
        <member name="M:System.IO.MemoryStreamEx.AppendAllBytesToFile(System.IO.MemoryStream,System.String)">
            <summary>
            Appends all bytes in this memory stream to the end of a file regardless its current position.
            If this memeory stream is empty and the file does not exist, an empty file will be created.
            </summary>
            <param name="ms">A <see cref="T:System.IO.MemoryStream"/>.</param>
            <param name="path">The path of the file to append.</param>
        </member>
        <member name="T:System.IO.RecordDictionary`1">
            <summary>
            Provides methods to organize records represented by a set of System.IO.RecordStream objects in a dictionary-like approach, 
            and optimizes the space occupancy.
            </summary>
        </member>
        <member name="M:System.IO.RecordDictionary`1.#ctor">
            <summary>
            DO NOT use this constructor. This constructor makes any instance a viable child of another instance of this class.
            </summary>
        </member>
        <member name="M:System.IO.RecordDictionary`1.#ctor(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of System.IO.RecordDictionary object.
            </summary>
            <param name="infoStream">A System.IO.Stream that stores section infomation. 
            The section information will be stored at the current position of this stream.</param>
            <param name="dataStream">A System.IO.Stream that stores real data.</param>
            <param name="initialCapability">The initial capability of this record group. 
            The default value is the same as that of a System.Collection.Generic.List{T} class.</param>
        </member>
        <member name="M:System.IO.RecordDictionary`1.#ctor(System.IO.Stream,System.IO.Stream)">
            <summary>
            Initializes a new instance of System.IO.RecordDictionary object.
            </summary>
            <param name="infoStream">A System.IO.Stream that stores section infomation. 
            The section information will be stored at the current position of this stream.</param>
            <param name="dataStream">A System.IO.Stream that stores real data.</param>
        </member>
        <member name="M:System.IO.RecordDictionary`1.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of System.IO.RecordDictionary object.
            </summary>
            <param name="baseStream">A System.IO.Stream that stores both section information and the real data.</param>
        </member>
        <member name="M:System.IO.RecordDictionary`1.#ctor(System.IO.Stream,System.Int64)">
            <summary>
            Initializes a new instance of System.IO.RecordDictionary object.
            </summary>
            <param name="baseStream">A System.IO.Stream that stores both section information and the data.</param>
            <param name="infoPosition">The position of the section information in the info-stream.</param>
        </member>
        <member name="M:System.IO.RecordDictionary`1.#ctor(System.IO.Stream,System.Int64,System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of System.IO.RecordDictionary object.
            </summary>
            <param name="infoStream">A System.IO.Stream that stores section infomation. 
            The section information will be stored at the current position of this stream.</param>
            <param name="infoPosition">The position of the section information in the stream.</param>
            <param name="dataStream">A System.IO.Stream that stores real data.</param>
            <param name="initialCapability">The initial capability of this record group. 
            The default value is the same as that of a System.Collection.Generic.List{T} class.</param>
        </member>
        <member name="M:System.IO.RecordDictionary`1.#ctor(System.IO.Stream,System.Int64,System.IO.Stream)">
            <summary>
            Initializes a new instance of System.IO.RecordDictionary object.
            </summary>
            <param name="infoStream">A System.IO.Stream that stores section infomation. 
            The section information will be stored at the current position of this stream.</param>
            <param name="infoPosition">The position of the section information in the stream.</param>
            <param name="dataStream">A System.IO.Stream that stores real data.</param>
        </member>
        <member name="M:System.IO.RecordDictionary`1.Add(System.String,`0)">
            <summary>
            Adds a compatible record to this record dictionary. Like an ordinary dictionary every record must have a unique key. 
            Call this method after you initialize this dictionary by calling LoadInfo method, or an InvalidOperationException will be thrown.
            </summary>
            <param name="record">The record to be added.</param>
        </member>
        <member name="M:System.IO.RecordDictionary`1.AddNew(System.String)">
            <summary>
            Adds an empty record of type System.IO.RecordStream to this record group. 
            You can write data to this empty record later by retrieving it by key and using it as a regular System.IO.Stream.
            Call this method after you initialize this dictionary by calling LoadInfo method, or an InvalidOperationException will be thrown.
            </summary>
            <param name="count">The number of the System.IO.RecordStream objects to add.</param>
        </member>
        <member name="M:System.IO.RecordDictionary`1.Remove(System.String)">
            <summary>
            Removes a record specified by its key.
            </summary>
            <param name="index">The key of the record to remove.</param>
        </member>
        <member name="M:System.IO.RecordDictionary`1.RemoveAll">
            <summary>
            Removes all records in this record dictionary.
            </summary>
        </member>
        <member name="P:System.IO.RecordDictionary`1.Item(System.String)">
            <summary>
            Retrieves a record in this record dictionary by key.
            </summary>
            <param name="index">The key of the record to retrieve.</param>
            <returns>A record with the specified key.</returns>
        </member>
        <member name="M:System.IO.RecordDictionary`1.LoadInfo">
            <summary>
            Loads information necessary for record management. Call this method before calling any other operations.
            </summary>
        </member>
        <member name="M:System.IO.RecordDictionary`1.SaveInfo">
            <summary>
            Saves record management information.
            </summary>
        </member>
        <member name="M:System.IO.RecordDictionary`1.UnloadInfo">
            <summary>
            Unloads record management information.
            The unloaded information is able to be reloaded again later. 
            Once this information is unloaded, this record is not retrievable before the LoadInfo method is called.
            </summary>
        </member>
        <member name="M:System.IO.RecordDictionary`1.Clear">
            <summary>
            Removes all the data of all records. But the management information will be retained.
            </summary>
        </member>
        <member name="P:System.IO.RecordDictionary`1.WriteMoreInfo">
            <summary>
            Sets a delegation method to write additional LENGTH-FIXED information. 
            DO NOT write any data of indefinite or changable length, such as a linked list. 
            If this property is set to an bugged method the data in the info-stream can be corrupted.
            </summary>
        </member>
        <member name="P:System.IO.RecordDictionary`1.ReadMoreInfo">
            <summary>
            Sets a delegation method to read additional LENGTH-FIXED information. 
            If this property is set to an bugged method for the most part a validity-check failure will occure.
            </summary>
        </member>
        <member name="P:System.IO.RecordDictionary`1.Count">
            <summary>
            Gets the number of records in this record dictionary. This record dictionary must already have been loaded when you access this property.
            </summary>
        </member>
        <member name="T:System.IO.RecordOperations">
            <summary>
            Provides some common operations for System.IO.IRecord and System.IO.IRecordManager objects.
            </summary>
        </member>
        <member name="M:System.IO.RecordOperations.CheckCompatibility(System.IO.IRecord,System.IO.IRecord)">
            <summary>
            Checks compatibility (being on the same info-stream and data-stream) between this record and another record.
            </summary>
            <param name="thisRecord">This System.IO.IRecord object.</param>
            <param name="record">Another System.IO.IRecord object.</param>
            <returns>true if the two records are weakly compatible with each other; otherwise false.</returns>
        </member>
        <member name="T:System.IO.RecordList`1">
            <summary>
            Provides methods to organize records represented by a set of System.IO.RecordStream objects in a list-like approach, 
            and optimizes the space occupancy.
            </summary>
        </member>
        <member name="M:System.IO.RecordList`1.#ctor">
            <summary>
            DO NOT use this constructor. This constructor makes any instance a viable child of another instance of this class.
            </summary>
        </member>
        <member name="M:System.IO.RecordList`1.#ctor(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of System.IO.RecordList object.
            </summary>
            <param name="infoStream">A System.IO.Stream that stores section infomation. 
            The section information will be stored at the current position of this stream.</param>
            <param name="dataStream">A System.IO.Stream that stores real data.</param>
            <param name="initialCapability">The initial capability of this record group. 
            The default value is the same as that of a System.Collection.Generic.List{T} class.</param>
        </member>
        <member name="M:System.IO.RecordList`1.#ctor(System.IO.Stream,System.IO.Stream)">
            <summary>
            Initializes a new instance of System.IO.RecordList object.
            </summary>
            <param name="infoStream">A System.IO.Stream that stores section infomation. 
            The section information will be stored at the current position of this stream.</param>
            <param name="dataStream">A System.IO.Stream that stores real data.</param>
        </member>
        <member name="M:System.IO.RecordList`1.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of System.IO.RecordList object.
            </summary>
            <param name="baseStream">A System.IO.Stream that stores both section information and the data.</param>
        </member>
        <member name="M:System.IO.RecordList`1.#ctor(System.IO.Stream,System.Int64)">
            <summary>
            Initializes a new instance of System.IO.RecordList object.
            </summary>
            <param name="baseStream">A System.IO.Stream that stores both section information and the data.</param>
            <param name="infoPosition">The position of the section information in the info-stream.</param>
        </member>
        <member name="M:System.IO.RecordList`1.#ctor(System.IO.Stream,System.Int64,System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of System.IO.RecordList object.
            </summary>
            <param name="infoStream">A System.IO.Stream that stores section infomation. 
            The section information will be stored at the current position of this stream.</param>
            <param name="infoPosition">The position of the section information in the stream.</param>
            <param name="dataStream">A System.IO.Stream that stores real data.</param>
            <param name="initialCapability">The initial capability of this record group. 
            The default value is the same as that of a System.Collection.Generic.List{T} class.</param>
        </member>
        <member name="M:System.IO.RecordList`1.#ctor(System.IO.Stream,System.Int64,System.IO.Stream)">
            <summary>
            Initializes a new instance of System.IO.RecordList object.
            </summary>
            <param name="infoStream">A System.IO.Stream that stores section infomation. 
            The section information will be stored at the current position of this stream.</param>
            <param name="infoPosition">The position of the section information in the info-stream.</param>
            <param name="dataStream">A System.IO.Stream that stores real data.</param>
        </member>
        <member name="M:System.IO.RecordList`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of System.IO.RecordList object.
            </summary>
            <param name="records">An array of records to be added in this record group. 
            The frist record defines the section length and the streams all the other records should have. 
            All the records before the first incompatible record will be added into this record group.</param>
        </member>
        <member name="M:System.IO.RecordList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of System.IO.RecordList object.
            </summary>
            <param name="records">A list of records to be added in this record group. 
            The frist record defines the section length and the streams all the other records should have. 
            All the records before the first incompatible record will be added into this record group.</param>
        </member>
        <member name="M:System.IO.RecordList`1.Add(`0)">
            <summary>
            Adds a compatible record to this record group. 
            Note that the same record SHOULD NOT be added twice or more into this record list. 
            This method does not check repeatition.
            </summary>
            <param name="record">The record to be added.</param>
        </member>
        <member name="M:System.IO.RecordList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a number of compatible records to this record group. 
            If there are imcompatible ones in the input, they will be ignored.
            </summary>
            <param name="records">The records to be added.</param>
        </member>
        <member name="M:System.IO.RecordList`1.AddNew(System.Int32)">
            <summary>
            Adds a number of System.IO.IRecord objects to this record list.
            </summary>
            <param name="count">The number of the System.IO.IRecord objects to add.</param>
        </member>
        <member name="M:System.IO.RecordList`1.AddNew">
            <summary>
            Adds a System.IO.IRecord objects to this record list.
            </summary>
            <param name="count">The number of the System.IO.IRecord objects to add.</param>
        </member>
        <member name="P:System.IO.RecordList`1.Last">
            <summary>
            Gets the last System.IO.IRecord object in this record list.
            </summary>
        </member>
        <member name="M:System.IO.RecordList`1.RemoveAt(System.Int32)">
            <summary>
            Removes a record at the given position.
            </summary>
            <param name="index">The position of the record to remove.</param>
        </member>
        <member name="M:System.IO.RecordList`1.RemoveAll">
            <summary>
            Removes all records in this record group.
            </summary>
        </member>
        <member name="P:System.IO.RecordList`1.Item(System.Int32)">
            <summary>
            Gets a record in this record group by position (index).
            </summary>
            <param name="index">The position of the record to get.</param>
            <returns>A record at the specified position.</returns>
        </member>
        <member name="M:System.IO.RecordList`1.LoadInfo">
            <summary>
            Loads the section information of all records.
            </summary>
        </member>
        <member name="M:System.IO.RecordList`1.SaveInfo">
            <summary>
            Saves the section information of all records.
            </summary>
        </member>
        <member name="M:System.IO.RecordList`1.UnloadInfo">
            <summary>
            Unloads section information of all records. 
            The section information is able to be loaded again later. 
            Once the section information is unloaded, this record is not readable before the LoadInfo method is called.
            </summary>
        </member>
        <member name="M:System.IO.RecordList`1.Clear">
            <summary>
            Removes all the data of all records. But the section information will be retained.
            </summary>
        </member>
        <member name="P:System.IO.RecordList`1.WriteMoreInfo">
            <summary>
            Sets a delegation method to write additional LENGTH-FIXED information. 
            DO NOT write any data of indefinite or changable length, such as a linked list. 
            If this property is set to an bugged method the data in the info-stream can be corrupted.
            </summary>
        </member>
        <member name="P:System.IO.RecordList`1.ReadMoreInfo">
            <summary>s
            Sets a delegation method to read additional LENGTH-FIXED information. 
            If this property is set to an bugged method for the most part a validity-check failure will occure.
            </summary>
        </member>
        <member name="P:System.IO.RecordList`1.Count">
            <summary>
            Gets the number of records in this record list. This record list must be loaded when you access this property.
            </summary>
        </member>
        <member name="T:System.IO.RecordStream">
            <summary>
            A stream that allows storing records of indefinite size on the same base stream.
            </summary>
        </member>
        <member name="M:System.IO.RecordStream.#ctor">
            <summary>
            DO NOT use this constructor. It is meant to be used in the codes of higher-level record class.
            </summary>
        </member>
        <member name="M:System.IO.RecordStream.#ctor(System.IO.Stream,System.IO.Stream,System.IO.ISpaceManager)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.RecordStream"/> class.
            Call this constructor if you intend to create a new recod; otherwise call a constructor that allows you to set the position parameter.
            </summary>
            <param name="infoStream">A <see cref="T:System.IO.Stream"/> where meta information is stored.
            The meta information will be stored at the end of the <paramref name="infoStream" /> when you call <c>SaveInfo</c> method.
            This stream is allowed to be the same as <paramref name="dataStream"/>.</param>
            <param name="dataStream">A <see cref="T:System.IO.Stream"/> where data are actually stored. 
            This stream is allowed to be the same as <paramref name="infoStream"/>.</param>
            <param name="manager">A System.IO.IRecordManager that manages this record stream,
            providing functionality of space release and optimization.</param>
        </member>
        <member name="M:System.IO.RecordStream.#ctor(System.IO.Stream,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.RecordStream" /> class.
            Call this constructor if you intend to create a new recod; otherwise call a constructor that allows you to set the position parameter.
            </summary>
            <param name="infoStream">A <see cref="T:System.IO.Stream" /> where meta information is stored.
            The meta information will be stored at the end of the <paramref name="infoStream" /> when you call <c>SaveInfo</c> method.
            This stream is allowed to be the same as <paramref name="dataStream" />.</param>
            <param name="dataStream">A <see cref="T:System.IO.Stream" /> where data are actually stored.
            This stream is allowed to be the same as <paramref name="infoStream" />.</param>
        </member>
        <member name="M:System.IO.RecordStream.#ctor(System.IO.Stream,System.Int64,System.IO.Stream,System.IO.ISpaceManager)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.RecordStream" /> class.
            Usually you call this constructor when you intend to load an existing record from the specified position.
            </summary>
            <param name="infoStream">A <see cref="T:System.IO.Stream" /> where meta information is stored.
            The meta information will be saved at the current position of this stream.
            This stream is allowed to be the same as <paramref name="dataStream" />.</param>
            <param name="infoPosition">The position of meta information in the <paramref name="infoStream" />.
            Set this parameter to -1 to mark this record as a new record.</param>
            <param name="dataStream">A <see cref="T:System.IO.Stream" /> where data are actually stored.
            This stream is allowed to be the same as <paramref name="infoStream" />.</param>
            <param name="manager">A <see cref="!:IRecordManager" /> that manages this record stream,
            providing functionality of space release and optimization.</param>
        </member>
        <member name="M:System.IO.RecordStream.#ctor(System.IO.Stream,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.RecordStream"/> class.
            Usually you call this constructor when you intend to load an existing record from the specified position.
            </summary>
            <param name="baseStream">A <see cref="T:System.IO.Stream"/> where data are actually stored.</param>
            <param name="startPosition">
            Specifies a non-negative integer to indicate the location of an existing record in <paramref name="baseStream"/>, 
            or -1 to create a new record.
            </param>
        </member>
        <member name="M:System.IO.RecordStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.RecordStream" /> class.
            Call this constructor if you intend to create a new recod; otherwise call a constructor that allows you to set the position parameter.
            </summary>
            <param name="baseStream">A <see cref="T:System.IO.Stream" /> where data are actually stored.
            Data will be stored at the end of the base stream when you call <c>SaveInfo</c> method.</param>
            <exception cref="T:System.ArgumentNullException">baseStream</exception>
        </member>
        <member name="M:System.IO.RecordStream.CreateNew(System.Int32)">
            <summary>
            Makes this <see cref="T:System.IO.RecordStream"/> represent a new record without eliminating the data 
            of the previous record in the underlying stream.
            If you have already loaded an existing record into this instance and made changes to the data blocks, 
            and you call this method again before you call <c>SaveInfo</c>, and then these new changes will be lost.
            </summary>
            <param name="blockLength">The length of each data block in this record stream.</param>
        </member>
        <member name="P:System.IO.RecordStream.Initialized">
            <summary>
            Gets a value indicating whether this record stream is initialized. 
            If not, you should call method CreatNew before writing any data to this stream.
            </summary>
        </member>
        <member name="P:System.IO.RecordStream.MetaNumber">
            <summary>
            Gets or sets a 32-bit integer in this record stream. 
            This number is stored in this stream but can be retrieved without first calling the LoadInfo method.
            Note that after assigning a value to this property, you still need to call SaveInfo to save the change.
            </summary>
        </member>
        <member name="M:System.IO.RecordStream.ReadMetaNumber">
            <summary>
            Reads the meta number from this record stream. 
            This method only reads from the stream but does not change the current value of MetaNumber property.
            </summary>
            <returns>The meta number stored in this stream.</returns>
        </member>
        <member name="M:System.IO.RecordStream.LoadInfo">
            <summary>
            Loads meta information into this instance of <see cref="T:System.IO.RecordStream"/>. 
            If you have called <c>UnloadInfo</c>,
            the status of this <see cref="T:System.IO.RecordStream"/> instance will be restored where it was right before the last time UnloadInfo was called.
            </summary>
        </member>
        <member name="P:System.IO.RecordStream.StartPosition">
            <summary>
            Gets the position of meta information in the info stream or base stream.
            </summary>
        </member>
        <member name="M:System.IO.RecordStream.SaveInfo">
            <summary>
            Saves meta information of this <see cref="!:RecrodStream"/> instance. 
            This method only saves the information of new data blocks whereby the new data will be meanwhile preserved. 
            However, it has nothing to do with the changes you made on the old data blocks, 
            on which any modification will be immediately effective no matter whether you call this method or not.
            </summary>
        </member>
        <member name="M:System.IO.RecordStream.UnloadInfo">
            <summary>
            Unloads the meta information of this <see cref="T:System.IO.RecordStream"/> instance and release some memory.
            Before calling this method, you must make a decision to save or discard the changes to the data blocks.
            Later you are able to reload the meta information by calling LoadInfo again.
            </summary>
        </member>
        <member name="M:System.IO.RecordStream.DiscardUpdate">
            <summary>
            Marks all new data blocks since the last time SaveInfo was called as discarded. 
            Note that this method only discards new blocks whereby the data on the new blocks will also be discarded. 
            However, changes on the old data blocks will not be affected.
            This method only marks the new data blocks as discarded but not really deletes them. You can call ResumeUpdate to 
            reverse this operation. Also, this operation will be reversed automatically if any new writing occurs.
            </summary>
        </member>
        <member name="M:System.IO.RecordStream.ResumeUpdate">
            <summary>
            Resumes the data blocks previously marked as discarded.
            </summary>
        </member>
        <member name="M:System.IO.RecordStream.Clear">
            <summary>
            Clears all the data in this record stream and frees all the space taken if this record has a manager. 
            If this record has a manager, the clearance will be immediately effective and the data is no longer recoverable. 
            If not, you are allowed to sequentially call <c>DiscardUpdate</c>, <c>UnloadInfo</c> and <c>LoadInfo</c> to resume all cleared data.
            </summary>
        </member>
        <member name="P:System.IO.RecordStream.CanRead">
            <summary>
            Gets a value indicating whether the underlying System.IO.Stream supports reading.
            </summary>
        </member>
        <member name="P:System.IO.RecordStream.CanSeek">
            <summary>
            Gets a value indicating whether the underlying System.IO.Stream supports seeking.
            </summary>
        </member>
        <member name="P:System.IO.RecordStream.CanWrite">
            <summary>
            Gets a value indicating whether the underlying System.IO.Stream supports writing.
            </summary>
        </member>
        <member name="M:System.IO.RecordStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="P:System.IO.RecordStream.Length">
            <summary>
            Gets the length in bytes of this record stream.
            </summary>
        </member>
        <member name="P:System.IO.RecordStream.WriteMoreInfo">
            <summary>
            Sets a delegation method to write additional LENGTH-FIXED information. 
            DO NOT write any data of indefinite or changeable length, such as a linked list. 
            If this property is set to an bugged method the data in the info-stream can be corrupted.
            </summary>
        </member>
        <member name="P:System.IO.RecordStream.ReadMoreInfo">
            <summary>
            Sets a delegation method to read additional LENGTH-FIXED information. 
            If this property is set to an bugged method for the most part a validity-check failure will occure.
            </summary>
        </member>
        <member name="P:System.IO.RecordStream.Position">
            <summary>
            Gets or sets the current position within this record stream. 
            </summary>
        </member>
        <member name="P:System.IO.RecordStream.BlockIndex">
            <summary>
            Gets the index of the current data block used by this record stream. 
            </summary>
        </member>
        <member name="P:System.IO.RecordStream.BlockOffset">
            <summary>
            Gets the offset in the current data block used by this record stream.
            </summary>
        </member>
        <member name="P:System.IO.RecordStream.BlockLength">
            <summary>
            Gets the length in bytes of each data block.
            </summary>
        </member>
        <member name="P:System.IO.RecordStream.BlockCount">
            <summary>
            Gets the number of all data blocks used by this record stream.
            </summary>
        </member>
        <member name="P:System.IO.RecordStream.Capacity">
            <summary>
            Gets the maximum length in bytes of this System.IO.RecordStream can reach 
            without applying for new space.
            </summary>
        </member>
        <member name="M:System.IO.RecordStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream 
            and advances the position within the stream by the number of bytes read. 
            </summary>
            <param name="buffer">An array of bytes. When this method returns, 
            the buffer contains the specified byte array with the values between offset 
            and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. 
            This can be less than the number of bytes requested if that many bytes are not currently available, 
            or zero (0) if the end of the stream has been reached. </returns>
        </member>
        <member name="M:System.IO.RecordStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the origin parameter. </param>
            <param name="origin">A value of type SeekOrigin 
            indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:System.IO.RecordStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current record stream in bytes.</param>
        </member>
        <member name="P:System.IO.RecordStream.IsNew">
            <summary>
            Gets a value indicating whether this record stream holds a brand new record without any data in it. 
            This property returns true when Clear or CreateNew method has just been executed.
            </summary>
        </member>
        <member name="P:System.IO.RecordStream.IsEmpty">
            <summary>
            Gets a value indicating whether this record stream is empty. 
            This property returns true when Length is zero.
            </summary>
        </member>
        <member name="P:System.IO.RecordStream.Loaded">
            <summary>
            Gets a value indicating whether the necessary meta information has been loaded. 
            If false is returned, you cannot write or read any data before you call <c>LoadInfo</c> or <c>CreateNew</c> method.
            </summary>
        </member>
        <member name="M:System.IO.RecordStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. 
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:System.IO.StringEx.LoadIntegers(System.String,System.Text.Encoding)">
            <summary>
            Treat the current string instance as a file path to a text file, and loads the <see cref="T:System.Int32"/> array from the text file. Each line of text in the file should represent one number. There should not be empty lines in the file. 
            </summary>
            <param name="path">The current string instance as a path to a text file.</param>
            <param name="encoding">Provides the encoding for the text file.</param>
            <returns>The <see cref="T:System.Int32"/> array read from the text file.</returns>
        </member>
        <member name="M:System.IO.StringEx.LoadIntegers(System.String)">
            <summary>
            Treat the current string instance as a file path to a text file, and loads a <see cref="T:System.Int32"/> array from the text file. Each line of text in the file should represent one number. There should not be empty lines in the file. The default encoding is <see cref="P:System.Text.Encoding.UTF8"/>.
            </summary>
            <param name="path">The current string instance as a path to a text file.</param>
            <returns>The <see cref="T:System.Int32"/> array read from the text file.</returns>
        </member>
        <member name="M:System.IO.StringEx.LoadLongIntegers(System.String,System.Text.Encoding)">
            <summary>
            Treat the current string instance as a file path to a text file, and loads a <see cref="T:System.Int64"/> array from the text file. Each line of text in the file should represent one number. There should not be empty lines in the file. 
            </summary>
            <param name="path">The current string instance as a path to a text file.</param>
            <param name="encoding">Provides the encoding for the text file.</param>
            <returns>The <see cref="T:System.Int64"/> array read from the text file.</returns>
        </member>
        <member name="M:System.IO.StringEx.LoadLongIntegers(System.String)">
            <summary>
            Treat the current string instance as a file path to a text file, and loads the <see cref="T:System.Int64"/> array from the text file. Each line of text in the file should represent one number. There should not be empty lines in the file. The default encoding is <see cref="P:System.Text.Encoding.UTF8"/>.
            </summary>
            <param name="path">The current string instance as a path to a text file.</param>
            <returns>The <see cref="T:System.Int64"/> array read from the text file.</returns>
        </member>
        <member name="M:System.IO.StringEx.LoadInt32Arrays(System.String,System.Text.Encoding)">
            <summary>
            Treat the current string instance as a file path to a text file, and loads the <see cref="T:System.Int32"/> arrays from the text file. 
            <para>Each line of text in the file represents one array, and substrings separated by spaces are integer elements in the array.</para>
            <para>Empty lines are ignored. Multiple white spaces in a line are treated as a single white space.</para>
            </summary>
            <param name="path">The current string instance as a path to a text file.</param>
            <param name="encoding">Provides the encoding for the text file.</param>
            <returns>The <see cref="T:System.Int32"/> arrays read from the text file.</returns>
        </member>
        <member name="M:System.IO.StringEx.LoadInt32Arrays(System.String)">
            <summary>
            Treat the current string instance as a file path to a text file, and loads the <see cref="T:System.Int32"/> arrays from the text file. The default encoding is <see cref="P:System.Text.Encoding.UTF8"/>.
            <para>Each line of text in the file represents one array, and substrings separated by spaces are integer elements in the array.</para>
            <para>Empty lines are ignored. Multiple white spaces in a line are treated as a single white space.</para>
            </summary>
            <param name="path">The current string instance as a path to a text file.</param>
            <returns>The <see cref="T:System.Int32"/> arrays read from the text file.</returns>
        </member>
        <member name="M:System.IO.StringEx.LoadStringArrays(System.String,System.Text.Encoding)">
            <summary>
            Treat the current string instance as a file path to a text file, and loads the string arrays from the text file. 
            <para>Each line of text in the file represents one array, and substrings separated by spaces are elements in the array.</para>
            <para>Empty lines are ignored. Multiple white spaces in a line are treated as a single white space.</para>
            </summary>
            <param name="path">The current string instance as a path to a text file.</param>
            <param name="encoding">Provides the encoding for the text file.</param>
            <returns>The string arrays read from the text file.</returns>
        </member>
        <member name="M:System.IO.StringEx.LoadStringArrays(System.String)">
            <summary>
            Treats the current string instance as a file path to a text file, and loads the string arrays from the text file. The default encoding is <see cref="P:System.Text.Encoding.UTF8"/>.
            <para>Each line of text in the file represents one array, and substrings separated by spaces are elements in the array.</para>
            <para>Empty lines are ignored. Multiple white spaces in a line are treated as a single white space.</para>
            </summary>
            <param name="path">The current string instance as a path to a text file.</param>
            <returns>The string arrays read from the text file.</returns>
        </member>
        <member name="M:System.IO.StringEx.LoadStringDictionary(System.String,System.String,System.Text.Encoding)">
            <summary>
            Treats the current string instance as a file path to a text file, and loads a string-keyed dictionary from the text file. 
            <para>Each line of text in the file represents a dictionary entry. Each line is first split by the specified <paramref name="delimiter"/> into a string array; The first element in the array is used as the key, while the remaining elements are converted as <see cref="T:System.Double"/> values associated with the key.</para>
            </summary>
            <param name="path">The current string instance as a path to a text file.</param>
            <param name="delimiter">The delimiter that separates key and values.</param>
            <param name="encoding">Provides the encoding for the text file.</param>
            <returns>The string-keyed dictionary read from the text file.</returns>
        </member>
        <member name="M:System.IO.StringEx.LoadStringDictionary(System.String,System.String)">
            <summary>
            Treats the current string instance as a file path to a text file, and loads a string-keyed dictionary from the text file. The default encoding is <see cref="P:System.Text.Encoding.UTF8"/>.
            <para>Each line of text in the file represents a dictionary entry. Each line is first split by the specified <paramref name="delimiter" /> into a string array; The first element in the array is used as the key, while the remaining elements are converted as <see cref="T:System.Double" /> values associated with the key.</para>
            </summary>
            <param name="path">The current string instance as a path to a text file.</param>
            <param name="delimiter">The delimiter that separates key and values.</param>
            <returns>The string-keyed dictionary read from the text file.</returns>
        </member>
        <member name="T:System.IO.StreamEx">
            <summary>
            Provides methods of IO operation for lists and collections.
            </summary>
        </member>
        <member name="M:System.IO.StreamEx.BeginWrite(System.IO.Stream,System.Byte[],System.AsyncCallback)">
            <summary>
            Begins an asynchronous write operation.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="buffer">The buffer to write data from.</param>
            <param name="callback">The callback to which a System.IO.AsyncStreamOperationState object is passed.</param>
        </member>
        <member name="M:System.IO.StreamEx.BeginRead(System.IO.Stream,System.Byte[],System.AsyncCallback)">
            <summary>
            Begins an asynchronous read operation.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="buffer">The buffer to read the data into.</param>
            <param name="callback">The callback to which a System.IO.AsyncStreamOperationState object is passed.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteBooleans(System.IO.Stream,System.Boolean[],System.Boolean)">
            <summary>
            Writes a Boolean array to this stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">A boolean array.</param>
            <param name="validityCheck">Indicates whether to write a check code before the Boolean array. This check code will help detect corrupted data.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadBooleans(System.IO.Stream,System.Boolean)">
            <summary>
            Reads a Boolean array from this stream.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the Boolean array to prevent data corruption; otherwise, set this <c>false</c>.</param>
            <returns>
            A Boolean array read from the stream.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.WriteBytes(System.IO.Stream,System.Byte[])">
            <summary>
            Writes a specified number of bytes to the stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="bytes">The bytes to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.Write(System.IO.Stream,System.Byte[],System.Int32)">
            <summary>
            Writes a specified number of bytes at the beginning of the <paramref name="buffer" /> to the stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="buffer">An array of bytes.</param>
            <param name="count">The number of bytes at the beginning of the <paramref name="buffer" /> to write to the stream.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadAllBytes(System.IO.Stream)">
            <summary>
            Reads all the remaining bytes after the current position of this stream.
            </summary>
            <param name="stream">The stream to read.</param>
            <returns>A byte array storing the read bytes.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadFromStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Reads all bytes of another stream starting from its current position and writes all the read bytes into the current stream.
            </summary>
            <param name="stream">The current stream into which the bytes read from <paramref name="streamToRead" /> will be written.</param>
            <param name="streamToRead">Another stream to read.</param>
            <returns>The total number of bytes read from <paramref name="streamToRead"/>.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadFromStream(System.IO.Stream,System.IO.Stream,System.Byte[])">
            <summary>
            Reads all bytes of another stream starting from its current position and writes all the read bytes into the current stream.
            </summary>
            <param name="stream">The current stream into which the bytes read from <paramref name="streamToRead" /> will be written.</param>
            <param name="streamToRead">Another stream to read.</param>
            <param name="buffer">A byte array serves as the reading buffer.</param>
            <returns>The total number of bytes read from <paramref name="streamToRead"/>.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadFromStream(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Reads all bytes of another stream starting from its current position and writes all the read bytes into the current stream.
            </summary>
            <param name="stream">The current stream into which the bytes read from <paramref name="streamToRead" /> will be written.</param>
            <param name="streamToRead">Another stream to read.</param>
            <param name="bufferSize">The size of the buffer that will be used for the reading process.</param>
            <returns>
            The total number of bytes read from <paramref name="streamToRead" />.
            </returns>
        </member>
        <member name="M:System.IO.StreamEx.ToMemoryStream(System.IO.Stream)">
            <summary>
            Copys all bytes since the current position of this stream into a new memeory stream.
            </summary>
            <param name="stream">The current stream of which the bytes after its current position will be copied to a newly created <see cref="T:System.IO.MemoryStream"/>.</param>
            <returns>A new <see cref="T:System.IO.MemoryStream"/> with bytes copied from the current stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.Read(System.IO.Stream,System.Byte[])">
            <summary>
            Reads as many bytes as possible to fill the specified buffer.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="buffer">A byte array storing the read bytes.</param>
            <returns>The number of byte actually read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadBytes(System.IO.Stream,System.Int32)">
            <summary>
            Reads a specified number of bytes from the stream.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="length">The length.</param>
            <returns>
            A byte array storing the read bytes.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises when the number of bytes actually read from stream is not exactly the same as <paramref name="length"/>.</exception>
        </member>
        <member name="M:System.IO.StreamEx.Read(System.IO.Stream,System.Byte[],System.Int32)">
            <summary>
            Reads a specified number of bytes from the stream into the specified buffer.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="buffer">The buffer to store byte read from the stream.</param>
            <param name="count">The count.</param>
            <returns>The number of byte actually read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteByteArray(System.IO.Stream,System.Byte[],System.Boolean)">
            <summary>
            Writes a byte array to this stream. You may write an empty array or a <c>null</c> reference.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">The byte array to write.</param>
            <param name="validityCheck">Indicates whether to write a check code before the byte array. This check code will help detect corrupted data.</param>
            <returns>The number of bytes actually written to the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteByteArray(System.IO.Stream,System.Byte[])">
            <summary>
            Writes a byte array to this stream. You may write an empty array or a <c>null</c> reference.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">The byte array to write.</param>
            <returns>The number of bytes actually written to the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadByteArray(System.IO.Stream,System.Boolean)">
            <summary>
            Reads a byte array from this stream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to detect data corruption; otherwise, set this <c>false</c>.</param>
            <returns>
            The byte array read from the stream.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.ReadByteArray(System.IO.Stream)">
            <summary>
            Reads a byte array from this stream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <returns>
            The byte array read from the stream.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.WriteCompressedByteArray(System.IO.Stream,System.Byte[],System.Boolean)">
            <summary>
            Writes a byte array to this stream with compression provided by <see cref="T:System.IO.Compression.GZipStream"/>. You may write an empty array or a <c>null</c> reference.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">The byte array to write.</param>
            <param name="validityCheck">Indicates whether to write a check code before the byte array. This check code will help detect corrupted data.</param>
            <returns>The number of bytes actually written to the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadCompressedByteArray(System.IO.Stream,System.Boolean)">
            <summary>
            Reads a compressed byte array from this stream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to detect data corruption; otherwise, set this <c>false</c>.</param>
            <returns>
            The byte array read from the stream.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.SkipByteArray(System.IO.Stream,System.Boolean)">
            <summary>
            Skips a byte array in this stream.
            </summary>
            <param name="stream">A stream.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to skip; otherwise, set this <c>false</c>.</param>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.SkipByteArray(System.IO.Stream)">
            <summary>
            Skips a byte array in this stream.
            </summary>
            <param name="stream">A stream.</param>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.WriteChars(System.IO.Stream,System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes an array of System.Char integers to the current stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">An array of System.Char integers.</param>
            <param name="startIndex">A position in the array/list where the writing starts.</param>
            <param name="count">The number of integers to write to the stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para>
            </param>
        </member>
        <member name="M:System.IO.StreamEx.WriteChars(System.IO.Stream,System.Char[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Writes an array of System.Char integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">An array of System.Char integers.</param>
            <param name="startIndex">A position in the array/list where the writing starts.</param>
            <param name="count">The number of integers to write to the stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para></param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteChars(System.IO.Stream,System.Collections.Generic.IList{System.Char},System.Int32,System.Int32)">
            <summary>
            Writes a list of System.Char integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">A list of System.Char integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
            <param name="count">The number of integers to be written into the current stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para></param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteChars(System.IO.Stream,System.Collections.Generic.IList{System.Char},System.Int32,System.Int32,System.Byte[])">
            <summary>
            Writes a list of System.Char integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">A list of System.Char integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
            <param name="count">The number of integers to be written into the current stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para></param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteChars(System.IO.Stream,System.Char[],System.Int32)">
            <summary>
            Writes an array of System.Char integers to the current stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">An array of System.Char integers.</param>
            <param name="startIndex">A position in the array where the writing starts.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteChars(System.IO.Stream,System.Char[],System.Byte[],System.Int32)">
            <summary>
            Writes a list of System.Char integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">An array of System.Char integers.</param>
            <param name="startIndex">A position in the array where the writing starts.</param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteChars(System.IO.Stream,System.Collections.Generic.IList{System.Char},System.Int32)">
            <summary>
            Writes a list of System.Char integers to the current stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">A list of System.Char integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteChars(System.IO.Stream,System.Collections.Generic.IList{System.Char},System.Byte[],System.Int32)">
            <summary>
            Writes a list of System.Char integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">A list of System.Char integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadChars(System.IO.Stream,System.Int32)">
            <summary>
            Reads a System.Char integer array from this stream.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="length">The length of the array.</param>
            <returns>A System.Char integer array read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadChars(System.IO.Stream,System.Int32,System.Byte[])">
            <summary>
            Reads a System.Char integer array from this stream using the specified buffer.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="length">The length of the array.</param>
            <param name="buffer">A byte array used to temporarily store data read from the stream.</param>
            <returns>A System.Char integer array read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteCharArray(System.IO.Stream,System.Char[],System.Boolean)">
            <summary>
            Writes an array of System.Char integers to the current stream. You may write an empty array or a <c>null</c> reference.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">The byte array to write.</param>
            <param name="validityCheck">Indicates whether to write a check code before the byte array. This check code will help detect corrupted data.</param>
            <returns>The number of bytes actually written to the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteCharArray(System.IO.Stream,System.Char[],System.Byte[],System.Boolean)">
            <summary>
            Writes an array of System.Char integers to the current stream using the specified buffer. You may write an empty array or a <c>null</c> reference.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">The byte array to write.</param>
            <param name="validityCheck">Indicates whether to write a check code before the byte array. This check code will help detect corrupted data.</param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
            <returns>The number of bytes actually written to the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadCharArray(System.IO.Stream,System.Boolean)">
            <summary>
            Reads a System.Char integer array from this stream. The method does not require an argument specifying the length of the array; <seealso cref="M:System.IO.StreamEx.ReadChars(System.IO.Stream,System.Int32)"/>.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to prevent data corruption; otherwise, set this <c>false</c>.</param>
            <returns>
            The System.Char array read from the stream.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.ReadCharArray(System.IO.Stream,System.Byte[],System.Boolean)">
            <summary>
            Reads a System.Char integer array from this stream. The method does not require an argument specifying the length of the array; <seealso cref="M:System.IO.StreamEx.ReadChars(System.IO.Stream,System.Int32)"/>.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to prevent data corruption; otherwise, set this <c>false</c>.</param>
            <param name="buffer">A byte array used to temporarily store data read from the stream.</param>
            <returns>
            The System.Char array read from the stream.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.ReadCharArrayToBuffer(System.IO.Stream,System.Byte[],System.Boolean)">
            <summary>
            Reads a System.Char integer array from this stream into the specified buffer. This method avoids an additional data copy to enchance performance.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to prevent data corruption; otherwise, set this <c>false</c>.</param>
            <param name="buffer">A byte array used to store data read from the stream. You may later get a Char pointer of this array for fast iteration.</param>
            <returns>
            true if the array read from the stream is not empty; otherwise, false.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.WriteObjects``1(System.IO.Stream,System.Collections.IEnumerator,System.IO.WritingMode,System.IO.ObjectToBytesConverter{``0},System.Boolean)">
            <summary>
            Writes a set of objects, each of them fetched from an enumerator, to this stream.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/>.</param>
            <param name="enumerator">An enumerator used to get each object.</param>
            <param name="mode">Indicates whether to override existing list or create a new list in the stream.</param>
            <param name="converter">A delegate used to convert each item in the list to a byte array.</param>
            <param name="validityCheck">Indicates whether to write a validity-check countersign before the list in the stream.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadObjects``1(System.IO.Stream,System.Collections.Generic.IList{``0},System.IO.BytesToObjectConverter{``0},System.Boolean)">
            <summary>
            Reads objects from this stream and stores them in a list.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/>.</param>
            <param name="list">A list used to store the objects.</param>
            <param name="converter">A delegate used to convert the read bytes to the desired object.</param>
            <param name="validityCheck">Indicates whether to read a countersign from the stream and perform the validity check.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteList(System.IO.Stream,System.Collections.Generic.IList{System.Int32},System.IO.WritingMode,System.Boolean)">
            <summary>
            Writes a list of 32-bit integers to this stream.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/>.</param>
            <param name="list">A list of 32-bit integers.</param>
            <param name="mode">Indicates whether to override existing list or create a new list in the stream.</param>
            <param name="validityCheck">Indicates whether to write a validity-check countersign before the list in the stream.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadList(System.IO.Stream,System.Collections.Generic.IList{System.Int32},System.Boolean)">
            <summary>
            Reads a list of 32-bit integers from this stream.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/>.</param>
            <param name="list">A list used to store the integers.</param>
            <param name="validityCheck">Indicates whether to read a countersign from the stream and perform the validity check.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteList(System.IO.Stream,System.Collections.Generic.IList{System.Int64},System.IO.WritingMode,System.Boolean)">
            <summary>
            Writes a list of 64-bit integers to this stream.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/>.</param>
            <param name="list">A list of 64-bit integers.</param>
            <param name="mode">Indicates whether to override existing list or create a new list in the stream.</param>
            <param name="validityCheck">Indicates whether to write a validity-check countersign before the list in the stream.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadList(System.IO.Stream,System.Collections.Generic.IList{System.Int64},System.Boolean)">
            <summary>
            Reads a list of 64-bit integers from this stream.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/>.</param>
            <param name="list">A list used to store the integers.</param>
            <param name="validityCheck">Indicates whether to read a countersign from the stream and perform the validity check.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteList(System.IO.Stream,System.Collections.Generic.IList{System.Int16},System.IO.WritingMode,System.Boolean)">
            <summary>
            Writes a list of 16-bit integers to this stream.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/>.</param>
            <param name="list">A list of 16-bit integers.</param>
            <param name="mode">Indicates whether to override existing list or create a new list in the stream.</param>
            <param name="validityCheck">Indicates whether to write a validity-check countersign before the list in the stream.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadList(System.IO.Stream,System.Collections.Generic.IList{System.Int16},System.Boolean)">
            <summary>
            Reads a list of 16-bit integers from this stream.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/>.</param>
            <param name="list">A list used to store the integers.</param>
            <param name="validityCheck">Indicates whether to read a countersign from the stream and perform the validity check.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteList(System.IO.Stream,System.Collections.Generic.IList{System.UInt64},System.IO.WritingMode,System.Boolean)">
            <summary>
            Writes a list of 64-bit unsigned integers to this stream.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/>.</param>
            <param name="list">A list of 64-bit unsigned integers.</param>
            <param name="mode">Indicates whether to override existing list or create a new list in the stream.</param>
            <param name="validityCheck">Indicates whether to write a validity-check countersign before the list in the stream.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadList(System.IO.Stream,System.Collections.Generic.IList{System.UInt64},System.Boolean)">
            <summary>
            Reads a list of 64-bit unsigned integers from this stream.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/>.</param>
            <param name="list">A list used to store the integers.</param>
            <param name="validityCheck">Indicates whether to read a countersign from the stream and perform the validity check.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteList(System.IO.Stream,System.Collections.Generic.IList{System.UInt32},System.IO.WritingMode,System.Boolean)">
            <summary>
            Writes a list of 32-bit unsigned integers to this stream.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/>.</param>
            <param name="list">A list of 32-bit unsigned integers.</param>
            <param name="mode">Indicates whether to override existing list or create a new list in the stream.</param>
            <param name="validityCheck">Indicates whether to write a validity-check countersign before the list in the stream.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadList(System.IO.Stream,System.Collections.Generic.IList{System.UInt32},System.Boolean)">
            <summary>
            Reads a list of 32-bit unsigned integers from this stream.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/>.</param>
            <param name="list">A list used to store the integers.</param>
            <param name="validityCheck">Indicates whether to read a countersign from the stream and perform the validity check.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteList(System.IO.Stream,System.Collections.Generic.IList{System.UInt16},System.IO.WritingMode,System.Boolean)">
            <summary>
            Writes a list of 16-bit unsigned integers to this stream.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/>.</param>
            <param name="list">A list of 16-bit unsigned integers.</param>
            <param name="mode">Indicates whether to override existing list or create a new list in the stream.</param>
            <param name="validityCheck">Indicates whether to write a validity-check countersign before the list in the stream.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadList(System.IO.Stream,System.Collections.Generic.IList{System.UInt16},System.Boolean)">
            <summary>
            Reads a list of 16-bit unsigned integers from this stream.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/>.</param>
            <param name="list">A list used to store the integers.</param>
            <param name="validityCheck">Indicates whether to read a countersign from the stream and perform the validity check.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteList(System.IO.Stream,System.Collections.Generic.IList{System.Single},System.IO.WritingMode,System.Boolean)">
            <summary>
            Writes a list of single-precision numbers to this stream.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/>.</param>
            <param name="list">A list of single-precision numbers.</param>
            <param name="mode">Indicates whether to override existing list or create a new list in the stream.</param>
            <param name="validityCheck">Indicates whether to write a validity-check countersign before the list in the stream.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadList(System.IO.Stream,System.Collections.Generic.IList{System.Single},System.Boolean)">
            <summary>
            Reads a list of single-precision numbers from this stream.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/>.</param>
            <param name="list">A list used to store the integers.</param>
            <param name="validityCheck">Indicates whether to read a countersign from the stream and perform the validity check.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteList(System.IO.Stream,System.Collections.Generic.IList{System.Double},System.IO.WritingMode,System.Boolean)">
            <summary>
            Writes a list of double-precision number to this stream.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/>.</param>
            <param name="list">A list of double-precision numbers.</param>
            <param name="mode">Indicates whether to override existing list or create a new list in the stream.</param>
            <param name="validityCheck">Indicates whether to write a validity-check countersign before the list in the stream.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadList(System.IO.Stream,System.Collections.Generic.IList{System.Double},System.Boolean)">
            <summary>
            Reads a list of double-precision numbers from this stream.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/>.</param>
            <param name="list">A list used to store the integers.</param>
            <param name="validityCheck">Indicates whether to read a countersign from the stream and perform the validity check.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteList``1(System.IO.Stream,System.Collections.Generic.IList{``0},System.IO.WritingMode,System.Boolean)">
            <summary>
            Writes a list of double-precision number to this stream.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/>.</param>
            <param name="list">A list of double-precision numbers.</param>
            <param name="mode">Indicates whether to override existing list or create a new list in the stream. DO NOT use <see cref="F:System.IO.WritingMode.Override"/> if the binary length <see cref="T:System.IO.IBinarySavable"/> object is variable.</param>
            <param name="validityCheck">Indicates whether to write a validity-check countersign before the list in the stream.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadList``1(System.IO.Stream,System.Collections.Generic.IList{``0},System.Boolean)">
            <summary>
            Reads a list of <see cref="T:System.IO.IBinarySavable"/> objects from this stream.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/>.</param>
            <param name="list">A list used to store the integers.</param>
            <param name="validityCheck">Indicates whether to read a countersign from the stream and perform the validity check.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadList``1(System.IO.Stream,System.Boolean)">
            <summary>
            Reads a list of double-precision numbers from this stream.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/>.</param>
            <param name="validityCheck">Indicates whether to read a countersign from the stream and perform the validity check.</param>
        </member>
        <member name="M:System.IO.StreamEx.ToBytes(System.IO.IBinarySavable,System.Object)">
            <summary>
            Converts the <see cref="T:System.IO.IBinarySavable" /> object to a byte array by calling its <see cref="!:IBinarySavable.WriteToStream(Stream, object)" /> method on a <see cref="T:System.IO.MemoryStream" />.
            </summary>
            <param name="obj">This <see cref="T:System.IO.IBinarySavable" /> object.</param>
            <param name="arg">Provides the argument which is passed to the <see cref="!:IBinarySavable.WriteToStream(Stream, object)" /> method.</param>
            <returns>
            A byte array converted from the <see cref="T:System.IO.IBinarySavable" /> object.
            </returns>
        </member>
        <member name="M:System.IO.StreamEx.DumpText``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Text.Encoding)">
            <summary>
            Dumps the objects as their string representations in a text file at <paramref name="path" />, each object as a line..
            </summary>
            <typeparam name="T">The type of current objects.</typeparam>
            <param name="objs">The current objs.</param>
            <param name="path">The path to the text file.</param>
            <param name="encoding">Provides the text encoding.</param>
        </member>
        <member name="M:System.IO.StreamEx.DumpText``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Dumps the objects as their string representations in a text file at <paramref name="path" />, each object as a line..
            </summary>
            <typeparam name="T">The type of current objects.</typeparam>
            <param name="objs">The current objs.</param>
            <param name="path">The path to the text file.</param>
        </member>
        <member name="M:System.IO.StreamEx.DumpText``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.String,System.Text.Encoding)">
            <summary>
            Dumps the objects as their string representations in a text file at <paramref name="path" />, delimited by tabs <c>'\t'</c>.
            </summary>
            <typeparam name="T">The type of current objects.</typeparam>
            <param name="objs">The current objs.</param>
            <param name="path">The path to the text file.</param>
            <param name="encoding">Provides the text encoding.</param>
        </member>
        <member name="M:System.IO.StreamEx.DumpText``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.String)">
            <summary>
            Dumps the objects as their string representations in a text file at <paramref name="path" />, delimited by tabs <c>'\t'</c>.
            </summary>
            <typeparam name="T">The type of current objects.</typeparam>
            <param name="objs">The current objs.</param>
            <param name="path">The path to the text file.</param>
        </member>
        <member name="M:System.IO.StreamEx.DumpText``1(``0[][],System.String,System.Text.Encoding)">
            <summary>
            Dumps the objects as their string representations in a text file at <paramref name="path" />, each object as a line.
            </summary>
            <typeparam name="T">The type of current objects.</typeparam>
            <param name="objs">The current objs.</param>
            <param name="path">The path to the text file.</param>
            <param name="encoding">Provides the text encoding.</param>
        </member>
        <member name="M:System.IO.StreamEx.DumpText``1(``0[],System.String)">
            <summary>
            Dumps the objects as their string representations in a text file at <paramref name="path" />, each object as a line.
            </summary>
            <typeparam name="T">The type of current objects.</typeparam>
            <param name="objs">The current objs.</param>
            <param name="path">The path to the text file.</param>
        </member>
        <member name="M:System.IO.StreamEx.DumpText``1(``0[],System.String,System.Text.Encoding)">
            <summary>
            Dumps the objects as their string representations in a text file at <paramref name="path" />, delimited by tabs <c>'\t'</c>.
            </summary>
            <typeparam name="T">The type of current objects.</typeparam>
            <param name="objs">The current objs.</param>
            <param name="path">The path to the text file.</param>
            <param name="encoding">Provides the text encoding.</param>
        </member>
        <member name="M:System.IO.StreamEx.DumpText``1(``0[][],System.String)">
            <summary>
            Dumps the object arrays as their string representations in a text file at <paramref name="path" />, each line for one array and string representations of objects in one array delimited by tabs <c>'\t'</c>.
            </summary>
            <typeparam name="T">The type of current objects.</typeparam>
            <param name="objs">The current objs.</param>
            <param name="path">The path to the text file.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteObject``1(System.IO.Stream,``0,System.IO.ObjectToBytesConverter{``0},System.Boolean)">
            <summary>
            Writes an object to this stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="obj">A System.Object.</param>
            <param name="converter">A method that converts the object to bytes.</param>
            <param name="validityCheck">Indicates whether to write a check code before the actual data. This check code will help detect corrupted data.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteObject(System.IO.Stream,System.Object)">
            <summary>
            Writes an arbitrary object 
            </summary>
            <param name="stream">The stream.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadObject``1(System.IO.Stream,System.IO.BytesToObjectConverter{``0},System.Boolean)">
            <summary>
            Reads an object from this stream.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream">The stream to read.</param>
            <param name="converter">A method that converts the read bytes to output object.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the actual data to prevent data corruption; otherwise, set this <c>false</c>.</param>
            <returns>An object converted from the bytes read.</returns>
        </member>
        <member name="M:System.IO.StreamEx.SkipObject(System.IO.Stream,System.Boolean)">
            <summary>
            Skips an object in this stream.
            </summary>
            <param name="stream">A System.IO.Stream.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the actual data to prevent data corruption; otherwise, set this <c>false</c>.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteKey(System.IO.Stream,System.Key)">
            <summary>
            Writes a <see cref="T:System.Key"/> into this stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="key">The <see cref="T:System.Key"/> to write to the stream.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadKey(System.IO.Stream)">
            <summary>
            Reads a <see cref="T:System.Key"/> from this stream.
            </summary>
            <param name="stream">The stream to read.</param>
            <returns>A <see cref="T:System.Key"/> read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteSegmentMapping(System.IO.Stream,System.SegmentMapping,System.Boolean)">
            <summary>
            Writes a System.Segment object into this stream.
            </summary>
            <param name="stream">This stream.</param>
            <param name="mapping">A System.Segment object.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadSegmentMapping(System.IO.Stream,System.Boolean)">
            <summary>
            Reads a System.Segment object from this stream.
            </summary>
            <param name="stream">This stream.</param>
            <returns>A System.Segment object.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteSByte(System.IO.Stream,System.SByte)">
            <summary>
            Writes a System.SByte value to this stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="value">The System.SByte value.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadSByte(System.IO.Stream)">
            <summary>
            Reads a System.SByte value from this stream.
            </summary>
            <param name="stream">The stream to read.</param>
            <returns>A System.SByte value read from this stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteBoolean(System.IO.Stream,System.Boolean)">
            <summary>
            Writes a Boolean value to this stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="value">A System.Boolean value.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadBoolean(System.IO.Stream)">
            <summary>
            Reads a Boolean value from this stream.
            </summary>
            <param name="stream">The stream to read.</param>
            <returns>The System.UInt32 value read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteChar(System.IO.Stream,System.Char)">
            <summary>
            Writes a System.Char value to this stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="value">The System.Char value.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteChar(System.IO.Stream,System.Char,System.Byte[])">
            <summary>
            Writes a System.Char value to this stream using the specified buffer. Use this method if performance is critical.
            </summary>
            <param name="stream">This stream to write.</param>
            <param name="value">The System.Char value.</param>
            <param name="buffer">A byte array used to temporarily store the <paramref name="value"/>.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadChar(System.IO.Stream)">
            <summary>
            Reads a System.Char value from this stream.
            </summary>
            <param name="stream">This stream to read.</param>
            <returns>A System.Char value read from this stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadChar(System.IO.Stream,System.Byte[])">
            <summary>
            Reads a System.Char value from this stream using the specified buffer.
            </summary>
            <param name="stream">This stream to read.</param>
            <param name="buffer">A byte array used to temporarily store the value read.</param>
            <returns>A System.Char value read from this stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteDateTime(System.IO.Stream,System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value to the stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="datetime">The <see cref="T:System.DateTime"/> value.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteNullableDateTime(System.IO.Stream,System.Nullable{System.DateTime})">
            <summary>
            Writes a nullable <see cref="T:System.DateTime"/> value to the stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="datetime">The nullable <see cref="T:System.DateTime"/> value.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">datetime</exception>
        </member>
        <member name="M:System.IO.StreamEx.WriteDateTime(System.IO.Stream,System.DateTime,System.Byte[])">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value to the stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="dateTime">The <see cref="T:System.DateTime"/> value.</param>
            <param name="buffer">A byte array used to temporarily store the <paramref name="value"/>.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDateTime(System.IO.Stream)">
            <summary>
            Reads a <see cref="T:System.DateTime"/> value from the stream.
            </summary>
            <param name="stream">The stream to read.</param>
            <returns>The <see cref="T:System.DateTime"/> value read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadNullableDateTime(System.IO.Stream)">
            <summary>
            Reads a nullable <see cref="T:System.DateTime"/> value from the stream.
            </summary>
            <param name="stream">The stream to read.</param>
            <returns>The nullable <see cref="T:System.DateTime"/> value read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadDateTime(System.IO.Stream,System.Byte[])">
            <summary>
            Reads a <see cref="T:System.DateTime"/> value from the stream.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="buffer">A byte array used to temporarily store the value read.</param>
            <returns>
            The <see cref="T:System.DateTime"/> value read from the stream.
            </returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteSingle(System.IO.Stream,System.Single)">
            <summary>
            Writes a System.Single value to the stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="value">The System.Single value.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteSingle(System.IO.Stream,System.Single,System.Byte[])">
            <summary>
            Writes a System.Single value to the stream using the specified buffer. Use this method if performance is critical.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="value">The System.Single value.</param>
            <param name="buffer">A byte array used to temporarily store the <paramref name="value"/>.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadSingle(System.IO.Stream)">
            <summary>
            Reads a System.Single value from the stream.
            </summary>
            <param name="stream">The stream to read.</param>
            <returns>The System.Single value read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadSingle(System.IO.Stream,System.Byte[])">
            <summary>
            Reads a System.Single value from the stream using the specified buffer.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="buffer">A byte array used to temporarily store the bytes read.</param>
            <returns>
            The System.Single value read from the stream.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises when the number of bytes actually read from stream is not 4.</exception>
        </member>
        <member name="M:System.IO.StreamEx.WriteDouble(System.IO.Stream,System.Double)">
            <summary>
            Writes a System.Double value to the stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="value">The System.Double value.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDouble(System.IO.Stream,System.Double,System.Byte[])">
            <summary>
            Writes a System.Double value to the stream using the specified buffer. Use this method if performance is critical.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="value">The System.Double value.</param>
            <param name="buffer">A byte array used to temporarily store the <paramref name="value"/>.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDouble(System.IO.Stream)">
            <summary>
            Reads a System.Double value from the stream.
            </summary>
            <param name="stream">The stream to read.</param>
            <returns>The System.Double value read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadDouble(System.IO.Stream,System.Byte[])">
            <summary>
            Reads a System.Double value from the stream using the specified buffer.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="buffer">A byte array used to temporarily store the bytes read.</param>
            <returns>
            The System.Double value read from the stream.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises when the number of bytes actually read from stream is not 8.</exception>
        </member>
        <member name="M:System.IO.StreamEx.WriteDateTimes(System.IO.Stream,System.DateTime[],System.Int32,System.Int32)">
            <summary>
            Writes an array of System.DateTime integers to the current stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">An array of System.DateTime integers.</param>
            <param name="startIndex">A position in the array/list where the writing starts.</param>
            <param name="count">The number of integers to write to the stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para>
            </param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDateTimes(System.IO.Stream,System.DateTime[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Writes an array of System.DateTime integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">An array of System.DateTime integers.</param>
            <param name="startIndex">A position in the array/list where the writing starts.</param>
            <param name="count">The number of integers to write to the stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para></param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDateTimes(System.IO.Stream,System.Collections.Generic.IList{System.DateTime},System.Int32,System.Int32)">
            <summary>
            Writes a list of System.DateTime integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">A list of System.DateTime integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
            <param name="count">The number of integers to be written into the current stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para></param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDateTimes(System.IO.Stream,System.Collections.Generic.IList{System.DateTime},System.Int32,System.Int32,System.Byte[])">
            <summary>
            Writes a list of System.DateTime integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">A list of System.DateTime integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
            <param name="count">The number of integers to be written into the current stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para></param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDateTimes(System.IO.Stream,System.DateTime[],System.Int32)">
            <summary>
            Writes an array of System.DateTime integers to the current stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">An array of System.DateTime integers.</param>
            <param name="startIndex">A position in the array where the writing starts.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDateTimes(System.IO.Stream,System.DateTime[],System.Byte[],System.Int32)">
            <summary>
            Writes a list of System.DateTime integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">An array of System.DateTime integers.</param>
            <param name="startIndex">A position in the array where the writing starts.</param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDateTimes(System.IO.Stream,System.Collections.Generic.IList{System.DateTime},System.Int32)">
            <summary>
            Writes a list of System.DateTime integers to the current stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">A list of System.DateTime integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDateTimes(System.IO.Stream,System.Collections.Generic.IList{System.DateTime},System.Byte[],System.Int32)">
            <summary>
            Writes a list of System.DateTime integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">A list of System.DateTime integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDateTimes(System.IO.Stream,System.Int32)">
            <summary>
            Reads a System.DateTime integer array from this stream.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="length">The length of the array.</param>
            <returns>A System.DateTime integer array read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadDateTimes(System.IO.Stream,System.Int32,System.Byte[])">
            <summary>
            Reads a System.DateTime integer array from this stream using the specified buffer.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="length">The length of the array.</param>
            <param name="buffer">A byte array used to temporarily store data read from the stream.</param>
            <returns>A System.DateTime integer array read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteDateTimeArray(System.IO.Stream,System.DateTime[],System.Boolean)">
            <summary>
            Writes an array of System.DateTime integers to the current stream. You may write an empty array or a <c>null</c> reference.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">The byte array to write.</param>
            <param name="validityCheck">Indicates whether to write a check code before the byte array. This check code will help detect corrupted data.</param>
            <returns>The number of bytes actually written to the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteDateTimeArray(System.IO.Stream,System.DateTime[],System.Byte[],System.Boolean)">
            <summary>
            Writes an array of System.DateTime integers to the current stream using the specified buffer. You may write an empty array or a <c>null</c> reference.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">The byte array to write.</param>
            <param name="validityCheck">Indicates whether to write a check code before the byte array. This check code will help detect corrupted data.</param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
            <returns>The number of bytes actually written to the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadDateTimeArray(System.IO.Stream,System.Boolean)">
            <summary>
            Reads a System.DateTime integer array from this stream. The method does not require an argument specifying the length of the array; <seealso cref="M:System.IO.StreamEx.ReadDateTimes(System.IO.Stream,System.Int32)"/>.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to prevent data corruption; otherwise, set this <c>false</c>.</param>
            <returns>
            The System.DateTime array read from the stream.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.ReadDateTimeArray(System.IO.Stream,System.Byte[],System.Boolean)">
            <summary>
            Reads a System.DateTime integer array from this stream. The method does not require an argument specifying the length of the array; <seealso cref="M:System.IO.StreamEx.ReadDateTimes(System.IO.Stream,System.Int32)"/>.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to prevent data corruption; otherwise, set this <c>false</c>.</param>
            <param name="buffer">A byte array used to temporarily store data read from the stream.</param>
            <returns>
            The System.DateTime array read from the stream.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.ReadDateTimeArrayToBuffer(System.IO.Stream,System.Byte[],System.Boolean)">
            <summary>
            Reads a System.DateTime integer array from this stream into the specified buffer. This method avoids an additional data copy to enchance performance.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to prevent data corruption; otherwise, set this <c>false</c>.</param>
            <param name="buffer">A byte array used to store data read from the stream. You may later get a DateTime pointer of this array for fast iteration.</param>
            <returns>
            true if the array read from the stream is not empty; otherwise, false.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.WriteDoubles(System.IO.Stream,System.Double[],System.Int32,System.Int32)">
            <summary>
            Writes an array of System.Double integers to the current stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">An array of System.Double integers.</param>
            <param name="startIndex">A position in the array/list where the writing starts.</param>
            <param name="count">The number of integers to write to the stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para>
            </param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDoubles(System.IO.Stream,System.Double[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Writes an array of System.Double integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">An array of System.Double integers.</param>
            <param name="startIndex">A position in the array/list where the writing starts.</param>
            <param name="count">The number of integers to write to the stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para></param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDoubles(System.IO.Stream,System.Collections.Generic.IList{System.Double},System.Int32,System.Int32)">
            <summary>
            Writes a list of System.Double integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">A list of System.Double integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
            <param name="count">The number of integers to be written into the current stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para></param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDoubles(System.IO.Stream,System.Collections.Generic.IList{System.Double},System.Int32,System.Int32,System.Byte[])">
            <summary>
            Writes a list of System.Double integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">A list of System.Double integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
            <param name="count">The number of integers to be written into the current stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para></param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDoubles(System.IO.Stream,System.Double[],System.Int32)">
            <summary>
            Writes an array of System.Double integers to the current stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">An array of System.Double integers.</param>
            <param name="startIndex">A position in the array where the writing starts.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDoubles(System.IO.Stream,System.Double[],System.Byte[],System.Int32)">
            <summary>
            Writes a list of System.Double integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">An array of System.Double integers.</param>
            <param name="startIndex">A position in the array where the writing starts.</param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDoubles(System.IO.Stream,System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Writes a list of System.Double integers to the current stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">A list of System.Double integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDoubles(System.IO.Stream,System.Collections.Generic.IList{System.Double},System.Byte[],System.Int32)">
            <summary>
            Writes a list of System.Double integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">A list of System.Double integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDoubles(System.IO.Stream,System.Int32)">
            <summary>
            Reads a System.Double integer array from this stream.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="length">The length of the array.</param>
            <returns>A System.Double integer array read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadDoubles(System.IO.Stream,System.Int32,System.Byte[])">
            <summary>
            Reads a System.Double integer array from this stream using the specified buffer.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="length">The length of the array.</param>
            <param name="buffer">A byte array used to temporarily store data read from the stream.</param>
            <returns>A System.Double integer array read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteDoubleArray(System.IO.Stream,System.Double[],System.Boolean)">
            <summary>
            Writes an array of System.Double integers to the current stream. You may write an empty array or a <c>null</c> reference.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">The byte array to write.</param>
            <param name="validityCheck">Indicates whether to write a check code before the byte array. This check code will help detect corrupted data.</param>
            <returns>The number of bytes actually written to the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteDoubleArray(System.IO.Stream,System.Double[],System.Byte[],System.Boolean)">
            <summary>
            Writes an array of System.Double integers to the current stream using the specified buffer. You may write an empty array or a <c>null</c> reference.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">The byte array to write.</param>
            <param name="validityCheck">Indicates whether to write a check code before the byte array. This check code will help detect corrupted data.</param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
            <returns>The number of bytes actually written to the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadDoubleArray(System.IO.Stream,System.Boolean)">
            <summary>
            Reads a System.Double integer array from this stream. The method does not require an argument specifying the length of the array; <seealso cref="M:System.IO.StreamEx.ReadDoubles(System.IO.Stream,System.Int32)"/>.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to prevent data corruption; otherwise, set this <c>false</c>.</param>
            <returns>
            The System.Double array read from the stream.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.ReadDoubleArray(System.IO.Stream,System.Byte[],System.Boolean)">
            <summary>
            Reads a System.Double integer array from this stream. The method does not require an argument specifying the length of the array; <seealso cref="M:System.IO.StreamEx.ReadDoubles(System.IO.Stream,System.Int32)"/>.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to prevent data corruption; otherwise, set this <c>false</c>.</param>
            <param name="buffer">A byte array used to temporarily store data read from the stream.</param>
            <returns>
            The System.Double array read from the stream.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.ReadDoubleArrayToBuffer(System.IO.Stream,System.Byte[],System.Boolean)">
            <summary>
            Reads a System.Double integer array from this stream into the specified buffer. This method avoids an additional data copy to enchance performance.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to prevent data corruption; otherwise, set this <c>false</c>.</param>
            <param name="buffer">A byte array used to store data read from the stream. You may later get a Double pointer of this array for fast iteration.</param>
            <returns>
            true if the array read from the stream is not empty; otherwise, false.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.WriteToFile(System.IO.Stream,System.String)">
            <summary>
            Reads the bytes from the current stream and writes them to a file. 
            Copying begins at the current position in the current stream, 
            and does not reset the position of the current stream after the writing is complete. 
            If the file already exists, it will be overwritten.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/>.</param>
            <param name="path">The path of the file to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.AppendToFile(System.IO.Stream,System.String)">
            <summary>
            Reads the bytes from the current stream and writes them to the end of a file. 
            Copying begins at the current position in the current stream, 
            and does not reset the position of the current stream after the writing is complete. 
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/>.</param>
            <param name="path">The path of the file to append.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadFromFile(System.IO.Stream,System.String)">
            <summary>
            Reads the bytes from a file and writes them into this stream at its current position.
            After reading, the position of the current stream is not reset and remains where it is.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/>.</param>
            <param name="path">The path of the file to read.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt16s(System.IO.Stream,System.Int16[],System.Int32,System.Int32)">
            <summary>
            Writes an array of System.Int16 integers to the current stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">An array of System.Int16 integers.</param>
            <param name="startIndex">A position in the array/list where the writing starts.</param>
            <param name="count">The number of integers to write to the stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para>
            </param>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt16s(System.IO.Stream,System.Int16[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Writes an array of System.Int16 integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">An array of System.Int16 integers.</param>
            <param name="startIndex">A position in the array/list where the writing starts.</param>
            <param name="count">The number of integers to write to the stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para></param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt16s(System.IO.Stream,System.Collections.Generic.IList{System.Int16},System.Int32,System.Int32)">
            <summary>
            Writes a list of System.Int16 integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">A list of System.Int16 integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
            <param name="count">The number of integers to be written into the current stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para></param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt16s(System.IO.Stream,System.Collections.Generic.IList{System.Int16},System.Int32,System.Int32,System.Byte[])">
            <summary>
            Writes a list of System.Int16 integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">A list of System.Int16 integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
            <param name="count">The number of integers to be written into the current stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para></param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt16s(System.IO.Stream,System.Int16[],System.Int32)">
            <summary>
            Writes an array of System.Int16 integers to the current stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">An array of System.Int16 integers.</param>
            <param name="startIndex">A position in the array where the writing starts.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt16s(System.IO.Stream,System.Int16[],System.Byte[],System.Int32)">
            <summary>
            Writes a list of System.Int16 integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">An array of System.Int16 integers.</param>
            <param name="startIndex">A position in the array where the writing starts.</param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt16s(System.IO.Stream,System.Collections.Generic.IList{System.Int16},System.Int32)">
            <summary>
            Writes a list of System.Int16 integers to the current stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">A list of System.Int16 integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt16s(System.IO.Stream,System.Collections.Generic.IList{System.Int16},System.Byte[],System.Int32)">
            <summary>
            Writes a list of System.Int16 integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">A list of System.Int16 integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadInt16s(System.IO.Stream,System.Int32)">
            <summary>
            Reads a System.Int16 integer array from this stream.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="length">The length of the array.</param>
            <returns>A System.Int16 integer array read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadInt16s(System.IO.Stream,System.Int32,System.Byte[])">
            <summary>
            Reads a System.Int16 integer array from this stream using the specified buffer.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="length">The length of the array.</param>
            <param name="buffer">A byte array used to temporarily store data read from the stream.</param>
            <returns>A System.Int16 integer array read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt16Array(System.IO.Stream,System.Int16[],System.Boolean)">
            <summary>
            Writes an array of System.Int16 integers to the current stream. You may write an empty array or a <c>null</c> reference.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">The byte array to write.</param>
            <param name="validityCheck">Indicates whether to write a check code before the byte array. This check code will help detect corrupted data.</param>
            <returns>The number of bytes actually written to the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt16Array(System.IO.Stream,System.Int16[],System.Byte[],System.Boolean)">
            <summary>
            Writes an array of System.Int16 integers to the current stream using the specified buffer. You may write an empty array or a <c>null</c> reference.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">The byte array to write.</param>
            <param name="validityCheck">Indicates whether to write a check code before the byte array. This check code will help detect corrupted data.</param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
            <returns>The number of bytes actually written to the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadInt16Array(System.IO.Stream,System.Boolean)">
            <summary>
            Reads a System.Int16 integer array from this stream. The method does not require an argument specifying the length of the array; <seealso cref="M:System.IO.StreamEx.ReadInt16s(System.IO.Stream,System.Int32)"/>.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to prevent data corruption; otherwise, set this <c>false</c>.</param>
            <returns>
            The System.Int16 array read from the stream.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.ReadInt16Array(System.IO.Stream,System.Byte[],System.Boolean)">
            <summary>
            Reads a System.Int16 integer array from this stream. The method does not require an argument specifying the length of the array; <seealso cref="M:System.IO.StreamEx.ReadInt16s(System.IO.Stream,System.Int32)"/>.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to prevent data corruption; otherwise, set this <c>false</c>.</param>
            <param name="buffer">A byte array used to temporarily store data read from the stream.</param>
            <returns>
            The System.Int16 array read from the stream.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.ReadInt16ArrayToBuffer(System.IO.Stream,System.Byte[],System.Boolean)">
            <summary>
            Reads a System.Int16 integer array from this stream into the specified buffer. This method avoids an additional data copy to enchance performance.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to prevent data corruption; otherwise, set this <c>false</c>.</param>
            <param name="buffer">A byte array used to store data read from the stream. You may later get a Int16 pointer of this array for fast iteration.</param>
            <returns>
            true if the array read from the stream is not empty; otherwise, false.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt16(System.IO.Stream,System.Int16)">
            <summary>
            Writes a System.Int16 value to the stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The System.Int16 value.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt16(System.IO.Stream,System.Int16,System.Byte[])">
            <summary>
            Writes a System.Int16 value to the stream using the specified buffer. Use this method if performance is critical.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The System.Int16 value.</param>
            <param name="buffer">A byte array used to temporarily store the <paramref name="value"/>.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadInt16(System.IO.Stream)">
            <summary>
            Reads a System.Int16 value from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <returns>The System.Int16 value read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadInt16(System.IO.Stream,System.Byte[])">
            <summary>
            Reads a System.Int16 value from the stream using the specified buffer.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="buffer">A byte array used to temporarily store the bytes read.</param>
            <returns>
            The System.Int16 value read from the stream.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises when the number of bytes actually read from stream is not 2.</exception>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt16(System.IO.Stream,System.UInt16)">
            <summary>
            Writes a System.UInt16 value to the stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The System.UInt16 value.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt16(System.IO.Stream,System.UInt16,System.Byte[])">
            <summary>
            Writes a System.UInt16 value to the stream using the specified buffer. Use this method if performance is critical.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The System.UInt16 value.</param>
            <param name="buffer">A byte array used to temporarily store the <paramref name="value"/>.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadUInt16(System.IO.Stream)">
            <summary>
            Reads a System.UInt16 value from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <returns>The System.UInt16 value read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadUInt16(System.IO.Stream,System.Byte[])">
            <summary>
            Reads a System.UInt16 value from the stream using the specified buffer.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="buffer">A byte array used to temporarily store the bytes read.</param>
            <returns>
            The System.UInt16 value read from the stream.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises when the number of bytes actually read from stream is not 2.</exception>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt32s(System.IO.Stream,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Writes an array of System.Int32 integers to the current stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">An array of System.Int32 integers.</param>
            <param name="startIndex">A position in the array/list where the writing starts.</param>
            <param name="count">The number of integers to write to the stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para>
            </param>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt32s(System.IO.Stream,System.Int32[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Writes an array of System.Int32 integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">An array of System.Int32 integers.</param>
            <param name="startIndex">A position in the array/list where the writing starts.</param>
            <param name="count">The number of integers to write to the stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para></param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt32s(System.IO.Stream,System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32)">
            <summary>
            Writes a list of System.Int32 integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">A list of System.Int32 integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
            <param name="count">The number of integers to be written into the current stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para></param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt32s(System.IO.Stream,System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32,System.Byte[])">
            <summary>
            Writes a list of System.Int32 integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">A list of System.Int32 integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
            <param name="count">The number of integers to be written into the current stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para></param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt32s(System.IO.Stream,System.Int32[],System.Int32)">
            <summary>
            Writes an array of System.Int32 integers to the current stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">An array of System.Int32 integers.</param>
            <param name="startIndex">A position in the array where the writing starts.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt32s(System.IO.Stream,System.Int32[],System.Byte[],System.Int32)">
            <summary>
            Writes a list of System.Int32 integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">An array of System.Int32 integers.</param>
            <param name="startIndex">A position in the array where the writing starts.</param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt32s(System.IO.Stream,System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            Writes a list of System.Int32 integers to the current stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">A list of System.Int32 integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt32s(System.IO.Stream,System.Collections.Generic.IList{System.Int32},System.Byte[],System.Int32)">
            <summary>
            Writes a list of System.Int32 integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">A list of System.Int32 integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadInt32s(System.IO.Stream,System.Int32)">
            <summary>
            Reads a System.Int32 integer array from this stream.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="length">The length of the array.</param>
            <returns>A System.Int32 integer array read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadInt32s(System.IO.Stream,System.Int32,System.Byte[])">
            <summary>
            Reads a System.Int32 integer array from this stream using the specified buffer.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="length">The length of the array.</param>
            <param name="buffer">A byte array used to temporarily store data read from the stream.</param>
            <returns>A System.Int32 integer array read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt32Array(System.IO.Stream,System.Int32[],System.Boolean)">
            <summary>
            Writes an array of System.Int32 integers to the current stream. You may write an empty array or a <c>null</c> reference.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">The byte array to write.</param>
            <param name="validityCheck">Indicates whether to write a check code before the byte array. This check code will help detect corrupted data.</param>
            <returns>The number of bytes actually written to the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt32Array(System.IO.Stream,System.Int32[],System.Byte[],System.Boolean)">
            <summary>
            Writes an array of System.Int32 integers to the current stream using the specified buffer. You may write an empty array or a <c>null</c> reference.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">The byte array to write.</param>
            <param name="validityCheck">Indicates whether to write a check code before the byte array. This check code will help detect corrupted data.</param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
            <returns>The number of bytes actually written to the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadInt32Array(System.IO.Stream,System.Boolean)">
            <summary>
            Reads a System.Int32 integer array from this stream. The method does not require an argument specifying the length of the array; <seealso cref="M:System.IO.StreamEx.ReadInt32s(System.IO.Stream,System.Int32)"/>.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to prevent data corruption; otherwise, set this <c>false</c>.</param>
            <returns>
            The System.Int32 array read from the stream.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.ReadInt32Array(System.IO.Stream,System.Byte[],System.Boolean)">
            <summary>
            Reads a System.Int32 integer array from this stream. The method does not require an argument specifying the length of the array; <seealso cref="M:System.IO.StreamEx.ReadInt32s(System.IO.Stream,System.Int32)"/>.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to prevent data corruption; otherwise, set this <c>false</c>.</param>
            <param name="buffer">A byte array used to temporarily store data read from the stream.</param>
            <returns>
            The System.Int32 array read from the stream.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.ReadInt32ArrayToBuffer(System.IO.Stream,System.Byte[],System.Boolean)">
            <summary>
            Reads a System.Int32 integer array from this stream into the specified buffer. This method avoids an additional data copy to enchance performance.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to prevent data corruption; otherwise, set this <c>false</c>.</param>
            <param name="buffer">A byte array used to store data read from the stream. You may later get a Int32 pointer of this array for fast iteration.</param>
            <returns>
            true if the array read from the stream is not empty; otherwise, false.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt32(System.IO.Stream,System.Int32)">
            <summary>
            Writes a System.Int32 value to the stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The System.Int32 value.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt32(System.IO.Stream,System.Int32,System.Byte[])">
            <summary>
            Writes a System.Int32 value to the stream using the specified buffer. Use this method if performance is critical.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The System.Int32 value.</param>
            <param name="buffer">A byte array used to temporarily store the <paramref name="value"/>.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt32(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Writes a specified number of rightmost bytes of the System.Int32 value to the stream.
            <para>** For example, the rightmost 3 bytes of integer 111 is 111, 0, 0.</para>
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The System.Int32 value.</param>
            <param name="size">The number of bytes to write to the stream.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Raises when the value of <paramref name="size"/> is larger than 4 or smaller than 1.</exception>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt32(System.IO.Stream,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes a specified number of rightmost bytes of the System.Int32 value to the stream using the specified buffer. Use this method if performance is critical.
            <para>** For example, the rightmost 3 bytes of integer 111 is 111, 0, 0.</para>
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The System.Int32 value.</param>
            <param name="buffer">A byte array used to temporarily store the <paramref name="value"/>.</param>
            <param name="size">The number of bytes to write to the stream.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Raises when the value of <paramref name="size" /> is larger than 4 or smaller than 1.</exception>
        </member>
        <member name="M:System.IO.StreamEx.ReadInt32(System.IO.Stream)">
            <summary>
            Reads a System.Int32 value from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <returns>The System.Int32 value.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadInt32(System.IO.Stream,System.Byte[])">
            <summary>
            Reads a System.Int32 value from the stream using the specified buffer.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="buffer">A byte array used to temporarily store the bytes read.</param>
            <returns>
            The System.Int32 value.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises when the number of bytes actually read from stream is not 4.</exception>
        </member>
        <member name="M:System.IO.StreamEx.ReadInt32(System.IO.Stream,System.Int32)">
            <summary>
            Reads a specified number of bytes from the stream and converts it to a System.Int32 value.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="size">The number of byte to read.</param>
            <returns>The System.Int32 value converted from the bytes read.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadInt32(System.IO.Stream,System.Byte[],System.Int32)">
            <summary>
            Reads a specified number of bytes from the stream, using the specified buffer, and converts it to a System.Int32 value.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="buffer">A byte array used to temporarily store the bytes read.</param>
            <param name="size">The number of byte to read.</param>
            <returns>
            The System.Int32 value converted from the bytes read.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Raises when the value of <paramref name="size" /> is larger than 4 or smaller than 1.</exception>
            <exception cref="T:System.IO.InvalidDataException">Raises when the number of bytes actually read from stream does not equal <paramref name="size"/>.</exception>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt32(System.IO.Stream,System.UInt32)">
            <summary>
            Writes a System.UInt32 value to the stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The System.UInt32 value.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt32(System.IO.Stream,System.UInt32,System.Byte[])">
            <summary>
            Writes a System.UInt32 value to the stream using the specified buffer. Use this method if performance is critical.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The System.UInt32 value.</param>
            <param name="buffer">A byte array used to temporarily store the <paramref name="value"/>.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt32(System.IO.Stream,System.UInt32,System.Int32)">
            <summary>
            Writes a specified number of rightmost bytes of the System.UInt32 value to the stream.
            <para>** For example, the rightmost 3 bytes of integer 111 is 111, 0, 0.</para>
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The System.UInt32 value.</param>
            <param name="size">The number of bytes to write to the stream.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Raises when the value of <paramref name="size"/> is larger than 4 or smaller than 1.</exception>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt32(System.IO.Stream,System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Writes a specified number of rightmost bytes of the System.UInt32 value to the stream using the specified buffer. Use this method if performance is critical.
            <para>** For example, the rightmost 3 bytes of integer 111 is 111, 0, 0.</para>
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The System.UInt32 value.</param>
            <param name="buffer">A byte array used to temporarily store the <paramref name="value"/>.</param>
            <param name="size">The number of bytes to write to the stream.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Raises when the value of <paramref name="size" /> is larger than 4 or smaller than 1.</exception>
        </member>
        <member name="M:System.IO.StreamEx.ReadUInt32(System.IO.Stream)">
            <summary>
            Reads a System.UInt32 value from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <returns>The System.UInt32 value.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadUInt32(System.IO.Stream,System.Byte[])">
            <summary>
            Reads a System.UInt32 value from the stream using the specified buffer.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="buffer">A byte array used to temporarily store the bytes read.</param>
            <returns>
            The System.UInt32 value.
            </returns>
            <exception cref="T:System.IO.InvalidDataException"></exception>
        </member>
        <member name="M:System.IO.StreamEx.ReadUInt32(System.IO.Stream,System.Int32)">
            <summary>
            Reads a specified number of bytes from the stream and converts it to a System.UInt32 value.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="size">The number of byte to read.</param>
            <returns>The System.UInt32 value converted from the bytes read.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadUInt32(System.IO.Stream,System.Byte[],System.Int32)">
            <summary>
            Reads a specified number of bytes from the stream, using the specified buffer, and converts it to a System.UInt32 value.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="buffer">A byte array used to temporarily store the bytes read.</param>
            <param name="size">The number of byte to read.</param>
            <returns>
            The System.UInt32 value converted from the bytes read.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Raises when the value of <paramref name="size"/> is larger than 4 or smaller than 1.</exception>
            <exception cref="T:System.IO.InvalidDataException">Raises when the number of bytes actually read from stream does not equal <paramref name="size"/>.</exception>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt24(System.IO.Stream,System.Int32)">
            <summary>
            Writes the rightmost 3 bytes of the System.UInt32 value to the stream.
            <para>** For example, the rightmost 3 bytes of integer 111 is 111, 0, 0.</para>
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The System.UInt32 value.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt24(System.IO.Stream,System.Int32,System.Byte[])">
            <summary>
            Writes the rightmost 3 bytes of the System.UInt32 value to the stream using the specified buffer. Use this method if performance is critical.
            <para>** For example, the rightmost 3 bytes of integer 111 is 111, 0, 0.</para>
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The System.UInt32 value.</param>
            <param name="buffer">A byte array used to temporarily store the <paramref name="value"/>.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt24(System.IO.Stream,System.UInt32)">
            <summary>
            Writes the rightmost 3 bytes of the System.UUInt32 value to the stream.
            <para>** For example, the rightmost 3 bytes of integer 111 is 111, 0, 0.</para>
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The System.UUInt32 value.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt24(System.IO.Stream,System.UInt32,System.Byte[])">
            <summary>
            Writes the rightmost 3 bytes of the System.UUInt32 value to the stream using the specified buffer. Use this method if performance is critical.
            <para>** For example, the rightmost 3 bytes of UInteger 111 is 111, 0, 0.</para>
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The System.UUInt32 value.</param>
            <param name="buffer">A byte array used to temporarily store the <paramref name="value"/>.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadInt24(System.IO.Stream)">
            <summary>
            Reads 6 bytes from the stream and converts it to a System.Int64 value.
            </summary>
            <param name="stream">The stream.</param>
            <returns> The System.Int64 value converted from the bytes read.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadInt24(System.IO.Stream,System.Byte[])">
            <summary>
            Reads 6 bytes from the stream, using the specified buffer, and converts it to a System.UInt32 value.
            </summary>
            <param name="stream">The stream.</param>
            <param name="buffer">A byte array, of size no smaller than 8, used to temporarily store the bytes read.</param>
            <returns>
            The System.Int64 value converted from the bytes read.
            </returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadUInt24(System.IO.Stream)">
            <summary>
            Reads 6 bytes from the stream and converts it to a System.UInt64 value.
            </summary>
            <param name="stream">The stream.</param>
            <returns> The System.UInt64 value converted from the bytes read.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadUInt24(System.IO.Stream,System.Byte[])">
            <summary>
            Reads 3 bytes from the stream, using the specified buffer, and converts it to a System.UInt32 value.
            </summary>
            <param name="stream">The stream.</param>
            <param name="buffer">A byte array, of size no smaller than 8, used to temporarily store the bytes read.</param>
            <returns>
            The System.UInt64 value converted from the bytes read.
            </returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt64s(System.IO.Stream,System.Int64[],System.Int32,System.Int32)">
            <summary>
            Writes an array of System.Int64 integers to the current stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">An array of System.Int64 integers.</param>
            <param name="startIndex">A position in the array/list where the writing starts.</param>
            <param name="count">The number of integers to write to the stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para>
            </param>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt64s(System.IO.Stream,System.Int64[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Writes an array of System.Int64 integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">An array of System.Int64 integers.</param>
            <param name="startIndex">A position in the array/list where the writing starts.</param>
            <param name="count">The number of integers to write to the stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para></param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt64s(System.IO.Stream,System.Collections.Generic.IList{System.Int64},System.Int32,System.Int32)">
            <summary>
            Writes a list of System.Int64 integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">A list of System.Int64 integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
            <param name="count">The number of integers to be written into the current stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para></param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt64s(System.IO.Stream,System.Collections.Generic.IList{System.Int64},System.Int32,System.Int32,System.Byte[])">
            <summary>
            Writes a list of System.Int64 integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">A list of System.Int64 integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
            <param name="count">The number of integers to be written into the current stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para></param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt64s(System.IO.Stream,System.Int64[],System.Int32)">
            <summary>
            Writes an array of System.Int64 integers to the current stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">An array of System.Int64 integers.</param>
            <param name="startIndex">A position in the array where the writing starts.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt64s(System.IO.Stream,System.Int64[],System.Byte[],System.Int32)">
            <summary>
            Writes a list of System.Int64 integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">An array of System.Int64 integers.</param>
            <param name="startIndex">A position in the array where the writing starts.</param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt64s(System.IO.Stream,System.Collections.Generic.IList{System.Int64},System.Int32)">
            <summary>
            Writes a list of System.Int64 integers to the current stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">A list of System.Int64 integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt64s(System.IO.Stream,System.Collections.Generic.IList{System.Int64},System.Byte[],System.Int32)">
            <summary>
            Writes a list of System.Int64 integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">A list of System.Int64 integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadInt64s(System.IO.Stream,System.Int32)">
            <summary>
            Reads a System.Int64 integer array from this stream.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="length">The length of the array.</param>
            <returns>A System.Int64 integer array read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadInt64s(System.IO.Stream,System.Int32,System.Byte[])">
            <summary>
            Reads a System.Int64 integer array from this stream using the specified buffer.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="length">The length of the array.</param>
            <param name="buffer">A byte array used to temporarily store data read from the stream.</param>
            <returns>A System.Int64 integer array read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt64Array(System.IO.Stream,System.Int64[],System.Boolean)">
            <summary>
            Writes an array of System.Int64 integers to the current stream. You may write an empty array or a <c>null</c> reference.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">The byte array to write.</param>
            <param name="validityCheck">Indicates whether to write a check code before the byte array. This check code will help detect corrupted data.</param>
            <returns>The number of bytes actually written to the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt64Array(System.IO.Stream,System.Int64[],System.Byte[],System.Boolean)">
            <summary>
            Writes an array of System.Int64 integers to the current stream using the specified buffer. You may write an empty array or a <c>null</c> reference.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">The byte array to write.</param>
            <param name="validityCheck">Indicates whether to write a check code before the byte array. This check code will help detect corrupted data.</param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
            <returns>The number of bytes actually written to the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadInt64Array(System.IO.Stream,System.Boolean)">
            <summary>
            Reads a System.Int64 integer array from this stream. The method does not require an argument specifying the length of the array; <seealso cref="M:System.IO.StreamEx.ReadInt64s(System.IO.Stream,System.Int32)"/>.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to prevent data corruption; otherwise, set this <c>false</c>.</param>
            <returns>
            The System.Int64 array read from the stream.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.ReadInt64Array(System.IO.Stream,System.Byte[],System.Boolean)">
            <summary>
            Reads a System.Int64 integer array from this stream. The method does not require an argument specifying the length of the array; <seealso cref="M:System.IO.StreamEx.ReadInt64s(System.IO.Stream,System.Int32)"/>.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to prevent data corruption; otherwise, set this <c>false</c>.</param>
            <param name="buffer">A byte array used to temporarily store data read from the stream.</param>
            <returns>
            The System.Int64 array read from the stream.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.ReadInt64ArrayToBuffer(System.IO.Stream,System.Byte[],System.Boolean)">
            <summary>
            Reads a System.Int64 integer array from this stream into the specified buffer. This method avoids an additional data copy to enchance performance.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to prevent data corruption; otherwise, set this <c>false</c>.</param>
            <param name="buffer">A byte array used to store data read from the stream. You may later get a Int64 pointer of this array for fast iteration.</param>
            <returns>
            true if the array read from the stream is not empty; otherwise, false.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt64(System.IO.Stream,System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value to the stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The <see cref="T:System.Int64"/> value.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteNullableInt64(System.IO.Stream,System.Nullable{System.Int64})">
            <summary>
            Writes the nullable int64.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The nullable <see cref="T:System.Int64"/> value.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Throws when <paramref name="value"/> is equal to <see cref="F:System.Int64.MinValue"/>.</exception>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt64(System.IO.Stream,System.Int64,System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Int64"/> value to the stream using the specified buffer. Use this method if performance is critical.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The <see cref="T:System.Int64"/> value.</param>
            <param name="buffer">A byte array used to temporarily store the <paramref name="value"/>.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt64(System.IO.Stream,System.Int64,System.Int32)">
            <summary>
            Writes a specified number of rightmost bytes of the <see cref="T:System.Int64"/> value to the stream.
            <para>** For example, the rightmost 3 bytes of integer 111 is 111, 0, 0.</para>
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The <see cref="T:System.Int64"/> value.</param>
            <param name="size">The number of bytes to write to the stream.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Raises when the value of <paramref name="size"/> is larger than 8 or smaller than 1.</exception>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt64(System.IO.Stream,System.Int64,System.Byte[],System.Int32)">
            <summary>
            Writes a specified number of rightmost bytes of the <see cref="T:System.Int64"/> value to the stream using the specified buffer. Use this method if performance is critical.
            <para>** For example, the rightmost 3 bytes of integer 111 is 111, 0, 0.</para>
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The <see cref="T:System.Int64"/> value.</param>
            <param name="buffer">A byte array used to temporarily store the <paramref name="value"/>.</param>
            <param name="size">The number of bytes to write to the stream.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Raises when the value of <paramref name="size" /> is larger than 8 or smaller than 1.</exception>
        </member>
        <member name="M:System.IO.StreamEx.ReadInt64(System.IO.Stream)">
            <summary>
            Reads a <see cref="T:System.Int64"/> value from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <returns>The <see cref="T:System.Int64"/> value.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadNullableInt64(System.IO.Stream)">
            <summary>
            Reads a nullable <see cref="T:System.Int64"/> value from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <returns>The nullable <see cref="T:System.Int64"/> value.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadInt64(System.IO.Stream,System.Byte[])">
            <summary>
            Reads a <see cref="T:System.Int64"/> value from the stream using the specified buffer.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="buffer">A byte array used to temporarily store the bytes read.</param>
            <returns>
            The <see cref="T:System.Int64"/> value.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises when the number of bytes actually read from stream is not 8.</exception>
        </member>
        <member name="M:System.IO.StreamEx.ReadInt64(System.IO.Stream,System.Int32)">
            <summary>
            Reads a specified number of bytes from the stream and converts it to a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="size">The number of byte to read.</param>
            <returns>The <see cref="T:System.Int64"/> value converted from the bytes read.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadInt64(System.IO.Stream,System.Byte[],System.Int32)">
            <summary>
            Reads a specified number of bytes from the stream, using the specified buffer, and converts it to a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="buffer">A byte array used to temporarily store the bytes read.</param>
            <param name="size">The number of byte to read.</param>
            <returns>
            The <see cref="T:System.Int64"/> value converted from the bytes read.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Raises when the number of bytes actually read from stream is not 8.</exception>
            <exception cref="T:System.IO.InvalidDataException">Raises when the number of bytes actually read from stream does not equal <paramref name="size"/>.</exception>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt64(System.IO.Stream,System.UInt64)">
            <summary>
            Writes a System.UInt64 value to the stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The System.UInt64 value.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt64(System.IO.Stream,System.UInt64,System.Byte[])">
            <summary>
            Writes a System.UInt64 value to the stream using the specified buffer. Use this method if performance is critical.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The System.UInt64 value.</param>
            <param name="buffer">A byte array used to temporarily store the <paramref name="value"/>.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt64(System.IO.Stream,System.UInt64,System.Int32)">
            <summary>
            Writes a specified number of rightmost bytes of the System.UInt64 value to the stream.
            <para>** For example, the rightmost 3 bytes of integer 111 is 111, 0, 0.</para>
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The System.UInt64 value.</param>
            <param name="size">The number of bytes to write to the stream.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Raises when the value of <paramref name="size"/> is larger than 8 or smaller than 1.</exception>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt64(System.IO.Stream,System.UInt64,System.Byte[],System.Int32)">
            <summary>
            Writes a specified number of rightmost bytes of the System.UInt64 value to the stream using the specified buffer. Use this method if performance is critical.
            <para>** For example, the rightmost 3 bytes of integer 111 is 111, 0, 0.</para>
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The System.UInt64 value.</param>
            <param name="buffer">A byte array used to temporarily store the <paramref name="value"/>.</param>
            <param name="size">The number of bytes to write to the stream.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Raises when the value of <paramref name="size" /> is larger than 8 or smaller than 1.</exception>
        </member>
        <member name="M:System.IO.StreamEx.ReadUInt64(System.IO.Stream)">
            <summary>
            Reads a System.UInt64 value from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <returns>The System.UInt64 value.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadUInt64(System.IO.Stream,System.Byte[])">
            <summary>
            Reads a System.UInt64 value from the stream using the specified buffer.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="buffer">A byte array used to temporarily store the bytes read.</param>
            <returns>
            The System.UInt64 value.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises when the number of bytes actually read from stream is not 8.</exception>
        </member>
        <member name="M:System.IO.StreamEx.ReadUInt64(System.IO.Stream,System.Int32)">
            <summary>
            Reads a specified number of bytes from the stream and converts it to a System.UInt64 value.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="size">The number of byte to read.</param>
            <returns>The System.UInt64 value converted from the bytes read.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadUInt64(System.IO.Stream,System.Byte[],System.Int32)">
            <summary>
            Reads a specified number of bytes from the stream, using the specified buffer, and converts it to a System.UInt64 value.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="buffer">A byte array used to temporarily store the bytes read.</param>
            <param name="size">The number of byte to read.</param>
            <returns>
            The System.UInt64 value converted from the bytes read.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Raises when the number of bytes actually read from stream is not 8.</exception>
            <exception cref="T:System.IO.InvalidDataException">Raises when the number of bytes actually read from stream does not equal <paramref name="size"/>.</exception>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt56(System.IO.Stream,System.Int64)">
            <summary>
            Writes the rightmost 7 bytes of the System.UInt64 value to the stream.
            <para>** For example, the rightmost 3 bytes of integer 111 is 111, 0, 0.</para>
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The System.UInt64 value.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt56(System.IO.Stream,System.Int64,System.Byte[])">
            <summary>
            Writes the rightmost 7 bytes of the System.UInt64 value to the stream using the specified buffer. Use this method if performance is critical.
            <para>** For example, the rightmost 3 bytes of integer 111 is 111, 0, 0.</para>
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The System.UInt64 value.</param>
            <param name="buffer">A byte array used to temporarily store the <paramref name="value"/>.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt56(System.IO.Stream,System.UInt64)">
            <summary>
            Writes the rightmost 7 bytes of the System.UInt64 value to the stream.
            <para>** For example, the rightmost 3 bytes of integer 111 is 111, 0, 0.</para>
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The System.UInt64 value.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt56(System.IO.Stream,System.UInt64,System.Byte[])">
            <summary>
            Writes the rightmost 7 bytes of the System.UInt64 value to the stream using the specified buffer. Use this method if performance is critical.
            <para>** For example, the rightmost 3 bytes of UInteger 111 is 111, 0, 0.</para>
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The System.UInt64 value.</param>
            <param name="buffer">A byte array used to temporarily store the <paramref name="value"/>.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadInt56(System.IO.Stream)">
            <summary>
            Reads 6 bytes from the stream and converts it to a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="stream">The stream.</param>
            <returns> The <see cref="T:System.Int64"/> value converted from the bytes read.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadInt56(System.IO.Stream,System.Byte[])">
            <summary>
            Reads 6 bytes from the stream, using the specified buffer, and converts it to a System.UInt32 value.
            </summary>
            <param name="stream">The stream.</param>
            <param name="buffer">A byte array, of size no smaller than 8, used to temporarily store the bytes read.</param>
            <returns>
            The <see cref="T:System.Int64"/> value converted from the bytes read.
            </returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadUInt56(System.IO.Stream)">
            <summary>
            Reads 6 bytes from the stream and converts it to a System.UInt64 value.
            </summary>
            <param name="stream">The stream.</param>
            <returns> The System.UInt64 value converted from the bytes read.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadUInt56(System.IO.Stream,System.Byte[])">
            <summary>
            Reads 6 bytes from the stream, using the specified buffer, and converts it to a System.UUInt32 value.
            </summary>
            <param name="stream">The stream.</param>
            <param name="buffer">A byte array, of size no smaller than 8, used to temporarily store the bytes read.</param>
            <returns>
            The System.UInt64 value converted from the bytes read.
            </returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt48(System.IO.Stream,System.Int64)">
            <summary>
            Writes the rightmost 6 bytes of the System.UInt64 value to the stream.
            <para>** For example, the rightmost 3 bytes of integer 111 is 111, 0, 0.</para>
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The System.UInt64 value.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt48(System.IO.Stream,System.Int64,System.Byte[])">
            <summary>
            Writes the rightmost 6 bytes of the System.UInt64 value to the stream using the specified buffer. Use this method if performance is critical.
            <para>** For example, the rightmost 3 bytes of integer 111 is 111, 0, 0.</para>
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The System.UInt64 value.</param>
            <param name="buffer">A byte array used to temporarily store the <paramref name="value"/>.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt48(System.IO.Stream,System.UInt64)">
            <summary>
            Writes the rightmost 6 bytes of the System.UInt64 value to the stream.
            <para>** For example, the rightmost 3 bytes of integer 111 is 111, 0, 0.</para>
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The System.UInt64 value.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt48(System.IO.Stream,System.UInt64,System.Byte[])">
            <summary>
            Writes the rightmost 6 bytes of the System.UInt64 value to the stream using the specified buffer. Use this method if performance is critical.
            <para>** For example, the rightmost 3 bytes of UInteger 111 is 111, 0, 0.</para>
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The System.UInt64 value.</param>
            <param name="buffer">A byte array used to temporarily store the <paramref name="value"/>.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadInt48(System.IO.Stream)">
            <summary>
            Reads 6 bytes from the stream and converts it to a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="stream">The stream.</param>
            <returns> The <see cref="T:System.Int64"/> value converted from the bytes read.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadInt48(System.IO.Stream,System.Byte[])">
            <summary>
            Reads 6 bytes from the stream, using the specified buffer, and converts it to a System.UInt32 value.
            </summary>
            <param name="stream">The stream.</param>
            <param name="buffer">A byte array, of size no smaller than 8, used to temporarily store the bytes read.</param>
            <returns>
            The <see cref="T:System.Int64"/> value converted from the bytes read.
            </returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadUInt48(System.IO.Stream)">
            <summary>
            Reads 6 bytes from the stream and converts it to a System.UInt64 value.
            </summary>
            <param name="stream">The stream.</param>
            <returns> The System.UInt64 value converted from the bytes read.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadUInt48(System.IO.Stream,System.Byte[])">
            <summary>
            Reads 6 bytes from the stream, using the specified buffer, and converts it to a System.UInt64 value.
            </summary>
            <param name="stream">The stream.</param>
            <param name="buffer">A byte array, of size no smaller than 8, used to temporarily store the bytes read.</param>
            <returns>
            The System.UInt64 value converted from the bytes read.
            </returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt40(System.IO.Stream,System.Int64)">
            <summary>
            Writes the rightmost 5 bytes of the System.UInt64 value to the stream.
            <para>** For example, the rightmost 3 bytes of integer 111 is 111, 0, 0.</para>
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The System.UInt64 value.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteInt40(System.IO.Stream,System.Int64,System.Byte[])">
            <summary>
            Writes the rightmost 5 bytes of the System.UInt64 value to the stream using the specified buffer. Use this method if performance is critical.
            <para>** For example, the rightmost 3 bytes of integer 111 is 111, 0, 0.</para>
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The System.UInt64 value.</param>
            <param name="buffer">A byte array used to temporarily store the <paramref name="value"/>.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt40(System.IO.Stream,System.UInt64)">
            <summary>
            Writes the rightmost 5 bytes of the System.UInt64 value to the stream.
            <para>** For example, the rightmost 3 bytes of integer 111 is 111, 0, 0.</para>
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The System.UInt64 value.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt40(System.IO.Stream,System.UInt64,System.Byte[])">
            <summary>
            Writes the rightmost 5 bytes of the System.UInt64 value to the stream using the specified buffer. Use this method if performance is critical.
            <para>** For example, the rightmost 3 bytes of UInteger 111 is 111, 0, 0.</para>
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="value">The System.UInt64 value.</param>
            <param name="buffer">A byte array used to temporarily store the <paramref name="value"/>.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadInt40(System.IO.Stream)">
            <summary>
            Reads 5 bytes from the stream and converts it to a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="stream">The stream.</param>
            <returns> The <see cref="T:System.Int64"/> value converted from the bytes read.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadInt40(System.IO.Stream,System.Byte[])">
            <summary>
            Reads 5 bytes from the stream, using the specified buffer, and converts it to a System.UInt32 value.
            </summary>
            <param name="stream">The stream.</param>
            <param name="buffer">A byte array, of size no smaller than 8, used to temporarily store the bytes read.</param>
            <returns>
            The <see cref="T:System.Int64"/> value converted from the bytes read.
            </returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadUInt40(System.IO.Stream)">
            <summary>
            Reads 5 bytes from the stream and converts it to a System.UInt64 value.
            </summary>
            <param name="stream">The stream.</param>
            <returns> The System.UInt64 value converted from the bytes read.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadUInt40(System.IO.Stream,System.Byte[])">
            <summary>
            Reads 5 bytes from the stream, using the specified buffer, and converts it to a System.UInt64 value.
            </summary>
            <param name="stream">The stream.</param>
            <param name="buffer">A byte array, of size no smaller than 8, used to temporarily store the bytes read.</param>
            <returns>
            The System.UInt64 value converted from the bytes read.
            </returns>
        </member>
        <member name="M:System.IO.StreamEx.IterBooleanBooleanDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Boolean"/>-<see cref="T:System.Boolean"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterBooleanBooleanTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterBooleanBooleanTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Boolean"/>-<see cref="T:System.Boolean"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterByteBooleanDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Byte"/>-<see cref="T:System.Boolean"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterByteBooleanTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterByteBooleanTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Byte"/>-<see cref="T:System.Boolean"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterSByteBooleanDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.SByte"/>-<see cref="T:System.Boolean"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterSByteBooleanTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterSByteBooleanTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.SByte"/>-<see cref="T:System.Boolean"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt16BooleanDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int16"/>-<see cref="T:System.Boolean"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt16BooleanTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt16BooleanTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int16"/>-<see cref="T:System.Boolean"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt32BooleanDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int32"/>-<see cref="T:System.Boolean"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt32BooleanTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt32BooleanTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int32"/>-<see cref="T:System.Boolean"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt64BooleanDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int64"/>-<see cref="T:System.Boolean"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt64BooleanTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt64BooleanTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int64"/>-<see cref="T:System.Boolean"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt16BooleanDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt16"/>-<see cref="T:System.Boolean"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt16BooleanTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt16BooleanTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt16"/>-<see cref="T:System.Boolean"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt32BooleanDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt32"/>-<see cref="T:System.Boolean"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt32BooleanTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt32BooleanTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt32"/>-<see cref="T:System.Boolean"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt64BooleanDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt64"/>-<see cref="T:System.Boolean"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt64BooleanTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt64BooleanTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt64"/>-<see cref="T:System.Boolean"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterStringBooleanDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.String"/>-<see cref="T:System.Boolean"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterStringBooleanTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterStringBooleanTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.String"/>-<see cref="T:System.Boolean"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterDateTimeBooleanDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.DateTime"/>-<see cref="T:System.Boolean"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterDateTimeBooleanTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterDateTimeBooleanTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.DateTime"/>-<see cref="T:System.Boolean"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterBooleanByteDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Boolean"/>-<see cref="T:System.Byte"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterBooleanByteTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterBooleanByteTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Boolean"/>-<see cref="T:System.Byte"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterByteByteDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Byte"/>-<see cref="T:System.Byte"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterByteByteTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterByteByteTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Byte"/>-<see cref="T:System.Byte"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterSByteByteDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.SByte"/>-<see cref="T:System.Byte"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterSByteByteTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterSByteByteTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.SByte"/>-<see cref="T:System.Byte"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt16ByteDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int16"/>-<see cref="T:System.Byte"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt16ByteTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt16ByteTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int16"/>-<see cref="T:System.Byte"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt32ByteDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int32"/>-<see cref="T:System.Byte"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt32ByteTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt32ByteTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int32"/>-<see cref="T:System.Byte"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt64ByteDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int64"/>-<see cref="T:System.Byte"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt64ByteTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt64ByteTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int64"/>-<see cref="T:System.Byte"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt16ByteDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt16"/>-<see cref="T:System.Byte"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt16ByteTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt16ByteTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt16"/>-<see cref="T:System.Byte"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt32ByteDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt32"/>-<see cref="T:System.Byte"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt32ByteTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt32ByteTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt32"/>-<see cref="T:System.Byte"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt64ByteDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt64"/>-<see cref="T:System.Byte"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt64ByteTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt64ByteTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt64"/>-<see cref="T:System.Byte"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterStringByteDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.String"/>-<see cref="T:System.Byte"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterStringByteTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterStringByteTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.String"/>-<see cref="T:System.Byte"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterDateTimeByteDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.DateTime"/>-<see cref="T:System.Byte"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterDateTimeByteTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterDateTimeByteTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.DateTime"/>-<see cref="T:System.Byte"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterBooleanSByteDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Boolean"/>-<see cref="T:System.SByte"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterBooleanSByteTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterBooleanSByteTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Boolean"/>-<see cref="T:System.SByte"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterByteSByteDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Byte"/>-<see cref="T:System.SByte"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterByteSByteTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterByteSByteTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Byte"/>-<see cref="T:System.SByte"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterSByteSByteDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.SByte"/>-<see cref="T:System.SByte"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterSByteSByteTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterSByteSByteTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.SByte"/>-<see cref="T:System.SByte"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt16SByteDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int16"/>-<see cref="T:System.SByte"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt16SByteTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt16SByteTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int16"/>-<see cref="T:System.SByte"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt32SByteDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int32"/>-<see cref="T:System.SByte"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt32SByteTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt32SByteTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int32"/>-<see cref="T:System.SByte"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt64SByteDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int64"/>-<see cref="T:System.SByte"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt64SByteTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt64SByteTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int64"/>-<see cref="T:System.SByte"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt16SByteDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt16"/>-<see cref="T:System.SByte"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt16SByteTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt16SByteTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt16"/>-<see cref="T:System.SByte"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt32SByteDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt32"/>-<see cref="T:System.SByte"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt32SByteTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt32SByteTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt32"/>-<see cref="T:System.SByte"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt64SByteDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt64"/>-<see cref="T:System.SByte"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt64SByteTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt64SByteTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt64"/>-<see cref="T:System.SByte"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterStringSByteDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.String"/>-<see cref="T:System.SByte"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterStringSByteTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterStringSByteTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.String"/>-<see cref="T:System.SByte"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterDateTimeSByteDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.DateTime"/>-<see cref="T:System.SByte"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterDateTimeSByteTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterDateTimeSByteTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.DateTime"/>-<see cref="T:System.SByte"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterBooleanInt16DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Boolean"/>-<see cref="T:System.Int16"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterBooleanInt16Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterBooleanInt16Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Boolean"/>-<see cref="T:System.Int16"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterByteInt16DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Byte"/>-<see cref="T:System.Int16"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterByteInt16Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterByteInt16Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Byte"/>-<see cref="T:System.Int16"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterSByteInt16DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.SByte"/>-<see cref="T:System.Int16"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterSByteInt16Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterSByteInt16Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.SByte"/>-<see cref="T:System.Int16"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt16Int16DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int16"/>-<see cref="T:System.Int16"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt16Int16Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt16Int16Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int16"/>-<see cref="T:System.Int16"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt32Int16DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int32"/>-<see cref="T:System.Int16"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt32Int16Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt32Int16Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int32"/>-<see cref="T:System.Int16"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt64Int16DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int64"/>-<see cref="T:System.Int16"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt64Int16Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt64Int16Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int64"/>-<see cref="T:System.Int16"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt16Int16DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt16"/>-<see cref="T:System.Int16"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt16Int16Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt16Int16Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt16"/>-<see cref="T:System.Int16"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt32Int16DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt32"/>-<see cref="T:System.Int16"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt32Int16Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt32Int16Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt32"/>-<see cref="T:System.Int16"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt64Int16DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt64"/>-<see cref="T:System.Int16"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt64Int16Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt64Int16Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt64"/>-<see cref="T:System.Int16"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterStringInt16DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.String"/>-<see cref="T:System.Int16"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterStringInt16Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterStringInt16Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.String"/>-<see cref="T:System.Int16"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterDateTimeInt16DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.DateTime"/>-<see cref="T:System.Int16"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterDateTimeInt16Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterDateTimeInt16Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.DateTime"/>-<see cref="T:System.Int16"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterBooleanInt32DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Boolean"/>-<see cref="T:System.Int32"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterBooleanInt32Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterBooleanInt32Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Boolean"/>-<see cref="T:System.Int32"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterByteInt32DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Byte"/>-<see cref="T:System.Int32"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterByteInt32Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterByteInt32Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Byte"/>-<see cref="T:System.Int32"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterSByteInt32DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.SByte"/>-<see cref="T:System.Int32"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterSByteInt32Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterSByteInt32Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.SByte"/>-<see cref="T:System.Int32"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt16Int32DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int16"/>-<see cref="T:System.Int32"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt16Int32Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt16Int32Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int16"/>-<see cref="T:System.Int32"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt32Int32DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int32"/>-<see cref="T:System.Int32"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt32Int32Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt32Int32Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int32"/>-<see cref="T:System.Int32"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt64Int32DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int64"/>-<see cref="T:System.Int32"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt64Int32Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt64Int32Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int64"/>-<see cref="T:System.Int32"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt16Int32DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt16"/>-<see cref="T:System.Int32"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt16Int32Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt16Int32Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt16"/>-<see cref="T:System.Int32"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt32Int32DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt32"/>-<see cref="T:System.Int32"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt32Int32Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt32Int32Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt32"/>-<see cref="T:System.Int32"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt64Int32DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt64"/>-<see cref="T:System.Int32"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt64Int32Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt64Int32Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt64"/>-<see cref="T:System.Int32"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterStringInt32DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.String"/>-<see cref="T:System.Int32"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterStringInt32Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterStringInt32Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.String"/>-<see cref="T:System.Int32"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterDateTimeInt32DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.DateTime"/>-<see cref="T:System.Int32"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterDateTimeInt32Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterDateTimeInt32Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.DateTime"/>-<see cref="T:System.Int32"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterBooleanInt64DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Boolean"/>-<see cref="T:System.Int64"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterBooleanInt64Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterBooleanInt64Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Boolean"/>-<see cref="T:System.Int64"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterByteInt64DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Byte"/>-<see cref="T:System.Int64"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterByteInt64Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterByteInt64Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Byte"/>-<see cref="T:System.Int64"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterSByteInt64DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.SByte"/>-<see cref="T:System.Int64"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterSByteInt64Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterSByteInt64Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.SByte"/>-<see cref="T:System.Int64"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt16Int64DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int16"/>-<see cref="T:System.Int64"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt16Int64Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt16Int64Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int16"/>-<see cref="T:System.Int64"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt32Int64DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int32"/>-<see cref="T:System.Int64"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt32Int64Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt32Int64Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int32"/>-<see cref="T:System.Int64"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt64Int64DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int64"/>-<see cref="T:System.Int64"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt64Int64Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt64Int64Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int64"/>-<see cref="T:System.Int64"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt16Int64DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt16"/>-<see cref="T:System.Int64"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt16Int64Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt16Int64Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt16"/>-<see cref="T:System.Int64"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt32Int64DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt32"/>-<see cref="T:System.Int64"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt32Int64Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt32Int64Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt32"/>-<see cref="T:System.Int64"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt64Int64DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt64"/>-<see cref="T:System.Int64"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt64Int64Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt64Int64Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt64"/>-<see cref="T:System.Int64"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterStringInt64DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.String"/>-<see cref="T:System.Int64"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterStringInt64Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterStringInt64Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.String"/>-<see cref="T:System.Int64"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterDateTimeInt64DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.DateTime"/>-<see cref="T:System.Int64"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterDateTimeInt64Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterDateTimeInt64Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.DateTime"/>-<see cref="T:System.Int64"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterBooleanUInt16DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Boolean"/>-<see cref="T:System.UInt16"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterBooleanUInt16Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterBooleanUInt16Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Boolean"/>-<see cref="T:System.UInt16"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterByteUInt16DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Byte"/>-<see cref="T:System.UInt16"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterByteUInt16Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterByteUInt16Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Byte"/>-<see cref="T:System.UInt16"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterSByteUInt16DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.SByte"/>-<see cref="T:System.UInt16"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterSByteUInt16Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterSByteUInt16Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.SByte"/>-<see cref="T:System.UInt16"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt16UInt16DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int16"/>-<see cref="T:System.UInt16"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt16UInt16Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt16UInt16Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int16"/>-<see cref="T:System.UInt16"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt32UInt16DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int32"/>-<see cref="T:System.UInt16"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt32UInt16Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt32UInt16Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int32"/>-<see cref="T:System.UInt16"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt64UInt16DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int64"/>-<see cref="T:System.UInt16"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt64UInt16Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt64UInt16Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int64"/>-<see cref="T:System.UInt16"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt16UInt16DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt16"/>-<see cref="T:System.UInt16"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt16UInt16Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt16UInt16Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt16"/>-<see cref="T:System.UInt16"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt32UInt16DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt32"/>-<see cref="T:System.UInt16"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt32UInt16Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt32UInt16Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt32"/>-<see cref="T:System.UInt16"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt64UInt16DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt64"/>-<see cref="T:System.UInt16"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt64UInt16Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt64UInt16Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt64"/>-<see cref="T:System.UInt16"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterStringUInt16DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.String"/>-<see cref="T:System.UInt16"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterStringUInt16Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterStringUInt16Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.String"/>-<see cref="T:System.UInt16"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterDateTimeUInt16DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.DateTime"/>-<see cref="T:System.UInt16"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterDateTimeUInt16Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterDateTimeUInt16Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.DateTime"/>-<see cref="T:System.UInt16"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterBooleanUInt32DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Boolean"/>-<see cref="T:System.UInt32"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterBooleanUInt32Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterBooleanUInt32Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Boolean"/>-<see cref="T:System.UInt32"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterByteUInt32DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Byte"/>-<see cref="T:System.UInt32"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterByteUInt32Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterByteUInt32Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Byte"/>-<see cref="T:System.UInt32"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterSByteUInt32DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.SByte"/>-<see cref="T:System.UInt32"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterSByteUInt32Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterSByteUInt32Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.SByte"/>-<see cref="T:System.UInt32"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt16UInt32DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int16"/>-<see cref="T:System.UInt32"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt16UInt32Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt16UInt32Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int16"/>-<see cref="T:System.UInt32"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt32UInt32DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int32"/>-<see cref="T:System.UInt32"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt32UInt32Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt32UInt32Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int32"/>-<see cref="T:System.UInt32"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt64UInt32DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int64"/>-<see cref="T:System.UInt32"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt64UInt32Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt64UInt32Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int64"/>-<see cref="T:System.UInt32"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt16UInt32DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt16"/>-<see cref="T:System.UInt32"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt16UInt32Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt16UInt32Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt16"/>-<see cref="T:System.UInt32"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt32UInt32DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt32"/>-<see cref="T:System.UInt32"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt32UInt32Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt32UInt32Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt32"/>-<see cref="T:System.UInt32"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt64UInt32DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt64"/>-<see cref="T:System.UInt32"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt64UInt32Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt64UInt32Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt64"/>-<see cref="T:System.UInt32"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterStringUInt32DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.String"/>-<see cref="T:System.UInt32"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterStringUInt32Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterStringUInt32Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.String"/>-<see cref="T:System.UInt32"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterDateTimeUInt32DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.DateTime"/>-<see cref="T:System.UInt32"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterDateTimeUInt32Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterDateTimeUInt32Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.DateTime"/>-<see cref="T:System.UInt32"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterBooleanUInt64DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Boolean"/>-<see cref="T:System.UInt64"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterBooleanUInt64Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterBooleanUInt64Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Boolean"/>-<see cref="T:System.UInt64"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterByteUInt64DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Byte"/>-<see cref="T:System.UInt64"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterByteUInt64Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterByteUInt64Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Byte"/>-<see cref="T:System.UInt64"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterSByteUInt64DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.SByte"/>-<see cref="T:System.UInt64"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterSByteUInt64Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterSByteUInt64Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.SByte"/>-<see cref="T:System.UInt64"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt16UInt64DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int16"/>-<see cref="T:System.UInt64"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt16UInt64Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt16UInt64Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int16"/>-<see cref="T:System.UInt64"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt32UInt64DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int32"/>-<see cref="T:System.UInt64"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt32UInt64Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt32UInt64Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int32"/>-<see cref="T:System.UInt64"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt64UInt64DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int64"/>-<see cref="T:System.UInt64"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt64UInt64Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt64UInt64Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int64"/>-<see cref="T:System.UInt64"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt16UInt64DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt16"/>-<see cref="T:System.UInt64"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt16UInt64Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt16UInt64Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt16"/>-<see cref="T:System.UInt64"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt32UInt64DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt32"/>-<see cref="T:System.UInt64"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt32UInt64Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt32UInt64Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt32"/>-<see cref="T:System.UInt64"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt64UInt64DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt64"/>-<see cref="T:System.UInt64"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt64UInt64Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt64UInt64Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt64"/>-<see cref="T:System.UInt64"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterStringUInt64DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.String"/>-<see cref="T:System.UInt64"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterStringUInt64Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterStringUInt64Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.String"/>-<see cref="T:System.UInt64"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterDateTimeUInt64DictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.DateTime"/>-<see cref="T:System.UInt64"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterDateTimeUInt64Tuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterDateTimeUInt64Tuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.DateTime"/>-<see cref="T:System.UInt64"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterBooleanSingleDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Boolean"/>-<see cref="T:System.Single"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterBooleanSingleTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterBooleanSingleTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Boolean"/>-<see cref="T:System.Single"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterByteSingleDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Byte"/>-<see cref="T:System.Single"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterByteSingleTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterByteSingleTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Byte"/>-<see cref="T:System.Single"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterSByteSingleDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.SByte"/>-<see cref="T:System.Single"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterSByteSingleTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterSByteSingleTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.SByte"/>-<see cref="T:System.Single"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt16SingleDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int16"/>-<see cref="T:System.Single"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt16SingleTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt16SingleTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int16"/>-<see cref="T:System.Single"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt32SingleDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int32"/>-<see cref="T:System.Single"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt32SingleTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt32SingleTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int32"/>-<see cref="T:System.Single"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt64SingleDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int64"/>-<see cref="T:System.Single"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt64SingleTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt64SingleTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int64"/>-<see cref="T:System.Single"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt16SingleDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt16"/>-<see cref="T:System.Single"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt16SingleTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt16SingleTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt16"/>-<see cref="T:System.Single"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt32SingleDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt32"/>-<see cref="T:System.Single"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt32SingleTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt32SingleTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt32"/>-<see cref="T:System.Single"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt64SingleDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt64"/>-<see cref="T:System.Single"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt64SingleTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt64SingleTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt64"/>-<see cref="T:System.Single"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterStringSingleDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.String"/>-<see cref="T:System.Single"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterStringSingleTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterStringSingleTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.String"/>-<see cref="T:System.Single"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterDateTimeSingleDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.DateTime"/>-<see cref="T:System.Single"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterDateTimeSingleTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterDateTimeSingleTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.DateTime"/>-<see cref="T:System.Single"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterBooleanDoubleDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Boolean"/>-<see cref="T:System.Double"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterBooleanDoubleTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterBooleanDoubleTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Boolean"/>-<see cref="T:System.Double"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterByteDoubleDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Byte"/>-<see cref="T:System.Double"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterByteDoubleTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterByteDoubleTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Byte"/>-<see cref="T:System.Double"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterSByteDoubleDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.SByte"/>-<see cref="T:System.Double"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterSByteDoubleTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterSByteDoubleTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.SByte"/>-<see cref="T:System.Double"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt16DoubleDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int16"/>-<see cref="T:System.Double"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt16DoubleTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt16DoubleTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int16"/>-<see cref="T:System.Double"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt32DoubleDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int32"/>-<see cref="T:System.Double"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt32DoubleTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt32DoubleTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int32"/>-<see cref="T:System.Double"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt64DoubleDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int64"/>-<see cref="T:System.Double"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt64DoubleTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt64DoubleTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int64"/>-<see cref="T:System.Double"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt16DoubleDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt16"/>-<see cref="T:System.Double"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt16DoubleTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt16DoubleTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt16"/>-<see cref="T:System.Double"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt32DoubleDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt32"/>-<see cref="T:System.Double"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt32DoubleTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt32DoubleTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt32"/>-<see cref="T:System.Double"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt64DoubleDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt64"/>-<see cref="T:System.Double"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt64DoubleTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt64DoubleTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt64"/>-<see cref="T:System.Double"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterStringDoubleDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.String"/>-<see cref="T:System.Double"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterStringDoubleTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterStringDoubleTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.String"/>-<see cref="T:System.Double"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterDateTimeDoubleDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.DateTime"/>-<see cref="T:System.Double"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterDateTimeDoubleTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterDateTimeDoubleTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.DateTime"/>-<see cref="T:System.Double"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterBooleanStringDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Boolean"/>-<see cref="T:System.String"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterBooleanStringTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterBooleanStringTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Boolean"/>-<see cref="T:System.String"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterByteStringDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Byte"/>-<see cref="T:System.String"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterByteStringTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterByteStringTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Byte"/>-<see cref="T:System.String"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterSByteStringDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.SByte"/>-<see cref="T:System.String"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterSByteStringTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterSByteStringTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.SByte"/>-<see cref="T:System.String"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt16StringDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int16"/>-<see cref="T:System.String"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt16StringTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt16StringTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int16"/>-<see cref="T:System.String"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt32StringDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int32"/>-<see cref="T:System.String"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt32StringTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt32StringTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int32"/>-<see cref="T:System.String"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt64StringDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int64"/>-<see cref="T:System.String"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt64StringTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt64StringTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int64"/>-<see cref="T:System.String"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt16StringDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt16"/>-<see cref="T:System.String"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt16StringTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt16StringTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt16"/>-<see cref="T:System.String"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt32StringDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt32"/>-<see cref="T:System.String"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt32StringTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt32StringTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt32"/>-<see cref="T:System.String"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt64StringDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt64"/>-<see cref="T:System.String"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt64StringTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt64StringTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt64"/>-<see cref="T:System.String"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterStringStringDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.String"/>-<see cref="T:System.String"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterStringStringTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterStringStringTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.String"/>-<see cref="T:System.String"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterDateTimeStringDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.DateTime"/>-<see cref="T:System.String"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterDateTimeStringTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterDateTimeStringTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.DateTime"/>-<see cref="T:System.String"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterBooleanDateTimeDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Boolean"/>-<see cref="T:System.DateTime"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterBooleanDateTimeTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterBooleanDateTimeTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Boolean"/>-<see cref="T:System.DateTime"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterByteDateTimeDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Byte"/>-<see cref="T:System.DateTime"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterByteDateTimeTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterByteDateTimeTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Byte"/>-<see cref="T:System.DateTime"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterSByteDateTimeDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.SByte"/>-<see cref="T:System.DateTime"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterSByteDateTimeTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterSByteDateTimeTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.SByte"/>-<see cref="T:System.DateTime"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt16DateTimeDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int16"/>-<see cref="T:System.DateTime"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt16DateTimeTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt16DateTimeTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int16"/>-<see cref="T:System.DateTime"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt32DateTimeDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int32"/>-<see cref="T:System.DateTime"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt32DateTimeTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt32DateTimeTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int32"/>-<see cref="T:System.DateTime"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt64DateTimeDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int64"/>-<see cref="T:System.DateTime"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt64DateTimeTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt64DateTimeTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int64"/>-<see cref="T:System.DateTime"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt16DateTimeDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt16"/>-<see cref="T:System.DateTime"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt16DateTimeTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt16DateTimeTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt16"/>-<see cref="T:System.DateTime"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt32DateTimeDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt32"/>-<see cref="T:System.DateTime"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt32DateTimeTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt32DateTimeTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt32"/>-<see cref="T:System.DateTime"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt64DateTimeDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt64"/>-<see cref="T:System.DateTime"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt64DateTimeTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt64DateTimeTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt64"/>-<see cref="T:System.DateTime"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterStringDateTimeDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.String"/>-<see cref="T:System.DateTime"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterStringDateTimeTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterStringDateTimeTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.String"/>-<see cref="T:System.DateTime"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterDateTimeDateTimeDictPairs(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.DateTime"/>-<see cref="T:System.DateTime"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterDateTimeDateTimeTuples(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterDateTimeDateTimeTuples(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.DateTime"/>-<see cref="T:System.DateTime"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterBooleanBinarySavableDictPairs``1(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Boolean"/>-<see cref="T:System.IO.IBinarySavable"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterBooleanBinarySavableTuples``1(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterBooleanBinarySavableTuples``1(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Boolean"/>-<see cref="T:System.IO.IBinarySavable"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterByteBinarySavableDictPairs``1(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Byte"/>-<see cref="T:System.IO.IBinarySavable"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterByteBinarySavableTuples``1(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterByteBinarySavableTuples``1(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Byte"/>-<see cref="T:System.IO.IBinarySavable"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterSByteBinarySavableDictPairs``1(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.SByte"/>-<see cref="T:System.IO.IBinarySavable"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterSByteBinarySavableTuples``1(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterSByteBinarySavableTuples``1(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.SByte"/>-<see cref="T:System.IO.IBinarySavable"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt16BinarySavableDictPairs``1(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int16"/>-<see cref="T:System.IO.IBinarySavable"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt16BinarySavableTuples``1(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt16BinarySavableTuples``1(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int16"/>-<see cref="T:System.IO.IBinarySavable"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt32BinarySavableDictPairs``1(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int32"/>-<see cref="T:System.IO.IBinarySavable"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt32BinarySavableTuples``1(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt32BinarySavableTuples``1(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int32"/>-<see cref="T:System.IO.IBinarySavable"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt64BinarySavableDictPairs``1(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.Int64"/>-<see cref="T:System.IO.IBinarySavable"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterInt64BinarySavableTuples``1(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterInt64BinarySavableTuples``1(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.Int64"/>-<see cref="T:System.IO.IBinarySavable"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt16BinarySavableDictPairs``1(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt16"/>-<see cref="T:System.IO.IBinarySavable"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt16BinarySavableTuples``1(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt16BinarySavableTuples``1(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt16"/>-<see cref="T:System.IO.IBinarySavable"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt32BinarySavableDictPairs``1(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt32"/>-<see cref="T:System.IO.IBinarySavable"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt32BinarySavableTuples``1(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt32BinarySavableTuples``1(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt32"/>-<see cref="T:System.IO.IBinarySavable"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt64BinarySavableDictPairs``1(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.UInt64"/>-<see cref="T:System.IO.IBinarySavable"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterUInt64BinarySavableTuples``1(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterUInt64BinarySavableTuples``1(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.UInt64"/>-<see cref="T:System.IO.IBinarySavable"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterStringBinarySavableDictPairs``1(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.String"/>-<see cref="T:System.IO.IBinarySavable"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterStringBinarySavableTuples``1(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterStringBinarySavableTuples``1(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.String"/>-<see cref="T:System.IO.IBinarySavable"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterDateTimeBinarySavableDictPairs``1(System.IO.Stream,System.Boolean)">
            <summary>
            Iterates <see cref="T:System.DateTime"/>-<see cref="T:System.IO.IBinarySavable"/> tuples from the stream. There can be a data checking code and a count in the stream prior to all data pairs. To only read pairs, use <see cref="M:System.IO.StreamEx.IterDateTimeBinarySavableTuples``1(System.IO.Stream)" /> instead.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.IterDateTimeBinarySavableTuples``1(System.IO.Stream)">
            <summary>
            Iterates <see cref="T:System.DateTime"/>-<see cref="T:System.IO.IBinarySavable"/> key-value tuples from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.Byte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.Byte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.Byte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.Byte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.Byte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.Byte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.Byte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.Byte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.Byte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.Byte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.Byte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.Byte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.Byte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.Byte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.Byte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.Byte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.Byte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.Byte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.Byte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.Byte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.Byte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.Byte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.Byte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.Byte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.Byte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.Byte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.Boolean},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.Boolean},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.Boolean},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.Boolean},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.Boolean},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.Boolean},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.Boolean},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.Boolean},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.Boolean},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.Boolean},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.Boolean},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.Boolean},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.Boolean},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.Boolean},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.Boolean},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.Boolean},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.Boolean},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.Boolean},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.Boolean},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.Boolean},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.Boolean},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.Boolean},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.Boolean},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.Boolean},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.Boolean},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.Boolean},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.SByte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.SByte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.SByte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.SByte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.SByte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.SByte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.SByte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.SByte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.SByte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.SByte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.SByte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.SByte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.SByte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.SByte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.SByte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.SByte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.SByte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.SByte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.SByte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.SByte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.SByte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.SByte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.SByte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.SByte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.SByte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.SByte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.Int16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.Int16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.Int16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.Int16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.Int16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.Int16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.Int16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.Int16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.Int16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.Int16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.Int16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.Int16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.Int16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.Int16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.Int16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.Int16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.Int16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.Int16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.Int16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.Int16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.Int16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.Int16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.Int16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.Int16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.Int16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.Int16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.UInt16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.UInt16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.UInt16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.UInt16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.UInt16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.UInt16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.UInt16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.UInt16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.UInt16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.UInt16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.UInt16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.UInt16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.UInt16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.UInt16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.UInt16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.UInt16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.UInt16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.UInt16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.UInt16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.UInt16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.UInt16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.UInt16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.UInt16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.UInt16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.UInt16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.UInt16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.Int32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.Int32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.Int32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.Int32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.Int32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.Int32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.Int32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.Int32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.Int32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.Int32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.Int32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.Int32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.Int32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.Int32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.Int32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.Int32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.Int32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.Int32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.Int32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.Int32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.Int32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.Int32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.Int32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.Int32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.Int32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.Int32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.UInt32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.UInt32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.UInt32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.UInt32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.UInt32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.UInt32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.UInt32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.UInt32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.UInt32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.UInt32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.UInt32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.UInt32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.UInt32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.UInt32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.UInt32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.UInt32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.UInt32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.UInt32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.UInt32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.UInt32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.UInt32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.UInt32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.UInt32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.UInt32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.UInt32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.UInt32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.Int64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.Int64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.Int64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.Int64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.Int64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.Int64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.Int64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.Int64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.Int64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.Int64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.Int64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.Int64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.Int64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.Int64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.Int64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.Int64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.Int64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.Int64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.Int64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.Int64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.Int64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.Int64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.Int64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.Int64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.Int64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.Int64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.UInt64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.UInt64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.UInt64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.UInt64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.UInt64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.UInt64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.UInt64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.UInt64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.UInt64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.UInt64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.UInt64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.UInt64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.UInt64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.UInt64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.UInt64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.UInt64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.UInt64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.UInt64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.UInt64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.UInt64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.UInt64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.UInt64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.UInt64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.UInt64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.UInt64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.UInt64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.Double},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.Double},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.Double},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.Double},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.Double},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.Double},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.Double},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.Double},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.Double},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.Double},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.Double},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.Double},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.Double},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.Double},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.Double},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.Double},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.Double},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.Double},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.Double},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.Double},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.Double},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.Double},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.Double},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.Double},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.Double},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.Double},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.Single},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.Single},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.Single},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.Single},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.Single},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.Single},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.Single},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.Single},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.Single},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.Single},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.Single},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.Single},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.Single},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.Single},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.Single},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.Single},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.Single},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.Single},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.Single},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.Single},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.Single},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.Single},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.Single},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.Single},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.Single},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.Single},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.DateTime},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.DateTime},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.DateTime},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.DateTime},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.DateTime},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.DateTime},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.DateTime},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.DateTime},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.DateTime},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.DateTime},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.DateTime},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.DateTime},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.DateTime},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.DateTime},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.DateTime},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.DateTime},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.DateTime},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.DateTime},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.DateTime},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.DateTime},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.DateTime},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.DateTime},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.DateTime},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.DateTime},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.DateTime},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.DateTime},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.String},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.String},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.String},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.String},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.String},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.String},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.String},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.String},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.String},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.String},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.String},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.String},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.String},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.String},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.String},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.String},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.String},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.String},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.String},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.String},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.String},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.String},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.String},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.String},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict``1(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,``0},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd``1(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,``0},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict``1(System.IO.Stream,System.Collections.Generic.IDictionary{``0,System.Byte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd``1(System.IO.Stream,System.Collections.Generic.IDictionary{``0,System.Byte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict``1(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,``0},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd``1(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,``0},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict``1(System.IO.Stream,System.Collections.Generic.IDictionary{``0,System.Boolean},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd``1(System.IO.Stream,System.Collections.Generic.IDictionary{``0,System.Boolean},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict``1(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,``0},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd``1(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,``0},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict``1(System.IO.Stream,System.Collections.Generic.IDictionary{``0,System.SByte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd``1(System.IO.Stream,System.Collections.Generic.IDictionary{``0,System.SByte},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict``1(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,``0},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd``1(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,``0},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict``1(System.IO.Stream,System.Collections.Generic.IDictionary{``0,System.Int16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd``1(System.IO.Stream,System.Collections.Generic.IDictionary{``0,System.Int16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict``1(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,``0},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd``1(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,``0},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict``1(System.IO.Stream,System.Collections.Generic.IDictionary{``0,System.UInt16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd``1(System.IO.Stream,System.Collections.Generic.IDictionary{``0,System.UInt16},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict``1(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,``0},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd``1(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,``0},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict``1(System.IO.Stream,System.Collections.Generic.IDictionary{``0,System.Int32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd``1(System.IO.Stream,System.Collections.Generic.IDictionary{``0,System.Int32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict``1(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,``0},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd``1(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,``0},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict``1(System.IO.Stream,System.Collections.Generic.IDictionary{``0,System.UInt32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd``1(System.IO.Stream,System.Collections.Generic.IDictionary{``0,System.UInt32},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict``1(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,``0},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd``1(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,``0},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict``1(System.IO.Stream,System.Collections.Generic.IDictionary{``0,System.Int64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd``1(System.IO.Stream,System.Collections.Generic.IDictionary{``0,System.Int64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict``1(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,``0},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd``1(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,``0},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict``1(System.IO.Stream,System.Collections.Generic.IDictionary{``0,System.UInt64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd``1(System.IO.Stream,System.Collections.Generic.IDictionary{``0,System.UInt64},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict``1(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,``0},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd``1(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,``0},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict``1(System.IO.Stream,System.Collections.Generic.IDictionary{``0,System.Double},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd``1(System.IO.Stream,System.Collections.Generic.IDictionary{``0,System.Double},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict``1(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,``0},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd``1(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,``0},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict``1(System.IO.Stream,System.Collections.Generic.IDictionary{``0,System.Single},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd``1(System.IO.Stream,System.Collections.Generic.IDictionary{``0,System.Single},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict``1(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,``0},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd``1(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,``0},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict``1(System.IO.Stream,System.Collections.Generic.IDictionary{``0,System.DateTime},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd``1(System.IO.Stream,System.Collections.Generic.IDictionary{``0,System.DateTime},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict``1(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,``0},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd``1(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,``0},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDict``1(System.IO.Stream,System.Collections.Generic.IDictionary{``0,System.String},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys raise exception.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadDictTryAdd``1(System.IO.Stream,System.Collections.Generic.IDictionary{``0,System.String},System.Boolean)">
            <summary>
            Reads key-value pairs from the stream and adds them to the specified dictionary. Duplicate keys and their values are ignored.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="outputDict">The key-value pairs read from the stream are added to this dictionary.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is read from the stream before all actual data. If this code is not the expected value, then the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteSBytes(System.IO.Stream,System.SByte[],System.Int32,System.Int32)">
            <summary>
            Writes an array of System.SByte integers to the current stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">An array of System.SByte integers.</param>
            <param name="startIndex">A position in the array/list where the writing starts.</param>
            <param name="count">The number of integers to write to the stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para>
            </param>
        </member>
        <member name="M:System.IO.StreamEx.WriteSBytes(System.IO.Stream,System.SByte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Writes an array of System.SByte integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">An array of System.SByte integers.</param>
            <param name="startIndex">A position in the array/list where the writing starts.</param>
            <param name="count">The number of integers to write to the stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para></param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteSBytes(System.IO.Stream,System.Collections.Generic.IList{System.SByte},System.Int32,System.Int32)">
            <summary>
            Writes a list of System.SByte integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">A list of System.SByte integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
            <param name="count">The number of integers to be written into the current stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para></param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteSBytes(System.IO.Stream,System.Collections.Generic.IList{System.SByte},System.Int32,System.Int32,System.Byte[])">
            <summary>
            Writes a list of System.SByte integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">A list of System.SByte integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
            <param name="count">The number of integers to be written into the current stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para></param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteSBytes(System.IO.Stream,System.SByte[],System.Int32)">
            <summary>
            Writes an array of System.SByte integers to the current stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">An array of System.SByte integers.</param>
            <param name="startIndex">A position in the array where the writing starts.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteSBytes(System.IO.Stream,System.SByte[],System.Byte[],System.Int32)">
            <summary>
            Writes a list of System.SByte integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">An array of System.SByte integers.</param>
            <param name="startIndex">A position in the array where the writing starts.</param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteSBytes(System.IO.Stream,System.Collections.Generic.IList{System.SByte},System.Int32)">
            <summary>
            Writes a list of System.SByte integers to the current stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">A list of System.SByte integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteSBytes(System.IO.Stream,System.Collections.Generic.IList{System.SByte},System.Byte[],System.Int32)">
            <summary>
            Writes a list of System.SByte integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">A list of System.SByte integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadSBytes(System.IO.Stream,System.Int32)">
            <summary>
            Reads a System.SByte integer array from this stream.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="length">The length of the array.</param>
            <returns>A System.SByte integer array read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadSBytes(System.IO.Stream,System.Int32,System.Byte[])">
            <summary>
            Reads a System.SByte integer array from this stream using the specified buffer.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="length">The length of the array.</param>
            <param name="buffer">A byte array used to temporarily store data read from the stream.</param>
            <returns>A System.SByte integer array read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteSByteArray(System.IO.Stream,System.SByte[],System.Boolean)">
            <summary>
            Writes an array of System.SByte integers to the current stream. You may write an empty array or a <c>null</c> reference.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">The byte array to write.</param>
            <param name="validityCheck">Indicates whether to write a check code before the byte array. This check code will help detect corrupted data.</param>
            <returns>The number of bytes actually written to the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteSByteArray(System.IO.Stream,System.SByte[],System.Byte[],System.Boolean)">
            <summary>
            Writes an array of System.SByte integers to the current stream using the specified buffer. You may write an empty array or a <c>null</c> reference.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">The byte array to write.</param>
            <param name="validityCheck">Indicates whether to write a check code before the byte array. This check code will help detect corrupted data.</param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
            <returns>The number of bytes actually written to the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadSByteArray(System.IO.Stream,System.Boolean)">
            <summary>
            Reads a System.SByte integer array from this stream. The method does not require an argument specifying the length of the array; <seealso cref="M:System.IO.StreamEx.ReadSBytes(System.IO.Stream,System.Int32)"/>.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to prevent data corruption; otherwise, set this <c>false</c>.</param>
            <returns>
            The System.SByte array read from the stream.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.ReadSByteArray(System.IO.Stream,System.Byte[],System.Boolean)">
            <summary>
            Reads a System.SByte integer array from this stream. The method does not require an argument specifying the length of the array; <seealso cref="M:System.IO.StreamEx.ReadSBytes(System.IO.Stream,System.Int32)"/>.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to prevent data corruption; otherwise, set this <c>false</c>.</param>
            <param name="buffer">A byte array used to temporarily store data read from the stream.</param>
            <returns>
            The System.SByte array read from the stream.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.ReadSByteArrayToBuffer(System.IO.Stream,System.Byte[],System.Boolean)">
            <summary>
            Reads a System.SByte integer array from this stream into the specified buffer. This method avoids an additional data copy to enchance performance.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to prevent data corruption; otherwise, set this <c>false</c>.</param>
            <param name="buffer">A byte array used to store data read from the stream. You may later get a SByte pointer of this array for fast iteration.</param>
            <returns>
            true if the array read from the stream is not empty; otherwise, false.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.SkipBoolean(System.IO.Stream)">
            <summary>
            Skips a <see cref="T:System.Boolean"/> value (seeks forward 1 bytes) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
        </member>
        <member name="M:System.IO.StreamEx.BackBoolean(System.IO.Stream)">
            <summary>
            Seeks backward a <see cref="T:System.Boolean"/> value (seeks backward 1 byte) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
        </member>
        <member name="M:System.IO.StreamEx.SkipBoolean(System.IO.Stream,System.Int32)">
            <summary>
            Skips <see cref="T:System.Boolean"/> values (seeks forward 1 bytes) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
            <param name="count">The number of values to skip.</param>
        </member>
        <member name="M:System.IO.StreamEx.BackBoolean(System.IO.Stream,System.Int32)">
            <summary>
            Seeks backward <see cref="T:System.Boolean"/> values (seeks backward 1 byte) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
            <param name="count">The number of values to skip.</param>
        </member>
        <member name="M:System.IO.StreamEx.SkipByte(System.IO.Stream)">
            <summary>
            Skips a <see cref="T:System.Byte"/> value (seeks forward 1 bytes) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
        </member>
        <member name="M:System.IO.StreamEx.BackByte(System.IO.Stream)">
            <summary>
            Seeks backward a <see cref="T:System.Byte"/> value (seeks backward 1 byte) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
        </member>
        <member name="M:System.IO.StreamEx.SkipByte(System.IO.Stream,System.Int32)">
            <summary>
            Skips <see cref="T:System.Byte"/> values (seeks forward 1 bytes) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
            <param name="count">The number of values to skip.</param>
        </member>
        <member name="M:System.IO.StreamEx.BackByte(System.IO.Stream,System.Int32)">
            <summary>
            Seeks backward <see cref="T:System.Byte"/> values (seeks backward 1 byte) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
            <param name="count">The number of values to skip.</param>
        </member>
        <member name="M:System.IO.StreamEx.SkipSByte(System.IO.Stream)">
            <summary>
            Skips a <see cref="T:System.SByte"/> value (seeks forward 1 bytes) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
        </member>
        <member name="M:System.IO.StreamEx.BackSByte(System.IO.Stream)">
            <summary>
            Seeks backward a <see cref="T:System.SByte"/> value (seeks backward 1 byte) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
        </member>
        <member name="M:System.IO.StreamEx.SkipSByte(System.IO.Stream,System.Int32)">
            <summary>
            Skips <see cref="T:System.SByte"/> values (seeks forward 1 bytes) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
            <param name="count">The number of values to skip.</param>
        </member>
        <member name="M:System.IO.StreamEx.BackSByte(System.IO.Stream,System.Int32)">
            <summary>
            Seeks backward <see cref="T:System.SByte"/> values (seeks backward 1 byte) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
            <param name="count">The number of values to skip.</param>
        </member>
        <member name="M:System.IO.StreamEx.SkipInt16(System.IO.Stream)">
            <summary>
            Skips a <see cref="T:System.Int16"/> value (seeks forward 2 bytes) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
        </member>
        <member name="M:System.IO.StreamEx.BackInt16(System.IO.Stream)">
            <summary>
            Seeks backward a <see cref="T:System.Int16"/> value (seeks backward 2 byte) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
        </member>
        <member name="M:System.IO.StreamEx.SkipInt16(System.IO.Stream,System.Int32)">
            <summary>
            Skips <see cref="T:System.Int16"/> values (seeks forward 2 bytes) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
            <param name="count">The number of values to skip.</param>
        </member>
        <member name="M:System.IO.StreamEx.BackInt16(System.IO.Stream,System.Int32)">
            <summary>
            Seeks backward <see cref="T:System.Int16"/> values (seeks backward 2 byte) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
            <param name="count">The number of values to skip.</param>
        </member>
        <member name="M:System.IO.StreamEx.SkipInt32(System.IO.Stream)">
            <summary>
            Skips a <see cref="T:System.Int32"/> value (seeks forward 4 bytes) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
        </member>
        <member name="M:System.IO.StreamEx.BackInt32(System.IO.Stream)">
            <summary>
            Seeks backward a <see cref="T:System.Int32"/> value (seeks backward 4 byte) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
        </member>
        <member name="M:System.IO.StreamEx.SkipInt32(System.IO.Stream,System.Int32)">
            <summary>
            Skips <see cref="T:System.Int32"/> values (seeks forward 4 bytes) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
            <param name="count">The number of values to skip.</param>
        </member>
        <member name="M:System.IO.StreamEx.BackInt32(System.IO.Stream,System.Int32)">
            <summary>
            Seeks backward <see cref="T:System.Int32"/> values (seeks backward 4 byte) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
            <param name="count">The number of values to skip.</param>
        </member>
        <member name="M:System.IO.StreamEx.SkipInt64(System.IO.Stream)">
            <summary>
            Skips a <see cref="T:System.Int64"/> value (seeks forward 8 bytes) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
        </member>
        <member name="M:System.IO.StreamEx.BackInt64(System.IO.Stream)">
            <summary>
            Seeks backward a <see cref="T:System.Int64"/> value (seeks backward 8 byte) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
        </member>
        <member name="M:System.IO.StreamEx.SkipInt64(System.IO.Stream,System.Int32)">
            <summary>
            Skips <see cref="T:System.Int64"/> values (seeks forward 8 bytes) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
            <param name="count">The number of values to skip.</param>
        </member>
        <member name="M:System.IO.StreamEx.BackInt64(System.IO.Stream,System.Int32)">
            <summary>
            Seeks backward <see cref="T:System.Int64"/> values (seeks backward 8 byte) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
            <param name="count">The number of values to skip.</param>
        </member>
        <member name="M:System.IO.StreamEx.SkipUInt16(System.IO.Stream)">
            <summary>
            Skips a <see cref="T:System.UInt16"/> value (seeks forward 2 bytes) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
        </member>
        <member name="M:System.IO.StreamEx.BackUInt16(System.IO.Stream)">
            <summary>
            Seeks backward a <see cref="T:System.UInt16"/> value (seeks backward 2 byte) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
        </member>
        <member name="M:System.IO.StreamEx.SkipUInt16(System.IO.Stream,System.Int32)">
            <summary>
            Skips <see cref="T:System.UInt16"/> values (seeks forward 2 bytes) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
            <param name="count">The number of values to skip.</param>
        </member>
        <member name="M:System.IO.StreamEx.BackUInt16(System.IO.Stream,System.Int32)">
            <summary>
            Seeks backward <see cref="T:System.UInt16"/> values (seeks backward 2 byte) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
            <param name="count">The number of values to skip.</param>
        </member>
        <member name="M:System.IO.StreamEx.SkipUInt32(System.IO.Stream)">
            <summary>
            Skips a <see cref="T:System.UInt32"/> value (seeks forward 4 bytes) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
        </member>
        <member name="M:System.IO.StreamEx.BackUInt32(System.IO.Stream)">
            <summary>
            Seeks backward a <see cref="T:System.UInt32"/> value (seeks backward 4 byte) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
        </member>
        <member name="M:System.IO.StreamEx.SkipUInt32(System.IO.Stream,System.Int32)">
            <summary>
            Skips <see cref="T:System.UInt32"/> values (seeks forward 4 bytes) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
            <param name="count">The number of values to skip.</param>
        </member>
        <member name="M:System.IO.StreamEx.BackUInt32(System.IO.Stream,System.Int32)">
            <summary>
            Seeks backward <see cref="T:System.UInt32"/> values (seeks backward 4 byte) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
            <param name="count">The number of values to skip.</param>
        </member>
        <member name="M:System.IO.StreamEx.SkipUInt64(System.IO.Stream)">
            <summary>
            Skips a <see cref="T:System.UInt64"/> value (seeks forward 8 bytes) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
        </member>
        <member name="M:System.IO.StreamEx.BackUInt64(System.IO.Stream)">
            <summary>
            Seeks backward a <see cref="T:System.UInt64"/> value (seeks backward 8 byte) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
        </member>
        <member name="M:System.IO.StreamEx.SkipUInt64(System.IO.Stream,System.Int32)">
            <summary>
            Skips <see cref="T:System.UInt64"/> values (seeks forward 8 bytes) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
            <param name="count">The number of values to skip.</param>
        </member>
        <member name="M:System.IO.StreamEx.BackUInt64(System.IO.Stream,System.Int32)">
            <summary>
            Seeks backward <see cref="T:System.UInt64"/> values (seeks backward 8 byte) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
            <param name="count">The number of values to skip.</param>
        </member>
        <member name="M:System.IO.StreamEx.SkipSingle(System.IO.Stream)">
            <summary>
            Skips a <see cref="T:System.Single"/> value (seeks forward 4 bytes) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
        </member>
        <member name="M:System.IO.StreamEx.BackSingle(System.IO.Stream)">
            <summary>
            Seeks backward a <see cref="T:System.Single"/> value (seeks backward 4 byte) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
        </member>
        <member name="M:System.IO.StreamEx.SkipSingle(System.IO.Stream,System.Int32)">
            <summary>
            Skips <see cref="T:System.Single"/> values (seeks forward 4 bytes) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
            <param name="count">The number of values to skip.</param>
        </member>
        <member name="M:System.IO.StreamEx.BackSingle(System.IO.Stream,System.Int32)">
            <summary>
            Seeks backward <see cref="T:System.Single"/> values (seeks backward 4 byte) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
            <param name="count">The number of values to skip.</param>
        </member>
        <member name="M:System.IO.StreamEx.SkipDouble(System.IO.Stream)">
            <summary>
            Skips a <see cref="T:System.Double"/> value (seeks forward 8 bytes) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
        </member>
        <member name="M:System.IO.StreamEx.BackDouble(System.IO.Stream)">
            <summary>
            Seeks backward a <see cref="T:System.Double"/> value (seeks backward 8 byte) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
        </member>
        <member name="M:System.IO.StreamEx.SkipDouble(System.IO.Stream,System.Int32)">
            <summary>
            Skips <see cref="T:System.Double"/> values (seeks forward 8 bytes) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
            <param name="count">The number of values to skip.</param>
        </member>
        <member name="M:System.IO.StreamEx.BackDouble(System.IO.Stream,System.Int32)">
            <summary>
            Seeks backward <see cref="T:System.Double"/> values (seeks backward 8 byte) in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
            <param name="count">The number of values to skip.</param>
        </member>
        <member name="M:System.IO.StreamEx.SeekForward(System.IO.Stream,System.Int64)">
            <summary>
            Advances within the current stream with reference to the current position.
            </summary>
            <param name="stream">The stream to operate on.</param>
            <param name="length">The number of bytes to advance.</param>
        </member>
        <member name="M:System.IO.StreamEx.SeekBackward(System.IO.Stream,System.Int64)">
            <summary>
            Goes back within the current stream with reference to the current position.
            </summary>
            <param name="stream">The stream to operate on.</param>
            <param name="length">The number of bytes to go back.</param>
        </member>
        <member name="M:System.IO.StreamEx.SeekToBegin(System.IO.Stream)">
            <summary>
            Sets the position within the current stream to the beginning.
            </summary>
            <param name="stream">The stream to operate on.</param>
        </member>
        <member name="M:System.IO.StreamEx.SeekToEnd(System.IO.Stream)">
            <summary>
            Sets the position within the current stream to the end.
            </summary>
            <param name="stream">The stream to operate on.</param>
        </member>
        <member name="M:System.IO.StreamEx.SeekTo(System.IO.Stream,System.Int64)">
            <summary>
            Sets the position within the current stream with reference to the beginning.
            </summary>
            <param name="stream">The stream to operate on.</param>
        </member>
        <member name="M:System.IO.StreamEx.Serialize(System.Object,System.String)">
            <summary>
            Saves a serializable object to the specified path.
            </summary>
            <param name="obj">The object to be serialized.</param>
            <param name="path">The file to write to. </param>
        </member>
        <member name="M:System.IO.StreamEx.Deserialize(System.String)">
            <summary>
            Loads a serialized object from the specified path.
            </summary>
            <param name="path">The file to read from.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:System.IO.StreamEx.DeserializeOrCreateO``1(System.String)">
            <summary>
            Loads a serialized object from the specified path. 
            If the file does not exist or the deserializing process fails, a default object will be returned.
            </summary>
            <typeparam name="T">The type of the serialized object.</typeparam>
            <param name="path">The file to read from.</param>
            <returns>The deserialized object or the default object.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteSingles(System.IO.Stream,System.Single[],System.Int32,System.Int32)">
            <summary>
            Writes an array of System.Single integers to the current stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">An array of System.Single integers.</param>
            <param name="startIndex">A position in the array/list where the writing starts.</param>
            <param name="count">The number of integers to write to the stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para>
            </param>
        </member>
        <member name="M:System.IO.StreamEx.WriteSingles(System.IO.Stream,System.Single[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Writes an array of System.Single integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">An array of System.Single integers.</param>
            <param name="startIndex">A position in the array/list where the writing starts.</param>
            <param name="count">The number of integers to write to the stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para></param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteSingles(System.IO.Stream,System.Collections.Generic.IList{System.Single},System.Int32,System.Int32)">
            <summary>
            Writes a list of System.Single integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">A list of System.Single integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
            <param name="count">The number of integers to be written into the current stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para></param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteSingles(System.IO.Stream,System.Collections.Generic.IList{System.Single},System.Int32,System.Int32,System.Byte[])">
            <summary>
            Writes a list of System.Single integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">A list of System.Single integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
            <param name="count">The number of integers to be written into the current stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para></param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteSingles(System.IO.Stream,System.Single[],System.Int32)">
            <summary>
            Writes an array of System.Single integers to the current stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">An array of System.Single integers.</param>
            <param name="startIndex">A position in the array where the writing starts.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteSingles(System.IO.Stream,System.Single[],System.Byte[],System.Int32)">
            <summary>
            Writes a list of System.Single integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">An array of System.Single integers.</param>
            <param name="startIndex">A position in the array where the writing starts.</param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteSingles(System.IO.Stream,System.Collections.Generic.IList{System.Single},System.Int32)">
            <summary>
            Writes a list of System.Single integers to the current stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">A list of System.Single integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteSingles(System.IO.Stream,System.Collections.Generic.IList{System.Single},System.Byte[],System.Int32)">
            <summary>
            Writes a list of System.Single integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">A list of System.Single integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadSingles(System.IO.Stream,System.Int32)">
            <summary>
            Reads a System.Single integer array from this stream.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="length">The length of the array.</param>
            <returns>A System.Single integer array read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadSingles(System.IO.Stream,System.Int32,System.Byte[])">
            <summary>
            Reads a System.Single integer array from this stream using the specified buffer.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="length">The length of the array.</param>
            <param name="buffer">A byte array used to temporarily store data read from the stream.</param>
            <returns>A System.Single integer array read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteSingleArray(System.IO.Stream,System.Single[],System.Boolean)">
            <summary>
            Writes an array of System.Single integers to the current stream. You may write an empty array or a <c>null</c> reference.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">The byte array to write.</param>
            <param name="validityCheck">Indicates whether to write a check code before the byte array. This check code will help detect corrupted data.</param>
            <returns>The number of bytes actually written to the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteSingleArray(System.IO.Stream,System.Single[],System.Byte[],System.Boolean)">
            <summary>
            Writes an array of System.Single integers to the current stream using the specified buffer. You may write an empty array or a <c>null</c> reference.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">The byte array to write.</param>
            <param name="validityCheck">Indicates whether to write a check code before the byte array. This check code will help detect corrupted data.</param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
            <returns>The number of bytes actually written to the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadSingleArray(System.IO.Stream,System.Boolean)">
            <summary>
            Reads a System.Single integer array from this stream. The method does not require an argument specifying the length of the array; <seealso cref="M:System.IO.StreamEx.ReadSingles(System.IO.Stream,System.Int32)"/>.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to prevent data corruption; otherwise, set this <c>false</c>.</param>
            <returns>
            The System.Single array read from the stream.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.ReadSingleArray(System.IO.Stream,System.Byte[],System.Boolean)">
            <summary>
            Reads a System.Single integer array from this stream. The method does not require an argument specifying the length of the array; <seealso cref="M:System.IO.StreamEx.ReadSingles(System.IO.Stream,System.Int32)"/>.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to prevent data corruption; otherwise, set this <c>false</c>.</param>
            <param name="buffer">A byte array used to temporarily store data read from the stream.</param>
            <returns>
            The System.Single array read from the stream.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.ReadSingleArrayToBuffer(System.IO.Stream,System.Byte[],System.Boolean)">
            <summary>
            Reads a System.Single integer array from this stream into the specified buffer. This method avoids an additional data copy to enchance performance.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to prevent data corruption; otherwise, set this <c>false</c>.</param>
            <param name="buffer">A byte array used to store data read from the stream. You may later get a Single pointer of this array for fast iteration.</param>
            <returns>
            true if the array read from the stream is not empty; otherwise, false.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.WriteStringHashSet(System.IO.Stream,System.Collections.Generic.HashSet{System.String},System.Boolean)">
            <summary>
            Writes a string hash set to this stream. 
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="stringSet">The string hash set.</param>
            <param name="validityCheck">
            <c>true</c> if a code is written into the stream 
            and any reading method can check this code to determine whether the data is not corrupted.
            </param>
        </member>
        <member name="M:System.IO.StreamEx.WriteStringDictionary(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
            Writes a string dictionary to this stream. 
            </summary>
            <param name="stream">This stream.</param>
            <param name="dictionary">The string dictionary.</param>
            <param name="validityCheck">
            <c>true</c> if a code is written into the stream 
            and any reading method can check this code to determine whether the data is not corrupted.
            </param>
        </member>
        <member name="M:System.IO.StreamEx.ReadStringHashSet(System.IO.Stream,System.Boolean)">
            <summary>
            Reads a string hash set from this stream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck">
            <c>true</c> if a code is written into the stream 
            and any reading method can check this code to determine whether the data is not corrupted.
            </param>
            <returns>A string hash set read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadStringDictionary``1(System.IO.Stream,System.Boolean)">
            <summary>
            Reads a string dictionary from this stream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck">
            <c>true</c> if a code is written into the stream 
            and any reading method can check this code to determine whether the data is not corrupted.
            </param>
            <returns>A string dictionary read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadStringDictionary(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
            Reads string dictionary items from this stream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="dictionary">A dictionary that stores dictionary items read from the stream.</param>
            <param name="validityCheck">
            <c>true</c> if a code is written into the stream 
            and any reading method can check this code to determine whether the data is not corrupted.
            </param>
            <returns>A string dictionary read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteStringList(System.IO.Stream,System.Collections.Generic.IList{System.String},System.Boolean)">
            <summary>
            Writes a list of strings to this stream. 
            This method automatically chooses best character encoding and applies no compression.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="stringList">The string list.</param>
            <param name="validityCheck">
            <c>true</c> if a code is written into the stream 
            and any reading method can check this code to determine whether the data is not corrupted.
            </param>
        </member>
        <member name="M:System.IO.StreamEx.WriteStringList(System.IO.Stream,System.Collections.Generic.LinkedList{System.String},System.Boolean)">
            <summary>
            Writes a list of strings to this stream. 
            This method automatically chooses best character encoding and applies no compression.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="stringList">The string list.</param>
            <param name="validityCheck">
            <c>true</c> if a code is written into the stream 
            and any reading method can check this code to determine whether the data is not corrupted.
            </param>
        </member>
        <member name="M:System.IO.StreamEx.WriteStringList(System.IO.Stream,System.Collections.Generic.IList{System.String},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Writes a consecutive section of a string list into this stream.
            </summary>
            <param name="stream">This stream.</param>
            <param name="stringList">The string list.</param>
            <param name="startIndex">Indicates the index of the first string in the list to be written into this stream.</param>
            <param name="length">Indicates how many strings should be written into the stream.</param>
            <param name="validityCheck">Indicates whether to write 
            a validity-check code before the string list.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteStringList(System.IO.Stream,System.Collections.Generic.IList{System.String},System.Int32,System.Boolean)">
            <summary>
            Writes strings in a string list with indexes no smaller than the start index into this stream.
            </summary>
            <param name="stream">This stream.</param>
            <param name="stringList">The string list.</param>
            <param name="startIndex">The start index.</param>
            <param name="validityCheck">Indicates whether to write 
            a validity-check code before the string list.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadStringList(System.IO.Stream,System.Boolean)">
            <summary>
            Reads a list of strings from this stream.
            </summary>
            <param name="stream">This stream.</param>
            <param name="validityCheck">
            <c>true</c> if a code is written into the stream 
            and any reading method can check this code to determine whether the data is not corrupted.
            </param>
            <returns>A list of strings.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteString(System.IO.Stream,System.String,System.Text.Encoding,System.IO.Compression.ByteCompressionMethods,System.Boolean,System.Boolean)">
            <summary>
            Writes a string instance to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="str">The System.String object.</param>
            <param name="encoder">The character encoding for the string.</param>
            <param name="compressionMethod">The compression algorithm used to compress the string.</param>
            <param name="headCompression">Indicates whether to compress the head section.</param>
            <param name="validityCheck">Indicates whether to write 
            a validity-check code before the string.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteString(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Writes a string instance to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="str">The System.String object.</param>
            <param name="validityCheck">Indicates whether to write 
            a validity-check code before the string.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadString(System.IO.Stream,System.Boolean)">
            <summary>
            Reads a string instance from this stream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck">Indicates whether to read 
            a countersign before the string and perform data-validity check.</param>
            <returns>A string read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.SkipString(System.IO.Stream,System.Boolean)">
            <summary>
            Skips a string instance in this stream.
            </summary>
            <param name="stream">The stream to operate on.</param>
            <param name="validityCheck">Indicates whether to read 
            a countersign before the string and perform data-validity check.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadText(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Reads a string instance encoded by the specified <paramref name="encoding" /> from this stream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="encoding">The encoding of the string.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the string to detect data corruption; otherwise, set this <c>false</c>.</param>
            <returns>A string read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadText(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Reads a string instance encoded by the specified <paramref name="encoding" /> from this stream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="encoding">The encoding of the string.</param>
            <returns>A string read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadText(System.IO.Stream)">
            <summary>
            Reads a string instance encoded by <see cref="P:System.Text.Encoding.UTF8"/> from this stream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <returns>A string read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteText(System.IO.Stream,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Writes a string instance (can be <c>null</c>) encoded by the specified <paramref name="encoding" /> to the stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="str">The string instance to write to the <paramref name="stream"/>.</param>
            <param name="encoding">The encoding of the string.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the string to detect data corruption; otherwise, set this <c>false</c>.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteText(System.IO.Stream,System.String,System.Text.Encoding)">
            <summary>
            Writes a string instance (can be <c>null</c>) encoded by the specified <paramref name="encoding" /> to the stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="str">The string instance to write to the <paramref name="stream"/>.</param>
            <param name="encoding">The encoding of the string.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteText(System.IO.Stream,System.String)">
            <summary>
            Writes a string instance (can be <c>null</c>) encoded by <see cref="P:System.Text.Encoding.UTF8"/> to the stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="str">The string instance to write to the <paramref name="stream"/>.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadASCIIText(System.IO.Stream,System.Boolean)">
            <summary>
            Reads an ASCII encoded string instance from this stream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the string to detect data corruption; otherwise, set this <c>false</c>.</param>
            <returns>A string read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadASCIIText(System.IO.Stream)">
            <summary>
            Reads an ASCII encoded string instance from this stream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <returns>A string read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteASCIIText(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Writes a string instance to the stream using ASCII encoding.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="str">The string instance to write to the <paramref name="stream"/>.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the string to detect data corruption; otherwise, set this <c>false</c>.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteASCIIText(System.IO.Stream,System.String)">
            <summary>
            Writes a string instance to the stream using ASCII encoding.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="str">The string instance to write to the <paramref name="stream"/>.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadUTF8Text(System.IO.Stream,System.Boolean)">
            <summary>
            Reads an UTF8 encoded string instance from this stream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the string to detect data corruption; otherwise, set this <c>false</c>.</param>
            <returns>A string read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadUTF8Text(System.IO.Stream)">
            <summary>
            Reads an UTF8 encoded string instance from this stream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <returns>A string read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteUTF8Text(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Writes a string instance to the stream using UTF8 encoding.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="str">The string instance to write to the <paramref name="stream"/>.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the string to detect data corruption; otherwise, set this <c>false</c>.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUTF8Text(System.IO.Stream,System.String)">
            <summary>
            Writes a string instance to the stream using UTF8 encoding.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="str">The string instance to write to the <paramref name="stream"/>.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadUnicodeText(System.IO.Stream,System.Boolean)">
            <summary>
            Reads an Unicode encoded string instance from this stream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the string to detect data corruption; otherwise, set this <c>false</c>.</param>
            <returns>A string read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadUnicodeText(System.IO.Stream)">
            <summary>
            Reads an Unicode encoded string instance from this stream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <returns>A string read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteUnicodeText(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Writes a string instance to the stream using Unicode encoding.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="str">The string instance to write to the <paramref name="stream"/>.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the string to detect data corruption; otherwise, set this <c>false</c>.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUnicodeText(System.IO.Stream,System.String)">
            <summary>
            Writes a string instance to the stream using Unicode encoding.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="str">The string instance to write to the <paramref name="stream"/>.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt16s(System.IO.Stream,System.UInt16[],System.Int32,System.Int32)">
            <summary>
            Writes an array of System.UInt16 integers to the current stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">An array of System.UInt16 integers.</param>
            <param name="startIndex">A position in the array/list where the writing starts.</param>
            <param name="count">The number of integers to write to the stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para>
            </param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt16s(System.IO.Stream,System.UInt16[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Writes an array of System.UInt16 integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">An array of System.UInt16 integers.</param>
            <param name="startIndex">A position in the array/list where the writing starts.</param>
            <param name="count">The number of integers to write to the stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para></param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt16s(System.IO.Stream,System.Collections.Generic.IList{System.UInt16},System.Int32,System.Int32)">
            <summary>
            Writes a list of System.UInt16 integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">A list of System.UInt16 integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
            <param name="count">The number of integers to be written into the current stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para></param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt16s(System.IO.Stream,System.Collections.Generic.IList{System.UInt16},System.Int32,System.Int32,System.Byte[])">
            <summary>
            Writes a list of System.UInt16 integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">A list of System.UInt16 integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
            <param name="count">The number of integers to be written into the current stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para></param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt16s(System.IO.Stream,System.UInt16[],System.Int32)">
            <summary>
            Writes an array of System.UInt16 integers to the current stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">An array of System.UInt16 integers.</param>
            <param name="startIndex">A position in the array where the writing starts.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt16s(System.IO.Stream,System.UInt16[],System.Byte[],System.Int32)">
            <summary>
            Writes a list of System.UInt16 integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">An array of System.UInt16 integers.</param>
            <param name="startIndex">A position in the array where the writing starts.</param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt16s(System.IO.Stream,System.Collections.Generic.IList{System.UInt16},System.Int32)">
            <summary>
            Writes a list of System.UInt16 integers to the current stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">A list of System.UInt16 integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt16s(System.IO.Stream,System.Collections.Generic.IList{System.UInt16},System.Byte[],System.Int32)">
            <summary>
            Writes a list of System.UInt16 integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">A list of System.UInt16 integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadUInt16s(System.IO.Stream,System.Int32)">
            <summary>
            Reads a System.UInt16 integer array from this stream.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="length">The length of the array.</param>
            <returns>A System.UInt16 integer array read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadUInt16s(System.IO.Stream,System.Int32,System.Byte[])">
            <summary>
            Reads a System.UInt16 integer array from this stream using the specified buffer.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="length">The length of the array.</param>
            <param name="buffer">A byte array used to temporarily store data read from the stream.</param>
            <returns>A System.UInt16 integer array read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt16Array(System.IO.Stream,System.UInt16[],System.Boolean)">
            <summary>
            Writes an array of System.UInt16 integers to the current stream. You may write an empty array or a <c>null</c> reference.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">The byte array to write.</param>
            <param name="validityCheck">Indicates whether to write a check code before the byte array. This check code will help detect corrupted data.</param>
            <returns>The number of bytes actually written to the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt16Array(System.IO.Stream,System.UInt16[],System.Byte[],System.Boolean)">
            <summary>
            Writes an array of System.UInt16 integers to the current stream using the specified buffer. You may write an empty array or a <c>null</c> reference.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">The byte array to write.</param>
            <param name="validityCheck">Indicates whether to write a check code before the byte array. This check code will help detect corrupted data.</param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
            <returns>The number of bytes actually written to the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadUInt16Array(System.IO.Stream,System.Boolean)">
            <summary>
            Reads a System.UInt16 integer array from this stream. The method does not require an argument specifying the length of the array; <seealso cref="M:System.IO.StreamEx.ReadUInt16s(System.IO.Stream,System.Int32)"/>.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to prevent data corruption; otherwise, set this <c>false</c>.</param>
            <returns>
            The System.UInt16 array read from the stream.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.ReadUInt16Array(System.IO.Stream,System.Byte[],System.Boolean)">
            <summary>
            Reads a System.UInt16 integer array from this stream. The method does not require an argument specifying the length of the array; <seealso cref="M:System.IO.StreamEx.ReadUInt16s(System.IO.Stream,System.Int32)"/>.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to prevent data corruption; otherwise, set this <c>false</c>.</param>
            <param name="buffer">A byte array used to temporarily store data read from the stream.</param>
            <returns>
            The System.UInt16 array read from the stream.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.ReadUInt16ArrayToBuffer(System.IO.Stream,System.Byte[],System.Boolean)">
            <summary>
            Reads a System.UInt16 integer array from this stream into the specified buffer. This method avoids an additional data copy to enchance performance.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to prevent data corruption; otherwise, set this <c>false</c>.</param>
            <param name="buffer">A byte array used to store data read from the stream. You may later get a UInt16 pointer of this array for fast iteration.</param>
            <returns>
            true if the array read from the stream is not empty; otherwise, false.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt32s(System.IO.Stream,System.UInt32[],System.Int32,System.Int32)">
            <summary>
            Writes an array of System.UInt32 integers to the current stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">An array of System.UInt32 integers.</param>
            <param name="startIndex">A position in the array/list where the writing starts.</param>
            <param name="count">The number of integers to write to the stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para>
            </param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt32s(System.IO.Stream,System.UInt32[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Writes an array of System.UInt32 integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">An array of System.UInt32 integers.</param>
            <param name="startIndex">A position in the array/list where the writing starts.</param>
            <param name="count">The number of integers to write to the stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para></param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt32s(System.IO.Stream,System.Collections.Generic.IList{System.UInt32},System.Int32,System.Int32)">
            <summary>
            Writes a list of System.UInt32 integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">A list of System.UInt32 integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
            <param name="count">The number of integers to be written into the current stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para></param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt32s(System.IO.Stream,System.Collections.Generic.IList{System.UInt32},System.Int32,System.Int32,System.Byte[])">
            <summary>
            Writes a list of System.UInt32 integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">A list of System.UInt32 integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
            <param name="count">The number of integers to be written into the current stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para></param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt32s(System.IO.Stream,System.UInt32[],System.Int32)">
            <summary>
            Writes an array of System.UInt32 integers to the current stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">An array of System.UInt32 integers.</param>
            <param name="startIndex">A position in the array where the writing starts.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt32s(System.IO.Stream,System.UInt32[],System.Byte[],System.Int32)">
            <summary>
            Writes a list of System.UInt32 integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">An array of System.UInt32 integers.</param>
            <param name="startIndex">A position in the array where the writing starts.</param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt32s(System.IO.Stream,System.Collections.Generic.IList{System.UInt32},System.Int32)">
            <summary>
            Writes a list of System.UInt32 integers to the current stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">A list of System.UInt32 integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt32s(System.IO.Stream,System.Collections.Generic.IList{System.UInt32},System.Byte[],System.Int32)">
            <summary>
            Writes a list of System.UInt32 integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">A list of System.UInt32 integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadUInt32s(System.IO.Stream,System.Int32)">
            <summary>
            Reads a System.UInt32 integer array from this stream.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="length">The length of the array.</param>
            <returns>A System.UInt32 integer array read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadUInt32s(System.IO.Stream,System.Int32,System.Byte[])">
            <summary>
            Reads a System.UInt32 integer array from this stream using the specified buffer.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="length">The length of the array.</param>
            <param name="buffer">A byte array used to temporarily store data read from the stream.</param>
            <returns>A System.UInt32 integer array read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt32Array(System.IO.Stream,System.UInt32[],System.Boolean)">
            <summary>
            Writes an array of System.UInt32 integers to the current stream. You may write an empty array or a <c>null</c> reference.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">The byte array to write.</param>
            <param name="validityCheck">Indicates whether to write a check code before the byte array. This check code will help detect corrupted data.</param>
            <returns>The number of bytes actually written to the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt32Array(System.IO.Stream,System.UInt32[],System.Byte[],System.Boolean)">
            <summary>
            Writes an array of System.UInt32 integers to the current stream using the specified buffer. You may write an empty array or a <c>null</c> reference.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">The byte array to write.</param>
            <param name="validityCheck">Indicates whether to write a check code before the byte array. This check code will help detect corrupted data.</param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
            <returns>The number of bytes actually written to the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadUInt32Array(System.IO.Stream,System.Boolean)">
            <summary>
            Reads a System.UInt32 integer array from this stream. The method does not require an argument specifying the length of the array; <seealso cref="M:System.IO.StreamEx.ReadUInt32s(System.IO.Stream,System.Int32)"/>.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to prevent data corruption; otherwise, set this <c>false</c>.</param>
            <returns>
            The System.UInt32 array read from the stream.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.ReadUInt32Array(System.IO.Stream,System.Byte[],System.Boolean)">
            <summary>
            Reads a System.UInt32 integer array from this stream. The method does not require an argument specifying the length of the array; <seealso cref="M:System.IO.StreamEx.ReadUInt32s(System.IO.Stream,System.Int32)"/>.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to prevent data corruption; otherwise, set this <c>false</c>.</param>
            <param name="buffer">A byte array used to temporarily store data read from the stream.</param>
            <returns>
            The System.UInt32 array read from the stream.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.ReadUInt32ArrayToBuffer(System.IO.Stream,System.Byte[],System.Boolean)">
            <summary>
            Reads a System.UInt32 integer array from this stream into the specified buffer. This method avoids an additional data copy to enchance performance.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to prevent data corruption; otherwise, set this <c>false</c>.</param>
            <param name="buffer">A byte array used to store data read from the stream. You may later get a UInt32 pointer of this array for fast iteration.</param>
            <returns>
            true if the array read from the stream is not empty; otherwise, false.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt64s(System.IO.Stream,System.UInt64[],System.Int32,System.Int32)">
            <summary>
            Writes an array of System.UInt64 integers to the current stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">An array of System.UInt64 integers.</param>
            <param name="startIndex">A position in the array/list where the writing starts.</param>
            <param name="count">The number of integers to write to the stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para>
            </param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt64s(System.IO.Stream,System.UInt64[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Writes an array of System.UInt64 integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">An array of System.UInt64 integers.</param>
            <param name="startIndex">A position in the array/list where the writing starts.</param>
            <param name="count">The number of integers to write to the stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para></param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt64s(System.IO.Stream,System.Collections.Generic.IList{System.UInt64},System.Int32,System.Int32)">
            <summary>
            Writes a list of System.UInt64 integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">A list of System.UInt64 integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
            <param name="count">The number of integers to be written into the current stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para></param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt64s(System.IO.Stream,System.Collections.Generic.IList{System.UInt64},System.Int32,System.Int32,System.Byte[])">
            <summary>
            Writes a list of System.UInt64 integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">A list of System.UInt64 integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
            <param name="count">The number of integers to be written into the current stream.
            <para>!!! Note this number should be no larger than the number of integers from <paramref name="startIndex" /> to the end of the array.</para></param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt64s(System.IO.Stream,System.UInt64[],System.Int32)">
            <summary>
            Writes an array of System.UInt64 integers to the current stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">An array of System.UInt64 integers.</param>
            <param name="startIndex">A position in the array where the writing starts.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt64s(System.IO.Stream,System.UInt64[],System.Byte[],System.Int32)">
            <summary>
            Writes a list of System.UInt64 integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">An array of System.UInt64 integers.</param>
            <param name="startIndex">A position in the array where the writing starts.</param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt64s(System.IO.Stream,System.Collections.Generic.IList{System.UInt64},System.Int32)">
            <summary>
            Writes a list of System.UInt64 integers to the current stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">A list of System.UInt64 integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt64s(System.IO.Stream,System.Collections.Generic.IList{System.UInt64},System.Byte[],System.Int32)">
            <summary>
            Writes a list of System.UInt64 integers to the current stream using the specified buffer.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="list">A list of System.UInt64 integers.</param>
            <param name="startIndex">A position in the list where the writing starts.</param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
        </member>
        <member name="M:System.IO.StreamEx.ReadUInt64s(System.IO.Stream,System.Int32)">
            <summary>
            Reads a System.UInt64 integer array from this stream.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="length">The length of the array.</param>
            <returns>A System.UInt64 integer array read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadUInt64s(System.IO.Stream,System.Int32,System.Byte[])">
            <summary>
            Reads a System.UInt64 integer array from this stream using the specified buffer.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="length">The length of the array.</param>
            <param name="buffer">A byte array used to temporarily store data read from the stream.</param>
            <returns>A System.UInt64 integer array read from the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt64Array(System.IO.Stream,System.UInt64[],System.Boolean)">
            <summary>
            Writes an array of System.UInt64 integers to the current stream. You may write an empty array or a <c>null</c> reference.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">The byte array to write.</param>
            <param name="validityCheck">Indicates whether to write a check code before the byte array. This check code will help detect corrupted data.</param>
            <returns>The number of bytes actually written to the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteUInt64Array(System.IO.Stream,System.UInt64[],System.Byte[],System.Boolean)">
            <summary>
            Writes an array of System.UInt64 integers to the current stream using the specified buffer. You may write an empty array or a <c>null</c> reference.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="array">The byte array to write.</param>
            <param name="validityCheck">Indicates whether to write a check code before the byte array. This check code will help detect corrupted data.</param>
            <param name="buffer">A byte array used to temporarily store data to write.</param>
            <returns>The number of bytes actually written to the stream.</returns>
        </member>
        <member name="M:System.IO.StreamEx.ReadUInt64Array(System.IO.Stream,System.Boolean)">
            <summary>
            Reads a System.UInt64 integer array from this stream. The method does not require an argument specifying the length of the array; <seealso cref="M:System.IO.StreamEx.ReadUInt64s(System.IO.Stream,System.Int32)"/>.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to prevent data corruption; otherwise, set this <c>false</c>.</param>
            <returns>
            The System.UInt64 array read from the stream.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.ReadUInt64Array(System.IO.Stream,System.Byte[],System.Boolean)">
            <summary>
            Reads a System.UInt64 integer array from this stream. The method does not require an argument specifying the length of the array; <seealso cref="M:System.IO.StreamEx.ReadUInt64s(System.IO.Stream,System.Int32)"/>.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to prevent data corruption; otherwise, set this <c>false</c>.</param>
            <param name="buffer">A byte array used to temporarily store data read from the stream.</param>
            <returns>
            The System.UInt64 array read from the stream.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.ReadUInt64ArrayToBuffer(System.IO.Stream,System.Byte[],System.Boolean)">
            <summary>
            Reads a System.UInt64 integer array from this stream into the specified buffer. This method avoids an additional data copy to enchance performance.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="validityCheck">Set this parameter <c>true</c> if there is a check code before the array to prevent data corruption; otherwise, set this <c>false</c>.</param>
            <param name="buffer">A byte array used to store data read from the stream. You may later get a UInt64 pointer of this array for fast iteration.</param>
            <returns>
            true if the array read from the stream is not empty; otherwise, false.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">Raises if data in the stream is corrupted.</exception>
        </member>
        <member name="M:System.IO.StreamEx.WriteCheckCode(System.IO.Stream,System.Int64)">
            <summary>
            Writes a 64-bit positive integer check code into this stream. 
            Check code is used to check the validity of the data before reading.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="value">A 64-bit positive integer as a countersign.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteCheckCode(System.IO.Stream,System.Int32)">
            <summary>
            Writes a 32-bit positive integer as the check code into this stream. 
            Countersign is used to check the validity of the data before reading.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="value">A 32-bit positive integer as a check code.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteCheckCode(System.IO.Stream,System.IO.IOChecks)">
            <summary>
            Writes a check code into this stream.
            </summary>
            <param name="stream">The stream to write.</param>
            <param name="value">The countersign.</param>
        </member>
        <member name="M:System.IO.StreamEx.Check(System.IO.Stream,System.Int64)">
            <summary>
            Checks the validity of data at the current position of the stream by a countersign.
            </summary>
            <param name="stream">The stream to check.</param>
            <param name="countersign">The countersign to check.</param>
            <returns>true if the data at the current position of the stream is valid; otherwise, false.</returns>
        </member>
        <member name="M:System.IO.StreamEx.Check(System.IO.Stream,System.Int32)">
            <summary>
            Checks the validity of data at the current position of the stream by a countersign.
            </summary>
            <param name="stream">The stream to check.</param>
            <param name="countersign">The countersign to check.</param>
            <returns>true if the data at the current position of the stream is valid; otherwise, false.</returns>
        </member>
        <member name="M:System.IO.StreamEx.Check(System.IO.Stream,System.IO.IOChecks)">
            <summary>
            Checks the validity of data at the current position of the stream by a countersign.
            </summary>
            <param name="stream">The stream to check.</param>
            <param name="countersign">The countersign to check.</param>
            <returns>true if the data at the current position of the stream is valid; otherwise, false.</returns>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.Byte},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.Byte},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.Byte},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.Byte},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.Byte},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.Byte},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.Byte},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.Byte},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.Byte},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.Byte},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.Byte},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.Byte},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.Byte},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.IO.IBinarySavable,System.Byte},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.Boolean},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.Boolean},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.Boolean},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.Boolean},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.Boolean},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.Boolean},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.Boolean},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.Boolean},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.Boolean},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.Boolean},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.Boolean},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.Boolean},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.Boolean},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.IO.IBinarySavable,System.Boolean},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.SByte},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.SByte},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.SByte},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.SByte},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.SByte},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.SByte},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.SByte},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.SByte},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.SByte},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.SByte},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.SByte},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.SByte},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.SByte},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.IO.IBinarySavable,System.SByte},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.Int16},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.Int16},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.Int16},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.Int16},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.Int16},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.Int16},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.Int16},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.Int16},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.Int16},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.Int16},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.Int16},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.Int16},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.Int16},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.IO.IBinarySavable,System.Int16},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.UInt16},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.UInt16},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.UInt16},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.UInt16},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.UInt16},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.UInt16},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.UInt16},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.UInt16},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.UInt16},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.UInt16},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.UInt16},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.UInt16},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.UInt16},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.IO.IBinarySavable,System.UInt16},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.Int32},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.Int32},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.Int32},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.Int32},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.Int32},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.Int32},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.Int32},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.Int32},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.Int32},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.Int32},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.Int32},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.Int32},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.Int32},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.IO.IBinarySavable,System.Int32},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.UInt32},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.UInt32},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.UInt32},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.UInt32},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.UInt32},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.UInt32},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.UInt32},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.UInt32},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.UInt32},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.UInt32},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.UInt32},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.UInt32},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.UInt32},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.IO.IBinarySavable,System.UInt32},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.Int64},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.Int64},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.Int64},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.Int64},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.Int64},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.Int64},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.Int64},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.Int64},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.Int64},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.Int64},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.Int64},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.Int64},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.Int64},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.IO.IBinarySavable,System.Int64},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.UInt64},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.UInt64},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.UInt64},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.UInt64},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.UInt64},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.UInt64},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.UInt64},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.UInt64},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.UInt64},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.UInt64},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.UInt64},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.UInt64},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.UInt64},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.IO.IBinarySavable,System.UInt64},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.Double},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.Double},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.Double},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.Double},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.Double},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.Double},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.Double},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.Double},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.Double},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.Double},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.Double},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.Double},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.Double},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.IO.IBinarySavable,System.Double},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.Single},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.Single},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.Single},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.Single},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.Single},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.Single},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.Single},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.Single},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.Single},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.Single},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.Single},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.Single},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.Single},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.IO.IBinarySavable,System.Single},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.DateTime},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.DateTime},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.DateTime},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.DateTime},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.DateTime},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.DateTime},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.DateTime},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.DateTime},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.DateTime},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.DateTime},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.DateTime},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.DateTime},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.DateTime},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.IO.IBinarySavable,System.DateTime},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.String},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.String},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.String},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.String},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.String},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,System.String},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.String},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.String},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.String},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.String},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.String},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.String},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.IO.IBinarySavable,System.String},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Byte,System.IO.IBinarySavable},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Boolean,System.IO.IBinarySavable},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.SByte,System.IO.IBinarySavable},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int16,System.IO.IBinarySavable},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt16,System.IO.IBinarySavable},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict``1(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int32,``0},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt32,System.IO.IBinarySavable},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Int64,System.IO.IBinarySavable},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.UInt64,System.IO.IBinarySavable},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Double,System.IO.IBinarySavable},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.Single,System.IO.IBinarySavable},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.DateTime,System.IO.IBinarySavable},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict``1(System.IO.Stream,System.Collections.Generic.IDictionary{System.String,``0},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="M:System.IO.StreamEx.WriteDict(System.IO.Stream,System.Collections.Generic.IDictionary{System.IO.IBinarySavable,System.IO.IBinarySavable},System.Boolean)">
            <summary>
            Writes the dictionary to this stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="dict">The dictionary object to write to the stream.</param>
            <param name="validityCheck"><c>true</c> if a 8-byte code is written to the stream before all actual data. When the dictionary is later read from the stream, this code should be at the reading start position, or otherwise the data in the stream is corrupted.</param>
        </member>
        <member name="T:System.IO.StreamAsyncState">
            <summary>
            Provides the System.IO.Stream instance and the bytes for an asynchronous read-write process.
            ** This class cannot be initialized. It can only be obtained through property <c>AsyncState</c> of a <see cref="!:System.IAsyncState"/> instance.
            </summary>
        </member>
        <member name="P:System.IO.StreamAsyncState.Stream">
            <summary>
            Gets the <see cref="P:System.IO.StreamAsyncState.Stream"/> the asynchronous read-write process. 
            </summary>
        </member>
        <member name="P:System.IO.StreamAsyncState.Buffer">
            <summary>
            Gets the bytes of the asynchronous read-write process.
            </summary>
        </member>
        <member name="T:System.IO.WritingMode">
            <summary>
            Represents two modes of writing.
            </summary>
        </member>
        <member name="F:System.IO.WritingMode.New">
            <summary>
            Creates a new record.
            </summary>
        </member>
        <member name="F:System.IO.WritingMode.Override">
            <summary>
            Overrides the existing record.
            </summary>
        </member>
        <member name="T:System.IO.ObjectToBytesConverter`1">
            <summary>
            A method converting a specified object to byte array.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="obj">The object to convert.</param>
            <returns>A byte array representing the object.</returns>
        </member>
        <member name="T:System.IO.BytesToObjectConverter`1">
            <summary>
            A method converting a given byte array to an object.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="bytes">The byte array to convert.</param>
            <returns>An object of the specified type converted from the given byte array.</returns>
        </member>
        <member name="M:System.IO.TextEx.AdvanceTo(System.IO.TextReader,System.Char)">
            <summary>
            Advances the reader to the position after the next occurrence of the specified <paramref name="keychar" />.
            </summary>
            <param name="reader">The <paramref name="reader" /> will advance its position to the character immediately after the next occurrence of this <paramref name="keychar" />.</param>
            <param name="keychar">The value.</param>
            <remarks>This method differs from <see cref="M:System.IO.TextEx.SkipTo(System.IO.TextReader,System.Char)"/> only in that it does not return a <see cref="T:System.Boolean"/> value indicating if the <paramref name="keychar"/> is encountered during reading.</remarks>
        </member>
        <member name="M:System.IO.TextEx.ReadTo(System.IO.TextReader,System.Char,System.Boolean)">
            <summary>
            Reads until the specified <paramref name="keychar" /> is encountered. <paramref name="keychar" /> will not be included in the returned string.
            </summary>
            <param name="reader">A <see cref="T:System.IO.TextReader" /> object.</param>
            <param name="keychar">The <paramref name="reader" /> will advance its position to the character immediately after the next occurrence of this <paramref name="keychar" />.</param>
            <param name="returnIfKeycharNotFound"><c>true</c> if a string starting from the reader's current position to the end should be returned if no <paramref name="keychar"/> is encountered in reading; <c>false</c> if <c>null</c> should be returned in this situation.</param>
            <returns>A <see cref="T:System.String" /> read from the <see cref="T:System.IO.TextReader" /> from its current position to the position of the specified <paramref name="keychar" />, or to the end of the <paramref name="reader"/> if no such <paramref name="keychar"/> is found.</returns>
        </member>
        <member name="M:System.IO.TextEx.ReadPiece(System.IO.TextReader)">
            <summary>
            Reads next piece of string with spaces defined by <see cref="M:System.Char.IsWhiteSpace(System.Char)"/> is encountered as delimiters. The whitespaces will not be included in the returned string.
            </summary>
            <param name="reader">A <see cref="T:System.IO.TextReader" /> object.</param>
            <returns>A <see cref="T:System.String"/> piece retrieved from the <paramref name="reader"/>.</returns>
        </member>
        <member name="M:System.IO.TextEx.ReadPieces(System.IO.TextReader,System.Int32)">
            <summary>
            Reads a specified number of string pieces delimited by whitespaces defined by <see cref="M:System.Char.IsWhiteSpace(System.Char)"/>.
            </summary>
            <param name="reader">A <see cref="T:System.IO.TextReader" /> object.</param>
            <param name="count">The number of string pieces to read.</param>
            <returns>An array of <see cref="T:System.String"/> pieces retrieved from the <paramref name="reader"/>.</returns>
        </member>
        <member name="M:System.IO.TextEx.ReadAfter(System.IO.TextReader,System.Char,System.Boolean)">
            <summary>
            Reads until the specified <paramref name="keychar" /> is encountered. <paramref name="keychar" /> will be included at the end of the returned string.
            </summary>
            <param name="reader">A <see cref="T:System.IO.TextReader" /> object.</param>
            <param name="keychar">The <paramref name="reader" /> will advance its position to the character immediately after the next occurrence of this <paramref name="keychar" />.</param>
            <param name="returnIfKeycharNotFound"><c>true</c> if a string starting from the reader's current position to the end should be returned if no <paramref name="keychar"/> is encountered in reading; <c>false</c> if <c>null</c> should be returned in this situation.</param>
            <returns>A <see cref="T:System.String" /> read from the <see cref="T:System.IO.TextReader" /> from its current position to the position of the specified <paramref name="keychar" /> with <paramref name="keychar"/> at the end of the returned <see cref="T:System.String"/>, or to the end of the <paramref name="reader"/> if no such <paramref name="keychar"/> is found.</returns>
        </member>
        <member name="M:System.IO.TextEx.SkipTo(System.IO.TextReader,System.Char)">
            <summary>
            Advances the reader to the position after the next occurrence of the specified <paramref name="keychar" />.
            </summary>
            <param name="reader">A <see cref="T:System.IO.TextReader" /> object.</param>
            <param name="keychar">The <paramref name="reader" /> will advance its position to the character immediately after the next occurrence of this <paramref name="keychar" />.</param>
            <returns><c>true</c> if <paramref name="keychar"/> is encountered, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.IO.TextEx.ReadNonWhitespace(System.IO.TextReader)">
            <summary>
            Skips white spaces defined by <see cref="M:System.Char.IsWhiteSpace(System.Char)"/> and returns the next non-whitespace character.
            </summary>
            <param name="reader">A <see cref="T:System.IO.TextReader" /> object.</param>
            <returns>The next non-whitespace retrieved from the <paramref name="reader"/>.</returns>
        </member>
        <member name="M:System.IO.TextEx.ReadTo(System.IO.TextReader,System.String,System.Boolean)">
            <summary>
            Reads until the specified <paramref name="keyword" /> is encountered. <paramref name="keyword" /> will not be included in the returned string.
            </summary>
            <param name="reader">A <see cref="T:System.IO.TextReader" /> object.</param>
            <param name="keyword">The <paramref name="reader" /> will advance its position to the character immediately after the next occurrence of this <paramref name="keyword" />.</param>
            <param name="returnIfKeywordNotFound"><c>true</c> if a string starting from the reader's current position to the end should be returned if no <paramref name="keyword"/> is encountered in reading; <c>false</c> if <c>null</c> should be returned in this situation.</param>
            <returns>A <see cref="T:System.String" /> read from the <see cref="T:System.IO.TextReader" /> from its current position to the position of the specified <paramref name="keyword" />, or to the end of the <paramref name="reader"/> if no such <paramref name="keyword"/> is found.</returns>
        </member>
        <member name="M:System.IO.TextEx.ReadAfter(System.IO.TextReader,System.String,System.Boolean)">
            <summary>
            Reads until the specified <paramref name="keyword" /> is encountered. <paramref name="keyword" /> will be included at the end of the returned string.
            </summary>
            <param name="reader">A <see cref="T:System.IO.TextReader" /> object.</param>
            <param name="keyword">The <paramref name="reader" /> will advance its position to the character immediately after the next occurrence of this <paramref name="keyword" />.</param>
            <param name="returnIfKeywordNotFound"><c>true</c> if a string starting from the reader's current position to the end should be returned if no <paramref name="keyword"/> is encountered in reading; <c>false</c> if <c>null</c> should be returned in this situation.</param>
            <returns>A <see cref="T:System.String" /> read from the <see cref="T:System.IO.TextReader" /> from its current position to the position of the specified <paramref name="keyword" /> with <paramref name="keyword"/> at the end of the returned <see cref="T:System.String"/>, or to the end of the <paramref name="reader"/> if no such <paramref name="keyword"/> is found.</returns>
        </member>
        <member name="M:System.IO.TextEx.SkipTo(System.IO.TextReader,System.String)">
            <summary>
            Advances the reader to the position after the next occurrence of the specified <paramref name="keyword" />.
            </summary>
            <param name="reader">A <see cref="T:System.IO.TextReader" /> object.</param>
            <param name="keyword">The <paramref name="reader" /> will advance its position to the character immediately after the next occurrence of this <paramref name="keyword" />.</param>
            <returns><c>true</c> if <paramref name="keyword"/> is encountered, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.IO.TextEx.ReadInteger(System.IO.TextReader)">
            <summary>
            Reads the next integer at most 32-bit large.
            </summary>
            <param name="reader">A <see cref="T:System.IO.TextReader" /> object.</param>
            <returns>The next integer; or <c>null</c> if reading fails.</returns>
        </member>
        <member name="M:System.IO.TextEx.ReadNumber(System.IO.TextReader)">
            <summary>
            Reads the next number as a <see cref="T:System.Double"/>.
            </summary>
            <param name="reader">A <see cref="T:System.IO.TextReader" /> object.</param>
            <returns>The next number as a <see cref="T:System.Double"/>; or <c>null</c> if reading fails.</returns>
        </member>
        <member name="M:System.IO.TextEx.WriteWithDelimiter``1(System.IO.TextWriter,System.Char,``0[])">
            <summary>
            Writes the text representations of several objects concatenated by a delimiter to the current text writer.
            </summary>
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> object.</param>
            <param name="delimiter">The delimiter to concatenate text representations.</param>
            <param name="objs">The objects whose text representations are to be concatenated.</param>
        </member>
        <member name="M:System.IO.TextEx.WriteWithDelimiter``1(System.IO.TextWriter,System.Char,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes the text representations of objects in a collection concatenated by a delimiter to the current text writer.
            </summary>
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> object.</param>
            <param name="delimiter">The delimiter to concatenate text representations.</param>
            <param name="collection">The collection of objects whose text representations are to be concatenated.</param>
        </member>
        <member name="M:System.IO.TextEx.WriteLineWithDelimiter``1(System.IO.TextWriter,System.Char,``0[])">
            <summary>
            Writes the text representations of several objects concatenated by a delimiter to the current text writer as a single line.
            </summary>
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> object.</param>
            <param name="delimiter">The delimiter to concatenate text representations.</param>
            <param name="objs">The objects whose text representations are to be concatenated.</param>
        </member>
        <member name="M:System.IO.TextEx.WriteLineWithDelimiter``1(System.IO.TextWriter,System.Char,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes the text representations of objects in a collection concatenated by a delimiter to the current text writer as a single line.
            </summary>
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> object.</param>
            <param name="delimiter">The delimiter to concatenate text representations.</param>
            <param name="collection">The collection of objects whose text representations are to be concatenated.</param>
        </member>
        <member name="M:System.IO.TextEx.CopyNonEmptyLines(System.IO.StreamReader,System.IO.TextWriter,System.IO.TextReader[],System.IO.TextWriter[])">
            <summary>
            Copies non-empty lines in the current <see cref="T:System.IO.StreamReader"/> to another <see cref="T:System.IO.TextWriter"/>. You may associate multiple other <see cref="T:System.IO.TextReader"/> objects with this non-empty line copy process.
            </summary>
            <param name="mainReader">The current <see cref="T:System.IO.StreamReader"/>.</param>
            <param name="mainOutput">The main output where non-empty lines will be copied.</param>
            <param name="associatedReaders">The associated <see cref="T:System.IO.TextReader"/> objects. If an non-empty line of the current <see cref="T:System.IO.StreamReader"/> is copied to the <paramref name="mainOutput"/>, then the corresponding lines in each of these <see cref="!:associatedReaders"/> will be copied to the corresponding <see cref="T:System.IO.TextReader"/> object of <paramref name="associatedOutputs"/>.</param>
            <param name="associatedOutputs">The associated <see cref="T:System.IO.TextWriter"/> objects.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when one or more of <paramref name="mainReader"/>, <paramref name="mainOutput"/>, <paramref name="associatedReaders"/> and <paramref name="associatedReaders"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">Occurs when the length of <paramref name="associatedReaders"/> is not equal to the length of <paramref name="associatedOutputs"/>.</exception>
        </member>
        <member name="M:System.IO.TextEx.CopySublines(System.IO.TextReader[],System.IO.TextWriter[],System.Int32,System.Int32)">
            <summary>
            Copies part of lines of each of these <paramref name="TextReader"/> objects to corresponding <see cref="T:System.IO.TextWriter"/> objects.
            </summary>
            <param name="readers">The current <see cref="T:System.IO.TextReader"/> objects.</param>
            <param name="outputs">The corresponding output <see cref="T:System.IO.TextWriter"/> objects.</param>
            <param name="offset">Provides the current-postion based index of the line where the copy starts. If this argument is set 0, the copy starts from the current position of each of the <see cref="T:System.IO.TextReader"/> objects.</param>
            <param name="lineCount">The number of lines to copy.</param>
            <exception cref="T:System.ArgumentNullException">Occurs when either <paramref name="readers"/> or <paramref name="outputs"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Occurs when the length of <paramref name="readers"/> is not equal to the length of <paramref name="outputs"/>.</exception>
        </member>
        <member name="M:System.IO.TextEx.CopySublines(System.IO.TextReader,System.IO.TextWriter,System.Int32,System.Int32)">
            <summary>
            Copies part of lines of the current <see cref="T:System.IO.TextReader"/> object to a <see cref="T:System.IO.TextWriter"/> object.
            </summary>
            <param name="readers">The current <see cref="T:System.IO.TextReader"/> object.</param>
            <param name="output">The output <see cref="T:System.IO.TextWriter"/> object.</param>
            <param name="offset">Provides the current-postion based index of the line where the copy starts. If this argument is set 0, the copy starts from the current position of the <see cref="T:System.IO.TextReader"/> object.</param>
            <param name="lineCount">The number of lines to copy.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when either <paramref name="reader"/> or <paramref name="output"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:System.IO.TextEx.LineSample(System.IO.StreamReader[],System.IO.TextWriter[],System.Double,System.Random)">
            <summary>
            Roughly and randomly sample lines from an array of <see cref="T:System.IO.StreamReader"/> objects into an array of <see cref="T:System.IO.TextWriter"/> objects of the same array size. NOTE that this is not an accurate sampling method. For example, when <paramref name="sampleRate"/> is assigned 0.3, about but not exactly 30% of the lines will be sampled.
            </summary>
            <param name="readers">The <see cref="T:System.IO.StreamReader"/> objects to sample from.</param>
            <param name="outputs">The output <see cref="T:System.IO.TextWriter"/> objects.</param>
            <param name="sampleRate">The sample rate. For example, if this value is 0.3, then about 30% of the lines will be sampled from each reader and written into the corresponding writer.</param>
            <param name="rnd">The <see cref="T:System.Random"/> object used to perform random sampling.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <see cref="!:readers"/> or <see cref="!:outputs"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">Occurs when the sizes of <paramref name="readers"/> and <see cref="!:outputs"/> do not equal.</exception>
        </member>
        <member name="M:System.IO.TextEx.RandomSplit(System.IO.StreamReader[],System.Pair{System.IO.TextWriter}[],System.Double,System.Random)">
            <summary>
            Roughly and randomly splits lines from each of an array of <see cref="T:System.IO.StreamReader"/> objects into corresponding two <see cref="T:System.IO.TextWriter"/> objects. NOTE that this is not an accurate spliting method. For example, when <paramref name="splitRate"/> is assigned 0.3, about but not exactly 30% of the lines will be copied to the first <see cref="T:System.IO.TextWriter"/> object.
            </summary>
            <param name="readers">The current <see cref="T:System.IO.StreamReader"/> objects.</param>
            <param name="outputs">An array of <see cref="T:System.IO.TextWriter"/> pairs. Lines of each of the <see cref="T:System.IO.StreamReader"/> object will be randomly split and written into the corresponding pair in this array.</param>
            <param name="splitRate">The split rate. For example, if this value is 0.3, then about 30% of the lines of each reader will be written into the first writer of the corresponding pair in <paramref name="outputs"/>, and the remaining about 70% of the lines will be written into the second writer.</param>
            <param name="rnd">The <see cref="T:System.Random"/> object used to perform random split.</param>
            <exception cref="T:System.ArgumentException">Occurs when the sizes of <paramref name="readers"/> and <see cref="!:outputs"/> do not equal.</exception>
        </member>
        <member name="T:System.Key">
            <summary>
            Serves as a key for a combination of objects.
            </summary>
        </member>
        <member name="M:System.Key.ToBytes">
            <summary>
            Gets the byte representation of this System.Key object.
            </summary>
            <returns>An array of bytes equivalent to this System.Key object.</returns>
        </member>
        <member name="P:System.Key.Length">
            <summary>
            Gets the length of this System.Key object.
            </summary>
        </member>
        <member name="M:System.Key.GetHashCode">
            <summary>
            Serves as a hash function for this System.Key object.
            </summary>
            <returns>A hash code for the current System.Key object.</returns>
        </member>
        <member name="M:System.Key.Equals(System.Object)">
            <summary>
             Determines whether the specified System.Object is equal to the current System.Key.
            </summary>
            <param name="obj">The System.Object to compare with the current System.Key.</param>
            <returns>true if the specified System.Object is equal to the current System.Key;
            otherwise, false.</returns>
        </member>
        <member name="M:System.Key.#ctor(System.Byte[])">
            <summary>
            Initializes a new System.Key instance by a byte array.
            <para>!!! Note that the byte array passed into this constructor will be directly stored, not its copy. In other constructors, the copy of the data passed in will stored.</para>
            </summary>
            <param name="bytes">A byte array.</param>
        </member>
        <member name="M:System.Key.#ctor(System.Object[])">
            <summary>
            Initializes a new System.Key instance by an array of objects. Types supported to initialize a System.Key object include:
            <para>1. all system integers, numbers and their array/list (except System.Decimal and its array/list);</para>
            <para>2. System.Char and its array/list;</para>
            <para>3. System.DateTime and its array/list;</para>
            <para>4. System.String and its array/list (encoded by Unicode); </para>
            <para>5. a struct whose size is able to be determined by System.Runtime.InteropServices.Marshal.SizeOf method (however, array/list of structs is not supported);</para>
            <para>6. any other type that has a method named ToBytes.</para>
            </summary>
            <param name="bytes">An array of objects.</param>
        </member>
        <member name="M:System.Key.#ctor(System.SByte[])">
            <summary>
            Initializes a new System.Key instance by a signed byte array.
            </summary>
            <param name="bytes">A signed byte array.</param>
        </member>
        <member name="M:System.Key.#ctor(System.Char[])">
            <summary>
            Initializes a new System.Key instance by a System.Char array.
            </summary>
            <param name="array">A System.Char array.</param>
        </member>
        <member name="M:System.Key.#ctor(System.Int16[])">
            <summary>
            Initializes a new System.Key instance by System.Int16 integers.
            </summary>
            <param name="values">System.Int16 integers.</param>
        </member>
        <member name="M:System.Key.#ctor(System.Int32[])">
            <summary>
            Initializes a new System.Key instance by System.Int32 integers.
            </summary>
            <param name="values">System.Int32 integers.</param>
        </member>
        <member name="M:System.Key.#ctor(System.Int64[])">
            <summary>
            Initializes a new System.Key instance by System.Int64 integers.
            </summary>
            <param name="values">System.Int64 integers.</param>
        </member>
        <member name="M:System.Key.#ctor(System.UInt16[])">
            <summary>
            Initializes a new System.Key instance by System.UInt16 integers.
            </summary>
            <param name="values">System.UInt16 integers.</param>
        </member>
        <member name="M:System.Key.#ctor(System.UInt32[])">
            <summary>
            Initializes a new System.Key instance by System.UInt32 integers.
            </summary>
            <param name="values">System.UInt32 integers.</param>
        </member>
        <member name="M:System.Key.#ctor(System.UInt64[])">
            <summary>
            Initializes a new System.Key instance by System.UInt64 integers.
            </summary>
            <param name="values">System.UInt64 integers.</param>
        </member>
        <member name="M:System.Key.#ctor(System.Single[])">
            <summary>
            Initializes a new System.Key instance by System.Singles.
            </summary>
            <param name="values">System.Singles.</param>
        </member>
        <member name="M:System.Key.#ctor(System.Double[])">
            <summary>
            Initializes a new System.Key instance by System.Doubles.
            </summary>
            <param name="values">System.Doubles.</param>
        </member>
        <member name="M:System.Key.#ctor(System.DateTime[])">
            <summary>
            Initializes a new System.Key instance by System.DateTimes.
            </summary>
            <param name="values">System.DateTimes.</param>
        </member>
        <member name="T:System.MathEx">
            <summary>
            Provides extension methods for mathematical calculations.
            </summary>
        </member>
        <member name="M:System.MathEx.Bound``1(``0,``0,``0)">
            <summary>
            Returns a value neither larger than <paramref name="maximum" />
            nor smaller than <paramref name="minimum" />.
            If the current value is neither smaller than <paramref name="minimum" /> nor larger than <paramref name="maximum" />, then the <paramref name="value" /> itself will be returned;
            if the current value is larger than <paramref name="maximum" />, then <paramref name="maximum" /> will be returned;
            if the current value is smaller than <paramref name="minimum" />, then <paramref name="minimum" /> will be returned.
            </summary>
            <typeparam name="T">The type of the current value. This type must be a comparable type.</typeparam>
            <param name="value">This comparable value.</param>
            <param name="minimum">The returned value will not be smaller than this value.</param>
            <param name="maximum">The returned value will not be larger than this value.</param>
            <returns>
            A value bounded between the <paramref name="minimum" /> and the <paramref name="maximum" />.
            </returns>
        </member>
        <member name="M:System.MathEx.BoundedBelow``1(``0,``0)">
            <summary>
            Returns a value not smaller than <paramref name="minimum" />.
            If the current value is not smaller than <paramref name="minimum" />, then the <paramref name="value" /> itself will be returned;
            if the current value is smaller than <paramref name="minimum" />, then <paramref name="minimum" /> will be returned.
            </summary>
            <typeparam name="T">The type of the current value. This type must be a comparable type.</typeparam>
            <param name="value">This comparable value.</param>
            <param name="minimum">The returned value will not be smaller than this value.</param>
            <returns>
            A value not smaller than <paramref name="minimum" />.
            </returns>
        </member>
        <member name="M:System.MathEx.BoundedAbove``1(``0,``0)">
            <summary>
            Returns a value not larger than <paramref name="maximum" />.
            If the current value is not larger than <paramref name="maximum" />, then the <paramref name="value" /> itself will be returned;
            if the current value is larger than <paramref name="maximum" />, then <paramref name="maximum" /> will be returned.
            </summary>
            <typeparam name="T">The type of the current value. This type must be a comparable type.</typeparam>
            <param name="value">This comparable value.</param>
            <param name="maximum">The returned value will not be larger than this value.</param>
            <returns>
            A value not larger than <paramref name="maximum" />.
            </returns>
        </member>
        <member name="M:System.MathEx.Absolute(System.Int32)">
            <summary>
            Returns the absolute value of this System.Int32 integer.
            </summary>
            <param name="value">This System.Int32 integer.</param>
            <returns>The absolute value of this System.Int32 integer.</returns>
        </member>
        <member name="M:System.MathEx.Absolute(System.Int64)">
            <summary>
            Returns the absolute value of this System.Int64 integer.
            </summary>
            <param name="value">This System.Int64 integer.</param>
            <returns>The absolute value of this System.Int64 integer.</returns>
        </member>
        <member name="M:System.MathEx.Absolute(System.Double)">
            <summary>
            Returns the absolute value of this System.Double number.
            </summary>
            <param name="value">This System.Double number.</param>
            <returns>The absolute value of this System.Double number.</returns>
        </member>
        <member name="M:System.MathEx.Absolute(System.Single)">
            <summary>
            Returns the absolute value of this System.Single number.
            </summary>
            <param name="value">This System.Single number.</param>
            <returns>The absolute value of this System.Single number.</returns>
        </member>
        <member name="M:System.MathEx.Absolute(System.Decimal)">
            <summary>
            Returns the absolute value of this System.Decimal number.
            </summary>
            <param name="value">This System.Decimal number.</param>
            <returns>The absolute value of this System.Decimal number.</returns>
        </member>
        <member name="M:System.MathEx.Absolute(System.SByte)">
            <summary>
            Returns the absolute value of this System.SBtye integer.
            </summary>
            <param name="value">This System.SBtye integer.</param>
            <returns>The absolute value of this System.SBtye integer.</returns>
        </member>
        <member name="M:System.MathEx.Round(System.Double,System.Int32)">
            <summary>
            Rounds a double-precision floating-point value to a specified number of fractional digits.
            </summary>
            <param name="value">A double-precision floating-point value to be rounded.</param>
            <param name="digits">The number of fractional digits in the return value.</param>
            <returns> The number nearest to <paramref name="value"/> 
            that contains a number of fractional digits equal to <paramref name="digits"/>.</returns>
        </member>
        <member name="M:System.MathEx.Round(System.Single,System.Int32)">
            <summary>
            Rounds a single-precision floating-point value to a specified number of fractional digits.
            </summary>
            <param name="value">A single-precision floating-point value to be rounded.</param>
            <param name="digits">The number of fractional digits in the return value.</param>
            <returns> The number nearest to <paramref name="value"/> 
            that contains a number of fractional digits equal to <paramref name="digits"/>.</returns>
        </member>
        <member name="M:System.MathEx.Round(System.Decimal,System.Int32)">
            <summary>
            Rounds a decimal value to a specified number of fractional digits.
            </summary>
            <param name="value">A decimal number to be rounded.</param>
            <param name="decimals">The number of decimal places in the return value.</param>
            <returns>The number nearest to <paramref name="value"/> 
            that contains a number of fractional digits equal to <paramref name="decimals"/>.</returns>
        </member>
        <member name="M:System.MathEx.Round(System.Double)">
            <summary>
            Rounds a double-precision floating-point value to the nearest integral value.
            </summary>
            <param name="value">A double-precision floating-point value to be rounded.</param>
            <returns> The integral value nearest to <paramref name="value"/>.
            If the fractional component of a is halfway between
            two integers, one of which is even and the other odd, then the even number
            is returned.</returns>
        </member>
        <member name="M:System.MathEx.RoundToInt(System.Double)">
            <summary>
            Rounds a double-precision floating-point value to the nearest integer value.
            </summary>
            <param name="value">A double-precision floating-point value to be rounded.</param>
            <returns> The integer value nearest to <paramref name="value"/>.
            If the fractional component of a is halfway between
            two integers, one of which is even and the other odd, then the even number
            is returned.</returns>
        </member>
        <member name="M:System.MathEx.Round(System.Single)">
            <summary>
            Rounds a single-precision floating-point value to the nearest integral value.
            </summary>
            <param name="value">A single-precision floating-point value to be rounded.</param>
            <returns> The integral value nearest to <paramref name="value"/>.
            If the fractional component of a is halfway between
            two integers, one of which is even and the other odd, then the even number
            is returned. Note that this method returns a System.Single instead of an
            integral type.</returns>
        </member>
        <member name="M:System.MathEx.Round(System.Decimal)">
            <summary>
            Rounds a decimal value to the nearest integral value.
            </summary>
            <param name="value">A decimal number to be rounded.</param>
            <returns> The integral value nearest to <paramref name="value"/>.
            If the fractional component of a is halfway between
            two integers, one of which is even and the other odd, then the even number
            is returned. Note that this method returns a System.Single instead of an
            integral type.</returns>
        </member>
        <member name="M:System.MathEx.Round(System.Double,System.Int32,System.MidpointRounding)">
            <summary>
            Rounds a double-precision floating-point value to a specified number of fractional digits.
            </summary>
            <param name="value">A double-precision floating-point value to be rounded.</param>
            <param name="digits">The number of fractional digits in the return value.</param>
            <param name="mode">Specification for how to round value if it is midway between two other numbers.</param>
            <returns> The number nearest to <paramref name="value"/> 
            that contains a number of fractional digits equal to <paramref name="digits"/>.</returns>
        </member>
        <member name="M:System.MathEx.Round(System.Single,System.Int32,System.MidpointRounding)">
            <summary>
            Rounds a single-precision floating-point value to a specified number of fractional digits.
            </summary>
            <param name="value">A single-precision floating-point value to be rounded.</param>
            <param name="digits">The number of fractional digits in the return value.</param>
            <param name="mode">Specification for how to round value if it is midway between two other numbers.</param>
            <returns> The number nearest to <paramref name="value"/> 
            that contains a number of fractional digits equal to <paramref name="digits"/>.</returns>
        </member>
        <member name="M:System.MathEx.Round(System.Decimal,System.Int32,System.MidpointRounding)">
            <summary>
            Rounds a decimal value to a specified number of fractional digits.
            </summary>
            <param name="value">A decimal number to be rounded.</param>
            <param name="decimals">The number of decimal places in the return value.</param>
            <param name="mode">Specification for how to round value if it is midway between two other numbers.</param>
            <returns>The number nearest to <paramref name="value"/> 
            that contains a number of fractional digits equal to <paramref name="decimals"/>.</returns>
        </member>
        <member name="M:System.MathEx.Pow(System.Double,System.Double)">
            <summary>
            Returns a specified number raised to the specified power.
            </summary>
            <param name="value">A double-precision floating-point number to be raised to a power.</param>
            <param name="power">A double-precision floating-point number that specifies a power.</param>
            <returns>The current number raised to the specified <paramref name="power"/>.</returns>
        </member>
        <member name="M:System.MathEx.GetBound(System.Collections.Generic.IList{System.Drawing.Point})">
            <summary>
            Gets the bound of this array/list of points.
            </summary>
            <param name="points">An array/list of points represented by System.Drawing.Point objects.</param>
            <returns>A System.Drawing.Rectangle as the bound of this array/list of points.</returns>
        </member>
        <member name="M:System.MathEx.GetDistance(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Gets the distance from the current point to the another point.
            </summary>
            <param name="point">The current point.</param>
            <param name="anotherPoint">Another point.</param>
            <returns>The distance between the two points.</returns>
        </member>
        <member name="M:System.MathEx.GetDistance(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Gets the distance from the current point to the another point.
            </summary>
            <param name="point">The current point.</param>
            <param name="anotherPoint">Another point.</param>
            <returns>The distance between the two points.</returns>
        </member>
        <member name="M:System.MathEx.GetSine(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Gets the sine value from this point to the specified another point.
            </summary>
            <param name="point">The current point.</param>
            <param name="anotherPoint">Another point.</param>
            <returns>The sine value from this point to the specified another point.</returns>
        </member>
        <member name="M:System.MathEx.GetCosine(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Gets the cosine value from this point to the specified another point.
            </summary>
            <param name="point">The current point.</param>
            <param name="anotherPoint">Another point.</param>
            <returns>The cosine value from this point to the specified another point.</returns>
        </member>
        <member name="M:System.MathEx.GetTan(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Gets the tan value from this point to the specified another point.
            </summary>
            <param name="point">The current point.</param>
            <param name="anotherPoint">Another point.</param>
            <returns>The tan value from this point to the specified another point.</returns>
        </member>
        <member name="M:System.MathEx.GetCotan(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Gets the cotan value from this point to the specified another point.
            </summary>
            <param name="point">The current point.</param>
            <param name="anotherPoint">Another point.</param>
            <returns>The cotan value from this point to the specified another point.</returns>
        </member>
        <member name="M:System.MathEx.GetAngle(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Gets the angle value from this point to the specified another point.
            </summary>
            <param name="point">The current point.</param>
            <param name="anotherPoint">Another point.</param>
            <returns>The angle value from this point to the specified another point.</returns>
        </member>
        <member name="M:System.MathEx.GetRadian(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Gets the radian value from this point to the specified another point.
            </summary>
            <param name="point">The current point.</param>
            <param name="anotherPoint">Another point.</param>
            <returns>The angle value from the current point to the specified another value.</returns>
        </member>
        <member name="M:System.MathEx.GetSine(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Gets the sine value from this point to the specified another point.
            </summary>
            <param name="point">The current point.</param>
            <param name="anotherPoint">Another point.</param>
            <returns>The sine value from this point to the specified another point.</returns>
        </member>
        <member name="M:System.MathEx.GetCosine(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Gets the cosine value from this point to the specified another point.
            </summary>
            <param name="point">The current point.</param>
            <param name="anotherPoint">Another point.</param>
            <returns>The cosine value from this point to the specified another point.</returns>
        </member>
        <member name="M:System.MathEx.GetTan(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Gets the tan value from this point to the specified another point.
            </summary>
            <param name="point">The current point.</param>
            <param name="anotherPoint">Another point.</param>
            <returns>The tan value from this point to the specified another point.</returns>
        </member>
        <member name="M:System.MathEx.GetCotan(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Gets the cotan value from this point to the specified another point.
            </summary>
            <param name="point">The current point.</param>
            <param name="anotherPoint">Another point.</param>
            <returns>The cotan value from this point to the specified another point.</returns>
        </member>
        <member name="M:System.MathEx.GetAngle(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Gets the angle value from this point to the specified another point.
            </summary>
            <param name="point">The current point.</param>
            <param name="anotherPoint">Another point.</param>
            <returns>The angle value from this point to the specified another point.</returns>
        </member>
        <member name="M:System.MathEx.GetRadian(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Gets the radian value from this point to the specified another point.
            </summary>
            <param name="point">The current point.</param>
            <param name="anotherPoint">Another point.</param>
            <returns>The angle value from the current point to the specified another value.</returns>
        </member>
        <member name="T:System.Pair`2">
            <summary>
            Represents two values or objects in a mutable pair.
            </summary>
            <typeparam name="T1">The type of the first value or object.</typeparam>
            <typeparam name="T2">The type of the second value or object.</typeparam>
        </member>
        <member name="M:System.Pair`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Pair`2"/> class.
            </summary>
        </member>
        <member name="M:System.Pair`2.#ctor(`0,`1)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:System.Pair`2" /> class.
            </summary>
            <param name="item1">The first value or object.</param>
            <param name="item2">The second value or object.</param>
        </member>
        <member name="P:System.Pair`2.Item1">
            <summary>
            Gets the first value or object.
            </summary>
        </member>
        <member name="P:System.Pair`2.Item2">
            <summary>
            Gets the second value or object.
            </summary>
        </member>
        <member name="M:System.Pair`2.ToString(System.Char)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="separator">The separator that separates the string representations of <c>Value1</c> and <c>Value2</c> of in the returned string.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:System.Pair`2.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:System.Pair`2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is also a <see cref="T:System.Pair`2"/> with the same parameter types as this instance, and both <c>Value1</c> and <c>Value2</c> of the specified <see cref="T:System.Pair`2" /> are respectively equal to the <c>Value1</c> and <c>Value2</c> of this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Pair`2.GetHashCode">
            <summary>
            Returns a hash code for this instance. Item either <see cref="P:System.Pair`2.Item1"/> or <see cref="P:System.Pair`2.Item2"/> is changed, then the previously computed hash code may not represent the current objects in the pair.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:System.Triple`3">
            <summary>
            Represents three values or objects in a mutable triple.
            </summary>
            <typeparam name="T1">The type of the first value or object.</typeparam>
            <typeparam name="T2">The type of the second value or object.</typeparam>
            <typeparam name="T3">The type of the third value or object.</typeparam>
        </member>
        <member name="M:System.Triple`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Triple`3"/> class.
            </summary>
        </member>
        <member name="M:System.Triple`3.#ctor(`0,`1,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Triple`3"/> class.
            </summary>
            <param name="item1">The first value or object.</param>
            <param name="item2">The second value or object.</param>
            <param name="item3">The third value or object.</param>
        </member>
        <member name="P:System.Triple`3.Item1">
            <summary>
            Gets the first value or object.
            </summary>
        </member>
        <member name="P:System.Triple`3.Item2">
            <summary>
            Gets the second value or object.
            </summary>
        </member>
        <member name="P:System.Triple`3.Item3">
            <summary>
            Gets the third value or object.
            </summary>
        </member>
        <member name="M:System.Triple`3.ToString(System.Char)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="separator">The separator that separates the string representations of <c>Value1</c> and <c>Value2</c> of in the returned string.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:System.Triple`3.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:System.Triple`3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is also a <see cref="T:System.Pair`2"/> with the same parameter types as this instance, and both <c>Value1</c> and <c>Value2</c> of the specified <see cref="T:System.Pair`2" /> are respectively equal to the <c>Value1</c> and <c>Value2</c> of this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Triple`3.GetHashCode">
            <summary>
            Returns a hash code for this instance. Item either <see cref="P:System.Triple`3.Item1"/> or <see cref="P:System.Triple`3.Item2"/> or <see cref="P:System.Triple`3.Item3"/> is changed, then the previously computed hash code may not represent the current objects in the pair.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:System.Pair`1">
            <inheritdoc />
            <summary>
            Represents two values or objects of the same type in pair.
            </summary>
            <typeparam name="T">The type of the two values or objects.</typeparam>
        </member>
        <member name="M:System.Pair`1.#ctor">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:System.Pair`1" /> class.
            </summary>
        </member>
        <member name="M:System.Pair`1.#ctor(`0,`0)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:System.Pair`1" /> class.
            </summary>
            <param name="firstValue">The first value or object.</param>
            <param name="secondValue">The second value or object.</param>
        </member>
        <member name="T:System.Triple`1">
            <inheritdoc />
            <summary>
            Represents three values or objects of the same type in triple.
            </summary>
            <typeparam name="T">The type of the three values or objects.</typeparam>
        </member>
        <member name="M:System.Triple`1.#ctor">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:System.Triple`1" /> class.
            </summary>
        </member>
        <member name="M:System.Triple`1.#ctor(`0,`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Triple`1"/> class.
            </summary>
            <param name="item1">The first value or object.</param>
            <param name="item2">The second value or object.</param>
            <param name="item3">The third value or object.</param>
        </member>
        <member name="T:System.PairEnumerator`1">
            <inheritdoc />
            <summary>
            Gets an enumerator that iterates through two sequences of the same type and yields pairs of objects in the two sequences.
            </summary>
            <typeparam name="T">The type of objects in the two sequences.</typeparam>
        </member>
        <member name="M:System.PairEnumerator`1.#ctor(System.Collections.Generic.IEnumerator{`0},System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.PairEnumerator`1"/> class.
            </summary>
            <param name="enum1">An enumerator that goes through the first sequence of objects of type <typeparamref name="T"/>.</param>
            <param name="enum2">An enumerator that goes through the second sequence of objects of type <typeparamref name="T"/>.</param>
        </member>
        <member name="M:System.PairEnumerator`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.PairEnumerator`1"/> class.
            </summary>
            <param name="seq1">The first sequence of objects of type <typeparamref name="T"/>.</param>
            <param name="seq2">The second sequence of objects of type <typeparamref name="T"/>.</param>
        </member>
        <member name="P:System.PairEnumerator`1.Current">
            <summary>
            Gets the current pair of objects.
            </summary>
            <value>The current pair of objects.</value>
        </member>
        <member name="M:System.PairEnumerator`1.Dispose">
            <summary>
            Disposes the underlying enumerators used to go through the two sequences.
            </summary>
        </member>
        <member name="M:System.PairEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next pair of objects.
            </summary>
            <returns><c>true</c> if the enumerator was successfully advanced to the next pair; <c>false</c> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:System.PairEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position. Only works if both the enumerators of the two underlying sequences support reset.
            </summary>
        </member>
        <member name="T:System.PairEnumerator`2">
            <inheritdoc />
            <summary>
            Gets an enumerator that iterates through two sequences of the different types and yields pairs of objects in the two sequences.
            </summary>
            <typeparam name="T1">The type of objects in the first sequence.</typeparam>
            <typeparam name="T2">The type of objects in the second sequence.</typeparam>
        </member>
        <member name="M:System.PairEnumerator`2.#ctor(System.Collections.Generic.IEnumerator{`0},System.Collections.Generic.IEnumerator{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:System.PairEnumerator`1"/> class.
            </summary>
            <param name="enum1">An enumerator that goes through the first sequence of objects of type <typeparamref name="T1"/>.</param>
            <param name="enum2">An enumerator that goes through the second sequence of objects of type <typeparamref name="T2"/>.</param>
        </member>
        <member name="M:System.PairEnumerator`2.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:System.PairEnumerator`1"/> class.
            </summary>
            <param name="seq1">The first sequence of objects of type <typeparamref name="T1"/>.</param>
            <param name="seq2">The second sequence of objects of type <typeparamref name="T2"/>.</param>
        </member>
        <member name="P:System.PairEnumerator`2.Current">
            <summary>
            Gets the current pair of objects.
            </summary>
            <value>The current pair of objects.</value>
        </member>
        <member name="M:System.PairEnumerator`2.Dispose">
            <summary>
            Disposes the underlying enumerators used to go through the two sequences.
            </summary>
        </member>
        <member name="M:System.PairEnumerator`2.MoveNext">
            <summary>
            Advances the enumerator to the next pair of objects.
            </summary>
            <returns><c>true</c> if the enumerator was successfully advanced to the next pair; <c>false</c> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:System.PairEnumerator`2.Reset">
            <summary>
            Sets the enumerator to its initial position. Only works if both the enumerators of the two underlying sequences support reset.
            </summary>
        </member>
        <member name="T:System.RandomEx">
            <summary>
            Provides extension methods for <see cref="T:System.Random"/> class.
            </summary>
        </member>
        <member name="M:System.RandomEx.NextString(System.Random,System.Char,System.Char,System.Int32)">
            <summary>
            Gets a randomly constructed string.
            </summary>
            <param name="rnd">A <see cref="T:System.Random"/> instance.</param>
            <param name="boundChr1">A digit value bound that represents a Unicode character.</param>
            <param name="boundChr2">Another digit value bound that represents a Unicode character.</param>
            <param name="length">The length of the output string.</param>
            <returns>The random output string.</returns>
        </member>
        <member name="M:System.RandomEx.NextString(System.Random,System.Char,System.Char,System.Int32,System.Int32)">
            <summary>
            Gets a randomly constructed string.
            </summary>
            <param name="r">A <see cref="T:System.Random"/> instance.</param>
            <param name="boundChr1">A digit value bound that represents a Unicode character.</param>
            <param name="boundChr2">Another digit value bound that represents a Unicode character.</param>
            <param name="minlen">The minimum length of the output string.</param>
            <param name="maxlen">The maximum length of the output string.</param>
            <returns>The random output string.</returns>
        </member>
        <member name="M:System.RandomEx.Next(System.Random,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets a random integer within a specific range.
            </summary>
            <param name="rnd">A <see cref="T:System.Random" /> instance.</param>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The upper bound of the random number returned.
            <paramref name="maxValue" /> must be greater than or equal to <paramref name="minValue" />.
            <para>Whether this bound is inclusive is determined by the third argument <paramref name="maxValueInclusive" />.</para></param>
            <param name="maxValueInclusive">Specifies whether <paramref name="maxValue" /> can be returned.</param>
            <returns>
            A random integer.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when <paramref name="minValue"/> is greater than <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:System.RandomEx.Next(System.Random,System.Int64,System.Int64)">
            <summary>
            Gets a random 64-bit integer within a specific range.
            </summary>
            <param name="rnd">A <see cref="T:System.Random" /> instance.</param>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned.
            <paramref name="maxValue" /> must be greater than or equal to <paramref name="minValue" />.
            <para>Whether this bound is inclusive is determined by the third argument <paramref name="maxValueInclusive" />.</para></param>
            <returns>
            A random 64-bit integer.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when <paramref name="minValue" /> is greater than <paramref name="maxValue" />.</exception>
        </member>
        <member name="M:System.RandomEx.Next(System.Random,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Gets a random 64-bit integer within a specific range.
            </summary>
            <param name="rnd">A <see cref="T:System.Random" /> instance.</param>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The upper bound of the random number returned.
            <paramref name="maxValue" /> must be greater than or equal to <paramref name="minValue" />.
            <para>Whether this bound is inclusive is determined by the third argument <paramref name="maxValueInclusive" />.</para></param>
            <param name="maxValueInclusive">Specifies whether <paramref name="maxValue" /> can be returned.</param>
            <returns>
            A 64-bit random integer.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when <paramref name="minValue" /> is greater than <paramref name="maxValue" />.</exception>
        </member>
        <member name="M:System.RandomEx.NextBoolean(System.Random)">
            <summary>
            Returns a random bool value.
            </summary>
            <param name="rnd">A <see cref="T:System.Random"/> instance.</param>
            <returns>A random bool value.</returns>
        </member>
        <member name="M:System.RandomEx.NextBoolean">
            <summary>
            Returns a random bool value.
            </summary>
            <returns>A random bool value.</returns>
        </member>
        <member name="M:System.RandomEx.NextBoolean(System.Random,System.Double)">
            <summary>
            Returns a random bool value.
            </summary>
            <param name="rnd">The Random instance to generate the random value.</param>
            <param name="probabilityOfTrue">The odds of returning true. The value must be set between 0 and 1.</param>
            <returns>A random bool value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when <paramref name="probabilityOfTrue"/> is smaller than 0 or greater than 1.</exception>
        </member>
        <member name="M:System.RandomEx.NextBoolean(System.Double)">
            <summary>
            Returns a random bool value.
            </summary>
            <param name="probabilityOfTrue">The odds of returning true. The value must be set between 0 and 1.</param>
            <returns>A random bool value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when <paramref name="probabilityOfTrue"/> is smaller than 0 or greater than 1.</exception>
        </member>
        <member name="M:System.RandomEx.NextDouble(System.Random,System.Double,System.Double)">
            <summary>
            Gets a random <see cref="T:System.Double"/> number within a specific range.
            </summary>
            <param name="rnd">A <see cref="T:System.Random"/> instance.</param>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The inclusive upper bound of the random number returned.</param>
            <returns>A random <see cref="T:System.Double"/> number.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when <paramref name="min"/> is greater than <paramref name="max"/>.</exception>
        </member>
        <member name="M:System.RandomEx.NextDoubleBetween(System.Random,System.Double,System.Double)">
            <summary>
            Gets a random number within a specific range. The first argument <paramref name="value1"/> can be larger than <paramref name="value2"/>.
            </summary>
            <param name="rnd">A <see cref="T:System.Random"/> instance.</param>
            <param name="value1">One inclusive bound of the random number returned.</param>
            <param name="value2">The other inclusive bound of the random number returned.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="T:System.SegmentMapping">
            <summary>
            Represents a segment mapping.
            A segment mapping maps a segment of the first series (like a consecutive part of an array or a string) 
            to a segment of the second series.
            </summary>
        </member>
        <member name="M:System.SegmentMapping.#ctor">
            <summary>
            Initializes a new instance of System.SegmentMapping object.
            </summary>
        </member>
        <member name="P:System.SegmentMapping.OriginalStartPosition">
            <summary>
            Gets or sets the start position of the original segment in the first series.
            </summary>
        </member>
        <member name="P:System.SegmentMapping.OriginalEndPosition">
            <summary>
            Gets or sets the end position of the original segment in the first series.
            </summary>
        </member>
        <member name="P:System.SegmentMapping.MappingStartPosition">
            <summary>
            Gets or sets the start position of the target segment in the second series.
            </summary>
        </member>
        <member name="P:System.SegmentMapping.MappingEndPosition">
            <summary>
            Gets or sets the end position of the target segment in the second series.
            </summary>
        </member>
        <member name="T:System.StringEnumerator1">
            <summary>
            Supports simple iteration of substrings in a string instance.
            <para>For example, suppose "&lt;" and "&gt;" are used as the indicators, iterating "&lt;div&gt;abc&lt;/div&gt;" will get "&lt;div&gt;" and "&lt;/div&gt;"</para>
            </summary>
        </member>
        <member name="P:System.StringEnumerator1.Current">
            <summary>
            Gets the current substring.
            </summary>
        </member>
        <member name="P:System.StringEnumerator1.StartPosition">
            <summary>
            Gets the position of the current substring in the original string.
            </summary>
        </member>
        <member name="P:System.StringEnumerator1.EndPosition">
            <summary>
            Gets the end position of the current substring in the original string.
            </summary>
        </member>
        <member name="P:System.StringEnumerator1.StartIndicator">
            <summary>
            Gets the indicator makring the beginning of each substring to iterate.
            </summary>
        </member>
        <member name="P:System.StringEnumerator1.EndIndicator">
            <summary>
            Gets the indicator makring the end of each substring to iterate.
            </summary>
        </member>
        <member name="P:System.StringEnumerator1.EndOfString">
            <summary>
            Gets a value indicating whether the end of the original string is reached.
            </summary>
        </member>
        <member name="M:System.StringEnumerator1.MoveNext">
            <summary>
            Advances the enumerator to the next desired substring.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next substring; false if the enumerator has passed the end of the original string.</returns>
        </member>
        <member name="M:System.StringEnumerator1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the beginning of the original string.
            </summary>
        </member>
        <member name="M:System.StringEnumerator1.Dispose">
            <summary>
            Disposes this enumerator.
            </summary>
        </member>
        <member name="T:System.StringEnumerator2">
            <summary>
            Supports simple iteration of substrings in a string instance.
            <para>For example, suppose "&lt;" and "&gt;" are used as the indicators, iterating "&lt;div&gt;abc&lt;/div&gt;" will get "&lt;div&gt;" and "&lt;/div&gt;"</para>
            </summary>
        </member>
        <member name="P:System.StringEnumerator2.Current">
            <summary>
            Gets the current substring.
            </summary>
        </member>
        <member name="P:System.StringEnumerator2.StartPosition">
            <summary>
            Gets the position of the current substring in the original string.
            </summary>
        </member>
        <member name="P:System.StringEnumerator2.EndPosition">
            <summary>
            Gets the end position of the current substring in the original string.
            </summary>
        </member>
        <member name="P:System.StringEnumerator2.StartIndicator">
            <summary>
            Gets the indicator makring the beginning of each substring to iterate.
            </summary>
        </member>
        <member name="P:System.StringEnumerator2.EndIndicator">
            <summary>
            Gets the indicator makring the end of each substring to iterate.
            </summary>
        </member>
        <member name="P:System.StringEnumerator2.EndOfString">
            <summary>
            Gets a value indicating whether the end of the original string is reached.
            </summary>
        </member>
        <member name="M:System.StringEnumerator2.MoveNext">
            <summary>
            Advances the enumerator to the next desired substring.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next substring; false if the enumerator has passed the end of the original string.</returns>
        </member>
        <member name="M:System.StringEnumerator2.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the beginning of the original string.
            </summary>
        </member>
        <member name="M:System.StringEnumerator2.Dispose">
            <summary>
            Disposes this enumerator.
            </summary>
        </member>
        <member name="T:System.StringEnumerator3">
            <summary>
            Supports simple iteration of substrings in a string instance.
            <para>For example, suppose "&lt;" and "&gt;" are used as the indicators, iterating "&lt;div&gt;abc&lt;/div&gt;" will get "&lt;div&gt;" and "&lt;/div&gt;"</para>
            </summary>
        </member>
        <member name="P:System.StringEnumerator3.Current">
            <summary>
            Gets the current substring.
            </summary>
        </member>
        <member name="P:System.StringEnumerator3.StartPosition">
            <summary>
            Gets the position of the current substring in the original string.
            </summary>
        </member>
        <member name="P:System.StringEnumerator3.EndPosition">
            <summary>
            Gets the end position of the current substring in the original string.
            </summary>
        </member>
        <member name="P:System.StringEnumerator3.Separator">
            <summary>
            Gets the separator that separates each substring.
            </summary>
        </member>
        <member name="P:System.StringEnumerator3.EndOfString">
            <summary>
            Gets a value indicating whether the end of the original string is reached.
            </summary>
        </member>
        <member name="M:System.StringEnumerator3.MoveNext">
            <summary>
            Advances the enumerator to the next desired substring.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next substring; false if the enumerator has passed the end of the original string.</returns>
        </member>
        <member name="M:System.StringEnumerator3.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the beginning of the original string.
            </summary>
        </member>
        <member name="M:System.StringEnumerator3.Dispose">
            <summary>
            Disposes this enumerator.
            </summary>
        </member>
        <member name="T:System.StringEnumerator4">
            <summary>
            Supports simple iteration of substrings in a string instance.
            <para>For example, suppose "&lt;" and "&gt;" are used as the indicators, iterating "&lt;div&gt;abc&lt;/div&gt;" will get "&lt;div&gt;" and "&lt;/div&gt;"</para>
            </summary>
        </member>
        <member name="P:System.StringEnumerator4.Current">
            <summary>
            Gets the current substring.
            </summary>
        </member>
        <member name="P:System.StringEnumerator4.StartPosition">
            <summary>
            Gets the position of the current substring in the original string.
            </summary>
        </member>
        <member name="P:System.StringEnumerator4.EndPosition">
            <summary>
            Gets the end position of the current substring in the original string.
            </summary>
        </member>
        <member name="P:System.StringEnumerator4.Separator">
            <summary>
            Gets the separator that separates each substring.
            </summary>
        </member>
        <member name="P:System.StringEnumerator4.EndOfString">
            <summary>
            Gets a value indicating whether the end of the original string is reached.
            </summary>
        </member>
        <member name="M:System.StringEnumerator4.MoveNext">
            <summary>
            Advances the enumerator to the next desired substring.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next substring; false if the enumerator has passed the end of the original string.</returns>
        </member>
        <member name="M:System.StringEnumerator4.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the beginning of the original string.
            </summary>
        </member>
        <member name="M:System.StringEnumerator4.Dispose">
            <summary>
            Disposes this enumerator.
            </summary>
        </member>
        <member name="T:System.StringEx">
            <summary>
            Provides rich methods to operate string instances.
            </summary>
        </member>
        <member name="M:System.StringEx.IsNullOrEmpty(System.String)">
            <summary>
            Returns <c>true</c> if current string instance is null or empty. This is a dummy of <see cref="M:System.String.IsNullOrEmpty(System.String)"/> method for convenience.
            </summary>
            <param name="str">This string instance.</param>
            <returns><c>true</c> if this string instance is null or empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.IsEmpty(System.String)">
            <summary>
            Returns <c>true</c> if the current string instance is empty.
            </summary>
            <param name="str">The string instance.</param>
            <returns><c>true</c> if the current string is empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.IsEmptyOrBlank(System.String)">
            <summary>
            Indicates whether the current string instance is empty or contains only whitespace characters defined by <see cref="M:System.Char.IsWhiteSpace(System.Char)"/>.
            </summary>
            <param name="str">This string instance.</param>
            <returns><c>true</c> if this string instance is empty or contains only whitespace characters; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.NullReferenceException">Occurs when <paramref name="str"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:System.StringEx.IsNullOrEmptyOrBlank(System.String)">
            <summary>
            Indicates whether the current string instance is null, empty or contains only white space characters defined by <see cref="M:System.Char.IsWhiteSpace(System.Char)"/>.
            </summary>
            <param name="str">This string instance.</param>
            <returns><c>true</c> if this string instance is null or empty or contains only white space characters; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.IsNotNullOrEmpty(System.String)">
            <summary>
            Returns <c>true</c> if current string instance is not null and not empty.
            </summary>
            <param name="str">This string instance.</param>
            <returns><c>true</c> if this string instance is not null and not empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.IsNotEmpty(System.String)">
            <summary>
            Returns <c>true</c> if the current string instance is not empty.
            </summary>
            <param name="str">The string instance.</param>
            <returns><c>true</c> if the current string is not empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.IsNotEmptyOrBlank(System.String)">
            <summary>
            Indicates whether the current string instance is not empty and contains characters other than white spaces defined by <see cref="M:System.Char.IsWhiteSpace(System.Char)"/>.
            </summary>
            <param name="str">This string instance.</param>
            <returns><c>true</c> if this string instance is not empty and contains at least one non-whitespace character; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.NullReferenceException">Occurs when <paramref name="str"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:System.StringEx.IsNotNullOrEmptyOrBlank(System.String)">
            <summary>
            Indicates whether the current string instance is not null null, not empty, and contains characters other than white spaces defined by <see cref="M:System.Char.IsWhiteSpace(System.Char)"/>.
            </summary>
            <param name="str">This string instance.</param>
            <returns><c>true</c> if this string instance is not null, not empty, and contains at least one non-whitespace character; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.NullIfEmpty(System.String)">
            <summary>
            Returns <c>null</c> if the current string is null or empty; otherwise, returns the current instance.
            </summary>
            <param name="str">This string instance.</param>
            <returns><c>null</c> if the current string is null or empty; otherwise, the current instance.</returns>
        </member>
        <member name="M:System.StringEx.NullIfBlank(System.String)">
            <summary>
            Returns <c>null</c> if the current string is null, empty or contains only white spaces defined by <see cref="M:System.Char.IsWhiteSpace(System.Char)"/>; otherwise, returns the current instance.
            </summary>
            <param name="str">This string instance.</param>
            <returns><c>null</c> if the current string is null or empty or contains only white spaces defined by <see cref="M:System.Char.IsWhiteSpace(System.Char)"/>; otherwise, the current instance.</returns>
        </member>
        <member name="M:System.StringEx.LongestCommonSubstring(System.String,System.String)">
            <summary>
            Gets the length of the longest common substring.
            </summary>
            <param name="source">The source.</param>
            <param name="stringToCompare">The string to compare.</param>
            <returns>The length of the longest common substring.</returns>
        </member>
        <member name="M:System.StringEx.LongestCommonSubstring(System.String,System.String,System.String@)">
            <summary>
            Gets the the longest common substring and its length.
            </summary>
            <param name="source">The source.</param>
            <param name="stringToCompare">The string to compare.</param>
            <param name="lcs">Returns the longest common substring.</param>
            <returns>
            The length of the longest common substring.
            </returns>
        </member>
        <member name="M:System.StringEx.GetSplitEnumerator(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings in this string instance (or a part of this string according to <paramref name="startIndex" /> and <paramref name="length" />) that are delimited by Unicode characters satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character of the current string. Any character that passes this test will be used as a separator.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="removeEmptyEntries"><c>true</c> if the returned enumerator should ignore empty substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each substring returned by the enumerator; otherwise, <c>false</c>.</param>
            <returns>An object that can iterate through substrings in the current string instance (or a part of the current string instance)
            that are delimited by Unicode characters satisfying the specified predicate.</returns>
        </member>
        <member name="M:System.StringEx.GetSplitEnumerator(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings in this string instance (or a part of this string according to <paramref name="startIndex" />) that are delimited by Unicode characters satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character of the current string. Any character that passes this test will be used as a separator.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="removeEmptyEntries"><c>true</c> if the returned enumerator should ignore empty substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each substring returned by the enumerator; otherwise, <c>false</c>.</param>
            <returns>An object that can iterate through substrings in the current string instance that are delimited by Unicode characters satisfying the specified predicate.</returns>
        </member>
        <member name="M:System.StringEx.GetSplitEnumerator(System.String,System.Func{System.Char,System.Boolean},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings in this string instance that are delimited by Unicode characters satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character of the current string. Any character that passes this test will be used as a separator.</param>
            <param name="removeEmptyEntries"><c>true</c> if the returned enumerator should ignore empty substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each substring returned by the enumerator; otherwise, <c>false</c>.</param>
            <returns>An object that can iterate through substrings in the current string instance that are delimited by Unicode characters satisfying the specified predicate.</returns>
        </member>
        <member name="M:System.StringEx.GetSplitEnumerator(System.String,System.Char,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings in this string (or a part of this string according to <paramref name="startIndex"/> and <paramref name="length"/>) that are delimited by the specified Unicode character.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separator">A Unicode character that delimits the substrings in the current string instance.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="removeEmptyEntries"><c>true</c> if the returned enumerator should ignore empty substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each substring returned by the enumerator; otherwise, <c>false</c>.</param>
            <returns>
            An object that can iterate through substrings in the current string instance (or a part of the current string instance)
            that are delimited by the specified Unicode character.
            </returns>
        </member>
        <member name="M:System.StringEx.GetSplitEnumerator(System.String,System.Char,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings in this string (or a part of this string according to <paramref name="startIndex"/>) that are delimited by the specified Unicode character.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separator">A Unicode character that delimits the substrings in the current string instance.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="removeEmptyEntries"><c>true</c> if the returned enumerator should ignore empty substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each substring returned by the enumerator; otherwise, <c>false</c>.</param>
            <returns>
            An object that can iterate through substrings in the current string instance (or a part of the current string instance)
            that are delimited by the specified Unicode character.
            </returns>
        </member>
        <member name="M:System.StringEx.GetSplitEnumerator(System.String,System.Char,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings in this string that are delimited by the specified Unicode character.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separator">A Unicode character that delimits the substrings in the current string instance.</param>
            <param name="removeEmptyEntries"><c>true</c> if the returned enumerator should ignore empty substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each substring returned by the enumerator; otherwise, <c>false</c>.</param>
            <returns>
            An object that can iterate through substrings in the current string instance (or a part of the current string instance)
            that are delimited by the specified Unicode character.
            </returns>
        </member>
        <member name="M:System.StringEx.GetSplitEnumerator(System.String,System.Char[],System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings in this string (or a part of this string according to <paramref name="startIndex"/> and <paramref name="length"/>) that are delimited by specified Unicode characters.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separators">A non-empty array of Unicode characters that delimit the substrings in the current string instance.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="removeEmptyEntries"><c>true</c> if the returned enumerator should ignore empty substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each substring returned by the enumerator; otherwise, <c>false</c>.</param>
            <returns>
            An object that can iterate through substrings in the current string instance (or a part of the current string instance)
            that are delimited by the specified Unicode characters.
            </returns>
        </member>
        <member name="M:System.StringEx.GetSplitEnumerator(System.String,System.Char[],System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings in this string (or a part of this string according to <paramref name="startIndex" />) that are delimited by specified Unicode characters.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separators">A non-empty array of Unicode characters that delimit the substrings in the current string instance.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="removeEmptyEntries"><c>true</c> if the returned enumerator should ignore empty substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each substring returned by the enumerator; otherwise, <c>false</c>.</param>
            <returns>
            An object that can iterate through substrings in the current string instance (or a part of the current string instance)
            that are delimited by the specified Unicode characters.
            </returns>
        </member>
        <member name="M:System.StringEx.GetSplitEnumerator(System.String,System.Char[],System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings in this string that are delimited by specified Unicode characters.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separators">A non-empty array of Unicode characters that delimit the substrings in the current string instance.</param>
            <param name="removeEmptyEntries"><c>true</c> if the returned enumerator should ignore empty substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each substring returned by the enumerator; otherwise, <c>false</c>.</param>
            <returns>
            An object that can iterate through substrings in the current string instance (or a part of the current string instance)
            that are delimited by the specified Unicode characters.
            </returns>
        </member>
        <member name="M:System.StringEx.GetSplitEnumeratorEx(System.String,System.Func{System.Char,System.Int32},System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through information about substrings in this string instance (or a part of the current string instance according to <paramref name="startIndex" /> and <paramref name="length" />)
            that are delimited by Unicode characters satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function used to test each Unicode character of the current string. If a character passes this predicate, it returns a non-negative integer as the separator's index; otherwise, this function must return -1. Any character satisfying this predicate will be used as the separator.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="removeEmptyEntries"><c>true</c> if the returned enumerator should ignore empty substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <returns>
            An object that can iterate through information about substrings in the current string instance (or a part of the current string instance)
            that are delimited by Unicode characters satisfying the specified predicate.
            </returns>
        </member>
        <member name="M:System.StringEx.GetSplitEnumeratorEx(System.String,System.Func{System.Char,System.Int32},System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through information about substrings in this string instance (or a part of the current string instance according to <paramref name="startIndex" />)
            that are delimited by Unicode characters satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts.</param>
            <param name="predicate">A function used to test each Unicode character of the current string. If a character passes this predicate, it returns a non-negative integer as the separator's index; otherwise, this function must return -1. Any character satisfying this predicate will be used as the separator.</param>
            <param name="removeEmptyEntries"><c>true</c> if the returned enumerator should ignore empty substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <returns>
            An object that can iterate through information about substrings in the current string instance that are delimited by Unicode characters satisfying the specified predicate.
            </returns>
        </member>
        <member name="M:System.StringEx.GetSplitEnumeratorEx(System.String,System.Func{System.Char,System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through information about substrings in this string instance that are delimited by Unicode characters satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function used to test each Unicode character of the current string. If a character passes this predicate, it returns a non-negative integer as the separator's index; otherwise, this function must return -1. Any character satisfying this predicate will be used as the separator.</param>
            <param name="removeEmptyEntries"><c>true</c> if the returned enumerator should ignore empty substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <returns>
            An object that can iterate through information about substrings in the current string instance that are delimited by Unicode characters satisfying the specified predicate.
            </returns>
        </member>
        <member name="M:System.StringEx.GetSplitEnumeratorEx(System.String,System.Char[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through <see cref="T:System.StringSplitResult"/> objects that represent substring information in this string (or a part of the current string instance according to <paramref name="startIndex" /> and <paramref name="length" />) that are delimited by specified Unicode characters.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separators">A non-empty array of Unicode characters that delimit the substrings in the current string instance.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="removeEmptyEntries"><c>true</c> if the returned enumerator should ignore empty substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <returns>
            An object that can iterate through information about substrings in the current string instance (or a part of the current string instance) that are delimited by the specified Unicode characters.
            </returns>
        </member>
        <member name="M:System.StringEx.GetSplitEnumeratorEx(System.String,System.Char[],System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through <see cref="T:System.StringSplitResult"/> objects that represent substring information in this string (or a part of the current string instance according to <paramref name="startIndex" />)
            that are delimited by specified Unicode characters.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separators">A non-empty array of Unicode characters that delimit the substrings in the current string instance.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="removeEmptyEntries"><c>true</c> if the returned enumerator should ignore empty substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <returns>
            An object that can iterate through information about substrings in the current string instance (or a part of the current string instance) that are delimited by the specified Unicode characters.
            </returns>
        </member>
        <member name="M:System.StringEx.GetSplitEnumeratorEx(System.String,System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through <see cref="T:System.StringSplitResult"/> objects that represent substring information in this string that are delimited by specified Unicode characters.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separators">A non-empty array of Unicode characters that delimit the substrings in the current string instance.</param>
            <param name="removeEmptyEntries"><c>true</c> if the returned enumerator should ignore empty substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <returns>
            An object that can iterate through information about substrings in the current string instance that are delimited by the specified Unicode characters.
            </returns>
        </member>
        <member name="M:System.StringEx.GetSplitEnumeratorWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Int32,System.Char,System.Char,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings in this string instance (or a part of this string according to <paramref name="startIndex"/> and <paramref name="length"/>)
            that are delimited by Unicode characters outside quotes and satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character of the current string. Any character satisfying this predicate will be used as a separator.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="leftQuote">The left quote paired by <paramref name="rightQuote"/> to escape separators.</param>
            <param name="rightQuote">The right quote paired by <paramref name="leftQuote"/> to escape separators.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepQuotes"><c>true</c> if the quotes should be included in each returned substring; otherwise, <c>false</c>.</param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>
            An object that can iterate through substrings in the current string instance (or a part of the current string instance)
            that are delimited by Unicode characters outside quotes and satisfying the specified predicate.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.GetSplitEnumeratorWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Char,System.Char,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings in this string instance (or a part of this string according to <paramref name="startIndex"/>)
            that are delimited by Unicode characters outside quotes and satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character of the current string. Any character satisfying this predicate will be used as a separator.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="leftQuote">The left quote paired by <paramref name="rightQuote" /> to escape separators.</param>
            <param name="rightQuote">The right quote paired by <paramref name="leftQuote" /> to escape separators.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepQuotes"><c>true</c> if the quotes should be included in each returned substring; otherwise, <c>false</c>.</param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>
            An object that can iterate through substrings in the current string instance (or a part of the current string instance)
            that are delimited by Unicode characters outside quotes and satisfying the specified predicate.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.GetSplitEnumeratorWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings in this string instance
            that are delimited by Unicode characters outside quotes and satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character of the current string. Any character that passes this test will be used as a separator.</param>
            <param name="leftQuote">The left quote paired by <paramref name="rightQuote" /> to escape separators.</param>
            <param name="rightQuote">The right quote paired by <paramref name="leftQuote" /> to escape separators.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepQuotes"><c>true</c> if the quotes should be included in each returned substring; otherwise, <c>false</c>.</param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>
            An object that can iterate through substrings in the current string instance that are delimited by Unicode characters outside quotes and satisfying the specified predicate.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.GetSplitEnumeratorWithQuotes(System.String,System.Char,System.Int32,System.Int32,System.Char,System.Char,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings in this string instance (or a part of this string)
            that are delimited by Unicode separators outside quotes.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separator">The separator.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="leftQuote">The left quote paired by <paramref name="rightQuote"/> to escape separators.</param>
            <param name="rightQuote">The right quote paired by <paramref name="leftQuote"/> to escape separators.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepQuotes"><c>true</c> if the quotes should be included in each returned substring; otherwise, <c>false</c>.</param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>
            An object that can iterate through substrings in the current string instance (or a part of the current string instance)
            that are delimited by Unicode characters outside quotes.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.GetSplitEnumeratorWithQuotes(System.String,System.Char,System.Int32,System.Char,System.Char,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings in this string instance (or a part of this string)
            that are delimited by Unicode separators outside quotes.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separator">The separator.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="leftQuote">The left quote paired by <paramref name="rightQuote" /> to escape separators.</param>
            <param name="rightQuote">The right quote paired by <paramref name="leftQuote" /> to escape separators.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="keepQuotes"><c>true</c> if the quotes should be included in each returned substring; otherwise, <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>
            An object that can iterate through substrings in the current string instance (or a part of the current string instance)
            that are delimited by Unicode characters outside quotes.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.GetSplitEnumeratorWithQuotes(System.String,System.Char,System.Char,System.Char,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings in this string instance that are delimited by Unicode separators outside quotes.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separator">The separator.</param>
            <param name="leftQuote">The left quote paired by <paramref name="rightQuote" /> to escape separators.</param>
            <param name="rightQuote">The right quote paired by <paramref name="leftQuote" /> to escape separators.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="keepQuotes"><c>true</c> if the quotes should be included in each returned substring; otherwise, <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>
            An object that can iterate through substrings in the current string instance that are delimited by Unicode characters outside quotes.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.GetSplitEnumeratorWithQuotes(System.String,System.Char[],System.Int32,System.Int32,System.Char,System.Char,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings in this string instance (or a part of this string)
            that are delimited by Unicode separators outside quotes.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separators">Any character in this array will be used as a separator.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="leftQuote">The left quote paired by <paramref name="rightQuote"/> to escape separators.</param>
            <param name="rightQuote">The right quote paired by <paramref name="leftQuote"/> to escape separators.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepQuotes"><c>true</c> if the quotes should be included in each returned substring; otherwise, <c>false</c>.</param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>
            An object that can iterate through substrings in the current string instance (or a part of the current string instance)
            that are delimited by Unicode characters outside quotes.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.GetSplitEnumeratorWithQuotes(System.String,System.Char[],System.Int32,System.Char,System.Char,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings in this string instance (or a part of this string according to <paramref name="startIndex"/>)
            that are delimited by Unicode separators outside quotes.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separators">Any character in this array will be used as a separator.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="leftQuote">The left quote paired by <paramref name="rightQuote" /> to escape separators.</param>
            <param name="rightQuote">The right quote paired by <paramref name="leftQuote" /> to escape separators.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepQuotes"><c>true</c> if the quotes should be included in each returned substring; otherwise, <c>false</c>.</param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>
            An object that can iterate through substrings in the current string instance (or a part of the current string instance)
            that are delimited by Unicode characters outside quotes.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.GetSplitEnumeratorWithQuotes(System.String,System.Char[],System.Char,System.Char,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings in this string instance (or a part of this string according to <paramref name="startIndex"/>)
            that are delimited by Unicode separators outside quotes.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separators">Any character in this array will be used as a separator.</param>
            <param name="leftQuote">The left quote paired by <paramref name="rightQuote" /> to escape separators.</param>
            <param name="rightQuote">The right quote paired by <paramref name="leftQuote" /> to escape separators.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepQuotes"><c>true</c> if the quotes should be included in each returned substring; otherwise, <c>false</c>.</param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>
            An object that can iterate through substrings in the current string instance (or a part of the current string instance)
            that are delimited by Unicode characters outside quotes.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.GetSplitEnumeratorWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Int32,System.Char[],System.Char[],System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings in this string instance (or a part of this string according to <paramref name="startIndex"/> and <paramref name="length"/>)
            that are delimited by Unicode characters outside quotes and satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character of the current string. Any character satisfying this predicate will be used as a separator.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepQuotes"><c>true</c> if the quotes should be included in each returned substring; otherwise, <c>false</c>.</param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>
            An object that can iterate through substrings in the current string instance (or a part of the current string instance)
            that are delimited by Unicode characters outside quotes and satisfying the specified predicate.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.GetSplitEnumeratorWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Char[],System.Char[],System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings in this string instance (or a part of this string according to <paramref name="startIndex"/>)
            that are delimited by Unicode characters outside quotes and satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character of the current string. Any character satisfying this predicate will be used as a separator.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepQuotes"><c>true</c> if the quotes should be included in each returned substring; otherwise, <c>false</c>.</param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>
            An object that can iterate through substrings in the current string instance (or a part of the current string instance)
            that are delimited by Unicode characters outside quotes and satisfying the specified predicate.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.GetSplitEnumeratorWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings in this string instance
            that are delimited by Unicode characters outside quotes and satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character of the current string. Any character that passes this test will be used as a separator.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepQuotes"><c>true</c> if the quotes should be included in each returned substring; otherwise, <c>false</c>.</param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>
            An object that can iterate through substrings in the current string instance that are delimited by Unicode characters outside quotes and satisfying the specified predicate.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.GetSplitEnumeratorWithQuotes(System.String,System.Char,System.Int32,System.Int32,System.Char[],System.Char[],System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings in this string instance (or a part of this string)
            that are delimited by Unicode separators outside quotes.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separator">The separator.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepQuotes"><c>true</c> if the quotes should be included in each returned substring; otherwise, <c>false</c>.</param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>
            An object that can iterate through substrings in the current string instance (or a part of the current string instance)
            that are delimited by Unicode characters outside quotes.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.GetSplitEnumeratorWithQuotes(System.String,System.Char,System.Int32,System.Char[],System.Char[],System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings in this string instance (or a part of this string)
            that are delimited by Unicode separators outside quotes.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separator">The separator.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="keepQuotes"><c>true</c> if the quotes should be included in each returned substring; otherwise, <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>
            An object that can iterate through substrings in the current string instance (or a part of the current string instance)
            that are delimited by Unicode characters outside quotes.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.GetSplitEnumeratorWithQuotes(System.String,System.Char,System.Char[],System.Char[],System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings in this string instance that are delimited by Unicode separators outside quotes.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separator">The separator.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="keepQuotes"><c>true</c> if the quotes should be included in each returned substring; otherwise, <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>
            An object that can iterate through substrings in the current string instance that are delimited by Unicode characters outside quotes.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.GetSplitEnumeratorWithQuotes(System.String,System.Char[],System.Int32,System.Int32,System.Char[],System.Char[],System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings in this string instance (or a part of this string)
            that are delimited by Unicode separators outside quotes.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separators">Any character in this array will be used as a separator.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepQuotes"><c>true</c> if the quotes should be included in each returned substring; otherwise, <c>false</c>.</param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>
            An object that can iterate through substrings in the current string instance (or a part of the current string instance)
            that are delimited by Unicode characters outside quotes.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.GetSplitEnumeratorWithQuotes(System.String,System.Char[],System.Int32,System.Char[],System.Char[],System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings in this string instance (or a part of this string according to <paramref name="startIndex"/>)
            that are delimited by Unicode separators outside quotes.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separators">Any character in this array will be used as a separator.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepQuotes"><c>true</c> if the quotes should be included in each returned substring; otherwise, <c>false</c>.</param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>
            An object that can iterate through substrings in the current string instance (or a part of the current string instance)
            that are delimited by Unicode characters outside quotes.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.GetSplitEnumeratorWithQuotes(System.String,System.Char[],System.Char[],System.Char[],System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings in this string instance (or a part of this string according to <paramref name="startIndex"/>)
            that are delimited by Unicode separators outside quotes.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separators">Any character in this array will be used as a separator.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepQuotes"><c>true</c> if the quotes should be included in each returned substring; otherwise, <c>false</c>.</param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>
            An object that can iterate through substrings in the current string instance (or a part of the current string instance)
            that are delimited by Unicode characters outside quotes.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.GetSplitEnumerator(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings in this string (or a part of this string)
            that are delimited by the specified separator.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separator">A string instance that delimits the substrings in the current string instance.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="removeEmptyEntries"><c>true</c> if the returned enumerator should ignore empty substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned;
            for example, in this case "ab,,   ,,cd" split by dual-comma ",," is "ab" and "cd".</para></param>
            <returns>
            An object that can iterate through substrings in the current string instance (or a part of the current string instance)
            that are delimited by the specified separator.
            </returns>
        </member>
        <member name="M:System.StringEx.GetSplitEnumerator(System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings in this string (or a part of this string)
            that are delimited by the specified separator.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separator">A string instance that delimits the substrings in the current string instance.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="removeEmptyEntries"><c>true</c> if the returned enumerator should ignore empty substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned;
            for example, in this case "ab,,   ,,cd" split by dual-comma ",," is "ab" and "cd".</para></param>
            <returns>
            An object that can iterate through substrings in the current string instance (or a part of the current string instance)
            that are delimited by the specified separator.
            </returns>
        </member>
        <member name="M:System.StringEx.GetSplitEnumerator(System.String,System.String[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings in this string (or a part of this string)
            that are delimited by the specified separators.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separators">String instances that delimits the substrings in the current string instance.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="removeEmptyEntries"><c>true</c> if the returned enumerator should ignore empty substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned;
            for example, in this case "ab||   **  cd" split by "||" and "**" is "ab" and "cd".</para></param>
            <returns>
            An object that can iterate through substrings in the current string instance (or a part of the current string instance)
            that are delimited by the specified separators.
            </returns>
        </member>
        <member name="M:System.StringEx.GetSplitEnumerator(System.String,System.String[],System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings in this string (or a part of this string)
            that are delimited by the specified separators.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separators">String instances that delimit the substrings in the current string instance.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="removeEmptyEntries"><c>true</c> if the returned enumerator should ignore empty substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned;
            for example, in this case "ab||   **  cd" split by "||" and "**" is "ab" and "cd".</para></param>
            <returns>
            An object that can iterate through substrings in the current string instance (or a part of the current string instance)
            that are delimited by the specified separators.
            </returns>
        </member>
        <member name="M:System.StringEx.GetSplitEnumeratorEx(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through information of substrings in this string (or a part of this string)
            that are delimited by the specified separator.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separator">A string instance that delimits the substrings in the current string instance.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="removeEmptyEntries"><c>true</c> if the returned enumerator should ignore empty substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned;
            for example, in this case "ab,,   ,,cd" split by dual-comma ",," is "ab" and "cd".</para></param>
            <returns>
            An object that can iterate through information of substrings in the current string instance (or a part of the current string instance)
            that are delimited by the specified separator.
            </returns>
        </member>
        <member name="M:System.StringEx.GetSplitEnumeratorEx(System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through information of substrings in this string (or a part of this string)
            that are delimited by the specified separator.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separator">A string instance that delimits the substrings in the current string instance.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="removeEmptyEntries"><c>true</c> if the returned enumerator should ignore empty substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned;
            for example, in this case "ab,,   ,,cd" split by dual-comma ",," is "ab" and "cd".</para></param>
            <returns>
            An object that can iterate through information of substrings in the current string instance (or a part of the current string instance)
            that are delimited by the specified separator.
            </returns>
        </member>
        <member name="M:System.StringEx.GetDoubleSplitEnumerator(System.String,System.Func{System.Char,System.Boolean},System.Func{System.Char,System.Boolean},System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through groups of substrings in this string instance (or a part of the current string instance according to <paramref name="startIndex"/> and <paramref name="length"/>) that are delimited by Unicode characters satisfying the specified primary predicate and secondary predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="primaryPredicate">A function used to test each Unicode character of the current string. If a character passes this predicate, it returns a non-negative integer as the separator's index; otherwise, this function must return -1. Any character satisfying this predicate will be used as the primary separator. A primary spearator delimits substring arrays, for example, in "123,456;abc,def" which represent substring arrays { {"123", "456"}, {"abc", "def"} }, the semi-comma ';' is the primary separator.</param>
            <param name="secondaryPredicate">A function used to test each Unicode character of the current string. If a character passes this predicate, it returns a non-negative integer as the separator's index; otherwise, this function must return -1. Any character satisfying this predicate will be used as the secondary separator. A secondary separator delimits substrings in an array, for example, in "123,456;abc,def" which represent substring arrays { {"123", "456"}, {"abc", "def"} }, the comma ',' is the secondary separator.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="removeEmptyEntries"><c>true</c> if the returned enumerator should ignore empty substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "123,   ,456;abc,def" split by comma ';' (primary separator) and ',' (secondary separator) is { {"123", "456"}, {"abc", "def"} }.</para></param>
            <returns>An object that can iterate through groups of substrings in this string instance (or a part of the current string instance) that are delimited by Unicode characters satisfying the specified two predicates.</returns>
        </member>
        <member name="M:System.StringEx.GetDoubleSplitEnumerator(System.String,System.Func{System.Char,System.Boolean},System.Func{System.Char,System.Boolean},System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through groups of substrings in this string instance (or a part of the current string instance according to <paramref name="startIndex" />) that are delimited by Unicode characters satisfying the specified primary predicate and secondary predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="primaryPredicate">A function used to test each Unicode character of the current string. If a character passes this predicate, it returns a non-negative integer as the separator's index; otherwise, this function must return -1. Any character satisfying this predicate will be used as the primary separator. A primary spearator delimits substring arrays, for example, in "123,456;abc,def" which represent substring arrays { {"123", "456"}, {"abc", "def"} }, the semi-comma ';' is the primary separator.</param>
            <param name="secondaryPredicate">A function used to test each Unicode character of the current string. If a character passes this predicate, it returns a non-negative integer as the separator's index; otherwise, this function must return -1. Any character satisfying this predicate will be used as the secondary separator. A secondary separator delimits substrings in an array, for example, in "123,456;abc,def" which represent substring arrays { {"123", "456"}, {"abc", "def"} }, the comma ',' is the secondary separator.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="removeEmptyEntries"><c>true</c> if the returned enumerator should ignore empty substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "123,   ,456;abc,def" split by comma ';' (primary separator) and ',' (secondary separator) is { {"123", "456"}, {"abc", "def"} }.</para></param>
            <returns>An object that can iterate through groups of substrings in this string instance (or a part of the current string instance) that are delimited by Unicode characters satisfying the specified two predicates.</returns>
        </member>
        <member name="M:System.StringEx.GetDoubleSplitEnumeratorEx(System.String,System.Func{System.Char,System.Int32},System.Func{System.Char,System.Int32},System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through <see cref="T:System.StringDoubleSplitResult"/> objects that represent substring information in this string instance (or a part of the current string instance according to <paramref name="startIndex"/> and <paramref name="length"/>) that are delimited by Unicode characters satisfying the specified primary predicate and secondary predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="primaryPredicate">A function used to test each Unicode character of the current string. If a character passes this predicate, it returns a non-negative integer as the separator's index; otherwise, this function must return -1. Any character satisfying this predicate will be used as the primary separator. A primary spearator delimits substring arrays, for example, in "123,456;abc,def" which represent substring arrays { {"123", "456"}, {"abc", "def"} }, the semi-comma ';' is the primary separator.</param>
            <param name="secondaryPredicate">A function used to test each Unicode character of the current string. If a character passes this predicate, it returns a non-negative integer as the separator's index; otherwise, this function must return -1. Any character satisfying this predicate will be used as the secondary separator. A secondary separator delimits substrings in an array, for example, in "123,456;abc,def" which represent substring arrays { {"123", "456"}, {"abc", "def"} }, the comma ',' is the secondary separator.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="removeEmptyEntries"><c>true</c> if the returned enumerator should ignore empty substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "123,   ,456;abc,def" split by comma ';' (primary separator) and ',' (secondary separator) is { {"123", "456"}, {"abc", "def"} }.</para></param>
            <returns>An object that can iterate through <see cref="T:System.StringDoubleSplitResult"/> objects that represent substring information in this string instance (or a part of the current string instance) that are delimited by Unicode characters satisfying the specified two predicates.</returns>
        </member>
        <member name="M:System.StringEx.GetDoubleSplitEnumeratorEx(System.String,System.Func{System.Char,System.Int32},System.Func{System.Char,System.Int32},System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through <see cref="T:System.StringDoubleSplitResult" /> objects that represent substring information in this string instance (or a part of the current string instance according to <paramref name="startIndex" />) that are delimited by Unicode characters satisfying the specified primary predicate and secondary predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="primaryPredicate">A function used to test each Unicode character of the current string. If a character passes this predicate, it returns a non-negative integer as the separator's index; otherwise, this function must return -1. Any character satisfying this predicate will be used as the primary separator. A primary spearator delimits substring arrays, for example, in "123,456;abc,def" which represent substring arrays { {"123", "456"}, {"abc", "def"} }, the semi-comma ';' is the primary separator.</param>
            <param name="secondaryPredicate">A function used to test each Unicode character of the current string. If a character passes this predicate, it returns a non-negative integer as the separator's index; otherwise, this function must return -1. Any character satisfying this predicate will be used as the secondary separator. A secondary separator delimits substrings in an array, for example, in "123,456;abc,def" which represent substring arrays { {"123", "456"}, {"abc", "def"} }, the comma ',' is the secondary separator.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="removeEmptyEntires">if set to <c>true</c> [remove empty entires].</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "123,   ,456;abc,def" split by comma ';' (primary separator) and ',' (secondary separator) is { {"123", "456"}, {"abc", "def"} }.</para></param>
            <returns>An object that can iterate through <see cref="T:System.StringDoubleSplitResult" /> objects that represent substring information in this string instance (or a part of the current string instance) that are delimited by Unicode characters satisfying the specified two predicates.</returns>
        </member>
        <member name="M:System.StringEx.GetDoubleSplitEnumeratorWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Func{System.Char,System.Boolean},System.Int32,System.Int32,System.Char,System.Char,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through groups of substrings in this string instance (or a part of the current string instance according to <paramref name="startIndex"/> and <paramref name="length"/>) that are delimited by Unicode characters outside quotes and satisfying the specified primary predicate and secondary predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="primaryPredicate">A function used to test each Unicode character of the current string. If a character passes this predicate, it returns a non-negative integer as the separator's index; otherwise, this function must return -1. Any character satisfying this predicate will be used as the primary separator. A primary spearator delimits substring arrays, for example, in "123,456;abc,def" which represent substring arrays { {"123", "456"}, {"abc", "def"} }, the semi-comma ';' is the primary separator.</param>
            <param name="secondaryPredicate">A function used to test each Unicode character of the current string. If a character passes this predicate, it returns a non-negative integer as the separator's index; otherwise, this function must return -1. Any character satisfying this predicate will be used as the secondary separator. A secondary separator delimits substrings in an array, for example, in "123,456;abc,def" which represent substring arrays { {"123", "456"}, {"abc", "def"} }, the comma ',' is the secondary separator.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="leftQuote">The left quote paired by <paramref name="rightQuote"/> to escape separators.</param>
            <param name="rightQuote">The right quote paired by <paramref name="leftQuote"/> to escape separators.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be ignored; otherwise <c>false</c>.</param>
            <param name="removeEmptyGroups"><c>true</c> if empty substring groups should be ignored by the returned enumerator; otherwise, <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepQuotes"><c>true</c> if the quotes should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>An object that can iterate through groups of substrings in this string instance (or a part of the current string instance) that are delimited by Unicode characters satisfying the specified two predicates.</returns>
        </member>
        <member name="M:System.StringEx.GetDoubleSplitEnumeratorWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Func{System.Char,System.Boolean},System.Int32,System.Char,System.Char,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through groups of substrings in this string instance (or a part of the current string instance according to <paramref name="startIndex"/>) that are delimited by Unicode characters outside quotes and satisfying the specified primary predicate and secondary predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="primaryPredicate">A function used to test each Unicode character of the current string. If a character passes this predicate, it returns a non-negative integer as the separator's index; otherwise, this function must return -1. Any character satisfying this predicate will be used as the primary separator. A primary spearator delimits substring arrays, for example, in "123,456;abc,def" which represent substring arrays { {"123", "456"}, {"abc", "def"} }, the semi-comma ';' is the primary separator.</param>
            <param name="secondaryPredicate">A function used to test each Unicode character of the current string. If a character passes this predicate, it returns a non-negative integer as the separator's index; otherwise, this function must return -1. Any character satisfying this predicate will be used as the secondary separator. A secondary separator delimits substrings in an array, for example, in "123,456;abc,def" which represent substring arrays { {"123", "456"}, {"abc", "def"} }, the comma ',' is the secondary separator.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="leftQuote">The left quote paired by <paramref name="rightQuote"/> to escape separators.</param>
            <param name="rightQuote">The right quote paired by <paramref name="leftQuote"/> to escape separators.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be ignored; otherwise <c>false</c>.</param>
            <param name="removeEmptyGroups"><c>true</c> if empty substring groups should be ignored by the returned enumerator; otherwise, <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepQuotes"><c>true</c> if the quotes should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>An object that can iterate through groups of substrings in this string instance (or a part of the current string instance) that are delimited by Unicode characters satisfying the specified two predicates.</returns>
        </member>
        <member name="M:System.StringEx.GetDoubleSplitEnumeratorWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through groups of substrings in this string instance that are delimited by Unicode characters outside quotes and satisfying the specified primary predicate and secondary predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="primaryPredicate">A function used to test each Unicode character of the current string. If a character passes this predicate, it returns a non-negative integer as the separator's index; otherwise, this function must return -1. Any character satisfying this predicate will be used as the primary separator. A primary spearator delimits substring arrays, for example, in "123,456;abc,def" which represent substring arrays { {"123", "456"}, {"abc", "def"} }, the semi-comma ';' is the primary separator.</param>
            <param name="secondaryPredicate">A function used to test each Unicode character of the current string. If a character passes this predicate, it returns a non-negative integer as the separator's index; otherwise, this function must return -1. Any character satisfying this predicate will be used as the secondary separator. A secondary separator delimits substrings in an array, for example, in "123,456;abc,def" which represent substring arrays { {"123", "456"}, {"abc", "def"} }, the comma ',' is the secondary separator.</param>
            <param name="leftQuote">The left quote paired by <paramref name="rightQuote"/> to escape separators.</param>
            <param name="rightQuote">The right quote paired by <paramref name="leftQuote"/> to escape separators.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be ignored; otherwise <c>false</c>.</param>
            <param name="removeEmptyGroups"><c>true</c> if empty substring groups should be ignored by the returned enumerator; otherwise, <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepQuotes"><c>true</c> if the quotes should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>An object that can iterate through groups of substrings in this string instance that are delimited by Unicode characters satisfying the specified two predicates.</returns>
        </member>
        <member name="M:System.StringEx.GetDoubleSplitEnumeratorWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Func{System.Char,System.Boolean},System.Int32,System.Int32,System.Char[],System.Char[],System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through groups of substrings in this string instance (or a part of the current string instance according to <paramref name="startIndex"/> and <paramref name="length"/>) that are delimited by Unicode characters outside quotes and satisfying the specified primary predicate and secondary predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="primaryPredicate">A function used to test each Unicode character of the current string. If a character passes this predicate, it returns a non-negative integer as the separator's index; otherwise, this function must return -1. Any character satisfying this predicate will be used as the primary separator. A primary spearator delimits substring arrays, for example, in "123,456;abc,def" which represent substring arrays { {"123", "456"}, {"abc", "def"} }, the semi-comma ';' is the primary separator.</param>
            <param name="secondaryPredicate">A function used to test each Unicode character of the current string. If a character passes this predicate, it returns a non-negative integer as the separator's index; otherwise, this function must return -1. Any character satisfying this predicate will be used as the secondary separator. A secondary separator delimits substrings in an array, for example, in "123,456;abc,def" which represent substring arrays { {"123", "456"}, {"abc", "def"} }, the comma ',' is the secondary separator.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be ignored; otherwise <c>false</c>.</param>
            <param name="removeEmptyGroups"><c>true</c> if empty substring groups should be ignored by the returned enumerator; otherwise, <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepQuotes"><c>true</c> if the quotes should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>An object that can iterate through groups of substrings in this string instance (or a part of the current string instance) that are delimited by Unicode characters satisfying the specified two predicates.</returns>
        </member>
        <member name="M:System.StringEx.GetDoubleSplitEnumeratorWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Func{System.Char,System.Boolean},System.Int32,System.Char[],System.Char[],System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through groups of substrings in this string instance (or a part of the current string instance according to <paramref name="startIndex"/>) that are delimited by Unicode characters outside quotes and satisfying the specified primary predicate and secondary predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="primaryPredicate">A function used to test each Unicode character of the current string. If a character passes this predicate, it returns a non-negative integer as the separator's index; otherwise, this function must return -1. Any character satisfying this predicate will be used as the primary separator. A primary spearator delimits substring arrays, for example, in "123,456;abc,def" which represent substring arrays { {"123", "456"}, {"abc", "def"} }, the semi-comma ';' is the primary separator.</param>
            <param name="secondaryPredicate">A function used to test each Unicode character of the current string. If a character passes this predicate, it returns a non-negative integer as the separator's index; otherwise, this function must return -1. Any character satisfying this predicate will be used as the secondary separator. A secondary separator delimits substrings in an array, for example, in "123,456;abc,def" which represent substring arrays { {"123", "456"}, {"abc", "def"} }, the comma ',' is the secondary separator.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be ignored; otherwise <c>false</c>.</param>
            <param name="removeEmptyGroups"><c>true</c> if empty substring groups should be ignored by the returned enumerator; otherwise, <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepQuotes"><c>true</c> if the quotes should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>An object that can iterate through groups of substrings in this string instance (or a part of the current string instance) that are delimited by Unicode characters satisfying the specified two predicates.</returns>
        </member>
        <member name="M:System.StringEx.GetDoubleSplitEnumeratorWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through groups of substrings in this string instance that are delimited by Unicode characters outside quotes and satisfying the specified primary predicate and secondary predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="primaryPredicate">A function used to test each Unicode character of the current string. If a character passes this predicate, it returns a non-negative integer as the separator's index; otherwise, this function must return -1. Any character satisfying this predicate will be used as the primary separator. A primary spearator delimits substring arrays, for example, in "123,456;abc,def" which represent substring arrays { {"123", "456"}, {"abc", "def"} }, the semi-comma ';' is the primary separator.</param>
            <param name="secondaryPredicate">A function used to test each Unicode character of the current string. If a character passes this predicate, it returns a non-negative integer as the separator's index; otherwise, this function must return -1. Any character satisfying this predicate will be used as the secondary separator. A secondary separator delimits substrings in an array, for example, in "123,456;abc,def" which represent substring arrays { {"123", "456"}, {"abc", "def"} }, the comma ',' is the secondary separator.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be ignored; otherwise <c>false</c>.</param>
            <param name="removeEmptyGroups"><c>true</c> if empty substring groups should be ignored by the returned enumerator; otherwise, <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepQuotes"><c>true</c> if the quotes should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>An object that can iterate through groups of substrings in this string instance that are delimited by Unicode characters satisfying the specified two predicates.</returns>
        </member>
        <member name="M:System.StringEx.GetDoubleSplitEnumeratorWithQuotes(System.String,System.Char,System.Char,System.Int32,System.Int32,System.Char,System.Char,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through groups of substrings in this string instance (or a part of the current string instance according to <paramref name="startIndex"/> and <paramref name="length"/>) that are delimited by the primary and secondary Unicode separators outside quotes.
            </summary>
            <param name="str">This string instance.</param>
            <param name="primarySeparator">A primary spearator delimits substring groups, for example, in "123,456;abc,def" which represent substring arrays { {"123", "456"}, {"abc", "def"} }, the semi-comma ';' is the primary separator.</param>
            <param name="secondarySeparator">A secondary separator delimits substrings in a group, for example, in "123,456;abc,def" which represent substring arrays { {"123", "456"}, {"abc", "def"} }, the comma ',' is the secondary separator.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="leftQuote">The left quote paired by <paramref name="rightQuote"/> to escape separators.</param>
            <param name="rightQuote">The right quote paired by <paramref name="leftQuote"/> to escape separators.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be ignored; otherwise <c>false</c>.</param>
            <param name="removeEmptyGroups"><c>true</c> if empty substring groups should be ignored by the returned enumerator; otherwise, <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepQuotes"><c>true</c> if the quotes should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>An object that can iterate through groups of substrings in this string instance (or a part of the current string instance) that are delimited by the primary and secondary separators.</returns>
        </member>
        <member name="M:System.StringEx.GetDoubleSplitEnumeratorWithQuotes(System.String,System.Char,System.Char,System.Int32,System.Char,System.Char,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through groups of substrings in this string instance (or a part of the current string instance according to <paramref name="startIndex"/>) that are delimited by the primary and secondary Unicode separators outside quotes.
            </summary>
            <param name="str">This string instance.</param>
            <param name="primarySeparator">A primary spearator delimits substring groups, for example, in "123,456;abc,def" which represent substring arrays { {"123", "456"}, {"abc", "def"} }, the semi-comma ';' is the primary separator.</param>
            <param name="secondarySeparator">A secondary separator delimits substrings in a group, for example, in "123,456;abc,def" which represent substring arrays { {"123", "456"}, {"abc", "def"} }, the comma ',' is the secondary separator.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="leftQuote">The left quote paired by <paramref name="rightQuote"/> to escape separators.</param>
            <param name="rightQuote">The right quote paired by <paramref name="leftQuote"/> to escape separators.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be ignored; otherwise <c>false</c>.</param>
            <param name="removeEmptyGroups"><c>true</c> if empty substring groups should be ignored by the returned enumerator; otherwise, <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepQuotes"><c>true</c> if the quotes should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>An object that can iterate through groups of substrings in this string instance (or a part of the current string instance) that are delimited by the primary and secondary separators.</returns>
        </member>
        <member name="M:System.StringEx.GetDoubleSplitEnumeratorWithQuotes(System.String,System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through groups of substrings in this string instance that are delimited by the primary and secondary Unicode separators outside quotes.
            </summary>
            <param name="str">This string instance.</param>
            <param name="primarySeparator">A primary spearator delimits substring groups, for example, in "123,456;abc,def" which represent substring arrays { {"123", "456"}, {"abc", "def"} }, the semi-comma ';' is the primary separator.</param>
            <param name="secondarySeparator">A secondary separator delimits substrings in a group, for example, in "123,456;abc,def" which represent substring arrays { {"123", "456"}, {"abc", "def"} }, the comma ',' is the secondary separator.</param>
            <param name="leftQuote">The left quote paired by <paramref name="rightQuote"/> to escape separators.</param>
            <param name="rightQuote">The right quote paired by <paramref name="leftQuote"/> to escape separators.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be ignored; otherwise <c>false</c>.</param>
            <param name="removeEmptyGroups"><c>true</c> if empty substring groups should be ignored by the returned enumerator; otherwise, <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepQuotes"><c>true</c> if the quotes should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>An object that can iterate through groups of substrings in this string instance (or a part of the current string instance) that are delimited by the primary and secondary separators.</returns>
        </member>
        <member name="M:System.StringEx.GetDoubleSplitEnumeratorWithQuotes(System.String,System.Char,System.Char,System.Int32,System.Int32,System.Char[],System.Char[],System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through groups of substrings in this string instance (or a part of the current string instance according to <paramref name="startIndex"/> and <paramref name="length"/>) that are delimited by the primary and secondary Unicode separators outside quotes.
            </summary>
            <param name="str">This string instance.</param>
            <param name="primarySeparator">A primary spearator delimits substring groups, for example, in "123,456;abc,def" which represent substring arrays { {"123", "456"}, {"abc", "def"} }, the semi-comma ';' is the primary separator.</param>
            <param name="secondarySeparator">A secondary separator delimits substrings in a group, for example, in "123,456;abc,def" which represent substring arrays { {"123", "456"}, {"abc", "def"} }, the comma ',' is the secondary separator.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be ignored; otherwise <c>false</c>.</param>
            <param name="removeEmptyGroups"><c>true</c> if empty substring groups should be ignored by the returned enumerator; otherwise, <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepQuotes"><c>true</c> if the quotes should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>An object that can iterate through groups of substrings in this string instance (or a part of the current string instance) that are delimited by the primary and secondary separators.</returns>
        </member>
        <member name="M:System.StringEx.GetDoubleSplitEnumeratorWithQuotes(System.String,System.Char,System.Char,System.Int32,System.Char[],System.Char[],System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through groups of substrings in this string instance (or a part of the current string instance according to <paramref name="startIndex"/>) that are delimited by the primary and secondary Unicode separators outside quotes.
            </summary>
            <param name="str">This string instance.</param>
            <param name="primarySeparator">A primary spearator delimits substring groups, for example, in "123,456;abc,def" which represent substring arrays { {"123", "456"}, {"abc", "def"} }, the semi-comma ';' is the primary separator.</param>
            <param name="secondarySeparator">A secondary separator delimits substrings in a group, for example, in "123,456;abc,def" which represent substring arrays { {"123", "456"}, {"abc", "def"} }, the comma ',' is the secondary separator.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be ignored; otherwise <c>false</c>.</param>
            <param name="removeEmptyGroups"><c>true</c> if empty substring groups should be ignored by the returned enumerator; otherwise, <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepQuotes"><c>true</c> if the quotes should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>An object that can iterate through groups of substrings in this string instance (or a part of the current string instance) that are delimited by the primary and secondary separators.</returns>
        </member>
        <member name="M:System.StringEx.GetDoubleSplitEnumeratorWithQuotes(System.String,System.Char,System.Char,System.Char[],System.Char[],System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through groups of substrings in this string instance that are delimited by the primary and secondary Unicode separators outside quotes.
            </summary>
            <param name="str">This string instance</param>
            <param name="primarySeparator">A primary spearator delimits substring groups, for example, in "123,456;abc,def" which represent substring arrays { {"123", "456"}, {"abc", "def"} }, the semi-comma ';' is the primary separator.</param>
            <param name="secondarySeparator">A secondary separator delimits substrings in a group, for example, in "123,456;abc,def" which represent substring arrays { {"123", "456"}, {"abc", "def"} }, the comma ',' is the secondary separator.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be ignored; otherwise <c>false</c>.</param>
            <param name="removeEmptyGroups"><c>true</c> if empty substring groups should be ignored by the returned enumerator; otherwise, <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will be ignored by the returned enumerator;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepQuotes"><c>true</c> if the quotes should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>An object that can iterate through groups of substrings in this string instance (or a part of the current string instance) that are delimited by the primary and secondary separators.</returns>
        </member>
        <member name="M:System.StringEx.GetComboEnumerator(System.String,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Gets an enumerator that can iterate through certain combinations of strings specified in this combination expression.
            </summary>
            <param name="expression">A combination expression to indicate what strings are used for combination and how they are combined.</param>
            <param name="parameterGroupSeparator">A Unicode character used as the separator to delimit different types of arguments.</param>
            <param name="parameterSeparator">A Unicode character used as the separator to delimit different arguments of the same type.</param>
            <param name="parameterLeftBracket">A Unicode character right paired by the <paramref name="parameterRightBracket"/> to bracket the argument part.</param>
            <param name="parameterRightBracket">A Unicode character left paired by the <paramref name="parameterLeftBracket"/> to bracket the argument part.</param>
            <param name="leftQuote">A Unicode character right paired by the <paramref name="rightQuote"/> to escape <paramref name="parameterGroupSeparator"/> and <paramref name="parameterSeparator"/>.</param>
            <param name="rightQuote">A Unicode character left paired by the <paramref name="leftQuote"/> to escape <paramref name="parameterGroupSeparator"/> and <paramref name="parameterSeparator"/>.</param>
            <returns>An enumerator object that can be used to iterate through combinations of strings specified in the <paramref name="expression"/>.</returns>
            <remarks>
            A combination expression consists of two parts, the combination method and the bracketed argument part, which looks like "point(1,2,3)", where "point" is the combination method and "1,2,3" inside a pair of round brackets is the argument.
            <para>Three types of combination methods are supported.</para>
            <list type="bullet">
                <term>cube</term>
                <description>the returned enumerator will go through all combitnations of the keywords if no argument is provided, for example, the enumerator generated by "cube(1,2,3)" will enum {1}, {2}, {3}, {1,2}, {1,3}, {2,3}, {1,2,3} in order. This method can also go through combinations according to the argument and it is the only method that accepts the depth and the count argument indicating what combinations the enumerator can go through. This method also supports the randomness argument.</description>
                <term>square</term>
                <description>the returned enumerator will go through every single keyword and every 2-gram combination. For example, the enumerator generated by "square(1,2,3)" will enum {1}, {2}, {3}, {1,2}, {1,3}, {2,3} in order. This method only supports the randomness argument.</description>
                <term>point</term>
                <description>the returned enumerator will only go through every single keyword. For example, the enumerator generated by "square(1,2,3)" will enum {1}, {2}, {3} in order. This method only supports the randomness argument.</description>
            </list>
            <para>The <c>cube</c> method supports three types of argument besides the keywords.</para>
            <list type="bullet">
                <term>depth</term>
                <description>indicating the minimum and the maximum length of each combination. For example, cube(a,b,c; 2) returns {a,b}, {a,c} and {b,c}, for the depth argument "2" indicates only 2-gram combinations should be returned. There can be more than one depth argument and one depth can overlap the other, for example, cube(a,b,c; 2-3,1-2) will return {a,b}, {a,c}, {b,c}, {a,b,c}, {a}, {b}, {c}, {a,b}, {a,c} and {b,c}.</description>
                <term>count</term>
                <description>indicating how many combinations are returned for each depth argument. For example, cube(a,b,c; 2; 1) only returns {a,b}, for the count argument "1" indicates only one 2-gram combination should be returned. For another example, cube(a,b,c; 2-3,1-2; 2,3) will return {a,b}, {a,c}, {a}, {b}, {c}, because the count arguments indicate the enumerator should go through only two combinations for depth 2-3, and threee combinations for depth 1-2.</description>
                <term>randomness</term>
                <description>all three methods, <c>cube</c>, <c>squre</c> and <c>point</c>. Currently you can specify "static" and "random" for this argument. If "static" is specified, the combinations will come out in sequence, as demonstrated by all above examples; if "random" is specified, the order of the combinations will be randomized, for example, "point(a,b,c; random)" might return {b}, {c}, {a}, and might also return {a}, {c}, {b}.</description>
            </list>
            NOTE that the depth arguments and the count arguments are optional, and expressions like "cube(a,b,c; random)", "cube(a,b,c; 1-2; random)" are valid. Also NOTE that if the depth arguments are not specified, then the count arguments should not be used, for the count argument correspond to the depth arguments.
            </remarks>
        </member>
        <member name="M:System.StringEx.GetComboEnumerator``1(System.String,System.Func{System.String,``0},System.Char,System.Char,System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Gets an enumerator that can iterate through certain combinations of objects of type <typeparamref name="T"/> converted from strings specified in this combination expression.
            </summary>
            <typeparam name="T">The type of objects generated by the returned enumerator.</typeparam>
            <param name="expression">A combination expression to indicate what strings are used for combination and how they are combined.</param>
            <param name="converter">Provides a method that converts each string instance of a combination to an object of type <typeparamref name="T"/>.</param>
            <param name="parameterGroupSeparator">A Unicode character used as the separator to delimit different types of arguments.</param>
            <param name="parameterSeparator">A Unicode character used as the separator to delimit different arguments of the same type.</param>
            <param name="parameterLeftBracket">A Unicode character right paired by the <paramref name="parameterRightBracket" /> to bracket the argument part.</param>
            <param name="parameterRightBracket">A Unicode character left paired by the <paramref name="parameterLeftBracket" /> to bracket the argument part.</param>
            <param name="leftQuote">A Unicode character right paired by the <paramref name="rightQuote" /> to escape <paramref name="parameterGroupSeparator" /> and <paramref name="parameterSeparator" />.</param>
            <param name="rightQuote">A Unicode character left paired by the <paramref name="leftQuote" /> to escape <paramref name="parameterGroupSeparator" /> and <paramref name="parameterSeparator" />.</param>
            <returns>An enumerator object that can be used to iterate through objects of type <typeparamref name="T"/> converted from combinations of strings specified in the <paramref name="expression" />.</returns>
            <remarks>For syntax, please refer to the other overload of this method.</remarks>
        </member>
        <member name="M:System.StringEx.GetKeyValuePairEnumerator(System.String,System.Int32,System.Int32,System.Char,System.Char,System.Char,System.Char,System.Boolean)">
            <summary>
            Gets an enumerator that iterates through key/value pairs represented by this string instance (or a substring of it), if this string follows certain syntax.
            </summary>
            <param name="expression">This string instance.</param>
            <param name="startIndex">Specifies where the representation of key/value pairs starts.</param>
            <param name="length">Specifies the length of the representation.</param>
            <param name="keyDelimiter">The Unicode character that delimits key and value in each pair.
            In each pair, only the first character that equals this argument will be recognized as a delimiter, and it cannot be escaped.</param>
            <param name="pairDelimiter">The Unicode character that delimits key/value pairs. This delimiter is escapable.</param>
            <param name="leftQuote">The Unicode character as the left escape quote for <paramref name="pairDelimiter" />. Use '\0' to indicate the escape is disabled and
            all three argument <paramref name="leftQuote" />, <paramref name="rightQuote" /> and <paramref name="escape" /> are ineffective.</param>
            <param name="rightQuote">The Unicode character as the right escape quote for <paramref name="pairDelimiter" />.</param>
            <param name="trimValue"><c>true</c> if the white spaces at both ends of the value of each returned pair is trimmed; otherwise, <c>false</c>.</param>
            <returns>
            An enumerator that iterates through key/value pairs represented by this string instance.
            </returns>
            <remarks>
            This string must follow the syntax "(&lt;key&gt; &lt;keyDelimiter&gt; &lt;leftQuote&gt;?&lt;value&gt; &lt;pairDelimiter&gt;&lt;rightQuote&gt;?) (...n)"
            If the <paramref name="pairDelimiter" /> is ';' (default value) and the escape is disabled, this string must follow the syntax "(&lt;key&gt; = &lt;value&gt;;) (...n)" which is exactly the same as a standard database connection string.
            </remarks>
        </member>
        <member name="M:System.StringEx.GetKeyValuePairEnumerator(System.String,System.Int32,System.Char,System.Char,System.Char,System.Char,System.Boolean)">
            <summary>
            Gets an enumerator that iterates through key/value pairs represented by this string instance (or a substring of it), if this string follows certain syntax.
            </summary>
            <param name="expression">This string instance.</param>
            <param name="startIndex">Specifies where the representation of key/value pairs starts.</param>
            <param name="keyDelimiter">The Unicode character that delimits key and value in each pair.
            In each pair, only the first character that equals this argument will be recognized as a delimiter, and it cannot be escaped.</param>
            <param name="pairDelimiter">The Unicode character that delimits key/value pairs. This delimiter is escapable.</param>
            <param name="leftQuote">The Unicode character as the left escape quote for <paramref name="pairDelimiter" />. Use '\0' to indicate the escape is disabled and
            all three argument <paramref name="leftQuote" />, <paramref name="rightQuote" /> and <paramref name="escape" /> are ineffective.</param>
            <param name="rightQuote">The Unicode character as the right escape quote for <paramref name="pairDelimiter" />.</param>
            <param name="trimValue"><c>true</c> if the white spaces at both ends of the value of each returned pair is trimmed; otherwise, <c>false</c>.</param>
            <returns>
            An enumerator that iterates through key/value pairs represented by this string instance.
            </returns>
            <remarks>
            This string must follow the syntax "(&lt;key&gt; &lt;keyDelimiter&gt; &lt;leftQuote&gt;?&lt;value&gt; &lt;pairDelimiter&gt;&lt;rightQuote&gt;?) (...n)"
            If the <paramref name="pairDelimiter" /> is ';' (default value) and the escape is disabled, this string must follow the syntax "(&lt;key&gt; = &lt;value&gt;;) (...n)" which is exactly the same as a standard database connection string.
            </remarks>
        </member>
        <member name="M:System.StringEx.GetKeyValuePairEnumerator(System.String,System.Char,System.Char,System.Char,System.Char,System.Boolean)">
            <summary>
            Gets an enumerator that iterates through key/value pairs represented by this string instance, if this string follows certain syntax.
            </summary>
            <param name="expression">This string instance.</param>
            <param name="keyDelimiter">The Unicode character that delimits key and value in each pair.
            In each pair, only the first character that equals this argument will be recognized as a delimiter, and it cannot be escaped.</param>
            <param name="pairDelimiter">The Unicode character that delimits key/value pairs. This delimiter is escapable.</param>
            <param name="leftQuote">The Unicode character as the left escape quote for <paramref name="pairDelimiter" />. Use '\0' to indicate the escape is disabled and
            all three argument <paramref name="leftQuote" />, <paramref name="rightQuote" /> and <paramref name="escape" /> are ineffective.</param>
            <param name="rightQuote">The Unicode character as the right escape quote for <paramref name="pairDelimiter" />.</param>
            <param name="trimValue"><c>true</c> if the white spaces at both ends of the value of each returned pair is trimmed; otherwise, <c>false</c>.</param>
            <returns>
            An enumerator that iterates through key/value pairs represented by this string instance.
            </returns>
            <remarks>
            This string must follow the syntax "(&lt;key&gt; &lt;keyDelimiter&gt; &lt;leftQuote&gt;?&lt;value&gt; &lt;pairDelimiter&gt;&lt;rightQuote&gt;?) (...n)"
            If the <paramref name="pairDelimiter" /> is ';' (default value) and the escape is disabled, this string must follow the syntax "(&lt;key&gt; = &lt;value&gt;;) (...n)" which is exactly the same as a standard database connection string.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.StringEx.IndexOfWithEscape(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Int32,System.Func{System.Char,System.Boolean})" -->
        <!-- Badly formed XML comment ignored for member "M:System.StringEx.IndexOfWithEscape(System.String,System.Char,System.Int32,System.Int32,System.Func{System.Char,System.Boolean})" -->
        <!-- Badly formed XML comment ignored for member "M:System.StringEx.IndexOfWithEscape(System.String,System.Char,System.Int32,System.Func{System.Char,System.Boolean})" -->
        <!-- Badly formed XML comment ignored for member "M:System.StringEx.IndexOfAnyWithEscape(System.String,System.Char[],System.Int32,System.Int32,System.Func{System.Char,System.Boolean})" -->
        <!-- Badly formed XML comment ignored for member "M:System.StringEx.IndexOfAnyWithEscape(System.String,System.Char[],System.Int32,System.Func{System.Char,System.Boolean})" -->
        <!-- Badly formed XML comment ignored for member "M:System.StringEx.LastIndexOfWithEscape(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Int32,System.Func{System.Char,System.Boolean})" -->
        <!-- Badly formed XML comment ignored for member "M:System.StringEx.LastIndexOfWithEscape(System.String,System.Char,System.Int32,System.Int32,System.Func{System.Char,System.Boolean})" -->
        <member name="M:System.StringEx.LastIndexOfWithEscape(System.String,System.Char,System.Int32,System.Func{System.Char,System.Boolean})">
            <summary>
            Reports the zero-based index of the last occurrence of the specified escapable Unicode character in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">A unicode character to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="escape">Specifies the Unicode character as the escape indicator. 
            Use two consecutive escape characters to indicate the literal value of an escape character.
            </param>
            <returns>The zero-based index position of the last occurrence of <paramref name="value"/> if it is found, or -1 if it is not.</returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithEscape(System.String,System.Char,System.Func{System.Char,System.Boolean})">
            <summary>
            Reports the zero-based index of the last occurrence of the specified escapable Unicode character in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">A unicode character to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="escape">Specifies the Unicode character as the escape indicator. 
            Use two consecutive escape characters to indicate the literal value of an escape character.
            </param>
            <returns>The zero-based index position of the last occurrence of <paramref name="value"/> if it is found, or -1 if it is not.</returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithEscape(System.String,System.Char[],System.Int32,System.Int32,System.Func{System.Char,System.Boolean})">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified escapable Unicode characters in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">Unicode characters to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" /> towards the beginning of the current string.</param>
            <param name="escape">Specifies the Unicode character as the escape indicator.
            Use two consecutive escape characters to indicate the literal value of an escape character.</param>
            <returns>
            The zero-based index position of the last occurrence of any value specified in <paramref name="values" /> if it is found, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithEscape(System.String,System.Char[],System.Int32,System.Func{System.Char,System.Boolean})">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified escapable Unicode characters in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">Unicode characters to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="escape">Specifies the Unicode character as the escape indicator.
            Use two consecutive escape characters to indicate the literal value of an escape character.</param>
            <returns>
            The zero-based index position of the last occurrence of any value specified in <paramref name="values" /> if it is found, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithEscape(System.String,System.Char[],System.Func{System.Char,System.Boolean})">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified escapable Unicode characters in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">Unicode characters to seek.</param>
            <param name="escape">Specifies the Unicode character as the escape indicator.
            Use two consecutive escape characters to indicate the literal value of an escape character.</param>
            <returns>
            The zero-based index position of the last occurrence of any value specified in <paramref name="values" /> if it is found, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOf(System.String[],System.String,System.StringComparison)">
            <summary>
            Searches for the specified <paramref name="value"/> and returns the index of the first occurrence within the entire one-dimensional string array.
            </summary>
            <param name="array">The current one-dimensional string array to search.</param>
            <param name="value">The string to locate in array.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <returns>The index of the first occurrence of <paramref name="value"/> within the entire array, if found; otherwise, -1.</returns>
        </member>
        <member name="M:System.StringEx.IndexOf(System.String[],System.String,System.Int32,System.StringComparison)">
            <summary>
            Searches for the specified string and returns the index of the first occurrence within the range of string elements in this one-dimensional string array that starts at the specified index.
            </summary>
            <param name="array">The one-dimensional string array to search.</param>
            <param name="value">The string to locate in this array.</param>
            <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <returns>The index of the first occurrence of <paramref name="value"/> within the range of elements in array that starts at <paramref name="startIndex"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:System.StringEx.IndexOf(System.String[],System.String,System.Int32,System.Int32,System.StringComparison)">
            <summary>
            Searches for the specified string and returns the index of the first occurrence within the range of string elements in this one-dimensional string array that starts at the specified index and contains the specified number of elements.
            </summary>
            <param name="array">The one-dimensional string array to search.</param>
            <param name="value">The string to locate in this array.</param>
            <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <returns>The index of the first occurrence of <paramref name="value"/> within the range of elements in array that starts at <paramref name="startIndex"/> and contains the number of elements specified in <paramref name="count"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:System.StringEx.IndexOfAny(System.String[],System.String[],System.StringComparison)">
            <summary>
            Searches for any of the specified <paramref name="values"/> and returns the index of the first occurrence within the entire one-dimensional string array.
            </summary>
            <param name="array">The current one-dimensional string array to search.</param>
            <param name="values">The strings to locate in array.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <returns>An <see cref="T:System.ElementSearchResult`1"/> object that stores the index of the first occurrence of any of the <paramref name="values"/> within the entire array, if found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:System.StringEx.IndexOfAny(System.String[],System.String[],System.Int32,System.StringComparison)">
            <summary>
            Searches for any of the specified strings and returns the index of the first occurrence within the range of string elements in this one-dimensional string array that starts at the specified index.
            </summary>
            <param name="array">The one-dimensional string array to search.</param>
            <param name="values">The strings to locate in this array.</param>
            <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <returns>An <see cref="T:System.ElementSearchResult`1"/> object that stores the index of the first occurrence of any of the <paramref name="values"/> within the range of elements in array that starts at <paramref name="startIndex"/>, if found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:System.StringEx.IndexOfAny(System.String[],System.String[],System.Int32,System.Int32,System.StringComparison)">
            <summary>
            Searches for any of the specified strings and returns the index of the first occurrence within the range of string elements in this one-dimensional string array that starts at the specified index and contains the specified number of elements.
            </summary>
            <param name="array">The one-dimensional string array to search.</param>
            <param name="values">The strings to locate in this array.</param>
            <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <returns>An <see cref="T:System.ElementSearchResult`1"/> object that stores the index of the first occurrence of any of the <paramref name="values"/> within the range of elements in array that starts at <paramref name="startIndex"/> and contains the number of elements specified in <paramref name="count"/>, if found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:System.StringEx.InlineIndexOf(System.String,System.String,System.Int32,System.Int32,System.StringComparison)">
            <summary>
            Gets the index of the first inline occurrence of <paramref name="value"/>.
            </summary>
            <param name="str">The string.</param>
            <param name="value">The value to search for.</param>
            <param name="startIndex">Indicating the position where the search starts. Supports negative index.</param>
            <param name="count">The number of character positions to examine.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <returns>The inline index of the first inline occurrence of <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.StringEx.InlineIndexOf(System.String,System.Char,System.Int32,System.Int32)">
            <summary>
            Gets the index of the first inline occurrence of <paramref name="value"/>.
            </summary>
            <param name="str">The string.</param>
            <param name="value">A Unicode character to search for.</param>
            <param name="startIndex">Indicating the position where the search starts. Supports negative index.</param>
            <param name="count">The number of character positions to examine.</param>
            <returns>The inline index of the first inline occurrence of <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.StringEx.IndexOf(System.String,System.Func{System.Char,System.Boolean},System.Int32)">
            <summary>
            Reports the index of the first character satisfying the specified predicate. 
            The search starts at a specified character position toward the end of this string instance.
            </summary>
            <param name="str">This string instance.</param>
            <param name="startIndex">The search starting position. The search proceeds from <paramref name="startIndex"/> toward the end of this instance.</param>
            <param name="predicate">A function to test each character of the current string.</param>
            <returns>The zero-based index position of the first character in this instance satisfying the specified predicate.</returns>
        </member>
        <member name="M:System.StringEx.IndexOf(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Int32)">
            <summary>
            Reports the index of the first character satisfying the specified predicate.
            The search starts at a specified character position and examines a specified number of character positions toward the end of this string instance.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each character of the current string.</param>
            <param name="startIndex">The search starting position. The search proceeds from <paramref name="startIndex" /> toward the end of this instance.</param>
            <param name="count">The number of character positions to examine.</param>
            <returns>
            The zero-based index position of the first character in this instance satisfying the specified predicate.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfAny(System.String,System.Char[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters <paramref name="anyOf"/>. 
            The search starts at a specified character position and examines a specified number of character positions.
            </summary>
            <param name="str">This string instance.</param>
            <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <param name="hitIndex">Returns the index of the encountered character in the specified array of Unicode characters.</param>
            <returns>The zero-based index position of the first character in this instance satisfying the specified predicate.</returns>
        </member>
        <member name="M:System.StringEx.IndexOfAny(System.String,System.Char[],System.Int32,System.Int32@)">
            <summary>
            Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters <paramref name="anyOf"/>. 
            The search starts at a specified character position and examines a specified number of character positions.
            </summary>
            <param name="str">This string instance.</param>
            <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="hitIndex">Returns the index of the encountered character in the specified array of Unicode characters.</param>
            <returns>The zero-based index position of the first character in this instance satisfying the specified predicate.</returns>
        </member>
        <member name="M:System.StringEx.IndexOfAny(System.String,System.Char[],System.Int32@)">
            <summary>
            Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters <paramref name="anyOf"/>. 
            The search starts at a specified character position and examines a specified number of character positions.
            </summary>
            <param name="str">This string instance.</param>
            <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
            <param name="hitIndex">Returns the index of the encountered character in the specified array of Unicode characters.</param>
            <returns>The zero-based index position of the first character in this instance satisfying the specified predicate.</returns>
        </member>
        <member name="M:System.StringEx.IndexOfAny(System.String,System.Collections.Generic.IList{System.String},System.Int32,System.Int32,System.StringComparison)">
            <summary>
            Reports the index of the first occurrence of any of the specified strings in this string instance.
            </summary>
            <param name="str">This string instance.</param>
            <param name="anyOf">A string array containing one or more strings to seek.</param>
            <param name="startIndex">Indicating the position where the search starts.</param>
            <param name="count">The number of character positions to examine.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <returns>
            A <see cref="T:System.StringSearchResult"/> object that stores the search result; <c>null</c> if the search fails.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfAny(System.String,System.Collections.Generic.IList{System.String},System.Int32,System.StringComparison)">
            <summary>
            Reports the index of the first occurrence of any of the specified strings in this string instance.
            </summary>
            <param name="str">This string instance.</param>
            <param name="anyOf">A string array containing one or more strings to seek.</param>
            <param name="startIndex">Indicating the position where the search starts.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <returns>
            A <see cref="T:System.StringSearchResult"/> object that stores the search result; <c>null</c> if no element in the <paramref name="anyOf"/> is found in the current string.
            </returns>
        </member>
        <member name="M:System.StringEx.LastIndexOf(System.String,System.Func{System.Char,System.Boolean},System.Int32)">
            <summary>
            Reports the index of the last character satisfying the specified predicate. 
            The search starts at a specified character position toward the beginning of this string instance.
            </summary>
            <param name="str">This string instance.</param>
            <param name="startIndex">The search starting position. The search proceeds from <paramref name="startIndex"/> toward the end of this instance.</param>
            <param name="predicate">A function to test each character of the current string.</param>
            <returns>The zero-based index position of the last character in this instance satisfying the specified predicate.</returns>
        </member>
        <member name="M:System.StringEx.LastIndexOf(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Int32)">
            <summary>
            Reports the index of the last character satisfying the specified predicate.
            The search starts at a specified character position and examines a specified number of character positions toward the beginning of this string instance.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each character of the current string.</param>
            <param name="startIndex">The search starting position. The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</param>
            <param name="count">The number of character positions to examine.</param>
            <returns>
            The zero-based index position of the last character in this instance satisfying the specified predicate.
            </returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfAny(System.String,System.Collections.Generic.IList{System.String},System.Int32,System.Int32,System.StringComparison)">
            <summary>
            Reports the index of the last occurrence of any of the specified strings in this string instance.
            </summary>
            <param name="str">This string instance.</param>
            <param name="anyOf">A string array containing one or more strings to seek.</param>
            <param name="startIndex">Indicating the position where the search starts.</param>
            <param name="count">The number of character positions to examine.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <returns>
            A <see cref="T:System.StringSearchResult"/> object that stores the search result; null if none of the <paramref name="anyOf"/> is found in the current string.
            </returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfAny(System.String,System.Collections.Generic.IList{System.String},System.Int32,System.StringComparison)">
            <summary>
            Reports the index of the last occurrence of any of the specified strings in this string instance.
            </summary>
            <param name="str">This string instance.</param>
            <param name="anyOf">A string array containing one or more strings to seek.</param>
            <param name="startIndex">Indicating the position where the search starts. The search proceeds from startIndex toward the beginning of this instance.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <returns>
            A <see cref="T:System.StringSearchResult"/> object that stores the search result; null if none of the <paramref name="anyOf"/> is found in the current string.
            </returns>
        </member>
        <member name="M:System.StringEx.LastNonSpaceCharacter(System.String,System.Int32)">
            <summary>
            Gets the last non-white-space Unicode character in the string at and before the search starting position specified by <paramref name="startIndex"/>.
            </summary>
            <param name="str">The current string.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The last non-white-space Unicode character at and before the search starting position.</returns>
        </member>
        <member name="M:System.StringEx.FirstNonSpaceCharacter(System.String,System.Int32)">
            <summary>
            Gets the first non-white-space Unicode character in the string at and after the search starting position specified by <paramref name="startIndex"/>.
            </summary>
            <param name="str">The current string.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The first non-white-space Unicode character at and after the search starting position.</returns>
        </member>
        <member name="M:System.StringEx.IndexOfLastNonSpaceCharacter(System.String,System.Int32)">
            <summary>
            Gets the index of the last non-white-space Unicode character in the string at and before the search starting position specified by <paramref name="startIndex"/>.
            </summary>
            <param name="str">The current string.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The index of the last non-white-space Unicode character at and before the search starting position.</returns>
        </member>
        <member name="M:System.StringEx.IndexOfFirstNonSpaceCharacter(System.String,System.Int32)">
            <summary>
            Gets the index of the first non-white-space Unicode character in the string at and after the search starting position specified by <paramref name="startIndex"/>.
            </summary>
            <param name="str">The current string.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The index of the first non-white-space Unicode character at and after the search starting position.</returns>
        </member>
        <member name="M:System.StringEx.FoldToASCII(System.String,System.Int32,System.Int32)">
            <summary>
            Converts non-ASCII characters in this string instance to their ASCII equivalents wherever possible. For example, accents are removed from accented characters. One non-ASCII character may be converted to an equivalent of multiple ASCII characters.
            </summary>
            <param name="str">This string instance.</param>
            <param name="start">The index of the first character to fold.</param>
            <param name="length">The number of characters to fold.</param>
            <returns>A substring of length <paramref name="length"/> of the current string instance starting from <paramref name="start"/> with all characters converted to their ASCII equivalents.</returns>
            <remarks>Based on Apache Lucence.Net implementation at https://github.com/apache/lucenenet. </remarks>
        </member>
        <member name="M:System.StringEx.FoldToASCII(System.String)">
            <summary>
            Converts non-ASCII characters in this string instance to their ASCII equivalents wherever possible. For example, accents are removed from accented characters. One non-ASCII character may be converted to an equivalent of multiple ASCII characters.
            </summary>
            <param name="str">This string instance.</param>
            <returns>A copy of the current string instance with all characters converted to their ASCII equivalents.</returns>
            <remarks>Based on Apache Lucence.Net implementation at https://github.com/apache/lucenenet. </remarks>
        </member>
        <member name="M:System.StringEx.Scan(System.String,System.Object)">
            <summary>
            Replaces one or more format items with the string representation of a specified object.
            <para>This is a dummy of the <c>string.Format</c> method for convenience.</para>
            </summary>
            <param name="str">This string instance that contains one or more format items.</param>
            <param name="arg0">The object to format.</param>
            <returns>A copy of the original string in which the format items are replaced by the string representation of <paramref name="arg0"/>.</returns>
        </member>
        <member name="M:System.StringEx.Scan(System.String,System.Object,System.Object)">
            <summary>
            Replaces format items with the string representation of two specified objects.
            <para>This is a dummy of the <c>string.Format</c> method for convenience.</para>
            </summary>
            <param name="str">This string instance that contains one or more format items.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <returns>A copy of the original string in which the format items are replaced by the string representations of <paramref name="arg0"/> and <paramref name="arg1"/>.</returns>
        </member>
        <member name="M:System.StringEx.Scan(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Replaces format items with the string representation of three specified objects.
            <para>This is a dummy of the <c>string.Format</c> method for convenience.</para>
            </summary>
            <param name="str">This string instance that contains one or more format items.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <param name="arg2">The third object to format.</param>
            <returns>A copy of the original string in which the format items are replaced by the string representations of <paramref name="arg0"/>, <paramref name="arg1"/> and <paramref name="arg2"/>.</returns>
        </member>
        <member name="M:System.StringEx.Scan(System.String,System.Object[])">
            <summary>
            Replaces each format item in this string with the string representation of a corresponding object in a specified array.
            <para>This is a dummy of the <c>string.Format</c> method for convenience.</para>
            </summary>
            <param name="str">This string instance that contains one or more format items.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>A copy of the original string in which the format items are replaced by the string representation of the corresponding objects in <paramref name="args"/>.</returns>
        </member>
        <member name="M:System.StringEx.TrimAll(System.Collections.Generic.IList{System.String})">
            <summary>
            Trims all leading and trailing white spaces from every string in this string array/list.
            </summary>
            <param name="stringArray">This string array/list.</param>
        </member>
        <member name="M:System.StringEx.TrimStartAll(System.Collections.Generic.IList{System.String})">
            <summary>
            Trims all leading white spaces from every string in this string array/list.
            </summary>
            <param name="stringArray">This string array/list.</param>
        </member>
        <member name="M:System.StringEx.TrimEndAll(System.Collections.Generic.IList{System.String})">
            <summary>
            Trims all trailing white spaces from every string in this string array/list.
            </summary>
            <param name="stringArray">This string array/list.</param>
        </member>
        <member name="M:System.StringEx.TrimAll(System.Collections.Generic.IList{System.String},System.Char[])">
            <summary>
            Removes all leading and trailing occurrences of a set of characters specified in an array from every string in this string array/list.
            </summary>
            <param name="stringArray">This string array/list.</param>
            <param name="trimChars">An array of Unicode characters to remove, or null.</param>
        </member>
        <member name="M:System.StringEx.TrimStartAll(System.Collections.Generic.IList{System.String},System.Char[])">
            <summary>
            Removes all leading occurrences of a set of characters specified in an array from every string in this string array/list.
            </summary>
            <param name="stringArray">This string array/list.</param>
            <param name="trimChars">An array of Unicode characters to remove, or null.</param>
        </member>
        <member name="M:System.StringEx.TrimEndAll(System.Collections.Generic.IList{System.String},System.Char[])">
            <summary>
            Removes all trailing occurrences of a set of characters specified in an array from every string in this string array/list.
            </summary>
            <param name="stringArray">This string array/list.</param>
            <param name="trimChars">An array of Unicode characters to remove, or null.</param>
        </member>
        <member name="M:System.StringEx.Trim(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean@,System.Boolean@)">
            <summary>
            Removes the first leading and tailing occurrences of any strings in <paramref name="trims"/> from the current string instance.
            NOTE only the first matched leading and tailing occurrences will be removed. For example, <c>"123123abc456".Trim("123","456")</c> gives "123abc".
            </summary>
            <param name="source">This string instance.</param>
            <param name="trims">The sequence of strings to match the beginning and the end of this string instance.</param>
            <param name="trimmedStart">Gets a value indicating whether any leading substring is trimmed. If this returns <c>true</c>, at least one string in <paramref name="trims"/>  is at the beginning of this string and trimmed.</param>
            <param name="trimmedEnd">Gets a value indicating whether any tailing substring is trimmed. If this returns <c>true</c>, at least one string in <paramref name="trims"/>  is at the end of this string and trimmed.</param>
            <returns>A copy of the original string with the beginning trimmed, if any of the strings in <paramref name="trims"/> matches the beginning or the end of the original string; otherwise, the original string instance.</returns>
        </member>
        <member name="M:System.StringEx.TrimStart(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean@)">
            <summary>
            Removes the first leading occurrence of any strings in <paramref name="trims"/> from the current string instance.
            NOTE only the first matched leading occurrences will be removed. For example, <c>"123123abc456".TrimStart("123","456")</c> gives "123abc456".
            </summary>
            <param name="source">This string instance.</param>
            <param name="trims">The sequence of strings to match the beginning of this string instance.</param>
            <param name="trimmed">Gets a value indicating whether any leading substring is trimmed. If this returns <c>true</c>, at least one string in <paramref name="trims"/>  is at the beginning of this string and trimmed.</param>
            <returns>A copy of the original string with the beginning trimmed, if any of the strings in <paramref name="trims"/> matches the beginning of the original string; otherwise, the original string instance.</returns>
        </member>
        <member name="M:System.StringEx.TrimEnd(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean@)">
            <summary>
            Removes the first tailing occurrence of any strings in <paramref name="trims"/> from the current string instance.
            NOTE only the first matched tailing occurrence will be removed. For example, <c>"123abc456456".TrimEnd("123","456")</c> gives "123abc456".
            </summary>
            <param name="source">This string instance.</param>
            <param name="trims">The sequence of strings to match the end of this string instance.</param>
            <param name="trimmed">Gets a value indicating whether any tailing substring is trimmed. If this returns <c>true</c>, at least one string in <paramref name="trims"/>  is at the end of this string and trimmed.</param>
            <returns>A copy of the original string with the beginning trimmed, if any of the strings in <paramref name="trims"/> matches the end of the original string; otherwise, the original string instance.</returns>
        </member>
        <member name="M:System.StringEx.Trim(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes the first leading and tailing occurrences of any strings in <paramref name="trims"/> from the current string instance.
            NOTE only the first matched leading and tailing occurrences will be removed. For example, <c>"123123abc456".Trim("123","456")</c> gives "123abc".
            </summary>
            <param name="source">This string instance.</param>
            <param name="trims">The sequence of strings to match the beginning and the end of this string instance.</param>
            <returns>A copy of the original string with the beginning trimmed, if any of the strings in <paramref name="trims"/> matches the beginning or the end of the original string; otherwise, the original string instance.</returns>
        </member>
        <member name="M:System.StringEx.TrimStart(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes the first leading occurrence of any strings in <paramref name="trims"/> from the current string instance.
            NOTE only the first matched leading occurrences will be removed. For example, <c>"123123abc456".TrimStart("123","456")</c> gives "123abc456".
            </summary>
            <param name="source">This string instance.</param>
            <param name="trims">The sequence of strings to match the beginning of this string instance.</param>
            <returns>A copy of the original string with the beginning trimmed, if any of the strings in <paramref name="trims"/> matches the beginning of the original string; otherwise, the original string instance.</returns>
        </member>
        <member name="M:System.StringEx.TrimEnd(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes the first tailing occurrence of any strings in <paramref name="trims"/> from the current string instance.
            NOTE only the first matched tailing occurrence will be removed. For example, <c>"123abc456456".TrimEnd("123","456")</c> gives "123abc456".
            </summary>
            <param name="source">This string instance.</param>
            <param name="trims">The sequence of strings to match the end of this string instance.</param>
            <returns>A copy of the original string with the beginning trimmed, if any of the strings in <paramref name="trims"/> matches the end of the original string; otherwise, the original string instance.</returns>
        </member>
        <member name="M:System.StringEx.Trim(System.String,System.String[])">
            <summary>
            Removes the first leading and tailing occurrences of any strings in <paramref name="trims"/> from the current string instance.
            NOTE only the first matched leading and tailing occurrences will be removed. For example, <c>"123123abc456".Trim("123","456")</c> gives "123abc".
            </summary>
            <param name="source">This string instance.</param>
            <param name="trims">The sequence of strings to match the beginning and the end of this string instance.</param>
            <returns>A copy of the original string with the beginning trimmed, if any of the strings in <paramref name="trims"/> matches the beginning or the end of the original string; otherwise, the original string instance.</returns>
        </member>
        <member name="M:System.StringEx.TrimStart(System.String,System.String[])">
            <summary>
            Removes the first leading occurrence of any strings in <paramref name="trims"/> from the current string instance.
            NOTE only the first matched leading occurrences will be removed. For example, <c>"123123abc456".TrimStart("123","456")</c> gives "123abc456".
            </summary>
            <param name="source">This string instance.</param>
            <param name="trims">The sequence of strings to match the beginning of this string instance.</param>
            <returns>A copy of the original string with the beginning trimmed, if any of the strings in <paramref name="trims"/> matches the beginning of the original string; otherwise, the original string instance.</returns>
        </member>
        <member name="M:System.StringEx.TrimEnd(System.String,System.String[])">
            <summary>
            Removes the first tailing occurrence of any strings in <paramref name="trims"/> from the current string instance.
            NOTE only the first matched tailing occurrence will be removed. For example, <c>"123abc456456".TrimEnd("123","456")</c> gives "123abc456".
            </summary>
            <param name="source">This string instance.</param>
            <param name="trims">The sequence of strings to match the end of this string instance.</param>
            <returns>A copy of the original string with the beginning trimmed, if any of the strings in <paramref name="trims"/> matches the end of the original string; otherwise, the original string instance.</returns>
        </member>
        <member name="M:System.StringEx.TrimStart(System.String,System.Func{System.Char,System.Boolean})">
            <summary>
            Removes all leading occurrences of characters that satisfy the specified <paramref name="predicate"/>. NOTE this method may return the original instance if no characters are removed.
            </summary>
            <param name="str">The string instance.</param>
            <param name="predicate">The predicate to test characters.</param>
            <returns>The string that remains after all leading occurrences of characters that satisfy the specified <paramref name="predicate"/> are removed from the start of the current string. If any character is trimmed, a new instance will be returned; otherwise, if no character is removed, the original instance will be returned.</returns>
        </member>
        <member name="M:System.StringEx.TrimEnd(System.String,System.Func{System.Char,System.Boolean})">
            <summary>
            Removes all tailing occurrences of characters that satisfy the specified <paramref name="predicate"/>. NOTE this method may return the original instance if no characters are removed.
            </summary>
            <param name="str">The string instance.</param>
            <param name="predicate">The predicate to test characters.</param>
            <returns>The string that remains after all tailing occurrences of characters that satisfy the specified <paramref name="predicate"/> are removed from the start of the current string. If any character is trimmed, a new instance will be returned; otherwise, if no character is removed, the original instance will be returned.</returns>
        </member>
        <member name="M:System.StringEx.Trim(System.String,System.Func{System.Char,System.Boolean})">
            <summary>
            Removes all leading and tailing occurrences of characters that satisfy the specified <paramref name="predicate"/>. NOTE this method may return the original instance if no characters are removed.
            </summary>
            <param name="str">The string instance.</param>
            <param name="predicate">The predicate to test characters.</param>
            <returns>The string that remains after all leading and tailing occurrences of characters that satisfy the specified <paramref name="predicate"/> are removed from the start of the current string. If any character is trimmed, a new instance will be returned; otherwise, if no character is removed, the original instance will be returned.</returns>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Int32,System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the first occurrence of a Unicode character outside quotes and satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">
            Occurs when there is a quote mismatch in the string instance.
            </exception>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Int32,System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the first occurrence of a Unicode character outside quotes and satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.Char,System.Int32,System.Int32,System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the first occurrence of the specified Unicode character outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.Char,System.Int32,System.Int32,System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified Unicode character outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.Char,System.Int32,System.Int32,System.Char,System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified Unicode character outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <param name="quoteEscape">A character for escaping both the <paramref name="leftQuote"/> and <paramref name="rightQuote"/>.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfAnyWithQuotes(System.String,System.Char[],System.Int32,System.Int32,System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the first occurrence of any of the specified Unicode characters outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">Unicode characters to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <returns>
            The zero-based index position of the first occurrence of any value specified in <paramref name="values" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfAnyWithQuotes(System.String,System.Char[],System.Int32,System.Int32,System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the first occurrence of any of the specified Unicode characters outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">Unicode characters to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <returns>
            The zero-based index position of the first occurrence of any value specified in <paramref name="values" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the first occurrence of a Unicode character outside quotes and satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.Char,System.Int32,System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the first occurrence of the specified escapable Unicode character outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfAnyWithQuotes(System.String,System.Char[],System.Int32,System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the first occurrence of any of the specified escapable Unicode characters outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">Unicode characters to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <returns>
            The zero-based index position of the first occurrence of any value specified in <paramref name="values" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the first occurrence of a Unicode character outside quotes and satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate"/> starts.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <returns>The zero-based index position of the first occurrence of <paramref name="value"/> if it is found outside quotes, or -1 if it is not.</returns>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.Char,System.Int32,System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified escapable Unicode character outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfAnyWithQuotes(System.String,System.Char[],System.Int32,System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the first occurrence of any of the specified escapable Unicode characters outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">Unicode characters to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <returns>
            The zero-based index position of the first occurrence of any value specified in <paramref name="values" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Int32,System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the last occurrence of a Unicode character outside quotes and satisfying the specified predicate. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from position specified by <paramref name="startIndex" /> towards the beginning of the current string.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">
            Occurs when there is a quote mismatch in the string instance.
            </exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Int32,System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the last occurrence of a Unicode character outside quotes and satisfying the specified predicate. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="startIndex">The zero-based position indicating where the backward search for characters satisfying <paramref name="predicate" /> starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from position specified by <paramref name="startIndex" /> towards the beginning of the current string.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Char,System.Int32,System.Int32,System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the last occurrence of the specified Unicode character outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="startIndex">The zero-based position indicating where the backward search for the specified character starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from position specified by <paramref name="startIndex" /> towards the beginning of the current string.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Char,System.Int32,System.Int32,System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the last occurrence of the specified Unicode character outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="startIndex">The zero-based position indicating where the backward search for the specified character starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from position specified by <paramref name="startIndex" /> towards the beginning of the current string.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.Char[],System.Int32,System.Int32,System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified Unicode characters outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">Unicode characters to seek.</param>
            <param name="startIndex">The zero-based position indicating where the backward search for the specified characters starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from position specified by <paramref name="startIndex" /> towards the beginning of the current string.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <returns>
            The zero-based index position of the last occurrence of any value specified in <paramref name="values" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.Char[],System.Int32,System.Int32,System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified Unicode characters outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">Unicode characters to seek.</param>
            <param name="startIndex">The zero-based position indicating where the backward search for the specified characters starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from position specified by <paramref name="startIndex" /> towards the beginning of the current string.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <returns>
            The zero-based index position of the last occurrence of any value specified in <paramref name="values" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the last occurrence of a Unicode character outside quotes and satisfying the specified predicate. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="startIndex">The zero-based position indicating where the backward search for characters satisfying <paramref name="predicate" /> starts.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Char,System.Int32,System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the last occurrence of the specified escapable Unicode character outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="startIndex">The zero-based position indicating where the backward search for the specified character starts.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.Char[],System.Int32,System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified escapable Unicode characters outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">Unicode characters to seek.</param>
            <param name="startIndex">The zero-based position indicating where the backward search for the specified characters starts.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <returns>
            The zero-based index position of the last occurrence of any value specified in <paramref name="values" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the last occurrence of a Unicode character outside quotes and satisfying the specified predicate. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate"/> starts.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <returns>The zero-based index position of the last occurrence of <paramref name="value"/> if it is found outside quotes, or -1 if it is not.</returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Char,System.Int32,System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the last occurrence of the specified escapable Unicode character outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="startIndex">The zero-based position indicating where the backward search for the specified character starts.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.Char[],System.Int32,System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified escapable Unicode characters outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">Unicode characters to seek.</param>
            <param name="startIndex">The zero-based position indicating where the backward search for the specified characters starts.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <returns>
            The zero-based index position of the last occurrence of any value specified in <paramref name="values" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the last occurrence of a Unicode character outside quotes and satisfying the specified predicate. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="startIndex">The zero-based position indicating where the backward search for characters satisfying <paramref name="predicate" /> starts.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Char,System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the last occurrence of the specified escapable Unicode character outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="startIndex">The zero-based position indicating where the backward search for the specified character starts.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.Char[],System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified escapable Unicode characters outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">Unicode characters to seek.</param>
            <param name="startIndex">The zero-based position indicating where the backward search for the specified characters starts.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <returns>
            The zero-based index position of the last occurrence of any value specified in <paramref name="values" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the last occurrence of a Unicode character outside quotes and satisfying the specified predicate. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate"/> starts.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <returns>The zero-based index position of the last occurrence of <paramref name="value"/> if it is found outside quotes, or -1 if it is not.</returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Char,System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the last occurrence of the specified escapable Unicode character outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="startIndex">The zero-based position indicating where the backward search for the specified character starts.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.Char[],System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified escapable Unicode characters outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">Unicode characters to seek.</param>
            <param name="startIndex">The zero-based position indicating where the backward search for the specified characters starts.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <returns>
            The zero-based index position of the last occurrence of any value specified in <paramref name="values" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Int32,System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the first occurrence of a Unicode character outside quotes and satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first Unicode character outside quotes and satisfying the specified predicate, or -1 if no such character is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Int32,System.Char[],System.Char[],System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the first occurrence of a Unicode character outside quotes and satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuote">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuote">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first Unicode character outside quotes and satisfying the specified predicate, or -1 if no such character is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Int32,System.Char,System.Char,System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the first occurrence of the specified Unicode character outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first Unicode character outside quotes and satisfying the specified predicate, or -1 if no such character is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Int32,System.Char[],System.Char[],System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the first occurrence of the specified Unicode character outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuote">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuote">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first Unicode character outside quotes and satisfying the specified predicate, or -1 if no such character is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.Char,System.Int32,System.Int32,System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified Unicode character outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.Char,System.Int32,System.Int32,System.Char[],System.Char[],System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified Unicode character outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.Char,System.Int32,System.Int32,System.Char,System.Char,System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the first occurrence of the specified Unicode character outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.Char,System.Int32,System.Int32,System.Char[],System.Char[],System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the first occurrence of the specified Unicode character outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfAnyWithQuotes(System.String,System.Char[],System.Int32,System.Int32,System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the first occurrence of any of the specified Unicode characters outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The Unicode characters to seek.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first occurrence of any value specified in <paramref name="values" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfAnyWithQuotes(System.String,System.Char[],System.Int32,System.Int32,System.Char[],System.Char[],System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the first occurrence of any of the specified Unicode characters outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The Unicode characters to seek.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first occurrence of any value specified in <paramref name="values" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfAnyWithQuotes(System.String,System.Char[],System.Int32,System.Int32,System.Char,System.Char,System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the first occurrence of any of the specified Unicode characters outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The Unicode characters to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first occurrence of any value specified in <paramref name="values" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfAnyWithQuotes(System.String,System.Char[],System.Int32,System.Int32,System.Char[],System.Char[],System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the first occurrence of any of the specified Unicode characters outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The Unicode characters to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first occurrence of any value specified in <paramref name="values" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the first occurrence of a Unicode character outside quotes and satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first Unicode character outside quotes and satisfying the specified predicate, or -1 if no such character is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the first occurrence of a Unicode character outside quotes and satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first Unicode character outside quotes and satisfying the specified predicate, or -1 if no such character is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Char[],System.Char[],System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the first occurrence of a Unicode character outside quotes and satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts.</param>
            <param name="primaryLeftQuote">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuote">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first Unicode character outside quotes and satisfying the specified predicate, or -1 if no such character is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the first occurrence of a Unicode character outside quotes and satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="primaryLeftQuote">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuote">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first Unicode character outside quotes and satisfying the specified predicate, or -1 if no such character is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Char,System.Char,System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the first occurrence of the specified Unicode character outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first Unicode character outside quotes and satisfying the specified predicate, or -1 if no such character is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the first occurrence of the specified Unicode character outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first Unicode character outside quotes and satisfying the specified predicate, or -1 if no such character is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Char[],System.Char[],System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the first occurrence of the specified Unicode character outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="primaryLeftQuote">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuote">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first Unicode character outside quotes and satisfying the specified predicate, or -1 if no such character is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the first occurrence of the specified Unicode character outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="primaryLeftQuote">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuote">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first Unicode character outside quotes and satisfying the specified predicate, or -1 if no such character is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.Char,System.Int32,System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified Unicode character outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.Char,System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified Unicode character outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.Char,System.Int32,System.Char[],System.Char[],System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified Unicode character outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts.</param>
            <param name="primaryLeftQuote">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuote">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.Char,System.Char[],System.Char[],System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified Unicode character outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="primaryLeftQuote">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuote">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.Char,System.Int32,System.Char,System.Char,System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the first occurrence of the specified Unicode character outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.Char,System.Char,System.Char,System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the first occurrence of the specified Unicode character outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.Char,System.Int32,System.Char[],System.Char[],System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the first occurrence of the specified Unicode character outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.Char,System.Char[],System.Char[],System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the first occurrence of the specified Unicode character outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfAnyWithQuotes(System.String,System.Char[],System.Int32,System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the first occurrence of any of the specified Unicode characters outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The Unicode characters to seek.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first occurrence of any value specified in <paramref name="values" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfAnyWithQuotes(System.String,System.Char[],System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the first occurrence of any of the specified Unicode characters outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The Unicode characters to seek.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first occurrence of any value specified in <paramref name="values" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfAnyWithQuotes(System.String,System.Char[],System.Int32,System.Char[],System.Char[],System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the first occurrence of any of the specified Unicode characters outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The Unicode characters to seek.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first occurrence of any value specified in <paramref name="values" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfAnyWithQuotes(System.String,System.Char[],System.Char[],System.Char[],System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the first occurrence of any of the specified Unicode characters outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The Unicode characters to seek.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first occurrence of any value specified in <paramref name="values" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfAnyWithQuotes(System.String,System.Char[],System.Int32,System.Char,System.Char,System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the first occurrence of any of the specified Unicode characters outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The Unicode characters to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first occurrence of any value specified in <paramref name="values" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfAnyWithQuotes(System.String,System.Char[],System.Char,System.Char,System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the first occurrence of any of the specified Unicode characters outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The Unicode characters to seek.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first occurrence of any value specified in <paramref name="values" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfAnyWithQuotes(System.String,System.Char[],System.Int32,System.Char[],System.Char[],System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the first occurrence of any of the specified Unicode characters outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The Unicode characters to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first occurrence of any value specified in <paramref name="values" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfAnyWithQuotes(System.String,System.Char[],System.Char[],System.Char[],System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the first occurrence of any of the specified Unicode characters outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The Unicode characters to seek.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the first occurrence of any value specified in <paramref name="values" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Int32,System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the last occurrence of a Unicode character outside quotes and satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts. The search starts at this specified position and advances towards the beginning of the string.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last Unicode character outside quotes and satisfying the specified predicate, or -1 if no such character is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Int32,System.Char[],System.Char[],System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the last occurrence of a Unicode character outside quotes and satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts. The search starts at this specified position and advances towards the beginning of the string.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuote">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuote">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last Unicode character outside quotes and satisfying the specified predicate, or -1 if no such character is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Int32,System.Char,System.Char,System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the last occurrence of the specified Unicode character outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts. The search starts at this specified position and advances towards the beginning of the string.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last Unicode character outside quotes and satisfying the specified predicate, or -1 if no such character is not.
            </returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Int32,System.Char[],System.Char[],System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the last occurrence of the specified Unicode character outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts. The search starts at this specified position and advances towards the beginning of the string.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuote">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuote">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last Unicode character outside quotes and satisfying the specified predicate, or -1 if no such character is not.
            </returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Char,System.Int32,System.Int32,System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the last occurrence of the specified Unicode character outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="startIndex">The zero-based position indicating where the search for <paramref name="value" /> starts. The search starts at this specified position and advances towards the beginning of the string.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Char,System.Int32,System.Int32,System.Char[],System.Char[],System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the last occurrence of the specified Unicode character outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="startIndex">The zero-based position indicating where the search for <paramref name="value" /> starts. The search starts at this specified position and advances towards the beginning of the string.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuote">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuote">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Char,System.Int32,System.Int32,System.Char,System.Char,System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the last occurrence of the specified Unicode character outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="startIndex">The zero-based position indicating where the search for <paramref name="value" /> starts. The search starts at this specified position and advances towards the beginning of the string.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Char,System.Int32,System.Int32,System.Char[],System.Char[],System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the last occurrence of the specified Unicode character outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="startIndex">The zero-based position indicating where the search for <paramref name="value" /> starts. The search starts at this specified position and advances towards the beginning of the string.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.Char[],System.Int32,System.Int32,System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified Unicode characters outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The Unicode characters to seek.</param>
            <param name="startIndex">The zero-based position indicating where the search for <paramref name="values" /> starts. The search starts at this specified position and advances towards the beginning of the string.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last occurrence of any value specified in <paramref name="values" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.Char[],System.Int32,System.Int32,System.Char[],System.Char[],System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified Unicode characters outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The Unicode characters to seek.</param>
            <param name="startIndex">The zero-based position indicating where the search for <paramref name="values" /> starts. The search starts at this specified position and advances towards the beginning of the string.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last occurrence of any value specified in <paramref name="values" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.Char[],System.Int32,System.Int32,System.Char,System.Char,System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified Unicode characters outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The Unicode characters to seek.</param>
            <param name="startIndex">The zero-based position indicating where the search for <paramref name="values" /> starts. The search starts at this specified position and advances towards the beginning of the string.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last occurrence of any value specified in <paramref name="values" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.Char[],System.Int32,System.Int32,System.Char[],System.Char[],System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified Unicode characters outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The Unicode characters to seek.</param>
            <param name="startIndex">The zero-based position indicating where the search for <paramref name="values" /> starts. The search starts at this specified position and advances towards the beginning of the string.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last occurrence of any value specified in <paramref name="values" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the last occurrence of a Unicode character outside quotes and satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts. The search starts at this specified position and advances towards the beginning of the string.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last Unicode character outside quotes and satisfying the specified predicate, or -1 if no such character is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the last occurrence of a Unicode character outside quotes and satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last Unicode character outside quotes and satisfying the specified predicate, or -1 if no such character is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Char[],System.Char[],System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the last occurrence of a Unicode character outside quotes and satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts. The search starts at this specified position and advances towards the beginning of the string.</param>
            <param name="primaryLeftQuote">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuote">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last Unicode character outside quotes and satisfying the specified predicate, or -1 if no such character is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the last occurrence of a Unicode character outside quotes and satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="primaryLeftQuote">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuote">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last Unicode character outside quotes and satisfying the specified predicate, or -1 if no such character is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Char,System.Char,System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the last occurrence of the specified Unicode character outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts. The search starts at this specified position and advances towards the beginning of the string.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last Unicode character outside quotes and satisfying the specified predicate, or -1 if no such character is not.
            </returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the last occurrence of the specified Unicode character outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last Unicode character outside quotes and satisfying the specified predicate, or -1 if no such character is not.
            </returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Char[],System.Char[],System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the last occurrence of the specified Unicode character outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts. The search starts at this specified position and advances towards the beginning of the string.</param>
            <param name="primaryLeftQuote">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuote">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last Unicode character outside quotes and satisfying the specified predicate, or -1 if no such character is not.
            </returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the last occurrence of the specified Unicode character outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="primaryLeftQuote">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuote">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last Unicode character outside quotes and satisfying the specified predicate, or -1 if no such character is not.
            </returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Char,System.Int32,System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the last occurrence of the specified Unicode character outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="startIndex">The zero-based position indicating where the search for <paramref name="value" /> starts. The search starts at this specified position and advances towards the beginning of the string.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Char,System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the last occurrence of the specified Unicode character outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Char,System.Int32,System.Char[],System.Char[],System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the last occurrence of the specified Unicode character outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="startIndex">The zero-based position indicating where the search for <paramref name="value" /> starts. The search starts at this specified position and advances towards the beginning of the string.</param>
            <param name="primaryLeftQuote">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuote">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Char,System.Char[],System.Char[],System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the last occurrence of the specified Unicode character outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="primaryLeftQuote">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuote">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Char,System.Int32,System.Char,System.Char,System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the last occurrence of the specified Unicode character outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="startIndex">The zero-based position indicating where the search for <paramref name="value" /> starts. The search starts at this specified position and advances towards the beginning of the string.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Char,System.Char,System.Char,System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the last occurrence of the specified Unicode character outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Char,System.Int32,System.Char[],System.Char[],System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the last occurrence of the specified Unicode character outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="startIndex">The zero-based position indicating where the search for <paramref name="value" /> starts. The search starts at this specified position and advances towards the beginning of the string.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.Char,System.Char[],System.Char[],System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the last occurrence of the specified Unicode character outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.Char[],System.Int32,System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified Unicode characters outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The Unicode characters to seek.</param>
            <param name="startIndex">The zero-based position indicating where the search for <paramref name="values" /> starts. The search starts at this specified position and advances towards the beginning of the string.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last occurrence of any value specified in <paramref name="values" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.Char[],System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified Unicode characters outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The Unicode characters to seek.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last occurrence of any value specified in <paramref name="values" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.Char[],System.Int32,System.Char[],System.Char[],System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified Unicode characters outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The Unicode characters to seek.</param>
            <param name="startIndex">The zero-based position indicating where the search for <paramref name="values" /> starts. The search starts at this specified position and advances towards the beginning of the string.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last occurrence of any value specified in <paramref name="values" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.Char[],System.Char[],System.Char[],System.Char,System.Char)">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified Unicode characters outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The Unicode characters to seek.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last occurrence of any value specified in <paramref name="values" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.Char[],System.Int32,System.Char,System.Char,System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified Unicode characters outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The Unicode characters to seek.</param>
            <param name="startIndex">The zero-based position indicating where the search for <paramref name="values" /> starts. The search starts at this specified position and advances towards the beginning of the string.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last occurrence of any value specified in <paramref name="values" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.Char[],System.Char,System.Char,System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified Unicode characters outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The Unicode characters to seek.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last occurrence of any value specified in <paramref name="values" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.Char[],System.Int32,System.Char[],System.Char[],System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified Unicode characters outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The Unicode characters to seek.</param>
            <param name="startIndex">The zero-based position indicating where the search for <paramref name="values" /> starts. The search starts at this specified position and advances towards the beginning of the string.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last occurrence of any value specified in <paramref name="values" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.Char[],System.Char[],System.Char[],System.Char[],System.Char[])">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified Unicode characters outside escapable quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The Unicode characters to seek.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            The zero-based index position of the last occurrence of any value specified in <paramref name="values" /> if it is found outside quotes, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.String,System.Int32,System.Int32,System.Char,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified <paramref name="value" /> outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The substring to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value"/>.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.String,System.Int32,System.Int32,System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified <paramref name="value" /> outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The substring to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value"/>.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfAnyWithQuotes(System.String,System.String[],System.Int32,System.Int32,System.Char,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of any of the specified <paramref name="values" /> outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The substrings to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="values"/>.</param>
            <returns>
            The zero-based index position of the first occurrence of any substring specified in <paramref name="values" /> if one is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfAnyWithQuotes(System.String,System.String[],System.Int32,System.Int32,System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of any of the specified <paramref name="values" /> outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The substrings to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="values"/>.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.String,System.Int32,System.Char,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified <paramref name="value" /> outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The substring to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value"/>.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.String,System.Int32,System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified <paramref name="value" /> outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The substring to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value"/>.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfAnyWithQuotes(System.String,System.String[],System.Int32,System.Char,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of any of the specified <paramref name="values" /> outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The substrings to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="values"/>.</param>
            <returns>
            The zero-based index position of the first occurrence of any substring specified in <paramref name="values" /> if one is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfAnyWithQuotes(System.String,System.String[],System.Int32,System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of any of the specified <paramref name="values" /> outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The substrings to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="values"/>.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.String,System.Int32,System.Int32,System.Char,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of the specified <paramref name="value" /> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The substring to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">A positive value indicating the number of characters to search starting from position specified by <paramref name="startIndex" /> towards the beginning of the current string.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value"/>.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.String,System.Int32,System.Int32,System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of the specified <paramref name="value" /> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The substring to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">A positive value indicating the number of characters to search starting from position specified by <paramref name="startIndex" /> towards the beginning of the current string.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value"/>.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.String[],System.Int32,System.Int32,System.Char,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified <paramref name="values" /> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The substrings to seek.</param>
            <param name="startIndex">The search starting position. </param>
            <param name="length">A positive value indicating the number of characters to search starting from position specified by <paramref name="startIndex" /> towards the beginning of the current string.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value"/>.</param>
            <returns>
            A <see cref="T:System.StringSearchResult"/> object that stores the zero-based index position of the last occurrence of any of the specified <paramref name="values"/> if one is found outside quotes, or <c>null</c> if none is found.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.String[],System.Int32,System.Int32,System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified <paramref name="values" /> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The substrings to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">A positive value indicating the number of characters to search starting from position specified by <paramref name="startIndex" /> towards the beginning of the current string.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value"/>.</param>
            <returns>
            A <see cref="T:System.StringSearchResult"/> object that stores the zero-based index position of the last occurrence of any of the specified <paramref name="values"/> if one is found outside quotes, or <c>null</c> if none is found.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.String,System.Int32,System.Char,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of the specified <paramref name="value" /> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The substring to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value" />.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.String,System.Char,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of the specified <paramref name="value" /> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The substring to seek.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value" />.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.String,System.Int32,System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of the specified <paramref name="value" /> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The substring to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value"/>.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.String,System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of the specified <paramref name="value" /> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The substring to seek.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value" />.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.String[],System.Int32,System.Char,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified <paramref name="values" /> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The substrings to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="values"/>.</param>
            <returns>
            A <see cref="T:System.StringSearchResult"/> object that stores the zero-based index position of the last occurrence of any of the specified <paramref name="values"/> if one is found outside quotes, or <c>null</c> if none is found.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.String[],System.Char,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified <paramref name="values" /> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The substrings to seek.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="values" />.</param>
            <returns>
            A <see cref="T:System.StringSearchResult"/> object that stores the zero-based index position of the last occurrence of any of the specified <paramref name="values"/> if one is found outside quotes, or <c>null</c> if none is found.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.String[],System.Int32,System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified <paramref name="values" /> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The substrings to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="values"/>.</param>
            <returns>
            A <see cref="T:System.StringSearchResult"/> object that stores the zero-based index position of the last occurrence of any of the specified <paramref name="values"/> if one is found outside quotes, or <c>null</c> if none is found.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.String[],System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified <paramref name="values" /> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The substrings to seek.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="values" />.</param>
            <returns>
            A <see cref="T:System.StringSearchResult"/> object that stores the zero-based index position of the last occurrence of any of the specified <paramref name="values"/> if one is found outside quotes, or <c>null</c> if none is found.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.String,System.Int32,System.Int32,System.Char,System.Char,System.Char,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified <paramref name="value" /> outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The substring to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value" />.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.String,System.Int32,System.Int32,System.Char,System.Char,System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified <paramref name="value" /> outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The substring to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value" />.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.String,System.Int32,System.Int32,System.Char[],System.Char[],System.Char,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified <paramref name="value" /> outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The substring to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value" />.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.String,System.Int32,System.Int32,System.Char[],System.Char[],System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified <paramref name="value" /> outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The substring to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value" />.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfAnyWithQuotes(System.String,System.String[],System.Int32,System.Int32,System.Char,System.Char,System.Char,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of any of the specified <paramref name="values"/> outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The substring to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="values" />.</param>
            <returns>
            A <see cref="T:System.StringSearchResult"/> object that stores the zero-based index position of the first occurrence of any of the specified <paramref name="values"/> if one is found outside quotes, or <c>null</c> if none is found.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfAnyWithQuotes(System.String,System.String[],System.Int32,System.Int32,System.Char,System.Char,System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of any of the specified <paramref name="values"/> outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The substring to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="values" />.</param>
            <returns>
            A <see cref="T:System.StringSearchResult"/> object that stores the zero-based index position of the first occurrence of any of the specified <paramref name="values"/> if one is found outside quotes, or <c>null</c> if none is found.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfAnyWithQuotes(System.String,System.String[],System.Int32,System.Int32,System.Char[],System.Char[],System.Char,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of any of the specified <paramref name="values"/> outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The substring to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="values" />.</param>
            <returns>
            A <see cref="T:System.StringSearchResult"/> object that stores the zero-based index position of the first occurrence of any of the specified <paramref name="values"/> if one is found outside quotes, or <c>null</c> if none is found.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfAnyWithQuotes(System.String,System.String[],System.Int32,System.Int32,System.Char[],System.Char[],System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of any of the specified <paramref name="values"/> outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The substring to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="values" />.</param>
            <returns>
            A <see cref="T:System.StringSearchResult"/> object that stores the zero-based index position of the first occurrence of any of the specified <paramref name="values"/> if one is found outside quotes, or <c>null</c> if none is found.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.String,System.Int32,System.Char,System.Char,System.Char,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified <paramref name="value" /> outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The substring to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value" />.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.String,System.Char,System.Char,System.Char,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified <paramref name="value" /> outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The substring to seek.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value" />.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.String,System.Int32,System.Char,System.Char,System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified <paramref name="value" /> outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The substring to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value" />.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.String,System.Char,System.Char,System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified <paramref name="value" /> outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The substring to seek.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value" />.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.String,System.Int32,System.Char[],System.Char[],System.Char,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified <paramref name="value" /> outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The substring to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value" />.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.String,System.Char[],System.Char[],System.Char,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified <paramref name="value" /> outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The substring to seek.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value" />.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.String,System.Int32,System.Char[],System.Char[],System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified <paramref name="value" /> outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The substring to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value" />.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfWithQuotes(System.String,System.String,System.Char[],System.Char[],System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified <paramref name="value" /> outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The substring to seek.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value" />.</param>
            <returns>
            The zero-based index position of the first occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfAnyWithQuotes(System.String,System.String[],System.Int32,System.Char,System.Char,System.Char,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of any of the specified <paramref name="values"/> outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The substring to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="values" />.</param>
            <returns>
            A <see cref="T:System.StringSearchResult"/> object that stores the zero-based index position of the first occurrence of any of the specified <paramref name="values"/> if one is found outside quotes, or <c>null</c> if none is found.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfAnyWithQuotes(System.String,System.String[],System.Char,System.Char,System.Char,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of any of the specified <paramref name="values"/> outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The substring to seek.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="values" />.</param>
            <returns>
            A <see cref="T:System.StringSearchResult"/> object that stores the zero-based index position of the first occurrence of any of the specified <paramref name="values"/> if one is found outside quotes, or <c>null</c> if none is found.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfAnyWithQuotes(System.String,System.String[],System.Int32,System.Char,System.Char,System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of any of the specified <paramref name="values"/> outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The substring to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="values" />.</param>
            <returns>
            A <see cref="T:System.StringSearchResult"/> object that stores the zero-based index position of the first occurrence of any of the specified <paramref name="values"/> if one is found outside quotes, or <c>null</c> if none is found.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfAnyWithQuotes(System.String,System.String[],System.Char,System.Char,System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of any of the specified <paramref name="values"/> outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The substring to seek.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="values" />.</param>
            <returns>
            A <see cref="T:System.StringSearchResult"/> object that stores the zero-based index position of the first occurrence of any of the specified <paramref name="values"/> if one is found outside quotes, or <c>null</c> if none is found.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfAnyWithQuotes(System.String,System.String[],System.Int32,System.Char[],System.Char[],System.Char,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of any of the specified <paramref name="values"/> outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The substring to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="values" />.</param>
            <returns>
            A <see cref="T:System.StringSearchResult"/> object that stores the zero-based index position of the first occurrence of any of the specified <paramref name="values"/> if one is found outside quotes, or <c>null</c> if none is found.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfAnyWithQuotes(System.String,System.String[],System.Char[],System.Char[],System.Char,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of any of the specified <paramref name="values"/> outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The substring to seek.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="values" />.</param>
            <returns>
            A <see cref="T:System.StringSearchResult"/> object that stores the zero-based index position of the first occurrence of any of the specified <paramref name="values"/> if one is found outside quotes, or <c>null</c> if none is found.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfAnyWithQuotes(System.String,System.String[],System.Int32,System.Char[],System.Char[],System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of any of the specified <paramref name="values"/> outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The substring to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="values" />.</param>
            <returns>
            A <see cref="T:System.StringSearchResult"/> object that stores the zero-based index position of the first occurrence of any of the specified <paramref name="values"/> if one is found outside quotes, or <c>null</c> if none is found.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfAnyWithQuotes(System.String,System.String[],System.Char[],System.Char[],System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of any of the specified <paramref name="values"/> outside quotes in this string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The substring to seek.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="values" />.</param>
            <returns>
            A <see cref="T:System.StringSearchResult"/> object that stores the zero-based index position of the first occurrence of any of the specified <paramref name="values"/> if one is found outside quotes, or <c>null</c> if none is found.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.String,System.Int32,System.Int32,System.Char,System.Char,System.Char,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of the specified <paramref name="value" /> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The substring to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">A positive value indicating the number of characters to search starting from position specified by <paramref name="startIndex" /> towards the beginning of the current string.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value" />.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.String,System.Int32,System.Int32,System.Char,System.Char,System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of the specified <paramref name="value" /> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The substring to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">A positive value indicating the number of characters to search starting from position specified by <paramref name="startIndex" /> towards the beginning of the current string.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value" />.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.String,System.Int32,System.Int32,System.Char[],System.Char[],System.Char,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of the specified <paramref name="value" /> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The substring to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">A positive value indicating the number of characters to search starting from position specified by <paramref name="startIndex" /> towards the beginning of the current string.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value" />.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.String,System.Int32,System.Int32,System.Char[],System.Char[],System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of the specified <paramref name="value" /> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The substring to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">A positive value indicating the number of characters to search starting from position specified by <paramref name="startIndex" /> towards the beginning of the current string.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value" />.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.String[],System.Int32,System.Int32,System.Char,System.Char,System.Char,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified <paramref name="values"/> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The substrings to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">A positive value indicating the number of characters to search starting from position specified by <paramref name="startIndex" /> towards the beginning of the current string.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="values" />.</param>
            <returns>
            A <see cref="T:System.StringSearchResult"/> object that stores the zero-based index position of the last occurrence of any of the specified <paramref name="values"/> if one is found outside quotes, or <c>null</c> if none is found.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.String[],System.Int32,System.Int32,System.Char,System.Char,System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified <paramref name="values"/> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The substrings to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">A positive value indicating the number of characters to search starting from position specified by <paramref name="startIndex" /> towards the beginning of the current string.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="values" />.</param>
            <returns>
            A <see cref="T:System.StringSearchResult"/> object that stores the zero-based index position of the last occurrence of any of the specified <paramref name="values"/> if one is found outside quotes, or <c>null</c> if none is found.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.String[],System.Int32,System.Int32,System.Char[],System.Char[],System.Char,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified <paramref name="values"/> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The substrings to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">A positive value indicating the number of characters to search starting from position specified by <paramref name="startIndex" /> towards the beginning of the current string.</param>
            <param name="primaryLeftQuotes">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuotes">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="values" />.</param>
            <returns>
            A <see cref="T:System.StringSearchResult"/> object that stores the zero-based index position of the last occurrence of any of the specified <paramref name="values"/> if one is found outside quotes, or <c>null</c> if none is found.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.String[],System.Int32,System.Int32,System.Char[],System.Char[],System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified <paramref name="values"/> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The substrings to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">A positive value indicating the number of characters to search starting from position specified by <paramref name="startIndex" /> towards the beginning of the current string.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="values" />.</param>
            <returns>
            A <see cref="T:System.StringSearchResult"/> object that stores the zero-based index position of the last occurrence of any of the specified <paramref name="values"/> if one is found outside quotes, or <c>null</c> if none is found.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.String,System.Int32,System.Char,System.Char,System.Char,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of the specified <paramref name="value" /> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The substring to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value" />.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.String,System.Int32,System.Char,System.Char,System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of the specified <paramref name="value" /> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The substring to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value" />.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.String,System.Int32,System.Char[],System.Char[],System.Char,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of the specified <paramref name="value" /> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The substring to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value" />.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.String,System.Int32,System.Char[],System.Char[],System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of the specified <paramref name="value" /> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The substring to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value" />.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.String[],System.Int32,System.Char,System.Char,System.Char,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified <paramref name="values"/> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The substrings to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="values" />.</param>
            <returns>
            A <see cref="T:System.StringSearchResult"/> object that stores the zero-based index position of the last occurrence of any of the specified <paramref name="values"/> if one is found outside quotes, or <c>null</c> if none is found.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.String[],System.Int32,System.Char,System.Char,System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified <paramref name="values"/> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The substrings to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="values" />.</param>
            <returns>
            A <see cref="T:System.StringSearchResult"/> object that stores the zero-based index position of the last occurrence of any of the specified <paramref name="values"/> if one is found outside quotes, or <c>null</c> if none is found.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.String[],System.Int32,System.Char[],System.Char[],System.Char,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified <paramref name="values"/> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The substrings to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="primaryLeftQuotes">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuotes">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="values" />.</param>
            <returns>
            A <see cref="T:System.StringSearchResult"/> object that stores the zero-based index position of the last occurrence of any of the specified <paramref name="values"/> if one is found outside quotes, or <c>null</c> if none is found.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.String[],System.Int32,System.Char[],System.Char[],System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified <paramref name="values"/> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The substrings to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="values" />.</param>
            <returns>
            A <see cref="T:System.StringSearchResult"/> object that stores the zero-based index position of the last occurrence of any of the specified <paramref name="values"/> if one is found outside quotes, or <c>null</c> if none is found.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.String,System.Char,System.Char,System.Char,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of the specified <paramref name="value" /> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The substring to seek.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value" />.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.String,System.Char,System.Char,System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of the specified <paramref name="value" /> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The substring to seek.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value" />.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.String,System.Char[],System.Char[],System.Char,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of the specified <paramref name="value" /> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The substring to seek.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value" />.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfWithQuotes(System.String,System.String,System.Char[],System.Char[],System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of the specified <paramref name="value" /> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The substring to seek.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="value" />.</param>
            <returns>
            The zero-based index position of the last occurrence of <paramref name="value" /> if it is found outside quotes, or -1 if it is not.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.String[],System.Char,System.Char,System.Char,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified <paramref name="values"/> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The substrings to seek.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="values" />.</param>
            <returns>
            A <see cref="T:System.StringSearchResult"/> object that stores the zero-based index position of the last occurrence of any of the specified <paramref name="values"/> if one is found outside quotes, or <c>null</c> if none is found.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.String[],System.Char,System.Char,System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified <paramref name="values"/> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The substrings to seek.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="values" />.</param>
            <returns>
            A <see cref="T:System.StringSearchResult"/> object that stores the zero-based index position of the last occurrence of any of the specified <paramref name="values"/> if one is found outside quotes, or <c>null</c> if none is found.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.String[],System.Char[],System.Char[],System.Char,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified <paramref name="values"/> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The substrings to seek.</param>
            <param name="primaryLeftQuotes">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuotes">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="values" />.</param>
            <returns>
            A <see cref="T:System.StringSearchResult"/> object that stores the zero-based index position of the last occurrence of any of the specified <paramref name="values"/> if one is found outside quotes, or <c>null</c> if none is found.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.LastIndexOfAnyWithQuotes(System.String,System.String[],System.Char[],System.Char[],System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of any of the specified <paramref name="values"/> outside quotes in this string. The search starts from <pararef name="startIndex" /> and advances towards the beginning of the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The substrings to seek.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="values" />.</param>
            <returns>
            A <see cref="T:System.StringSearchResult"/> object that stores the zero-based index position of the last occurrence of any of the specified <paramref name="values"/> if one is found outside quotes, or <c>null</c> if none is found.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfNextMatch(System.String,System.Char,System.Char,System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index of the next character which matches another specified character. Those matched characters are usually brackets, such as '(' and ')', '[' and ']', '{' and '}'.
            </summary>
            <param name="str">This string instance.</param>
            <param name="leftChar">The character that matches the character to search, typically a left bracket, such as '(', '[' or '{', or quotes, such as '"', '''.</param>
            <param name="rightChar">The character to search, typically a right bracket, such as ')', ']' or '}', or quotes, such as '"', '''.</param>
            <param name="startIndex">The search starting position. NOTE that this position should be right at the <paramref name="leftChar"/> you want to find a match for. For example, if it is intended to find a match of the first left square bracket at position 0 in string "[abc[de]fgh]", the <paramref name="startIndex" /> should be 0.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <returns>
            The zero-based index position of <paramref name="rightChar" /> if that character is found and it matches <paramref name="leftChar" />, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfNextMatch(System.String,System.Char,System.Char,System.Char,System.Char,System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index of the next character which matches another specified character outside quotes. 
            Those matched characters are usually brackets, such as '(' and ')', '[' and ']', '{' and '}'.
            </summary>
            <param name="str">This string instance.</param>
            <param name="leftChar">The character that matches the character to search, typically a left bracket, such as '(', '[' or '{'.</param>
            <param name="rightChar">The next character to search, typically a right bracket, such as ')', ']' or '}'.</param>
            <param name="leftQuote">
            Specifies the left quote.
            Any character inside quotes (<paramref name="leftQuote"/> and <paramref name="rightQuote"/>) will not be considered as a match.</param>
            <param name="rightQuote">
            Specifies the right quote.
            Any character inside quotes (<paramref name="leftQuote"/> and <paramref name="rightQuote"/>) will not be considered as a match.
            </param>
            <param name="startIndex">The search starting position. NOTE that this position should be right at the <paramref name="leftChar"/> you want to find a match for. For example, if it is intended to find a match of the first left square bracket at position 0 in string "[abc[de]fgh]", the <paramref name="startIndex" /> should be 0.</param>
            <returns>
            The zero-based index position of <paramref name="rightChar" /> if that character is found and it matches <paramref name="leftChar" />, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfNextMatch(System.String,System.Char,System.Char,System.Char[],System.Char[],System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index of the next character which matches another specified character outside quotes. 
            Those matched characters are usually brackets, such as '(' and ')', '[' and ']', '{' and '}'.
            </summary>
            <param name="str">This string instance.</param>
            <param name="leftChar">The character that matches the character to search, typically a left bracket, such as '(', '[' or '{'.</param>
            <param name="rightChar">The next character to search, typically a right bracket, such as ')', ']' or '}'.</param>
            <param name="leftQuotes">
            Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            Any character that appears between a left quote and its corresponding right quote will not be considered a match.
            </param>
            <param name="rightQuotes">
            Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            Any character that appears between a left quote and its corresponding right quote will not be considered a match.
            </param>
            <param name="startIndex">The search starting position. NOTE that this position should be right at the <paramref name="leftChar"/> you want to find a match for. For example, if it is intended to find a match of the first left square bracket at position 0 in string "[abc[de]fgh]", the <paramref name="startIndex" /> should be 0.</param>
            <param name="length">The number of characters to search. The parameter determines the search ending position along with <paramref name="startIndex" />.</param>
            <returns>
            The zero-based index position of <paramref name="rightChar" /> if that character is found and it matches <paramref name="leftChar" />, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfNextMatch(System.String,System.Char,System.Char,System.Char,System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index of the next character which matches another specified character. The method supports classic escaping.
            Those matched characters are usually brackets, such as '(' and ')', '[' and ']', '{' and '}'.
            </summary>
            <param name="str">This string instance.</param>
            <param name="leftChar">The character that matches the character to search, typically a left bracket, such as '(', '[' or '{'.</param>
            <param name="rightChar">The next character to search, typically a right bracket, such as ')', ']' or '}'.</param>
            <param name="escape">The character that escapes the <paramref name="rightChar"/>, typically '\'. For example, suppose '\' is used for escaping, then the match for the first left square bracket in string "[abc\]abc]" is the last right square bracket, not the one in the middle because the '\' that precedes it escapes it.</param>
            <param name="startIndex">The search starting position. NOTE that this position should be right at the <paramref name="leftChar"/> you want to find a match for. For example, if it is intended to find a match of the first left square bracket at position 0 in string "[abc[de]fgh]", the <paramref name="startIndex" /> should be 0.</param>
            <param name="length">The number of characters to search. The parameter determines the search ending position along with <paramref name="startIndex" />.</param>
            <returns>
            The zero-based index position of <paramref name="rightChar" /> if that character is found and it matches <paramref name="leftChar" />, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfNextMatch(System.String,System.Char,System.Char,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index of the next character which matches another specified character. The method supports classic escaping.
            Those matched characters are usually brackets, such as '(' and ')', '[' and ']', '{' and '}'.
            </summary>
            <param name="str">This string instance.</param>
            <param name="leftChar">The character that matches the character to search, typically a left bracket, such as '(', '[' or '{'.</param>
            <param name="rightChar">The next character to search, typically a right bracket, such as ')', ']' or '}'.</param>
            <param name="escapes">The characters that escape the <paramref name="rightChar" />, typically '\'. For example, suppose '\', '#' are used for escaping, then the match for the first left square bracket in string "[abc\]#]abc]" is the last right square bracket, not the two in the middle because the '\' and '#' that precede them escapes them respectively.</param>
            <param name="startIndex">The search starting position. NOTE that this position should be right at the <paramref name="leftChar"/> you want to find a match for. For example, if it is intended to find a match of the first left square bracket at position 0 in string "[abc[de]fgh]", the <paramref name="startIndex" /> should be 0.</param>
            <param name="length">The number of characters to search. The parameter determines the search ending position along with <paramref name="startIndex" />.</param>
            <returns>
            The zero-based index position of <paramref name="rightChar" /> if that character is found and it matches <paramref name="leftChar" />, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfNextMatch(System.String,System.Char,System.Char,System.Int32)">
            <summary>
            Reports the zero-based index of the next character which matches another specified character. Those matched characters are usually brackets, such as '(' and ')', '[' and ']', '{' and '}'.
            </summary>
            <param name="str">This string instance.</param>
            <param name="leftChar">The character that matches the character to search, typically a left bracket, such as '(', '[' or '{'.</param>
            <param name="rightChar">The character to search, typically a right bracket, such as ')', ']' or '}'.</param>
            <param name="startIndex">The search starting position. NOTE that this position should be right at the <paramref name="leftChar"/> you want to find a match for. For example, if it is intended to find a match of the first left square bracket at position 0 in string "[abc[de]fgh]", the <paramref name="startIndex" /> should be 0.</param>
            <returns>
            The zero-based index position of <paramref name="rightChar" /> if that character is found and it matches <paramref name="leftChar" />, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfNextMatch(System.String,System.Char,System.Char,System.Char,System.Char,System.Int32)">
            <summary>
            Reports the zero-based index of the next character which matches another specified character outside quotes. 
            Those matched characters are usually brackets, such as '(' and ')', '[' and ']', '{' and '}'.
            </summary>
            <param name="str">This string instance.</param>
            <param name="leftChar">The character that matches the character to search, typically a left bracket, such as '(', '[' or '{'.</param>
            <param name="rightChar">The next character to search, typically a right bracket, such as ')', ']' or '}'.</param>
            <param name="leftQuote">
            Specifies the left quote.
            Any character inside quotes (<paramref name="leftQuote"/> and <paramref name="rightQuote"/>) will not be considered as a match.</param>
            <param name="rightQuote">
            Specifies the right quote.
            Any character inside quotes (<paramref name="leftQuote"/> and <paramref name="rightQuote"/>) will not be considered as a match.
            </param>
            <param name="startIndex">The search starting position. NOTE that this position should be right at the <paramref name="leftChar"/> you want to find a match for. For example, if it is intended to find a match of the first left square bracket at position 0 in string "[abc[de]fgh]", the <paramref name="startIndex" /> should be 0.</param>
            <param name="length">The number of characters to search. The parameter determines the search ending position along with <paramref name="startIndex" />.</param>
            <returns>
            The zero-based index position of <paramref name="rightChar" /> if that character is found and it matches <paramref name="leftChar" />, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfNextMatch(System.String,System.Char,System.Char,System.Char[],System.Char[],System.Int32)">
            <summary>
            Reports the zero-based index of the next character which matches another specified character outside quotes. 
            Those matched characters are usually brackets, such as '(' and ')', '[' and ']', '{' and '}'.
            </summary>
            <param name="str">This string instance.</param>
            <param name="leftChar">The character that matches the character to search, typically a left bracket, such as '(', '[' or '{'.</param>
            <param name="rightChar">The next character to search, typically a right bracket, such as ')', ']' or '}'.</param>
            <param name="leftQuotes">
            Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            Any character that appears between a left quote and its corresponding right quote will not be considered a match.
            </param>
            <param name="rightQuotes">
            Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            Any character that appears between a left quote and its corresponding right quote will not be considered a match.
            </param>
            <param name="startIndex">The search starting position. NOTE that this position should be right at the <paramref name="leftChar"/> you want to find a match for. For example, if it is intended to find a match of the first left square bracket at position 0 in string "[abc[de]fgh]", the <paramref name="startIndex" /> should be 0.</param>
            <returns>
            The zero-based index position of <paramref name="rightChar" /> if that character is found and it matches <paramref name="leftChar" />, or -1 if it is not.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if <paramref name="startIndex" /> or <paramref name="startIndex" /> + <paramref name="length" /> does not indicate a valid position in the string.</exception>
        </member>
        <member name="M:System.StringEx.IndexOfNextMatch(System.String,System.Char,System.Char,System.Char,System.Int32)">
            <summary>
            Reports the zero-based index of the next character which matches another specified character. The method supports classic escaping.
            Those matched characters are usually brackets, such as '(' and ')', '[' and ']', '{' and '}'.
            </summary>
            <param name="str">This string instance.</param>
            <param name="leftChar">The character that matches the character to search, typically a left bracket, such as '(', '[' or '{'.</param>
            <param name="rightChar">The next character to search, typically a right bracket, such as ')', ']' or '}'.</param>
            <param name="escape">The character that escapes the <paramref name="rightChar" />, typically '\'. For example, suppose '\' is used for escaping, then the match for the first left square bracket in string "[abc\]abc]" is the last right square bracket, not the one in the middle because the '\' that precedes it escapes it.</param>
            <param name="startIndex">The search starting position. NOTE that this position should be right at the <paramref name="leftChar"/> you want to find a match for. For example, if it is intended to find a match of the first left square bracket at position 0 in string "[abc[de]fgh]", the <paramref name="startIndex" /> should be 0.</param>
            <returns>
            The zero-based index position of <paramref name="rightChar" /> if that character is found and it matches <paramref name="leftChar" />, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.IndexOfNextMatch(System.String,System.Char,System.Char,System.Char[],System.Int32)">
            <summary>
            Reports the zero-based index of the next character which matches another specified character. The method supports classic escaping.
            Those matched characters are usually brackets, such as '(' and ')', '[' and ']', '{' and '}'.
            </summary>
            <param name="str">This string instance.</param>
            <param name="leftChar">The character that matches the character to search, typically a left bracket, such as '(', '[' or '{'.</param>
            <param name="rightChar">The next character to search, typically a right bracket, such as ')', ']' or '}'.</param>
            <param name="escapes">The characters that escape the <paramref name="rightChar" />, typically '\'. For example, suppose '\', '#' are used for escaping, then the match for the first left square bracket in string "[abc\]#]abc]" is the last right square bracket, not the two in the middle because the '\' and '#' that precede them escapes them respectively.</param>
            <param name="startIndex">The search starting position. NOTE that this position should be right at the <paramref name="leftChar"/> you want to find a match for. For example, if it is intended to find a match of the first left square bracket at position 0 in string "[abc[de]fgh]", the <paramref name="startIndex" /> should be 0.</param>
            <returns>
            The zero-based index position of <paramref name="rightChar" /> if that character is found and it matches <paramref name="leftChar" />, or -1 if it is not.
            </returns>
        </member>
        <member name="M:System.StringEx.ReplaceWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Char,System.Int32,System.Int32,System.Char,System.Char)">
            <summary>
            Returns a new string instance, with all Unicode characters, which are outside quotes and satisfy the specified predicate, replaced by a new character.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="newChar">The new character to replace those satisfying the predicate.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <returns>
            A new string instance with characters replaced.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.ReplaceWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Char,System.Int32,System.Int32,System.Char[],System.Char[])">
            <summary>
            Returns a new string instance, with all Unicode characters, which are outside quotes and satisfy the specified predicate, replaced by a new character.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="newChar">The new character to replace those satisfying the predicate.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <returns>
            A new string instance with characters replaced.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.ReplaceWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Char,System.Int32,System.Int32,System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Returns a new string instance, with all Unicode characters, which are outside quotes and satisfy the specified predicate, replaced by a new character.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="newChar">The new character to replace those satisfying the predicate.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            A new string instance with characters replaced.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.ReplaceWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Char,System.Int32,System.Int32,System.Char,System.Char,System.Char[],System.Char[])">
            <summary>
            Returns a new string instance, with all Unicode characters, which are outside quotes and satisfy the specified predicate, replaced by a new character.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="newChar">The new character to replace those satisfying the predicate.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            A new string instance with characters replaced.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.ReplaceWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Char,System.Int32,System.Int32,System.Char[],System.Char[],System.Char,System.Char)">
            <summary>
            Returns a new string instance, with all Unicode characters, which are outside quotes and satisfy the specified predicate, replaced by a new character.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="newChar">The new character to replace those satisfying the predicate.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            A new string instance with characters replaced.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.ReplaceWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Char,System.Int32,System.Int32,System.Char[],System.Char[],System.Char[],System.Char[])">
            <summary>
            Returns a new string instance, with all Unicode characters, which are outside quotes and satisfy the specified predicate, replaced by a new character.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="newChar">The new character to replace those satisfying the predicate.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuote" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuote" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <returns>
            A new string instance with characters replaced.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.ReplaceWithQuotes(System.String,System.String,System.String,System.Int32,System.Int32,System.Char,System.Char,System.StringComparison)">
            <summary>
            Returns a new string instance, with all occurrences of the specified substring outside quotes replaced by a new value.
            </summary>
            <param name="str">This string instance.</param>
            <param name="oldValue">All occurrences of this substring are to be replaced.</param>
            <param name="newValue">The new value to replace occurrences of <paramref name="oldValue" />.</param>
            <param name="startIndex">The zero-based position indicating where the search for <paramref name="oldValue" /> starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="oldValue"/>.</param>
            <returns>
            A new string instance with substrings replaced.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.ReplaceWithQuotes(System.String,System.String,System.String,System.Int32,System.Int32,System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Returns a new string instance, with all occurrences of the specified substring outside quotes replaced by a new value.
            </summary>
            <param name="str">This string instance.</param>
            <param name="oldValue">All occurrences of this substring are to be replaced.</param>
            <param name="newValue">The new value to replace occurrences of <paramref name="oldValue" />.</param>
            <param name="startIndex">The zero-based position indicating where the search for <paramref name="oldValue" /> starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="oldValue"/>.</param>
            <returns>
            A new string instance with substrings replaced.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.ReplaceWithQuotes(System.String,System.String[],System.String,System.Int32,System.Int32,System.Char,System.Char,System.StringComparison)">
            <summary>
            Returns a new string instance, with all occurrences of the specified substrings outside quotes replaced by a new value.
            </summary>
            <param name="str">This string instance.</param>
            <param name="oldValues">All occurrences of these substrings are to be replaced.</param>
            <param name="newValue">The new value to replace occurrences of <paramref name="oldValues" />.</param>
            <param name="startIndex">The zero-based position indicating where the search for <paramref name="oldValues" /> starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="oldValue"/>.</param>
            <returns>
            A new string instance with substrings replaced.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.ReplaceWithQuotes(System.String,System.String[],System.String,System.Int32,System.Int32,System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Returns a new string instance, with all occurrences of the specified substrings outside quotes replaced by a new value.
            </summary>
            <param name="str">This string instance.</param>
            <param name="oldValues">All occurrences of these substrings are to be replaced.</param>
            <param name="newValue">The new value to replace occurrences of <paramref name="oldValues" />.</param>
            <param name="startIndex">The zero-based position indicating where the search for <paramref name="oldValues" /> starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="oldValue"/>.</param>
            <returns>
            A new string instance with substrings replaced.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.ReplaceWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Char,System.Int32,System.Char,System.Char)">
            <summary>
            Returns a new string instance, with all Unicode characters, which are outside quotes and satisfy the specified predicate, replaced by a new character.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="newChar">The new character to replace those satisfying the predicate.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <returns>
            A new string instance with characters replaced.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.ReplaceWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Char,System.Int32,System.Char[],System.Char[])">
            <summary>
            Returns a new string instance, with all Unicode characters, which are outside quotes and satisfy the specified predicate, replaced by a new character.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside quotes of the current string.</param>
            <param name="newChar">The new character to replace those satisfying the predicate.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <returns>
            A new string instance with characters replaced.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.ReplaceWithQuotes(System.String,System.Char,System.Char,System.Int32,System.Char,System.Char)">
            <summary>
            Returns a new string instance, with all occurrences of the specified character outside quotes replaced by a new value.
            </summary>
            <param name="str">This string instance.</param>
            <param name="oldChar">All occurrences of this character are to be replaced.</param>
            <param name="newChar">The new character to replace occurrences of the <paramref name="oldChar"/>.</param>
            <param name="startIndex">The zero-based position indicating where the search for <paramref name="oldChar" /> starts.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <returns>
            A new string instance with characters replaced.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.ReplaceWithQuotes(System.String,System.Char,System.Char,System.Int32,System.Char[],System.Char[])">
            <summary>
            Returns a new string instance, with all occurrences of the specified substring outside quotes replaced by a new value.
            </summary>
            <param name="str">This string instance.</param>
            <param name="oldChar">All occurrences of this character are to be replaced.</param>
            <param name="newChar">The new character to replace occurrences of the <paramref name="oldChar"/>.</param>
            <param name="startIndex">The zero-based position indicating where the search for <paramref name="oldChar" /> starts.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">The right quotes.</param>
            <returns>
            A new string instance with characters replaced.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.ReplaceWithQuotes(System.String,System.Char[],System.Char,System.Int32,System.Char,System.Char)">
            <summary>
            Returns a new string instance, with all occurrences of the specified characters outside quotes replaced by a new value.
            </summary>
            <param name="str">This string instance.</param>
            <param name="oldChars">All occurrences of these characters are to be replaced.</param>
            <param name="newChar">The new character to replace occurrences of <paramref name="oldChars" />.</param>
            <param name="startIndex">The zero-based position indicating where the search for <paramref name="oldChars" /> starts.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <returns>
            A new string instance with characters replaced.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.ReplaceWithQuotes(System.String,System.Char[],System.Char,System.Int32,System.Char[],System.Char[])">
            <summary>
            Returns a new string instance, with all occurrences of the specified characters outside quotes replaced by a new value.
            </summary>
            <param name="str">This string instance.</param>
            <param name="oldChars">All occurrences of these characters are to be replaced.</param>
            <param name="newChar">The new value to replace occurrences of <paramref name="oldChars" />.</param>
            <param name="startIndex">The zero-based position indicating where the search for <paramref name="oldChars" /> starts.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <returns>
            A new string instance with characters replaced.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.ReplaceWithQuotes(System.String,System.String,System.String,System.Int32,System.Char,System.Char,System.StringComparison)">
            <summary>
            Returns a new string instance, with all occurrences of the specified substring outside quotes replaced by a new value.
            </summary>
            <param name="str">This string instance.</param>
            <param name="oldValue">All occurrences of this substring are to be replaced.</param>
            <param name="newValue">The new value to replace occurrences of <paramref name="oldValue" />.</param>
            <param name="startIndex">The zero-based position indicating where the search for <paramref name="oldValue" /> starts.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="oldValue" />.</param>
            <returns>
            A new string instance with substrings replaced.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.ReplaceWithQuotes(System.String,System.String,System.String,System.Int32,System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Returns a new string instance, with all occurrences of the specified substring outside quotes replaced by a new value.
            </summary>
            <param name="str">This string instance.</param>
            <param name="oldValue">All occurrences of this substring are to be replaced.</param>
            <param name="newValue">The new value to replace occurrences of <paramref name="oldValue" />.</param>
            <param name="startIndex">The zero-based position indicating where the search for <paramref name="oldValue" /> starts.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">The right quote.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="oldValue" />.</param>
            <returns>
            A new string instance with substrings replaced.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.ReplaceWithQuotes(System.String,System.String[],System.String,System.Int32,System.Char,System.Char,System.StringComparison)">
            <summary>
            Returns a new string instance, with all occurrences of the specified substrings outside quotes replaced by a new value.
            </summary>
            <param name="str">This string instance.</param>
            <param name="oldValues">All occurrences of these substrings are to be replaced.</param>
            <param name="newValue">The new value to replace occurrences of <paramref name="oldValues" />.</param>
            <param name="startIndex">The zero-based position indicating where the search for <paramref name="oldValues" /> starts.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="oldValues" />.</param>
            <returns>
            A new string instance with substrings replaced.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.ReplaceWithQuotes(System.String,System.String[],System.String,System.Int32,System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Returns a new string instance, with all occurrences of the specified substrings outside quotes replaced by a new value.
            </summary>
            <param name="str">This string instance.</param>
            <param name="oldValues">All occurrences of these substrings are to be replaced.</param>
            <param name="newValue">The new value to replace occurrences of <paramref name="oldValues" />.</param>
            <param name="startIndex">The zero-based position indicating where the search for <paramref name="oldValues" /> starts.</param>
            <param name="leftQuotes">Specifies an array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.</param>
            <param name="rightQuotes">Specifies an array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search of <paramref name="oldValues" />.</param>
            <returns>
            A new string instance with substrings replaced.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.StringEx.BiSplit(System.String,System.Char)">
            <summary>
            Splits this string into two substrings at the position where the first occurrence of <paramref name="separator"/> is found.
            <para>This is a useful method when splitting an attribute-value string like "company: Microsoft".</para>
            </summary>
            <param name="source">This string instance.</param>
            <param name="separator">A character as the separator. 
            NOTE that this separator will be removed. For example, split "abcde" by "c" and we will get "ab" and "de".
            </param>
            <returns>A pair of split substrings if the separator is found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:System.StringEx.BiSplit(System.String,System.Char,System.String@,System.String@)">
            <summary>
            Splits this string into two substrings at the position where the first occurrence of <paramref name="separator" /> is found.
            <para>This is a useful method when splitting an attribute-value string like "company: Microsoft".</para>
            </summary>
            <param name="source">This string instance.</param>
            <param name="separator">A character as the separator.
            NOTE that this separator will be removed. For example, split "abcde" by "c" and we will get "ab" and "de".</param>
            <param name="first">If <paramref name="separator" /> is found, returns the substring from beginning to the position before <paramref name="separator" />, where <see cref="F:System.String.Empty" /> is returned if the leading character of the current string equals the <paramref name="separator" />; otherwise, <c>null</c>.</param>
            <param name="second">If <paramref name="separator" /> is found, returns the substring from the position after <paramref name="separator" /> to the end; otherwise, <c>null</c>.</param>
            <returns><c>true</c> if <paramref name="separator"/> is found in the current string; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.BiSplit(System.String,System.Int32)">
            <summary>
            Splits this string into two substrings at the specified position. <c>null</c> is returned if <paramref name="index"/> is negative.
            </summary>
            <param name="source">This string instance.</param>
            <param name="index">The position where the current string is split.</param>
            <returns>A<see cref="T:System.Pair`1"/> of split substrings derived from spliting the current string at the position before <paramref name="index"/> if <paramref name="index"/> is positive; a <see cref="T:System.Pair`1"/> with <see cref="F:System.String.Empty"/> as the first item and the substring starting from position <c>1</c> as the second item if <paramref name="index"/> is zero; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:System.StringEx.BiSplit(System.String,System.Int32,System.String@,System.String@)">
            <summary>
            Splits this string into two substrings at the specified position.
            </summary>
            <param name="source">This string instance.</param>
            <param name="index">The position where the current string is split.</param>
            <param name="first">Returns the substring from beginning to the position before <paramref name="index" /> if <paramref name="index" /> is positive; <see cref="F:System.String.Empty" /> if <paramref name="index" /> is zero; otherwise, <c>null</c>.</param>
            <param name="second">Returns the substring starting from position after <paramref name="index" /> to the end if <paramref name="index" /> is non-negative; otherwise, <c>null</c>.</param>
        </member>
        <member name="M:System.StringEx.BiSplitWithTrim(System.String,System.Char)">
            <summary>
            Splits this string into two substrings at the position where the first occurrence of <paramref name="separator"/> is found.
            The whitespaces at both ends of the two substrings will be trimmed as well. 
            </summary>
            <param name="source">This string instance.</param>
            <param name="separator">A character as the separator. 
            NOTE that this separator will be removed. For example, split "abcde" by "c" and we will get "ab" and "de".
            </param>
            <returns>A pair of split substrings (with white spaces trimmed at both ends) if the separator is found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:System.StringEx.BiSplitWithTrim(System.String,System.Char,System.String@,System.String@)">
            <summary>
            Splits this string into two substrings at the position where the first occurrence of <paramref name="separator" /> is found.
            The whitespaces at both ends of the two substrings will be trimmed as well. 
            </summary>
            <param name="source">This string instance.</param>
            <param name="separator">A character as the separator.
            NOTE that this separator will be removed. For example, split "abcde" by "c" and we will get "ab" and "de".</param>
            <param name="value1">Returns the substring (with white spaces trimmed at both ends) before the first occurrence of the separator.</param>
            <param name="value2">Returns the substring (with white spaces trimmed at both ends) after the first occurrence of the separator.</param>
            <returns>
            <c>true</c> if the separator is found and the separation is successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.StringEx.Split(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a string array that contains the substrings in this string (or a part of this string according to <paramref name="startIndex"/> and <paramref name="length"/>) that are delimited by characters satisfying the specified predicate.
            Additional options, such as string trimming, or separator keep, are available.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character of the current string. Any character satisfying this preidcate will be used as a separator.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>
            An array containing substrings of this string (or a part of this string) that are delimited by characters satisfying <paramref name="predicate" />.
            </returns>
        </member>
        <member name="M:System.StringEx.Split(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a string array that contains the substrings in this string (or a part of this string according to <paramref name="startIndex"/>) that are delimited by characters satisfying the specified predicate.
            Additional options, such as string trimming, or separator keep, are available.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character of the current string. Any character satisfying this preidcate will be used as a separator.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>
            An array containing substrings of this string (or part of this string) that are delimited by characters satisfying <paramref name="predicate" />.
            </returns>
        </member>
        <member name="M:System.StringEx.Split(System.String,System.Func{System.Char,System.Boolean},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a string array that contains the substrings in this string that are delimited by characters satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character of the current string. Any character satisfying this preidcate will be used as a separator.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>
            An array containing substrings of this string that are delimited by characters satisfying <paramref name="predicate" />.
            </returns>
        </member>
        <member name="M:System.StringEx.Split(System.String,System.Char,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns substrings of this string (or a part of this string according to <paramref name="startIndex"/> and <paramref name="length"/>) delimited by specified Unicode character.
            Additional options, such as string trimming, or separator keep, are available.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separator">A Unicode characters that delimits the substrings in the current string instance.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings should be trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>
            An array containing substrings of this string (or part of this string) that are delimited by the specified separator.
            </returns>
        </member>
        <member name="M:System.StringEx.Split(System.String,System.Char,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns substrings of this string (or a part of this string according to <paramref name="startIndex"/>) delimited by specified Unicode character.
            Additional options, such as string trimming, or separator keep, are available.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separator">A Unicode characters that delimits the substrings in the current string instance.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings should be trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>
            An array containing substrings of this string (or part of this string) that are delimited by the specified separator.
            </returns>
        </member>
        <member name="M:System.StringEx.Split(System.String,System.Char,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns substrings of this string delimited by specified Unicode character.
            Additional options, such as string trimming, or separator keep, are available.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separator">A Unicode characters that delimits the substrings in the current string instance.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings should be trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>
            An array containing substrings of this string that are delimited by the specified separator.
            </returns>
        </member>
        <member name="M:System.StringEx.Split(System.String,System.Char[],System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns substrings of this string (or a part of this string according to <paramref name="startIndex"/> and <paramref name="length"/>) delimited by specified Unicode characters.
            Additional options, such as string trimming, or separator keep, are available.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separators">A non-empty array of Unicode characters that delimit the substrings in the current string instance.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings should be trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>
            An array containing substrings of this string (or part of this string) that are delimited by the specified separators.
            </returns>
        </member>
        <member name="M:System.StringEx.Split(System.String,System.Char[],System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns substrings of this string (or a part of this string according to <paramref name="startIndex"/>) delimited by specified Unicode characters.
            Additional options, such as string trimming, or separator keep, are available.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separators">A non-empty array of Unicode characters that delimit the substrings in the current string instance.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings should be trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>
            An array containing substrings of this string (or part of this string) that are delimited by the specified separators.
            </returns>
        </member>
        <member name="M:System.StringEx.Split(System.String,System.Char[],System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns substrings of this string delimited by specified Unicode characters. Additional options, such as string trimming, or separator keep, are available.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separators">A non-empty array of Unicode characters that delimit the substrings in the current string instance.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings should be trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <param name="keepSeparator"><c>true</c> if the separator should be included in each returned substring; otherwise, <c>false</c>.</param>
            <returns>
            An array containing substrings of this string that are delimited by the specified separators.
            </returns>
        </member>
        <member name="M:System.StringEx.SplitEx(System.String,System.Func{System.Char,System.Int32},System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.StringSplitResult" /> array that contains information about substrings in this string instance (or a part of this string according to <paramref name="startIndex" /> and <paramref name="length" />) that are delimited by Unicode characters satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function used to test each Unicode character of the current string. If a character passes this predicate, it returns a non-negative integer as the separator's index; otherwise, this function must return -1. Any character satisfying this predicate will be used as the separator.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <returns>A <see cref="T:System.StringSplitResult" /> array that contains information about the substrings in the current string instance (or a part of the current string instance) that are delimited by Unicode characters satisfying the specified predicate.</returns>
        </member>
        <member name="M:System.StringEx.SplitEx(System.String,System.Func{System.Char,System.Int32},System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.StringSplitResult" /> array that contains information about substrings in this string instance (or a part of this string according to <paramref name="startIndex"/>) that are delimited by Unicode characters satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function used to test each Unicode character of the current string. If a character passes this predicate, it returns a non-negative integer as the separator's index; otherwise, this function must return -1. Any character satisfying this predicate will be used as the separator.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <returns>
            A <see cref="T:System.StringSplitResult" /> array that contains information about the substrings in the current string instance (or a part of the current string instance)
            that are delimited by Unicode characters satisfying the specified predicate.
            </returns>
        </member>
        <member name="M:System.StringEx.SplitEx(System.String,System.Func{System.Char,System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.StringSplitResult" /> array that contains information about substrings in this string instance that are delimited by Unicode characters satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character of the current string. Any character that passes this test will be used as a separator.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <returns>
            A <see cref="T:System.StringSplitResult" /> array that contains information about the substrings in the current string instance that are delimited by Unicode characters satisfying the specified predicate.
            </returns>
        </member>
        <member name="M:System.StringEx.SplitEx(System.String,System.Char[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.StringSplitResult" /> array that contains information about the substrings in this string (or a part of this string according to <paramref name="startIndex"/> and <paramref name="length"/>) that are delimited by specified Unicode characters.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separators">A non-empty array of Unicode characters that delimit the substrings in the current string instance.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <returns>
            A <see cref="T:System.StringSplitResult" /> array that contains information about the substrings in the current string instance (or a part of the current string instance) that are delimited by outside-quote separators.
            </returns>
        </member>
        <member name="M:System.StringEx.SplitEx(System.String,System.Char[],System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.StringSplitResult" /> array that contains information about the substrings in this string (or a part of this string according to <paramref name="startIndex"/>) that are delimited by specified Unicode characters.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separators">A non-empty array of Unicode characters that delimit the substrings in the current string instance.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>        /// <returns>
            A <see cref="T:System.StringSplitResult" /> array that contains information about the substrings in the current string instance (or a part of the current string instance) that are delimited by outside-quote separators.
            </returns>
        </member>
        <member name="M:System.StringEx.SplitEx(System.String,System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.StringSplitResult" /> array that contains information about the substrings in this string that are delimited by specified Unicode characters.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separators">A non-empty array of Unicode characters that delimit the substrings in the current string instance.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned;
            for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>        
            <returns>
            A <see cref="T:System.StringSplitResult" /> array that contains information about the substrings in the current string instance that are delimited by outside-quote separators.
            </returns>
        </member>
        <member name="M:System.StringEx.SplitWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Int32,System.Char,System.Char,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a string array that contains substrings in this string instance (or a part of this string)
            that are delimited by Unicode characters outside quotes satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside the quotes of the current string.
            Any character that passes this test will be used as a separator.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="keepQuotes"><c>true</c> if the quotes are not removed in the returned strings.
            For example, splitting string "{a,b},c" by comma ',' with '{' and '}' as the quotes produces array "{a,b}", "c" with this argument set <c>true</c>,
            and "a,b", "c" with this argument set <c>false</c>.</param>
            <param name="keepSeparator"><c>true</c> if separators are not removed from the returned strings.
            For example, splitting string "a,b,c" by comma ',' produces "a,", "b,", "c" with this argument set <c>true</c>
            and "a", "b", "c" without this argument set <c>false</c>.</param>
            <returns>
            A string array whose elements are the substrings in the current string instance (or a part of the current string instance) that are delimited by outside-quote characters satisfying the specified <paramref name="predicate" />.
            </returns>
            <exception cref="T:System.FormatException">Occurs when a quote mismatch is found.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when the value of <paramref name="startIndex"/> or <paramref name="length"/> is not valid.</exception>
        </member>
        <member name="M:System.StringEx.SplitWithQuotes(System.String,System.Func{System.Char,System.Boolean},System.Int32,System.Char,System.Char,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a string array that contains substrings in this string instance (or a part of this string)
            that are delimited by Unicode characters outside quotes satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside the quotes of the current string.
            Any character that passes this test will be used as a separator.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="keepQuotes"><c>true</c> if the quotes are not removed in the returned strings.
            For example, splitting string "{a,b},c" by comma ',' with '{' and '}' as the quotes produces array "{a,b}", "c" with this argument set <c>true</c>,
            and "a,b", "c" with this argument set <c>false</c>.</param>
            <param name="keepSeparator"><c>true</c> if separators are not removed from the returned strings.
            For example, splitting string "a,b,c" by comma ',' produces "a,", "b,", "c" with this argument set <c>true</c>
            and "a", "b", "c" without this argument set <c>false</c>.</param>
            <returns>
            A string array whose elements are the substrings in the current string instance (or a part of the current string instance) that are delimited by outside-quote characters satisfying the specified <paramref name="predicate" />.
            </returns>
        </member>
        <member name="M:System.StringEx.SplitWithQuotes(System.String,System.Char[],System.Int32,System.Int32,System.Char,System.Char,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a string array that contains the substrings in this string (or a part of this string)
            that are delimited by specified Unicode characters outside quotes.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separators">A non-empty array of Unicode characters that delimit the substrings in the current string instance.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="keepQuotes"><c>true</c> if the quotes are not removed in the returned strings.
            For example, splitting string "{a,b},c" by comma ',' with '{' and '}' as the quotes produces array "{a,b}", "c" with this argument set <c>true</c>,
            and "a,b", "c" with this argument set <c>false</c>.</param>
            <param name="keepSeparator"><c>true</c> if separators are not removed from the returned strings.
            For example, splitting string "a,b,c" by comma ',' produces "a,", "b,", "c" with this argument set <c>true</c>
            and "a", "b", "c" without this argument set <c>false</c>.</param>
            <returns>
            A string array whose elements are the substrings in the current string instance (or a part of the current string instance) that are delimited by outside-quote separators.
            </returns>
        </member>
        <member name="M:System.StringEx.SplitWithQuotes(System.String,System.Char[],System.Int32,System.Char,System.Char,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a string array that contains the substrings in this string (or a part of this string)
            that are delimited by specified Unicode characters outside quotes.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separators">A non-empty array of Unicode characters that delimit the substrings in the current string instance.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="keepQuotes"><c>true</c> if the quotes are not removed in the returned strings.
            For example, splitting string "{a,b},c" by comma ',' with '{' and '}' as the quotes produces array "{a,b}", "c" with this argument set <c>true</c>,
            and "a,b", "c" with this argument set <c>false</c>.</param>
            <param name="keepSeparator"><c>true</c> if separators are not removed from the returned strings.
            For example, splitting string "a,b,c" by comma ',' produces "a,", "b,", "c" with this argument set <c>true</c>
            and "a", "b", "c" without this argument set <c>false</c>.</param>
            <returns>
            A string array whose elements are the substrings in the current string instance (or a part of the current string instance) that are delimited by outside-quote separators.
            </returns>
        </member>
        <member name="M:System.StringEx.SplitWithQuotes(System.String,System.Char,System.Int32,System.Int32,System.Char,System.Char,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a string array that contains the substrings in this string (or a part of this string)
            that are delimited by specified Unicode characters outside quotes.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separator">A Unicode characters that delimits the substrings in the current string instance.</param>
            <param name="startIndex">The zero-based position indicating where the search for the separator starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="keepQuotes"><c>true</c> if the quotes are not removed in the returned strings.
            For example, splitting string "{a,b},c" by comma ',' with '{' and '}' as the quotes produces array "{a,b}", "c" with this argument set <c>true</c>,
            and "a,b", "c" with this argument set <c>false</c>.</param>
            <param name="keepSeparator"><c>true</c> if the separator is not removed from the returned strings.
            For example, splitting string "a,b,c" by comma ',' produces "a,", "b,", "c" with this argument set <c>true</c>
            and "a", "b", "c" without this argument set <c>false</c>.</param>
            <returns>
            A string array whose elements are the substrings in the current string instance (or a part of the current string instance) that are delimited by the outside-quote separator.
            </returns>
        </member>
        <member name="M:System.StringEx.SplitWithQuotes(System.String,System.Char,System.Int32,System.Char,System.Char,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a string array that contains the substrings in this string (or a part of this string)
            that are delimited by specified Unicode characters outside quotes.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separator">A Unicode characters that delimits the substrings in the current string instance.</param>
            <param name="startIndex">The zero-based position indicating where the search for the separator starts.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="keepQuotes"><c>true</c> if the quotes are not removed in the returned strings.
            For example, splitting string "{a,b},c" by comma ',' with '{' and '}' as the quotes produces array "{a,b}", "c" with this argument set <c>true</c>,
            and "a,b", "c" with this argument set <c>false</c>.</param>
            <param name="keepSeparator"><c>true</c> if the separator is not removed from the returned strings.
            For example, splitting string "a,b,c" by comma ',' produces "a,", "b,", "c" with this argument set <c>true</c>
            and "a", "b", "c" without this argument set <c>false</c>.</param>
            <returns>
            A string array whose elements are the substrings in the current string instance (or a part of the current string instance) that are delimited by the outside-quote separator.
            </returns>
        </member>
        <member name="M:System.StringEx.SplitWithQuotesEx(System.String,System.Func{System.Char,System.Int32},System.Int32,System.Int32,System.Char,System.Char,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.StringSplitResult"/> array that contains information about substrings in this string instance (or a part of this string)
            that are delimited by Unicode characters outside quotes satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside the quotes of the current string.
            Any character that passes this test will be used as a separator.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="keepQuotes"><c>true</c> if the quotes are not removed in the returned strings.
            For example, splitting string "{a,b},c" by comma ',' with '{' and '}' as the quotes produces array "{a,b}", "c" with this argument set <c>true</c>,
            and "a,b", "c" with this argument set <c>false</c>.</param>
            <param name="keepSeparator"><c>true</c> if separators are not removed from the returned strings.
            For example, splitting string "a,b,c" by comma ',' produces "a,", "b,", "c" with this argument set <c>true</c>
            and "a", "b", "c" without this argument set <c>false</c>.</param>
            <returns>
            A <see cref="T:System.StringSplitResult"/> array that contains information about substrings in the current string instance (or a part of the current string instance) that are delimited by outside-quote characters satisfying the specified <paramref name="predicate" />.
            </returns>
            <exception cref="T:System.FormatException">Occurs when a quote mismatch is found.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when the value of <paramref name="startIndex"/> or <paramref name="length"/> is not valid.</exception>
        </member>
        <member name="M:System.StringEx.SplitWithQuotesEx(System.String,System.Func{System.Char,System.Int32},System.Int32,System.Char,System.Char,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.StringSplitResult"/> array that contains information about substrings in this string instance (or a part of this string)
            that are delimited by Unicode characters outside quotes satisfying the specified predicate.
            </summary>
            <param name="str">This string instance.</param>
            <param name="predicate">A function to test each Unicode character outside the quotes of the current string.
            Any character that passes this test will be used as a separator.</param>
            <param name="startIndex">The zero-based position indicating where the search for characters satisfying <paramref name="predicate" /> starts.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="keepQuotes"><c>true</c> if the quotes are not removed in the returned strings.
            For example, splitting string "{a,b},c" by comma ',' with '{' and '}' as the quotes produces array "{a,b}", "c" with this argument set <c>true</c>,
            and "a,b", "c" with this argument set <c>false</c>.</param>
            <param name="keepSeparator"><c>true</c> if separators are not removed from the returned strings.
            For example, splitting string "a,b,c" by comma ',' produces "a,", "b,", "c" with this argument set <c>true</c>
            and "a", "b", "c" without this argument set <c>false</c>.</param>
            <returns>
            A <see cref="T:System.StringSplitResult"/> array that contains information about substrings in the current string instance (or a part of the current string instance) that are delimited by outside-quote characters satisfying the specified <paramref name="predicate" />.
            </returns>
            <exception cref="T:System.FormatException">Occurs when a quote mismatch is found.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when the value of <paramref name="startIndex"/> or <paramref name="length"/> is not valid.</exception>
        </member>
        <member name="M:System.StringEx.SplitWithQuotesEx(System.String,System.Char[],System.Int32,System.Int32,System.Char,System.Char,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.StringSplitResult"/> array that contains information about the substrings in this string (or a part of this string)
            that are delimited by specified Unicode characters outside quotes.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separators">A non-empty array of Unicode characters that delimit the substrings in the current string instance.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="length">A positive value indicating the number of characters to search starting from the position specified by <paramref name="startIndex" />.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="keepQuotes"><c>true</c> if the quotes are not removed in the returned strings.
            For example, splitting string "{a,b},c" by comma ',' with '{' and '}' as the quotes produces array "{a,b}", "c" with this argument set <c>true</c>,
            and "a,b", "c" with this argument set <c>false</c>.</param>
            <param name="keepSeparator"><c>true</c> if separators are not removed from the returned strings.
            For example, splitting string "a,b,c" by comma ',' produces "a,", "b,", "c" with this argument set <c>true</c>
            and "a", "b", "c" without this argument set <c>false</c>.</param>
            <returns>
            A <see cref="T:System.StringSplitResult"/> array that contains information about the substrings in the current string instance (or a part of the current string instance) that are delimited by outside-quote separators.
            </returns>
        </member>
        <member name="M:System.StringEx.SplitWithQuotesEx(System.String,System.Char[],System.Int32,System.Char,System.Char,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.StringSplitResult"/> array that contains information about the substrings in this string (or a part of this string)
            that are delimited by specified Unicode characters outside quotes.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separators">A non-empty array of Unicode characters that delimit the substrings in the current string instance.</param>
            <param name="startIndex">The zero-based position indicating where the search for separators starts.</param>
            <param name="leftQuote">Specifies the Unicode character as the left quote.</param>
            <param name="rightQuote">Specifies the Unicode character as the right quote.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="keepQuotes"><c>true</c> if the quotes are not removed in the returned strings.
            For example, splitting string "{a,b},c" by comma ',' with '{' and '}' as the quotes produces array "{a,b}", "c" with this argument set <c>true</c>,
            and "a,b", "c" with this argument set <c>false</c>.</param>
            <param name="keepSeparator"><c>true</c> if separators are not removed from the returned strings.
            For example, splitting string "a,b,c" by comma ',' produces "a,", "b,", "c" with this argument set <c>true</c>
            and "a", "b", "c" without this argument set <c>false</c>.</param>
            <returns>
            A <see cref="T:System.StringSplitResult"/> array that contains information about the substrings in the current string instance (or a part of the current string instance) that are delimited by outside-quote separators.
            </returns>
        </member>
        <member name="M:System.StringEx.BiSplit(System.String,System.String)">
            <summary>
            Splits this string into two parts at the position where the first occurrence of <paramref name="separator"/> is found.
            </summary>
            <param name="source">This string instance.</param>
            <param name="separator">A string as the separator. NOTE that this separator will be removed. For example, split "abcdef" by "cd" and we will get "ab" and "ef".
            </param>
            <returns>A pair of strings if the separator is found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:System.StringEx.BiSplit(System.String,System.String,System.String@,System.String@)">
            <summary>
            Splits this string into two parts at the position where the first occurrence of <paramref name="separator" /> is found.
            </summary>
            <param name="source">This string instance.</param>
            <param name="separator">A string as the separator. NOTE that this separator will be removed. For example, split "abcdef" by "cd" and we will get "ab" and "ef".</param>
            <param name="value1">Returns the substring before the first occurrence of the separator.</param>
            <param name="value2">Returns the substring after the first occurrence of the separator.</param>
            <returns>
              <c>true</c> if the separator is found and the separation is successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.StringEx.Split(System.String,System.SpecialStringSplit)">
            <summary>
            Splits this string in some special way.
            </summary>
            <param name="str">This string instance.</param>
            <param name="specialSplit">Specifies how to split the current string.</param>
            <returns>A string array storing the split result.</returns>
        </member>
        <member name="M:System.StringEx.Split(System.String,System.Char,System.Char,System.StringSplitOptions)">
            <summary>
            Splits this string instance into a two-dimensional jagged array string[][].
            For example, you may split "ab,c,defg;h,ijk;l,mn,op,q" with ',' as the <paramref name="separator1"/> 
            and ';' the <paramref name="separator2"/>.
            The result is three arrays of strings, the first one bing string array {"ab", "c", "defg"}.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separator1">The separator to split each string of the results from spliting the current string by <paramref name="separator2"/>.</param>
            <param name="separator2">The separator to split the current string into a string array each of which will be then split by <paramref name="separator1"/>.</param>
            <param name="options">Specifies whether the empty entries should be returned.</param>
            <returns>A two-dimensional jagged array storing the split result.</returns>
        </member>
        <member name="M:System.StringEx.Split(System.String,System.Char[],System.Char[],System.StringSplitOptions)">
            <summary>
            Splits this string instance into a two-dimensional jagged array string[][].
            For example, you may split "ab,c:defg;h,ijk;l,mn,op|q" with {',', '|'} as <paramref name="separators1"/> 
            and {';', ':'} as <paramref name="separators2"/>.
            The result is four arrays of strings, the first one be string array {"ab", "c"}.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separators1">The separators to split each string of the results from spliting the current string by <paramref name="separators2"/>.</param>
            <param name="separators2">The separators to split the current string into a string array each of which will be then split by <paramref name="separators1"/>.</param>
            <param name="options">Specifies whether the empty entries should be returned.</param>
            <returns>A two-dimensional jagged array storing the split result.</returns>
        </member>
        <member name="M:System.StringEx.SplitToLines(System.String,System.StringSplitOptions)">
            <summary>
            Splits the current string instance to lines represented by a string array.
            </summary>
            <param name="str">This string instance.</param>
            <param name="options">Specifies whether the empty entries should be returned.</param>
            <returns>Lines of the given string instances.</returns>
        </member>
        <member name="M:System.StringEx.SplitByInitials(System.String,System.Boolean)">
            <summary>
            Splits this string by upper letters. 
            </summary>
            <param name="str">The string instance to operate on.</param>
            <param name="ignoreConsecutiveUpperLetters">Indicates whether to split consecutive upper letters. 
            <para>For example, if this parameter is set true, string "aBigAPPLETree" will be split as "a Big APPLETree"; 
            otherwise, "a Big A P P L E Tree".</para></param>
            <returns>A string array.</returns>
        </member>
        <member name="M:System.StringEx.SplitBySpaces(System.String,System.StringSplitOptions)">
            <summary>
            Splits a string into substrings by spaces defined by <see cref="M:System.Char.IsWhiteSpace(System.Char)"/>.
            </summary>
            <param name="str">The string to split.</param>
            <param name="options"><see cref="F:System.StringSplitOptions.RemoveEmptyEntries"/> to omit empty array elements from the array returned; or System.StringSplitOptions.None to include empty array elements in the array returned.</param>
            <returns>An array whose elements contain the substrings from this instance that are delimited by white spaces defined by <see cref="M:System.Char.IsWhiteSpace(System.Char)"/>.</returns>
        </member>
        <member name="M:System.StringEx.SplitByTab(System.String,System.StringSplitOptions)">
            <summary>
            Splits a string into substrings using TAB space as the delimiter.
            </summary>
            <param name="str">The string to split.</param>
            <param name="options"><see cref="F:System.StringSplitOptions.RemoveEmptyEntries"/> to omit empty array elements from the array returned; or System.StringSplitOptions.None to include empty array elements in the array returned.</param>
            <returns>An array whose elements contain the substrings from this instance that are delimited by TABs.</returns>
        </member>
        <member name="M:System.StringEx.SplitBySpaces(System.String)">
            <summary>
            Splits a string into substrings by spaces defined by <see cref="M:System.Char.IsWhiteSpace(System.Char)"/>. Empty entries will be removed.
            </summary>
            <param name="str">The string to split.</param>
            <returns>An array whose elements contain the substrings from this instance that are delimited by white spaces defined by <see cref="M:System.Char.IsWhiteSpace(System.Char)"/>.</returns>
        </member>
        <member name="M:System.StringEx.Split(System.String,System.String,System.StringSplitOptions)">
            <summary>
            Returns a string array that contains the substrings in this instance that are delimited by the specified <paramref name="separator"/>.
            </summary>
            <param name="str">This string instance.</param>
            <param name="separator">A <see cref="T:System.String"/> that delimits the substrings in this string, or null. If the separator parameter is null, white-space characters are assumed to be the delimiter. </param>
            <param name="options"><see cref="F:System.StringSplitOptions.RemoveEmptyEntries"/> to omit empty array elements from the array returned; or <see cref="F:System.StringSplitOptions.None"/> to include empty array elements in the array returned.</param>
            <returns>An array whose elements contain the substrings in this string that are delimited by the specified <paramref name="separator"/>.</returns>
        </member>
        <member name="M:System.StringEx.AppendLine(System.Text.StringBuilder,System.Object)">
            <summary>
            Appends a copy of the string representation of the specified object followed by the default line terminator to the end of the current <see cref="T:System.Text.StringBuilder"/> object.
            </summary>
            <param name="builder">The current <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="value">Th object whose string representation is to be appended.</param>
            <returns>The current <see cref="T:System.Text.StringBuilder"/> object.</returns>
        </member>
        <member name="M:System.StringEx.AppendNewLine(System.Text.StringBuilder,System.String)">
            <summary>
            Appends the default line terminator followed by a copy of the specified string to the end of the current <see cref="T:System.Text.StringBuilder"/> object.
            <para>NOTE that this method differs from the <see cref="M:System.Text.StringBuilder.AppendLine(System.String)"/> in that it appends the line terminator before the specified string.</para>
            </summary>
            <param name="builder">The current <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="value">The string to append.</param>
        </member>
        <member name="M:System.StringEx.AppendNewLine(System.Text.StringBuilder,System.Char,System.Int32)">
            <summary>
            Appends the default line terminator followed by a new-line indent (a number of specified Unicode characters) to the end of the current <see cref="T:System.Text.StringBuilder"/> object.
            </summary>
            <param name="builder">The current <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="indentChar">The Unicode characters used to fill the indent.</param>
            <param name="indent">The length of the indent.</param>
        </member>
        <member name="M:System.StringEx.AppendNewLine(System.Text.StringBuilder,System.Int32)">
            <summary>
            Appends the default line terminator followed by a new-line indent (a number of spaces) to the end of the current <see cref="T:System.Text.StringBuilder"/> object.
            </summary>
            <param name="builder">The current <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="indent">The length of the indent.</param>
        </member>
        <member name="M:System.StringEx.AppendNewLine(System.Text.StringBuilder,System.String,System.Char,System.Int32)">
            <summary>
            Appends the default line terminator followed by a new-line indent (a number of specified Unicode characters) to the end of the current <see cref="T:System.Text.StringBuilder" /> object, and then appends a copy of the specified string to the end of the current <see cref="T:System.Text.StringBuilder" /> object.
            </summary>
            <param name="builder">The current <see cref="T:System.Text.StringBuilder" /> object.</param>
            <param name="value">The string to append after the line terminator and the indent are appended.</param>
            <param name="indentChar">The Unicode characters used to fill the indent.</param>
            <param name="indent">The length of the indent.</param>
        </member>
        <member name="M:System.StringEx.AppendNewLine(System.Text.StringBuilder,System.String,System.Int32)">
            <summary>
            Appends the default line terminator followed by a new-line indent (a number of spaces) to the end of the current <see cref="T:System.Text.StringBuilder" /> object, and then appends a copy of the specified string to the end of the current <see cref="T:System.Text.StringBuilder" /> object.
            </summary>
            <param name="builder">The current <see cref="T:System.Text.StringBuilder" /> object.</param>
            <param name="value">The string to append after the line terminator and the indent are appended.</param>
            <param name="indent">The length of the indent.</param>
        </member>
        <member name="M:System.StringEx.ToStringWithTrim(System.Text.StringBuilder)">
            <summary>
            Converts the value of this instance to a <see cref="T:System.String"/> with white spaces at both ends removed.
            </summary>
            <param name="builder">The current <see cref="T:System.Text.StringBuilder"/> object.</param>
            <returns>A string whose value is the same as this instance except for white spaces at both ends are removed.</returns>
        </member>
        <member name="M:System.StringEx.ToStringWithTrimStart(System.Text.StringBuilder)">
            <summary>
            Converts the value of this instance to a <see cref="T:System.String"/> with white spaces at the beginning removed.
            </summary>
            <param name="builder">The current <see cref="T:System.Text.StringBuilder"/> object.</param>
            <returns>A string whose value is the same as this instance except for white spaces at the beginning are removed.</returns>
        </member>
        <member name="M:System.StringEx.ToStringWithTrimEnd(System.Text.StringBuilder)">
            <summary>
            Converts the value of this instance to a <see cref="T:System.String"/> with white spaces at the end removed.
            </summary>
            <param name="builder">The current <see cref="T:System.Text.StringBuilder"/> object.</param>
            <returns>A string whose value is the same as this instance except for white spaces at the end are removed.</returns>
        </member>
        <member name="M:System.StringEx.ToHashSet(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Converts the current string sequence to a hash-set.
            </summary>
            <param name="sequence">This string sequence.</param>
            <returns>A hash-set that contains all distinct elements from the current string sequence.</returns>
        </member>
        <member name="M:System.StringEx.Copy(System.String)">
            <summary>
            Creates a new string instance with the same value as the current one.
            <para>This a dummy of <c>string.Copy</c> method for convenience.</para>
            </summary>
            <param name="str">The string instance to copy.</param>
            <returns>The new string instance.</returns>
        </member>
        <member name="M:System.StringEx.Equals(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Determines whether this string instance and another specified string instance have the same value with case and trim options.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The string to compare to this instance.</param>
            <param name="ignoreCase">Indicates whether case of strings is ignored during comparision.</param>
            <param name="trimSource">Indicates whether the white spaces at the beginning and the end of the current string instance are 
            removed before comparision.</param>
            <param name="trimValue">Indicates whether the white spaces at the beginning and the end of the string instance to compare are 
            removed before the comparision.</param>
            <returns><c>true</c> if the two compared string instances have the same value under the specified options; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.In(System.String,System.StringComparison,System.Boolean,System.String[])">
            <summary>
            Determines whether this string instance is in an array of strings.
            </summary>
            <param name="str">This string instance.</param>
            <param name="array">An array of strings.</param>
            <param name="comparisonType">Specifies how the strings are compared.</param>
            <param name="trimTarget">Indicates whether to trim all strings in the <paramref name="array"/> to compare.</param>
            <returns><c>true</c> if this string is in the specified array of strings; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.In(System.String,System.StringComparison,System.String[])">
            <summary>
            Determines whether this string instance is in an array of strings.
            </summary>
            <param name="str">This string instance.</param>
            <param name="array">An array of strings.</param>
            <param name="comparisonType">Specifies how the strings are compared.</param>
            <returns><c>true</c> if this string is in the specified array of strings; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.In(System.String,System.StringComparison,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether this string instance is in a sequence of strings.
            </summary>
            <param name="str">This string instance.</param>
            <param name="sequence">A sequence of strings.</param>
            <param name="comparisonType">Specifies how the strings are compared.</param>
            <returns><c>true</c> if this string is in the specified sequence of strings; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.In(System.String,System.Collections.Generic.IEnumerable{System.String},System.StringComparison,System.Boolean)">
            <summary>
            Determines whether this string instance is in a sequence of strings.
            </summary>
            <param name="str">This string instance.</param>
            <param name="sequence">A sequence of strings.</param>
            <param name="comparisonType">Specifies how the string will be compared.</param>
            <param name="trimTarget">Indicates whether to trim all strings in the <paramref name="sequence"/> to compare.</param>
            <returns><c>true</c> if this string is in the specified sequence of strings; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.In(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
            <summary>
            Determines whether this string instance is in a sequence of strings.
            </summary>
            <param name="str">This string instance.</param>
            <param name="sequence">A sequence of strings.</param>
            <param name="ignoreCase">Specifies whether case of strings is ignored during the comparison.</param>
            <param name="trimTarget">Indicates whether to trim all strings in the <paramref name="sequence"/> to compare.</param>
            <returns><c>true</c> if this string is in the specified sequence of strings; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.RemoveExtraWhiteSpaces(System.String,System.Boolean)">
            <summary>
            Removes extra white spaces from the current string; for example, if there is a substring of three white spaces, only the first white space is preserved in the returned string.
            </summary>
            <param name="str">The string.</param>
            <param name="mergeLines">if set to <c>true</c>, '\r' and '\n' and other new-line symbols defined in <see cref="P:System.Environment.NewLine"/> are removed.</param>
            <returns>A string with extra white spaces removed.</returns>
        </member>
        <member name="M:System.StringEx.RemoveLast(System.String)">
            <summary>
            Returns a copy of this string instance with the last character removed.
            </summary>
            <param name="str">This string instance.</param>
            <returns>A copy of this string instance with the last character removed.</returns>
        </member>
        <member name="M:System.StringEx.RemoveFirst(System.String)">
            <summary>
            Returns a copy of this string instance with the first character removed.
            </summary>
            <param name="str">This string instance.</param>
            <returns>A copy of this string instance with the first character removed.</returns>
        </member>
        <member name="M:System.StringEx.RemoveMatchedCharPair(System.String,System.Char,System.Char,System.Boolean)">
            <summary>
            If the current string starts with the specified <paramref name="leftChr" /> and ends with the specified <paramref name="rightChr" />, returns a new string instance with the <paramref name="leftChr" /> and <paramref name="rightChr" /> removed.
            </summary>
            <param name="str">This string instance.</param>
            <param name="leftChr">Checks if this <see cref="T:System.Char" /> appears at the beginning of the current string.</param>
            <param name="rightChr">Checks if this <see cref="T:System.Char" /> appears at the end of the current string.</param>
            <param name="ignoreWhitespace">If set to <c>true</c>, the white spaces defined by <see cref="M:System.Char.IsWhiteSpace(System.Char)"/> at the beginning and the end of the current string will be ignored. These white spaces will also be removed if a match of <paramref name="leftChr" /> and <paramref name="rightChr" /> are found.</param>
            <returns>A new string instance with the <paramref name="leftChr" /> at the beginning and the <paramref name="rightChr" /> at the end removed; the original string instance if either <paramref name="leftChr" /> is not found at the beginning of the current instance, or <paramref name="rightChr" /> is not found at the end of the current instance. White spaces at the beginning and the end will also be removed if <paramref name="ignoreWhitespace"/> is specified <c>true</c>.</returns>
        </member>
        <member name="M:System.StringEx.RemoveQuotes(System.String,System.Char,System.Boolean)">
            <summary>
            Returns a new string instance with the "quote"s at both ends of the current string removed.
            </summary>
            <param name="str">This string instance.</param>
            <param name="quoteChr">Checks if this <see cref="T:System.Char" /> appears both ends of the current string.</param>
            <param name="ignoreWhitespace">If set to <c>true</c>, the white spaces defined by <see cref="M:System.Char.IsWhiteSpace(System.Char)"/> at the beginning and the end of the current string will be ignored. These white spaces will also be removed if <paramref name="quoteChr"/> is found at both ends of the current string.</param>
            <returns>A new string instance with the <paramref name="quoteChr" /> at both ends of the string removed; the original string instance if either <paramref name="quoteChr" /> is not found at the beginning of the current instance, or it is not found at the end of the current instance. White spaces at the beginning and the end will also be removed if <paramref name="ignoreWhitespace"/> is specified <c>true</c>.</returns>
        </member>
        <member name="M:System.StringEx.Remove(System.String,System.String[],System.Boolean)">
            <summary>
            Removes a new string in which all occurrences of the specified substrings are removed from the current string.
            NOTE that this method only removes occurrences in the current string before the removal operation. 
            Any new occurrence caused by the removal operation will not be removed again. For example, removing "ab", "bc" from "aabbcb" returns "ab".
            </summary>
            <param name="str">This string instance.</param>
            <param name="substrings">Substrings to remove.</param>
            <param name="blankspace">Indicates whether a blank space will take place of each occurrence of the removed substring.</param>
            <returns>A copy of the current string in which all occurrences of the specified substrings are removed.</returns>
        </member>
        <member name="M:System.StringEx.Remove(System.String,System.String,System.Boolean)">
            <summary>
            Returns a new string in which all occurrences of the specified substring are removed from the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="subString">The substring to remove.</param>
            <param name="replaceByWhitespace">Indicates whether a blank space will take place of each occurrence of the removed substring.</param>
            <returns>A copy of the current string in which all occurrences of the specified substring are removed.</returns>
        </member>
        <member name="M:System.StringEx.Remove(System.String,System.Char[],System.Boolean)">
            <summary>
            Returns a new string in which all occurrences of the specified characters are removed from the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="charsToRemove">The characters to remove.</param>
            <param name="saveMemory">Set <c>true</c> if the current string will not be used elsewhere and the memory is really a big concern. 
            <para>If this parameter is true, the current string instance might become meaningless and no longer usable after the execution of this method.</para></param>
            <returns>A copy of the current string in which all occurrences of <paramref name="charsToRemove"/> are removed.</returns>
        </member>
        <member name="M:System.StringEx.Remove(System.String,System.Char,System.Boolean)">
            <summary>
            Returns a new string in which all occurrences of the specified character are removed from the current string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="charToRemove">The character to remove.</param>
            <param name="saveMemory">Set <c>true</c> if the current string will not be used elsewhere and the memory is really a big concern. 
            <para>If this parameter is true, the current string instance might become meaningless and no longer usable after the execution of this method.</para></param>
            <returns>A copy of the current string in which all occurrences of <paramref name="charToRemove"/> are removed.</returns>
        </member>
        <member name="M:System.StringEx.RemoveAfter(System.String,System.Char,System.Boolean,System.Boolean@)">
            <summary>
            Returns a copy of the current string with all characters after the first occurrence of a specified delimiter removed. The delimiter may be removed as well.
            </summary>
            <param name="source">This string instance.</param>
            <param name="delimiter">All characters after the first occurrence of this delimiter will be removed.</param>
            <param name="removeDelimiter">Indicating whether the delimiter is also removed.</param>
            <param name="succeeded">Gets a value indicating whether the delimiter was found.</param>
            <returns>The string with all characters after the first occurrence of the delimiter removed. The delimiter may be removed as well.</returns>
        </member>
        <member name="M:System.StringEx.RemoveAfterLast(System.String,System.Char,System.Boolean,System.Boolean@)">
            <summary>
            Returns a copy of the current string with all characters after the last occurrence of a specified delimiter removed. The delimiter may be removed as well.
            </summary>
            <param name="source">This string instance.</param>
            <param name="delimiter">All characters after the last occurrence of this delimiter will be removed.</param>
            <param name="removeDelimiter">Indicating whether the delimiter is also removed.</param>
            <param name="succeeded">Gets a value indicating whether the delimiter was found.</param>
            <returns>The string with all characters after the last occurrence of the delimiter removed. The delimiter may be removed as well.</returns>
        </member>
        <member name="M:System.StringEx.RemoveAfter(System.String,System.Char,System.Boolean)">
            <summary>
            Returns a copy of the current string with all characters after the first occurrence of a specified delimiter removed. The delimiter may be removed as well.
            </summary>
            <param name="source">This string instance.</param>
            <param name="delimiter">All characters after the first occurrence of this delimiter will be removed.</param>
            <param name="removeDelimiter">Indicating whether the delimiter is also removed.</param>
            <returns>The string with all characters after the first occurrence of the delimiter removed. The delimiter may be removed as well.</returns>
        </member>
        <member name="M:System.StringEx.RemoveAfterLast(System.String,System.Char,System.Boolean)">
            <summary>
            Returns a copy of the current string with all characters after the last occurrence of a specified delimiter removed. The delimiter may be removed as well.
            </summary>
            <param name="source">This string instance.</param>
            <param name="delimiter">All characters after the last occurrence of this delimiter will be removed.</param>
            <param name="removeDelimiter">Indicating whether the delimiter is also removed.</param>
            <returns>The string with all characters after the last occurrence of the delimiter removed. The delimiter may be removed as well.</returns>
        </member>
        <member name="M:System.StringEx.RemoveAfter(System.String,System.String,System.Boolean,System.Boolean@)">
            <summary>
            Returns a copy of the current string with all characters after the first occurrence of a specified delimiter removed. The delimiter may be removed as well.
            </summary>
            <param name="source">This string instance.</param>
            <param name="delimiter">All characters after the first occurrence of this delimiter will be removed.</param>
            <param name="removeDelimiter">Indicating whether the delimiter is also removed.</param>
            <param name="succeeded">Gets a value indicating whether the delimiter was found.</param>
            <returns>The string with all characters after the first occurrence of the delimiter removed. The delimiter may be removed as well.</returns>
        </member>
        <member name="M:System.StringEx.RemoveAfterLast(System.String,System.String,System.Boolean,System.Boolean@)">
            <summary>
            Returns a copy of the current string with all characters after the last occurrence of a specified delimiter removed. The delimiter may be removed as well.
            </summary>
            <param name="source">This string instance.</param>
            <param name="delimiter">All characters after the last occurrence of this delimiter will be removed.</param>
            <param name="removeDelimiter">Indicating whether the delimiter is also removed.</param>
            <param name="succeeded">Gets a value indicating whether the delimiter was found.</param>
            <returns>The string with all characters after the last occurrence of the delimiter removed. The delimiter may be removed as well.</returns>
        </member>
        <member name="M:System.StringEx.RemoveAfter(System.String,System.String,System.Boolean)">
            <summary>
            Returns a copy of the current string with all characters after the first occurrence of a specified delimiter removed. The delimiter may be removed as well.
            </summary>
            <param name="source">This string instance.</param>
            <param name="delimiter">All characters after the first occurrence of this delimiter will be removed.</param>
            <param name="removeDelimiter">Indicating whether the delimiter is also removed.</param>
            <returns>The string with all characters after the first occurrence of the delimiter removed. The delimiter may be removed as well.</returns>
        </member>
        <member name="M:System.StringEx.RemoveAfterLast(System.String,System.String,System.Boolean)">
            <summary>
            Returns a copy of the current string with all characters after the last occurrence of a specified delimiter removed. The delimiter may be removed as well.
            </summary>
            <param name="source">This string instance.</param>
            <param name="delimiter">All characters after the last occurrence of this delimiter will be removed.</param>
            <param name="removeDelimiter">Indicating whether the delimiter is also removed.</param>
            <returns>The string with all characters after the last occurrence of the delimiter removed. The delimiter may be removed as well.</returns>
        </member>
        <member name="M:System.StringEx.RemoveAfter(System.String,System.Collections.Generic.IList{System.String},System.Boolean,System.Boolean@)">
            <summary>
            Returns a copy of the current string with all characters after the first occurrence of any of the specified delimiters removed. 
            The matched delimiter may be removed as well.
            </summary>
            <param name="source">This string instance.</param>
            <param name="delimiters">All characters after the first occurrence of any of these delimiters will be removed.</param>
            <param name="removeDelimiter">Indicating whether the delimiter is also removed.</param>
            <param name="succeeded">Gets a value indicating whether at least one of the specified delimiters was found.</param>
            <returns>The string with all characters after the first occurrence of any of the delimiters removed. The matched delimiter may be removed as well.</returns>
        </member>
        <member name="M:System.StringEx.RemoveAfterLast(System.String,System.Collections.Generic.IList{System.String},System.Boolean,System.Boolean@)">
            <summary>
            Returns a copy of the current string with all characters after the last occurrence of any of the specified delimiters removed. 
            The matched delimiter may be removed as well.
            </summary>
            <param name="source">This string instance.</param>
            <param name="delimiters">All characters after the last occurrence of any of these delimiters will be removed.</param>
            <param name="removeDelimiter">Indicating whether the delimiter is also removed.</param>
            <param name="succeeded">Gets a value indicating whether at least one of the specified delimiters was found.</param>
            <returns>The string with all characters after the last occurrence of any of the delimiters removed. The matched delimiter may be removed as well.</returns>
        </member>
        <member name="M:System.StringEx.RemoveAfter(System.String,System.Collections.Generic.IList{System.String},System.Boolean)">
            <summary>
            Returns a copy of the current string with all characters after the first occurrence of any of the specified delimiters removed. 
            The delimiter may be removed as well.
            </summary>
            <param name="source">This string instance.</param>
            <param name="delimiters">All characters after the first occurrence of any of these delimiters will be removed.</param>
            <param name="removeDelimiter">Indicating whether the delimiter is also removed.</param>
            <returns>The string with all characters after the first occurrence of any of the delimiters removed. The matched delimiter may be removed as well.</returns>
        </member>
        <member name="M:System.StringEx.RemoveAfterLast(System.String,System.Collections.Generic.IList{System.String},System.Boolean)">
            <summary>
            Returns a copy of the current string with all characters after the last occurrence of any of the specified delimiters removed. 
            The delimiter may be removed as well.
            </summary>
            <param name="source">This string instance.</param>
            <param name="delimiters">All characters after the last occurrence of any of these delimiters will be removed.</param>
            <param name="removeDelimiter">Indicating whether the delimiter is also removed.</param>
            <returns>The string with all characters after the last occurrence of any of the delimiters removed. The matched delimiter may be removed as well.</returns>
        </member>
        <member name="M:System.StringEx.RemoveAfter(System.String,System.Char[],System.Boolean,System.Boolean@)">
            <summary>
            Returns a copy of the current string with all characters after the first occurrence of any of the specified delimiters removed. 
            The delimiter may be removed as well.
            </summary>
            <param name="source">This string instance.</param>
            <param name="delimiters">All characters after the first occurrence of any of these delimiters will be removed.</param>
            <param name="removeDelimiter">Indicating whether the delimiter is also removed.</param>
            <param name="succeeded">Gets a value indicating whether at least one of the specified delimiters was found.</param>
            <returns>The string with all characters after the first occurrence of any of the delimiters removed. The matched delimiter may be removed as well.</returns>
        </member>
        <member name="M:System.StringEx.RemoveAfterLast(System.String,System.Char[],System.Boolean,System.Boolean@)">
            <summary>
            Returns a copy of the current string with all characters after the last occurrence of any of the specified delimiters removed. 
            The delimiter may be removed as well.
            </summary>
            <param name="source">This string instance.</param>
            <param name="delimiters">All characters after the last occurrence of any of these delimiters will be removed.</param>
            <param name="removeDelimiter">Indicating whether the delimiter is also removed.</param>
            <param name="succeeded">Gets a value indicating whether at least one of the specified delimiters was found.</param>
            <returns>The string with all characters after the last occurrence of any of the delimiters removed. The matched delimiter may be removed as well.</returns>
        </member>
        <member name="M:System.StringEx.RemoveAfter(System.String,System.Char[],System.Boolean)">
            <summary>
            Returns a copy of the current string with all characters after the first occurrence of any of the specified delimiters removed. 
            The delimiter may be removed as well.
            </summary>
            <param name="source">This string instance.</param>
            <param name="delimiters">All characters after the first occurrence of any of these delimiters will be removed.</param>
            <param name="removeDelimiter">Indicating whether the delimiter is also removed.</param>
            <returns>The string with all characters after the first occurrence of any of the delimiters removed. The matched delimiter may be removed as well.</returns>
        </member>
        <member name="M:System.StringEx.RemoveAfterLast(System.String,System.Char[],System.Boolean)">
            <summary>
            Returns a copy of the current string with all characters after the last occurrence of any of the specified delimiters removed. 
            The delimiter may be removed as well.
            </summary>
            <param name="source">This string instance.</param>
            <param name="delimiters">All characters after the last occurrence of any of these delimiters will be removed.</param>
            <param name="removeDelimiter">Indicating whether the delimiter is also removed.</param>
            <returns>The string with all characters after the last occurrence of any of the delimiters removed. The matched delimiter may be removed as well.</returns>
        </member>
        <member name="M:System.StringEx.RemoveBefore(System.String,System.Char,System.Boolean,System.Boolean@)">
            <summary>
            Returns a copy of the current string with all characters before the first occurrence of a specified delimiter removed. The delimiter may be removed as well.
            </summary>
            <param name="source">This string instance.</param>
            <param name="delimiter">All characters before the first occurrence of this delimiter will be removed.</param>
            <param name="removeDelimiter">Indicating whether the delimiter is also removed.</param>
            <param name="succeeded">Gets a value indicating whether the delimiter was found.</param>
            <returns>The string with all characters before the first occurrence of the delimiter removed. The delimiter may be removed as well.</returns>
        </member>
        <member name="M:System.StringEx.RemoveBeforeLast(System.String,System.Char,System.Boolean,System.Boolean@)">
            <summary>
            Returns a copy of the current string with all characters before the last occurrence of a specified delimiter removed. The delimiter may be removed as well.
            </summary>
            <param name="source">This string instance.</param>
            <param name="delimiter">All characters before the last occurrence of this delimiter will be removed.</param>
            <param name="removeDelimiter">Indicating whether the delimiter is also removed.</param>
            <param name="succeeded">Gets a value indicating whether the delimiter was found.</param>
            <returns>The string with all characters before the last occurrence of the delimiter removed. The delimiter may be removed as well.</returns>
        </member>
        <member name="M:System.StringEx.RemoveBefore(System.String,System.Char,System.Boolean)">
            <summary>
            Returns a copy of the current string with all characters before the first occurrence of a specified delimiter removed. The delimiter may be removed as well.
            </summary>
            <param name="source">This string instance.</param>
            <param name="delimiter">All characters before the first occurrence of this delimiter will be removed.</param>
            <param name="removeDelimiter">Indicating whether the delimiter is also removed.</param>
            <returns>The string with all characters before the first occurrence of the delimiter removed. The delimiter may be removed as well.</returns>
        </member>
        <member name="M:System.StringEx.RemoveBeforeLast(System.String,System.Char,System.Boolean)">
            <summary>
            Returns a copy of the current string with all characters before the last occurrence of a specified delimiter removed. The delimiter may be removed as well.
            </summary>
            <param name="source">This string instance.</param>
            <param name="delimiter">All characters before the last occurrence of this delimiter will be removed.</param>
            <param name="removeDelimiter">Indicating whether the delimiter is also removed.</param>
            <returns>The string with all characters before the last occurrence of the delimiter removed. The delimiter may be removed as well.</returns>
        </member>
        <member name="M:System.StringEx.RemoveBefore(System.String,System.String,System.Boolean,System.Boolean@)">
            <summary>
            Returns a copy of the current string with all characters before the first occurrence of a specified delimiter removed. The delimiter may be removed as well.
            </summary>
            <param name="source">This string instance.</param>
            <param name="delimiter">All characters before the first occurrence of this delimiter will be removed.</param>
            <param name="removeDelimiter">Indicating whether the delimiter is also removed.</param>
            <param name="succeeded">Gets a value indicating whether the delimiter was found.</param>
            <returns>The string with all characters before the first occurrence of the delimiter removed. The delimiter may be removed as well.</returns>
        </member>
        <member name="M:System.StringEx.RemoveBeforeLast(System.String,System.String,System.Boolean,System.Boolean@)">
            <summary>
            Returns a copy of the current string with all characters before the last occurrence of a specified delimiter removed. The delimiter may be removed as well.
            </summary>
            <param name="source">This string instance.</param>
            <param name="delimiter">All characters before the last occurrence of this delimiter will be removed.</param>
            <param name="removeDelimiter">Indicating whether the delimiter is also removed.</param>
            <param name="succeeded">Gets a value indicating whether the delimiter was found.</param>
            <returns>The string with all characters before the last occurrence of the delimiter removed. The delimiter may be removed as well.</returns>
        </member>
        <member name="M:System.StringEx.RemoveBefore(System.String,System.String,System.Boolean)">
            <summary>
            Returns a copy of the current string with all characters before the first occurrence of a specified delimiter removed. The delimiter may be removed as well.
            </summary>
            <param name="source">This string instance.</param>
            <param name="delimiter">All characters before the first occurrence of this delimiter will be removed.</param>
            <param name="removeDelimiter">Indicating whether the delimiter is also removed.</param>
            <returns>The string with all characters before the first occurrence of the delimiter removed. The delimiter may be removed as well.</returns>
        </member>
        <member name="M:System.StringEx.RemoveBeforeLast(System.String,System.String,System.Boolean)">
            <summary>
            Returns a copy of the current string with all characters before the last occurrence of a specified delimiter removed. The delimiter may be removed as well.
            </summary>
            <param name="source">This string instance.</param>
            <param name="delimiter">All characters before the last occurrence of this delimiter will be removed.</param>
            <param name="removeDelimiter">Indicating whether the delimiter is also removed.</param>
            <returns>The string with all characters before the last occurrence of the delimiter removed. The delimiter may be removed as well.</returns>
        </member>
        <member name="M:System.StringEx.RemoveBefore(System.String,System.Collections.Generic.IList{System.String},System.Boolean,System.Boolean@)">
            <summary>
            Returns a copy of the current string with all characters before the first occurrence of any of the specified delimiters. 
            The matched delimiter may be removed as well.
            </summary>
            <param name="source">This string instance.</param>
            <param name="delimiters">All characters before the first occurrence of any of these delimiters will be removed.</param>
            <param name="removeDelimiter">Indicating whether the delimiter is also removed.</param>
            <param name="succeeded">Gets a value indicating whether at least one of the specified delimiters was found.</param>
            <returns>The string with all characters before the first occurrence of any of the delimiters removed. The matched delimiter may be removed as well.</returns>
        </member>
        <member name="M:System.StringEx.RemoveBeforeLast(System.String,System.Collections.Generic.IList{System.String},System.Boolean,System.Boolean@)">
            <summary>
            Returns a copy of the current string with all characters before the last occurrence of any of the specified delimiters. 
            The matched delimiter may be removed as well.
            </summary>
            <param name="source">This string instance.</param>
            <param name="delimiters">All characters before the last occurrence of any of these delimiters will be removed.</param>
            <param name="removeDelimiter">Indicating whether the delimiter is also removed.</param>
            <param name="succeeded">Gets a value indicating whether at least one of the specified delimiters was found.</param>
            <returns>The string with all characters before the last occurrence of any of the delimiters removed. The matched delimiter may be removed as well.</returns>
        </member>
        <member name="M:System.StringEx.RemoveBefore(System.String,System.Collections.Generic.IList{System.String},System.Boolean)">
            <summary>
            Returns a copy of the current string with all characters before the first occurrence of any of the specified delimiters. 
            The matched delimiter may be removed as well.
            </summary>
            <param name="source">This string instance.</param>
            <param name="delimiters">All characters before the first occurrence of any of these delimiters will be removed.</param>
            <param name="removeDelimiter">Indicating whether the delimiter is also removed.</param>
            <returns>The string with all characters before the first occurrence of any of the delimiters removed. The matched delimiter may be removed as well.</returns>
        </member>
        <member name="M:System.StringEx.RemoveBeforeLast(System.String,System.Collections.Generic.IList{System.String},System.Boolean)">
            <summary>
            Returns a copy of the current string with all characters before the last occurrence of any of the specified delimiters. 
            The matched delimiter may be removed as well.
            </summary>
            <param name="source">This string instance.</param>
            <param name="delimiters">All characters before the last occurrence of any of these delimiters will be removed.</param>
            <param name="removeDelimiter">Indicating whether the delimiter is also removed.</param>
            <returns>The string with all characters before the last occurrence of any of the delimiters removed. The matched delimiter may be removed as well.</returns>
        </member>
        <member name="M:System.StringEx.RemoveBefore(System.String,System.Char[],System.Boolean,System.Boolean@)">
            <summary>
            Returns a copy of the current string with all characters before the first occurrence of any of the specified delimiters. 
            The delimiter may be removed as well.
            </summary>
            <param name="source">This string instance.</param>
            <param name="delimiters">All characters before the first occurrence of any of these delimiters will be removed.</param>
            <param name="removeDelimiter">Indicating whether the delimiter is also removed.</param>
            <param name="succeeded">Gets a value indicating whether at least one of the specified delimiters was found.</param>
            <returns>The string with all characters before the first occurrence of any of the delimiters removed. The matched delimiter may be removed as well.</returns>
        </member>
        <member name="M:System.StringEx.RemoveBeforeLast(System.String,System.Char[],System.Boolean,System.Boolean@)">
            <summary>
            Returns a copy of the current string with all characters before the last occurrence of any of the specified delimiters. 
            The delimiter may be removed as well.
            </summary>
            <param name="source">This string instance.</param>
            <param name="delimiters">All characters before the last occurrence of any of these delimiters will be removed.</param>
            <param name="removeDelimiter">Indicating whether the delimiter is also removed.</param>
            <param name="succeeded">Gets a value indicating whether at least one of the specified delimiters was found.</param>
            <returns>The string with all characters before the last occurrence of any of the delimiters removed. The matched delimiter may be removed as well.</returns>
        </member>
        <member name="M:System.StringEx.RemoveBefore(System.String,System.Char[],System.Boolean)">
            <summary>
            Returns a copy of the current string with all characters before the first occurrence of any of the specified delimiters. 
            The matched delimiter may be removed as well.
            </summary>
            <param name="source">This string instance.</param>
            <param name="delimiters">All characters before the first occurrence of any of these delimiters will be removed.</param>
            <param name="removeDelimiter">Indicating whether the delimiter is also removed.</param>
            <returns>The string with all characters before the first occurrence of any of the delimiters removed. The matched delimiter may be removed as well.</returns>
        </member>
        <member name="M:System.StringEx.RemoveBeforeLast(System.String,System.Char[],System.Boolean)">
            <summary>
            Returns a copy of the current string with all characters before the last occurrence of any of the specified delimiters. 
            The matched delimiter may be removed as well.
            </summary>
            <param name="source">This string instance.</param>
            <param name="delimiters">All characters before the last occurrence of any of these delimiters will be removed.</param>
            <param name="removeDelimiter">Indicating whether the delimiter is also removed.</param>
            <returns>The string with all characters before the last occurrence of any of the delimiters removed. The matched delimiter may be removed as well.</returns>
        </member>
        <member name="M:System.StringEx.OnlyDigits(System.String)">
            <summary>
            Gets a value indicating whether this string instance contains only ASCII digits (namely 0-9).
            </summary>
            <param name="str">This string instance.</param>
            <returns><c>true</c> if this string instance contains only ASCII digits; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.OnlyASCIILettersAndDigits(System.String)">
            <summary>
            Gets a value indicating whether this string instance contains only ASCII letters and digits (namely a-z, A-Z, 0-9).
            </summary>
            <param name="str">This string instance.</param>
            <returns><c>true</c> if this string instance contains only ASCII letters and digits; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.OnlyBigASCIILetters(System.String)">
            <summary>
            Gets a value indicating whether this string instance contains only big ASCII letters (namely A-Z).
            </summary>
            <param name="str">The string.</param>
            <returns><c>true</c> if this string instance contains only big ASCII letters; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.NoBigASCIILetters(System.String)">
            <summary>
            Gets a value indicating whether this string instance contains no big ASCII letters (namely no A-Z).
            </summary>
            <param name="str">The string.</param>
            <returns><c>true</c> if this string instance contains no big ASCII letters; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.OnlySmallASCIILetters(System.String)">
            <summary>
            Gets a value indicating whether this string instance contains only small ASCII letters (namely a-z).
            </summary>
            <param name="str">The string.</param>
            <returns><c>true</c> if this string instance contains only small ASCII letters; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.NoSmallASCIILetters(System.String)">
            <summary>
            Gets a value indicating whether this string instance contains no small ASCII letters (namely no a-z).
            </summary>
            <param name="str">The string.</param>
            <returns><c>true</c> if this string instance contains no small ASCII letters; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.OnlyASCIIs(System.String)">
            <summary>
            Gets a value indicating whether this string instance contains only ASCII characters. Any character represented by integer larger than 255 is a non-ASCII character.
            </summary>
            <param name="str">This string instance.</param>
            <returns><c>true</c> if this string instance contains only ASCII chars; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.OnlyLettersAndDigits(System.String)">
            <summary>
            Gets a value indicating whether this string instance contains only letters and digits. 
            Whether a character is a letter or a number is determined by char.IsLetter and char.IsDigit methods.
            </summary>
            <param name="str">This string instance.</param>
            <returns><c>true</c> if this string instance contains only letters and digits; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Returns a value indicating whether the specified string <paramref name="value"/> occurs within this string. 
            A parameter specifies options for string comparison.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The string to seek.</param>
            <param name="comparisonType">Specifies how strings are compared.</param>
            <returns><c>true</c> if the <paramref name="value"/> parameter occurs within this string, or if value is the empty string (""); otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.Contains(System.String,System.String,System.Int32,System.Boolean,System.StringComparison)">
            <summary>
            Gets a value indicating whether the specified value occurs in this string instance after 
            (or before, determined by <paramref name="fromBeginningToEnd"/>) the specified zero-based position. 
            This method allows you to set search direction and comparison options.
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The string to seek.</param>
            <param name="startIndex">Indicating the zero-based position where the search starts. 
            <para>Use -1 to indicate the default position. 
            If <paramref name="fromBeginningToEnd"/> is set true, the default position is 0; 
            otherwise, the default position is the end of this string instance.</para></param>
            <param name="comparisonType">Specifies the rules of search.</param>
            <param name="fromBeginningToEnd">Specifies the search direction. 
            If this parameter is set true, the search starts at <paramref name="startIndex"/> and ends at the end of this string instance; 
            otherwise, the search starts at <paramref name="startIndex"/> and proceeds toward the beginning of this string instance.</param>
            <returns><c>true</c> if the target value occurs in this string instance after 
            (or before, determined by <paramref name="fromBeginningToEnd"/>) the specified position; otherwise, false</returns>
        </member>
        <member name="M:System.StringEx.ContainsAll(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether this string instance contains all the specified strings.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The strings to seek.</param>
            <returns><c>true</c> if this string contains all the specified strings; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.ContainsAll(System.String,System.String[])">
            <summary>
            Determines whether this string instance contains all the specified strings.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The strings to seek.</param>
            <returns><c>true</c> if this string contains all the specified strings; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.ContainsAll(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Determines whether this string instance contains all the specified strings. The search starts at the specified zero-based position.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The strings to seek.</param>
            <param name="startIndex">Indicating the zero-based position where the search starts.</param>
            <returns><c>true</c> if this string contains all the specified strings; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.ContainsAllSequentially(System.String,System.Collections.Generic.IList{System.String},System.Int32)">
            <summary>
            Determines whether this string instance contains all the specified strings sequentially.
            <para>** The difference between this method and ContainsAll is how the target values should occur. 
            For example, string "ab, ef, cd" contains "ab", "cd" and "ef" but does not contain "ab", "cd" and "ef" sequentially.</para>
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The strings to seek.</param>
            <param name="startIndex">Indicating the zero-based position where the search starts.</param>
            <returns><c>true</c> if this string contains all the specified strings sequentially; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.ContainsAllSequentially(System.String,System.String[])">
            <summary>
            Determines whether this string instance contains all the specified strings sequentially.
            <para>** The difference between this method and ContainsAll is how the target values should occur. 
            For example, string "ab, ef, cd" contains "ab", "cd" and "ef" but does not contain "ab", "cd" and "ef" sequentially.</para>
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The strings to seek.</param>
            <param name="startIndex">Indicating the zero-based position where the search starts.</param>
            <returns><c>true</c> if this string contains all the specified strings sequentially; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.ContainsAny(System.String,System.Collections.Generic.IEnumerable{System.String},System.StringComparison)">
            <summary>
            Determines whether this string instance contains any of the specified strings.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The strings to seek.</param>
            <param name="comparisonType">Specifies how strings are compared.</param>
            <returns><c>true</c> if this string contains any of the specified strings; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.ContainsAny(System.String,System.String[])">
            <summary>
            Determines whether this string instance contains any of the specified strings. 
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The strings to seek.</param>
            <returns><c>true</c> if this string contains any of the specified strings; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.ContainsAny(System.String,System.String[],System.StringComparison)">
            <summary>
            Determines whether this string instance contains any of the specified strings.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The strings to seek.</param>
            <param name="comparisonType">Specifies how strings are compared.</param>
            <returns><c>true</c> if this string contains any of the specified strings; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.ContainsAny(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Determines whether this string instance contains any of the specified strings. The search starts at the specified zero-based position.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The strings to seek.</param>
            <param name="startIndex">Indicating the zero-based position where the search starts.</param>
            <returns><c>true</c> if this string contains any of the specified strings after the specified position; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.ContainsByOption(System.String,System.StringSeekOption)">
            <summary>
            Determines whether this string instance 
            contains any/all/the first one/the last one of the strings specified in a System.StringSeekOption object. 
            </summary>
            <param name="str">This string instance.</param>
            <param name="option">Indicating the substring to search, the strings to seek and search mode.</param>
            <returns><c>true</c> if the search succeeds; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.Concat(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Concates the current sequence of strings into a single string.
            </summary>
            <param name="collection">This sequence of strings.</param>
            <returns>The concatenation result of the current string sequence.</returns>
        </member>
        <member name="M:System.StringEx.Concat(System.Collections.Generic.IEnumerable{System.String},System.Char)">
            <summary>
            Concates the current sequence of strings into a single string.
            </summary>
            <param name="collection">This sequence of strings.</param>
            <param name="connector">A Unicode character that links all strings in the current sequence together. 
            For example, concating string array {"ab", "cd", "ef"} with connector ',' returns "ab,cd,ef".</param>
            <returns>The concatenation result of the current string sequence.</returns>
        </member>
        <member name="M:System.StringEx.Concat(System.Collections.Generic.IList{System.String},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Concatenates this string array/list to a single System.String instance.
            </summary>
            <param name="array">The string array to concatenate.</param>
            <param name="multiline"><c>true</c> if a new line should be created for each instance in the string array to concatenate; otherwise, <c>false</c>.</param>
            <param name="trim"><c>true</c> if all leading and ending white-spaces should be removed from each instance of the provided string array when concatenating them; otherwise, <c>false</c>.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be excluded from the concatenation; otherwise, <c>false</c>.</param>
            <returns>The concatenated string.</returns>
        </member>
        <member name="M:System.StringEx.Concat(System.Collections.Generic.IList{System.String},System.Char,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Concatenates this string array/list to a single System.String instance.
            </summary>
            <param name="array">The string array to concatenate.</param>
            <param name="connector">The character that is appended to the end of each string instance in the string array.</param>
            <param name="multiline"><c>true</c> if a new line should be created for each instance in the string array to concatenate; otherwise, <c>false</c>.</param>
            <param name="trim"><c>true</c> if all leading and ending white-spaces should be removed from each instance of the provided string array when concatenating them; otherwise, <c>false</c>.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be excluded from the concatenation; otherwise, <c>false</c>.</param>
            <returns>
            The concatenated string.
            </returns>
        </member>
        <member name="M:System.StringEx.Concat(System.Collections.Generic.IList{System.String},System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Concatenates this string array/list to a single System.String instance.
            </summary>
            <param name="array">The string array to concatenate.</param>
            <param name="connector">The additional string that is appended to the end of each string instance in the string array.</param>
            <param name="multiline"><c>true</c> if a new line should be created for each instance in the string array to concatenate; otherwise, <c>false</c>.</param>
            <param name="trim"><c>true</c> if all leading and ending white-spaces should be removed from each instance of the provided string array when concatenating them; otherwise, <c>false</c>.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be excluded from the concatenation; otherwise, <c>false</c>.</param>
            <returns>
            The concatenated string.
            </returns>
        </member>
        <member name="M:System.StringEx.ConcatAsString(System.Collections.Generic.IList{System.Object},System.Char,System.Boolean,System.Boolean)">
            <summary>
            Concatenates the string representations of each of this object array/list to a single System.String instance.
            </summary>
            <param name="array">This object array/list.</param>
            <param name="connector">The character that is appended to the end of each string instance representing an object.</param>
            <param name="multiline">Sets this <c>true</c> if each sting representation should be followed by a new line; otherwise, <c>false</c>.</param>
            <param name="removeBlankEntry">Indicates whether to remove blank string representations.</param>
            <returns>The concatenated string representations of elements in the object array/list.</returns>
        </member>
        <member name="M:System.StringEx.ConcatAsString(System.Collections.Generic.IList{System.Object},System.Boolean,System.Boolean)">
            <summary>
            Concatenates the string representations of each of this object array/list to a single System.String instance.
            </summary>
            <param name="array">This object array/list.</param>
            <param name="multiline">Sets this <c>true</c> if each sting representation should be followed by a new line; otherwise, <c>false</c>.</param>
            <param name="removeBlankEntry">Indicates whether to remove blank string representations.</param>
            <returns>The concatenated string representations of elements in the object array/list.</returns>
        </member>
        <member name="M:System.StringEx.RetrieveFirst(System.String,System.StringRetrievalOption)">
            <summary>
            Retrieves a substring represented by a System.Substring object from this string instance.
            </summary>
            <param name="source">This string instance.</param>
            <param name="option">Indicating a variety of options for the retrieval operation.</param>
            <returns>The retrieved substring represented by a System.Substring object.</returns>
        </member>
        <member name="M:System.StringEx.RetrieveFirst(System.String,System.Int32,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Retrieves a substring represented by a System.Substring object from this string instance.
            </summary>
            <param name="source">This string instance.</param>
            <param name="startIndex">Indicating the position where the search starts.</param>
            <param name="locator">The search starts after the first occurrence of this string instance after the start position.</param>
            <param name="boundary">The search ends at the first occurrence of this string instance.</param>
            <param name="startIndicator">The start indicator of the target substring.</param>
            <param name="endIndicator">The end indicator of the target substring.</param>
            <param name="includeStartIndicator">Indicating whether the start indicator is included in the substring.</param>
            <param name="includeEndIndicator">Indicating whether the end indicator is included in the substring.</param>
            <returns>The retrieved substring represented by a System.Substring object.</returns>
        </member>
        <member name="M:System.StringEx.Retrieve(System.String,System.Int32,System.String,System.String,System.StringRetrievalOption[])">
            <summary>
            Retrieves substrings represented by System.Substring objects from this string instance.
            The search proceeds accroding to the indicators in the System.RetrieveOption objects.
            <para>This method first retrieves the an array of substrings according to the indicators in the first System.RetrieveOption object.
            If the previous search ends at position p1, 
            then this method continutes to retrieve the second array of substrings 
            according to the indicators in the second System.RetrieveOption object, starting from the postion p1.</para>
            </summary>
            <param name="source">This string instance.</param>
            <param name="startIndex">Indicating the position where the search starts.</param>
            <param name="locator">The search starts after the first occurrence of this string instance after the start position.</param>
            <param name="boundary">The search ends at the first occurrence of this string instance.</param>
            <param name="options">An array of System.RetrieveOption objects that store search indicators.</param>
            <returns>The retrieved substrings represented by System.Substring objects.</returns>
        </member>
        <member name="M:System.StringEx.Retrieve(System.String,System.Int32,System.String,System.String,System.String,System.String[],System.Boolean,System.Boolean)">
            <summary>
            Retrieves substrings represented by System.Substring objects from this string instance.
            </summary>
            <param name="source">This string instance.</param>
            <param name="startIndex">Indicating the position where the search starts.</param>
            <param name="locator">The search starts after the first occurrence of this string instance after the start position.</param>
            <param name="boundary">The search ends at the first occurrence of this string instance.</param>
            <param name="startIndicator">The start indicator of the target substring.</param>
            <param name="endIndicators">The end indicators of the target substring.</param>
            <param name="includeStartIndicator">Indicating whether the start indicator is included in the substring.</param>
            <param name="includeEndIndicators">Indicating whether the end indicators are included in the substrings.</param>
            <returns>The retrieved substrings represented by System.Substring objects.</returns>
        </member>
        <member name="M:System.StringEx.Retrieve(System.String,System.Int32,System.String,System.String,System.String[],System.String[],System.Boolean,System.Boolean)">
            <summary>
            Retrieves substrings represented by System.Substring objects from this string instance.
            </summary>
            <param name="source">This string instance.</param>
            <param name="startIndex">Indicating the position where the search starts.</param>
            <param name="locator">The search starts after the first occurrence of this string instance after the start position.</param>
            <param name="boundary">The search ends at the first occurrence of this string instance.</param>
            <param name="startIndicators">The start indicators of the target substring.</param>
            <param name="endIndicators">The end indicators of the target substring.</param>
            <param name="includeStartIndicators">Indicating whether the start indicators are included in the substrings.</param>
            <param name="includeEndIndicators">Indicating whether the end indicators are included in the substrings.</param>
            <returns>The retrieved substrings represented by System.Substring objects.</returns>
        </member>
        <member name="M:System.StringEx.Retrieve(System.String,System.Int32,System.String,System.String,System.String[],System.String,System.Boolean,System.Boolean)">
            <summary>
            Retrieves substrings represented by System.Substring objects from this string instance.
            </summary>
            <param name="source">This string instance.</param>
            <param name="startIndex">Indicating the position where the search starts.</param>
            <param name="locator">The search starts after the first occurrence of this string instance after the start position.</param>
            <param name="boundary">The search ends at the first occurrence of this string instance.</param>
            <param name="startIndicators">The start indicators of the target substring.</param>
            <param name="endIndicator">The end indicator of the target substring.</param>
            <param name="includeStartIndicator">Indicating whether the start indicator is included in the substring.</param>
            <param name="includeEndIndicator">Indicating whether the end indicator is included in the substring.</param>
            <returns>The retrieved substrings represented by System.Substring objects.</returns>
        </member>
        <member name="M:System.StringEx.Retrieve(System.String,System.Int32,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Retrieves substrings represented by System.Substring objects from this string instance.
            </summary>
            <param name="source">This string instance.</param>
            <param name="startIndex">Indicating the position where the search starts.</param>
            <param name="locator">The search starts after the first occurrence of this string instance after the start position.</param>
            <param name="boundary">The search ends at the first occurrence of this string instance.</param>
            <param name="startIndicator">The start indicator of the target substring.</param>
            <param name="endIndicator">The end indicator of the target substring.</param>
            <param name="includeStartIndicator">Indicating whether the start indicator is included in the substring.</param>
            <param name="includeEndIndicator">Indicating whether the end indicator is included in the substring.</param>
            <returns>The retrieved substrings represented by System.Substring objects.</returns>
        </member>
        <member name="M:System.StringEx.IndexOfByOption(System.String,System.StringSeekOption)">
            <summary>
            Reports the first occurrence's index of any/all/the first one/the last one of the target strings specified 
            in the System.StringSeekOption object within a specified segment of this string instance.
            </summary>
            <param name="str">This string instance.</param>
            <param name="option">Indicating the segment to search, the target string and the search mode.</param>
            <returns>A System.StringSearchResult object that stores the search result; 
            null if the search fails.</returns>
        </member>
        <member name="M:System.StringEx.IndexOfAll(System.String,System.Collections.Generic.IList{System.String},System.IndexOfAllMode,System.Int32)">
            <summary>
            Reports the indexes of the first occurrences of several specified strings in this string instance.
            </summary>
            <param name="str">This string instance.</param>
            <param name="values">The strings to seek.</param>
            <param name="mode">Indicating search mode. 
            In the default sequential mode, the next search starts at the position where the previous search ends.</param>
            <para>For example, if we search string "Visual Microsoft Visual Studio" for "Microsoft" and "Visual", 
            in normal mode the result is 7 and 0 while in sequential mode the result is 7 and 17.</para>
            <param name="startIndex">Indicating the position where the search starts.</param>
            <returns>An array of integers indicating the indexes of occurrences of all specified strings.</returns>
        </member>
        <member name="M:System.StringEx.ToDateTimeArray(System.String,System.Char)">
            <summary>
            Converts the string representation of a sequence of System.DateTime values delimited by <paramref name="separator"/> to equivalent System.DateTime objects.
            For example, input "11/3/2012, 07/08/1997, 01/15/2013" with comma ',' as the separator will return a System.DateTime array {11/3/2012, 07/08/1997, 01/15/2013}.
            </summary>
            <param name="str">The string representing time.</param>
            <param name="separator">The character used to separate time representations.</param>
            <returns>An array System.DateTime objects.</returns>
        </member>
        <member name="M:System.StringEx.ToByteArray(System.String,System.Char)">
            <summary>
            Converts the string representation of byte numbers delimited by <paramref name="separator"/> to equivalent 8-bit unsigned integer array.
            For example, input "1, 2, 3" with comma ',' as the separator will return a 8-bit integer array 1, 2, 3.
            </summary>
            <param name="str">The string representing byte numbers.</param>
            <param name="separator">The character used to separate numbers.</param>
            <returns>An array of 8-bit unsigned integers.</returns>
        </member>
        <member name="M:System.StringEx.ToSByteArray(System.String,System.Char)">
            <summary>
            Converts the string representation of byte numbers delimited by <paramref name="separator"/> to equivalent 8-bit integer array.
            For example, input "1, 2, -3" with comma ',' as the separator will return a 8-bit integer array 1, 2, -3.
            </summary>
            <param name="str">The string representing byte numbers.</param>
            <param name="separator">The character used to separate numbers.</param>
            <returns>An array of 8-bit signed integers.</returns>
        </member>
        <member name="M:System.StringEx.ToInt64Array(System.String,System.Char)">
            <summary>
            Converts the string representation of numbers delimited by <pararef name="separator" /> to equivalent 64-bit integer array.
            For example, input "100, 200, -300" with comma ',' as the separator will return a 64-bit integer array { 100, 200, -300 }.
            </summary>
            <param name="str">The string representing 64-bit numbers.</param>
            <param name="separator">The character used to separate numbers.</param>
            <returns>An array of 64-bit integers.</returns>
        </member>
        <member name="M:System.StringEx.ToInt64Array(System.String[])">
            <summary>
            Converts an array of strings to an array of equivalent 64-bit integers.
            </summary>
            <param name="strs">The strings to convert.</param>
            <returns>An array of 64-bit integers.</returns>
        </member>
        <member name="M:System.StringEx.TryInt64Array(System.String,System.Char)">
            <summary>
            Tries to convert the string representation of numbers delimited by <pararef name="separator" /> to equivalent 64-bit integer array.
            For example, input "100, 200, -300" with comma ',' as the separator will return a 32-bit integer array { 100, 200, -300 }.
            </summary>
            <param name="str">The string representing 64-bit numbers.</param>
            <param name="separator">The character used to separate numbers.</param>
            <returns>An array of 64-bit integers if the conversion is successful; or <c>null</c> if the conversion failed.</returns>
        </member>
        <member name="M:System.StringEx.ToInt32Array(System.String)">
            <summary>
            Converts the string representation of numbers delimited by white spaces to equivalent 32-bit integer array.
            For example, input "100 200 -300" will return a 32-bit integer array { 100, 200, -300 }.
            </summary>
            <param name="str">The string representing 32-bit numbers.</param>
            <returns>An array of 32-bit integers.</returns>
        </member>
        <member name="M:System.StringEx.ToInt32Array(System.String[])">
            <summary>
            Converts an array of strings to an array of equivalent 32-bit integers.
            </summary>
            <param name="strs">The strings to convert.</param>
            <returns>An array of 32-bit integers.</returns>
        </member>
        <member name="M:System.StringEx.TryInt32Array(System.String)">
            <summary>
            Tries to convert the string representation of numbers delimited by white spaces to equivalent 32-bit integer array.
            For example, input "100 200 -300" will return a 32-bit integer array { 100, 200, -300 }.
            </summary>
            <param name="str">The string representing 32-bit numbers.</param>
            <returns>An array of 32-bit integers if the conversion is successful; or <c>null</c> if the conversion failed.</returns>
        </member>
        <member name="M:System.StringEx.ToInt32Array(System.String,System.Char)">
            <summary>
            Converts the string representation of numbers delimited by <paramref name="separator" /> to equivalent 32-bit integer array.
            For example, input "100, 200, -300" with comma ',' as the separator will return a 32-bit integer array { 100, 200, -300 }.
            </summary>
            <param name="str">The string representing 32-bit numbers.</param>
            <param name="separator">The character used to separate numbers.</param>
            <returns>An array of 32-bit integers.</returns>
        </member>
        <member name="M:System.StringEx.TryInt32Array(System.String,System.Char)">
            <summary>
            Tries to convert the string representation of numbers delimited by <paramref name="separator" /> to equivalent 32-bit integer array.
            For example, input "100, 200, -300" with comma ',' as the separator will return a 32-bit integer array { 100, 200, -300 }.
            </summary>
            <param name="str">The string representing 32-bit numbers.</param>
            <param name="separator">The character used to separate numbers.</param>
            <returns>An array of 32-bit integers if the conversion is successful; or <c>null</c> if the conversion failed.</returns>
        </member>
        <member name="M:System.StringEx.ToDoubleArray(System.String,System.Char)">
            <summary>
            Converts the string representation of numbers delimited by <pararef name="separator" /> to equivalent System.Double array.
            For example, input "1.035, 2.046, 30.322" with comma ',' as the separator will return a double-precision floating-point number 1.035, 2.046, 30.322.
            </summary>
            <param name="str">The string representation of double-precision floating-point numbers.</param>
            <param name="separator">The character used to separate numbers.</param>
            <returns>A System.Double array.</returns>
        </member>
        <member name="M:System.StringEx.ToSingleArray(System.String,System.Char)">
            <summary>
            Converts the string representation of numbers delimited by <pararef name="separator" /> to equivalent System.Single array.
            For example, input "1.03, 2.04, 30.3" with comma ',' as the separator will return a single-precision floating-point number 1.03, 2.04, 30.3.
            </summary>
            <param name="str">The string representation of single-precision floating-point numbers.</param>
            <param name="separator">The character used to separate numbers.</param>
            <returns>A System.Single array.</returns>
        </member>
        <member name="M:System.StringEx.ToInt16Array(System.String,System.Char)">
            <summary>
            Converts the string representation of numbers delimited by <pararef name="separator" /> to equivalent 16-bit integer array.
            For example, input "100, 200, -300" with comma ',' as the separator will return a 16-bit integer array { 100, 200, -300 }.
            </summary>
            <param name="str">The string representing 16-bit numbers.</param>
            <param name="separator">The character used to separate numbers.</param>
            <returns>An array of 16-bit integers.</returns>
        </member>
        <member name="M:System.StringEx.TryInt16Array(System.String,System.Char)">
            <summary>
            Tries to convert the string representation of numbers delimited by <pararef name="separator" /> to equivalent 16-bit integer array.
            For example, input "100, 200, -300" with comma ',' as the separator will return a 16-bit integer array { 100, 200, -300 }.
            </summary>
            <param name="str">The string representing 16-bit numbers.</param>
            <param name="separator">The character used to separate numbers.</param>
            <returns>An array of 16-bit integers if the conversion is successful; or <c>null</c> if the conversion failed.</returns>
        </member>
        <member name="M:System.StringEx.ToUInt64Array(System.String,System.Char)">
            <summary>
            Converts the string representation of numbers delimited by <pararef name="separator" /> to equivalent 64-bit unsigned integer array.
            For example, input "100, 200, 300" with comma ',' as the separator will return a 64-bit unsigned integer array { 100, 200, 300 }.
            </summary>
            <param name="str">The string representing 64-bit unsigned numbers.</param>
            <param name="separator">The character used to separate numbers.</param>
            <returns>An array of 64-bit unsigned integers.</returns>
        </member>
        <member name="M:System.StringEx.ToUInt32Array(System.String,System.Char)">
            <summary>
            Converts the string representation of numbers delimited by <pararef name="separator" /> to equivalent 32-bit unsigned integer array.
            For example, input "100, 200, 300" with comma ',' as the separator will return a 32-bit unsigned integer array { 100, 200, 300 }.
            </summary>
            <param name="str">The string representing 32-bit unsigned numbers.</param>
            <param name="separator">The character used to separate numbers.</param>
            <returns>An array of 32-bit unsigned integers.</returns>
        </member>
        <member name="M:System.StringEx.ToUInt16Array(System.String,System.Char)">
            <summary>
            Converts the string representation of numbers delimited by <pararef name="separator" /> to equivalent 16-bit unsigned integer array.
            For example, input "100, 200, 300" with comma ',' as the separator will return a 16-bit unsigned integer array { 100, 200, 300 }.
            </summary>
            <param name="str">The string representing 16-bit unsigned numbers.</param>
            <param name="separator">The character used to separate numbers.</param>
            <returns>An array of 16-bit unsigned integers.</returns>
        </member>
        <member name="M:System.StringEx.ToBooleanArray(System.String,System.Char)">
            <summary>
            Converts the string representation of boolean values delimited by <pararef name="separator" /> to equivalent bool array.
            For example, input "true, false, true" with comma ',' as the separator will return a Boolean array.
            </summary>
            <param name="str">The string representing bool values.</param>
            <param name="separator">The character used to separate bool values.</param>
            <returns>An array of bool values.</returns>
        </member>
        <member name="M:System.StringEx.Substring(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Retrieves a substring from this string instance. 
            The substring starts at the position before/after the first occurrence of a substring specified by <paramref name="startIndicator"/> 
            and ends at the position before/after the first occurrence of <paramref name="endIndicator"/> following the the first occurrence of <paramref name="startIndicator"/>.
            </summary>
            <param name="str">This string instance.</param>
            <param name="startIndicator">The start indicator used to locate the start position of the substring after the position specified by <paramref name="startIndex"/>. 
            A null reference is allowed to indicate the start position is equal to <paramref name="startIndex"/>.</param>
            <param name="endIndicator">The end indicator used to locate the end position of the substring after the first accurrance of <paramref name="startIndicator"/>. 
            A null reference is allowed to indicate the end position is the end of the current string instance.</param>
            <param name="includeStartIndicator">Indicating whether the start indicator is included in the returned substring.</param>
            <param name="includeEndIndicator">Indicating whether the end indicator is included in the returned substring.</param>
            <param name="startIndex">Indicating the position where the search for both <paramref name="startIndicator"/> and <paramref name="endIndicator"/> starts.</param>
            <returns>A substring of this string instance.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.StringEx.Substring(System.String,System.Char,System.Char,System.Boolean,System.Boolean,System.Int32)" -->
        <member name="M:System.StringEx.Substring(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Retrieves a substring from this string instance. 
            The substring starts at the specified position, and ends at the position before/after the first occurrence of a substring specified by <paramref name="endIndicator"/>.
            </summary>
            <param name="str">This string instance.</param>
            <param name="startIndex">Indicating the position where the returned substring and the search for <paramref name="endIndicator"/> starts.</param>
            <param name="endIndicator">The end indicator used to locate the end position of the desired substring.</param>
            <param name="includeEndIndicator">Indicating whether the end indicator is included in the returned substring.</param>
            <returns>A substring of this string instance.</returns>
        </member>
        <member name="M:System.StringEx.Substring(System.String,System.Int32,System.Char,System.Boolean)">
            <summary>
            Retrieves a substring from this string instance. 
            The substring starts at the specified position, and ends at the position before/after the first occurrence of a character specified by <paramref name="endIndicator"/>.
            </summary>
            <param name="str">This string instance.</param>
            <param name="startIndex">Indicating the position where the returned substring and the search for <paramref name="endIndicator"/> starts.</param>
            <param name="endIndicator">The end indicator used to locate the end position of the desired substring.</param>
            <param name="includeEndIndicator">Indicating whether the end indicator is included in the returned substring.</param>
            <returns>A substring of this string instance.</returns>
        </member>
        <member name="M:System.StringEx.CountOfSubstring(System.String,System.String)">
            <summary>
            Gets the number of occurrences of a specified substring in the current string instance.
            </summary>
            <param name="str">This string isntance.</param>
            <param name="value">The string to seek.</param>
            <returns>The number of occurrences of a specified substring in the current string instance</returns>
        </member>
        <member name="M:System.StringEx.Decorate(System.String,System.Char,System.Int32,System.HorizontalAlignment,System.Int32,System.Boolean)">
            <summary>
            Decorates this string with the repetition of specified characters. 
            <para>For example, decorating "abc" as "--abc---" when using "-" as the decoration character, 
            or as "    abc  " when using a space as the decoration character.</para>
            </summary>
            <param name="str">A System.String object.</param>
            <param name="decorationChar">The decoration character.</param>
            <param name="totalLength">The total length of the string plus the decoration.</param>
            <param name="alignment">The alignment of this string.</param>
            <param name="indent">A positive integer indicates this string moves rightward; a negative integer indicates moving leftward.</param>
            <param name="rightLonger">Indicates whether the decoration at the right side can be longer 
            than the other side when it is not possible to make them even.</param>
            <returns>A string with decoration.</returns>
            <remarks><para>Usage: this method could be useful in console applications or other scenarios to output aligned texts.</para>
            <para>Test: this method has been tested, but is not guaranteed bug-free.</para>
            <para>Future: future versions could use unsafe coding to improve performance.</para></remarks>
        </member>
        <member name="M:System.StringEx.Decorate(System.String,System.Char,System.Char,System.Int32,System.HorizontalAlignment,System.Int32,System.Boolean)">
            <summary>
            Decorates this string with the repetition of specified characters. 
            <para>For example, decorating "abc" as "--abc***" when using "-" as the decoration character at the left side and "*" at the right side, 
            or as "    abc  " when using a space as the decoration character at both sides.</para>
            </summary>
            <param name="str">A System.String object.</param>
            <param name="leftDecorationChar">The decoration character at the left side.</param>
            <param name="rightDecorationChar">The decoration character at the right side.</param>
            <param name="totalLength">The total length of the string plus the decoration.</param>
            <param name="alignment">The alignment of this string.</param>
            <param name="indent">A positive integer indicates this string moves rightward; a negative integer indicates moving leftward.</param>
            <param name="rightLonger">Indicates whether the decoration at the right side can be longer 
            than the other side when it is not possible to make them even.</param>
            <returns>A string with decoration.</returns>
            <remarks><para>Usage: this method could be useful in console applications or other scenarios to output aligned texts.</para>
            <para>Test: this method has been tested, but is not guaranteed bug-free.</para>
            <para>Future: future versions could use unsafe coding to improve performance.</para></remarks>
        </member>
        <member name="M:System.StringEx.InsertSpaceBeforeInitials(System.String,System.Boolean)">
            <summary>
            Inserts a single space before all initials (upper letters) in this string.
            </summary>
            <param name="str">The string instance to operate on.</param>
            <param name="ignoreConsecutiveUpperLetters">Indicates whether to insert only before the first upper letter when consecutive upper letters are found.</param>
            <returns>A string where a space is inserted before all upper letters.</returns>
        </member>
        <member name="M:System.StringEx.InsertBeforeInitials(System.String,System.Char,System.Boolean)">
            <summary>
            Inserts a specified character before all initials (upper letters) in this string.
            </summary>
            <param name="str">The string instance to operate on.</param>
            <param name="insertionChar">The character to insert.</param>
            <param name="ignoreConsecutiveUpperLetters">Indicates whether to insert only before the first upper letter when consecutive upper letters are found.</param>
            <returns>A string where the specified character is inserted before all upper letters.</returns>
        </member>
        <member name="M:System.StringEx.Shorten(System.String,System.Int32,System.String)">
            <summary>
            Cuts short this string instance if it execeeds a given length and then attach it with a tail.
            <para>For a typical example, "Microsoft Visual Studio" is shortened to "Microsoft Visua..." 
            when <paramref name="length"/> is set 15 and <paramref name="tail"/> is set "...".</para>
            </summary>
            <param name="str">This string instance.</param>
            <param name="length">The maximum length of the shortened string.</param>
            <param name="tail">The tail to attach.</param>
            <returns>The shortened string instance.</returns>
            <remarks><para>Test: this method has been tested, but is not guaranteed bug-free.</para></remarks>
        </member>
        <member name="M:System.StringEx.InitUpper(System.String)">
            <summary>
            Returns a copy of this string instance with the first Unicode character converted to its uppercase equivalent.
            </summary>
            <param name="str">This string instance.</param>
            <returns>A copy of the current string instance with the first Unicode character converted to its uppercase equivalent.</returns>
        </member>
        <member name="M:System.StringEx.InitLower(System.String)">
            <summary>
            Returns a copy of this string instance with the first Unicode character converted to its lowercase equivalent.
            </summary>
            <param name="str">This string instance.</param>
            <returns>A copy of the current string instance with the first Unicode character converted to its lowercase equivalent.</returns>
        </member>
        <member name="M:System.StringEx.Reverse(System.String)">
            <summary>
            Returns a copy of the reversed version of this string instance.
            </summary>
            <param name="str">This string instance.</param>
        </member>
        <member name="M:System.StringEx.GetEnumerator(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets an enumerator that supports simple iteration of substrings in this string instance. 
            <para>For example, suppose "&lt;" and "&gt;" are used as the indicators, iterating "&lt;div&gt;abc&lt;/div&gt;" yields 
            "&lt;div&gt;" "&lt;/div&gt;" if indicators are included, and "div" "/div" if indicators are excluded.</para>
            </summary>
            <param name="str">This string instance.</param>
            <param name="startIndicator">The indicator makring the beginning of each substring to iterate.</param>
            <param name="endIndicator">The indicator makring the end of each substring to iterate.</param>
            <param name="includeStartIndicator">Indicates whether the start indicator is included in the retrieved string.</param>
            <param name="includeEndIndicator">Indicates whether the end indicator is included in the retrieved string.</param>
            <returns>An enumerator that supports simple iteration of substrings in this string instance.</returns>
        </member>
        <member name="M:System.StringEx.GetEnumerator(System.String,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Gets an enumerator that supports simple iteration of substrings in this string instance. 
            <para>For example, suppose '&lt;' and '&gt;' are used as the indicators, iterating "&lt;div&gt;abc&lt;/div&gt;" yields 
            "&lt;div&gt;" "&lt;/div&gt;" if indicators are included, and "div" "/div" if indicators are excluded.</para>
            </summary>
            <param name="str">This string instance.</param>
            <param name="startIndicator">The indicator makring the beginning of each substring to iterate.</param>
            <param name="endIndicator">The indicator makring the end of each substring to iterate.</param>
            <param name="includeStartIndicator">Indicates whether the start indicator is included in the retrieved string.</param>
            <param name="includeEndIndicator">Indicates whether the end indicator is included in the retrieved string.</param>
            <returns>An enumerator that supports simple iteration of substrings in this string instance.</returns>
        </member>
        <member name="M:System.StringEx.GetEnumerator(System.String,System.String,System.Boolean)">
            <summary>
            Gets an enumerator that supports simple iteration of substrings in this string instance. 
            <para>For example, suppose ",," is used as the separator, iterating "ab,,cd,,ef" yields 
            "ab,," "cd,," "ef" if the separator is included, and "ab" "cd" "ef" if the separator is excluded.</para>
            </summary>
            <param name="str">This string instance.</param>
            <param name="separator">The separator that separates each substring.</param>
            <param name="includeSeparator">Indicates whether the separator is included in the retrieved string.</param>
            <returns>An enumerator that supports simple iteration of substrings in this string instance.</returns>
        </member>
        <member name="M:System.StringEx.GetEnumerator(System.String,System.Char,System.Boolean)">
            <summary>
            Gets an enumerator that supports simple iteration of substrings in this string instance. 
            <para>For example, suppose ',' is used as the separator, iterating "ab,cd,ef" yields 
            "ab," "cd," "ef" if the separator is included, and "ab" "cd" "ef" if the separator is excluded.</para>
            </summary>
            <param name="str">This string instance.</param>
            <param name="separator">The separator that separates each substring.</param>
            <param name="includeSeparator">Indicates whether the separator is included in the retrieved string.</param>
            <returns>An enumerator that supports simple iteration of substrings in this string instance.</returns>
        </member>
        <member name="M:System.StringEx.Repeat(System.String,System.Int32)">
            <summary>
            Returns a new string that only contains a specified number of continuous occurrences of this string instance.
            </summary>
            <param name="str">This string instance.</param>
            <param name="repeat">Specifies the number of continuous occurrences.</param>
            <returns>
            A new string that only contains continuous occurrences of this string instance.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if <paramref name="repeat"/> is assigned a non-positive value.</exception>
        </member>
        <member name="M:System.StringEx.HexEncode(System.String,System.Text.Encoding,System.Char)">
            <summary>
            Encodes non-ASCII chars in this string by their equivalent hex representations.
            <para>** Particularly used in translating url containing non-ASCII chars to an ASCII url.
            For example, "http://www.hudong.com/wiki/电子垃圾" will be translated to "http://www.hudong.com/wiki/%E7%94%B5%E5%AD%90%E5%9E%83%E5%9C%BE".</para>
            </summary>
            <param name="source">This string instance.</param>
            <param name="encoding">Specifies the encoding for encoding the non-ASCII chars.</param>
            <param name="byteIndicator">Specifies the char before each hex representation of a byte value.</param>
            <returns>A copy of the original string with all non-ASCII chars and the chars in the exception list converted to hex representations.</returns>
        </member>
        <member name="M:System.StringEx.HexEncode(System.String,System.Text.Encoding,System.Char[],System.Char)">
            <summary>
            Encodes non-ASCII chars in this string by their equivalent hex representations.
            For example, "http://www.hudong.com/wiki/电子垃圾" will be translated to "http://www.hudong.com/wiki/%E7%94%B5%E5%AD%90%E5%9E%83%E5%9C%BE".
            <para>** Particularly used in translating url containing non-ASCII chars to an ASCII url.</para>
            </summary>
            <param name="source">This string instance.</param>
            <param name="encoding">Specifies the encoding for encoding the non-ASCII chars.</param>
            <param name="exceptionList">Specifies the ASCII chars that are also converted to hex representations.</param>
            <param name="byteIndicator">Specifies the char before each hex representation of a byte value.</param>
            <returns>A copy of the original string with all non-ASCII chars and the chars in the exception list converted to hex representations.</returns>
        </member>
        <member name="M:System.StringEx.HexDecode(System.String,System.Text.Encoding,System.Char)">
            <summary>
            Decodes hex representations in this string to their equivalent chars.
            For example, "http://www.hudong.com/wiki/%E7%94%B5%E5%AD%90%E5%9E%83%E5%9C%BE" will be translated to "http://www.hudong.com/wiki/电子垃圾".
            </summary>
            <param name="source">This string instance.</param>
            <param name="encoding">Specifies the encoding of the non-ASCII chars.</param>
            <param name="byteIndicator">Specifies the char before each hex representation of a byte value.</param>
            <returns>A copy of the original string with hex representations decoded to their equivalent chars.</returns>
        </member>
        <member name="M:System.StringEx.GetIntegers(System.String,System.Int32)">
            <summary>
            Gets all integers consisting of ASCII digits in this string instance.
            <para>For example, the integers in string "There are 100 students and 5 classes in this school." are 100 and 5.</para>
            </summary>
            <param name="str">This string instance.</param>
            <param name="startIndex">Indicating where the search starts.</param>
            <returns>All integers consisting of ASCII digits in this string instance, if found; otherwise, an empty array.</returns>
        </member>
        <member name="M:System.StringEx.GetInteger(System.String,System.Int32)">
            <summary>
            Gets the first integer consisting of ASCII digits in this string instance.
            <para>For example, the first integer in string "There are 100 students and 5 classes in this school." is 100.</para>
            </summary>
            <param name="str">This string instance.</param>
            <param name="startIndex">Indicating the position where the search starts.</param>
            <returns>The first integer in this string instance. If no integer is found, a null reference will be returned.</returns>
        </member>
        <member name="M:System.StringEx.EndsWith(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Determines if a substring of the current string instance 
            ends with the target string specified by <paramref name="value"/>.
            The method performs an ordinal comparison between strings.
            </summary>
            <param name="source">This string instance.</param>
            <param name="endIndex">The end position of the substring.</param>
            <param name="value">The string instance to compare.</param>
            <param name="ignoreCase">Indicates whether the comparison is case-sensitive.</param>
            <returns><c>true</c> if the specified substring ends with the target string; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.EndsWith(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Determines if a substring of the current string instance
            ends with the target string (or a substring of this target string) specified by <paramref name="target" />.
            The method performs an ordinal comparison between strings.
            </summary>
            <param name="source">This string instance.</param>
            <param name="endIndex">The end position of the substring of the current string instance.</param>
            <param name="target">The target string instance to compare.</param>
            <param name="targetStartIndex">The start position of the substring of the target string instance.</param>
            <param name="targetLength">The length of the substring of the target string specified by <paramref name="target"/>.</param>
            <param name="ignoreCase">Indicates whether the comparison is case-sensitive.</param>
            <returns>
              <c>true</c> if the specified substring ends with the target substring (or a substring of this target string); otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.StringEx.EndsWith(System.String,System.Int32,System.String,System.Int32,System.Boolean)">
            <summary>
            Determines if a substring of the current string instance
            ends with the target string (or a substring of this target string) specified by <paramref name="target" />.
            The method performs an ordinal comparison between strings.
            </summary>
            <param name="source">This string instance.</param>
            <param name="endIndex">The end position of the substring of the current string instance.</param>
            <param name="target">The target string instance to compare.</param>
            <param name="targetStartIndex">The start position of the substring of the target string instance.</param>
            <param name="ignoreCase">Indicates whether the comparison is case-sensitive.</param>
            <returns>
              <c>true</c> if the specified substring ends with the target substring (or a substring of this target string); otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.StringEx.EndsWith(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
            <summary>
            Determines if a substring of the current string instance
            ends with the target string (or a substring of this target string) specified by <paramref name="target" />.
            </summary>
            <param name="source">This string instance.</param>
            <param name="endIndex">The end position of the substring of the current string instance.</param>
            <param name="target">The target string instance to compare.</param>
            <param name="targetStartIndex">The start position of the substring of the target string instance.</param>
            <param name="targetLength">The length of the substring of the target string specified by <paramref name="target" />.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the comparison.</param>
            <returns>
              <c>true</c> if the specified substring ends with the target substring (or a substring of this target string); otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Occurs when at least one of <paramref name="endIndex"/>, <paramref name="targetStartIndex"/> and <paramref name="targetLength"/> is assigned an invalid value.
            </exception>
            <exception cref="T:System.ArgumentNullException">Occurs when the argument <paramref name="target"/> is <c>null</c>.</exception>
        </member>
        <member name="M:System.StringEx.EndsWith(System.String,System.Int32,System.String,System.Int32,System.StringComparison)">
            <summary>
            Determines if a substring of the current string instance
            ends with the target string (or a substring of this target string) specified by <paramref name="target" />.
            </summary>
            <param name="source">This string instance.</param>
            <param name="endIndex">The end position of the substring of the current string instance.</param>
            <param name="target">The target string instance to compare.</param>
            <param name="targetStartIndex">The start position of the substring of the target string instance.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the comparison.</param>
            <returns>
              <c>true</c> if the specified substring ends with the target substring (or a substring of this target string); otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Occurs when either <paramref name="endIndex"/> or <paramref name="targetStartIndex"/> is assigned an invalid value.
            </exception>
        </member>
        <member name="M:System.StringEx.EndsWith(System.String,System.Int32,System.String,System.StringComparison)">
            <summary>
            Determines if a substring of the current string instance ends with the target string specified by <paramref name="value" />.
            </summary>
            <param name="source">This string instance.</param>
            <param name="endIndex">The end position of the substring.</param>
            <param name="value">The string instance to compare.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the comparison.</param>
            <returns>
              <c>true</c> if the specified substring ends with the target string; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when <paramref name="endIndex"/> is assigned an invalid value.</exception>
        </member>
        <member name="M:System.StringEx.EndsWithAny(System.String,System.Collections.Generic.IEnumerable{System.String},System.StringComparison)">
            <summary>
            Determines if the end of this string instance matches any element of the specified string sequence.
            </summary>
            <param name="source">This string instance.</param>
            <param name="values">The sequence of strings to compare.</param>
            <param name="comparisonType">Specifies how the end of this string is compared with strings in the specified sequence.</param>
            <returns><c>true</c> if any of the strings in the sequence matches the end of the current string instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.ReplaceOnSelf(System.String,System.Char[],System.Char)">
            <summary>
            Replaces all occurrences of specified Unicode characters in this instance by another specified Unicode character.
            </summary>
            <param name="str">This string instance.</param>
            <param name="oldChars">The Unicode characters to be replaced.</param>
            <param name="newChar">The Unicode character to replace all occurrences of characters in <paramref name="oldChars"/>.</param>
            <returns>The original string instance with all specified Unicode characters replaced.</returns>
        </member>
        <member name="M:System.StringEx.ReplaceOnSelf(System.String,System.Char,System.Char)">
            <summary>
            Replaces all occurrences of the specified Unicode character in this instance by another specified Unicode character.
            </summary>
            <param name="str">This string instance.</param>
            <param name="oldChars">The Unicode character to be replaced.</param>
            <param name="newChar">The Unicode character to replace all occurrences of <paramref name="oldChar"/>.</param>
            <returns>The original string instance with all specified Unicode characters replaced.</returns>
        </member>
        <member name="M:System.StringEx.InitUpperOnSelf(System.String)">
            <summary>
            Converts the initial Unicode character of this string instance to its uppercase equivalent.
            </summary>
            <param name="str">This string instance.</param>
            <returns>The original string instance with the initial character converted to its uppercase equivalent.</returns>
        </member>
        <member name="M:System.StringEx.InitUpperOnSelfForWords(System.String)">
            <summary>
            Converts the initial Unicode characters of the substrings of this string instance separated by white spaces to their uppercase equivalents.
            </summary>
            <param name="str">This string instance.</param>
            <returns>The original string instance with the initial characters of white-space-separated substrings converted to their uppercase equivalents.</returns>
        </member>
        <member name="M:System.StringEx.NormalizeCasesOnSelfForWords(System.String)">
            <summary>
            Converts the initial Unicode characters of the substrings of this string instance separated by white spaces to their uppercase equivalents, and all other non-whitespace Unicode characters to their lowercase equivalents.
            </summary>
            <param name="str">This string instance.</param>
            <returns>The original string instance with the initial characters of white-space-separated substrings converted to their uppercase equivalents, and all other non-whitespace Unicode characters to their lowercase equivalents.</returns>
        </member>
        <member name="M:System.StringEx.InitLowerOnSelf(System.String)">
            <summary>
            Converts the initial Unicode character of this string instance to its lowercase equivalent.
            </summary>
            <param name="str">This string instance.</param>
            <returns>The original string instance with the initial character converted to its lowercase equivalent.</returns>
        </member>
        <member name="M:System.StringEx.ToUpperOnSelf(System.String)">
            <summary>
            Converts all Unicode characters in this string instance to their uppercase equivalents. The characters without uppercase equivalent will not be converted.
            </summary>
            <param name="str">This string instance.</param>
            <returns>The original string instance with every character converted to their lowercase equivalent.</returns>
        </member>
        <member name="M:System.StringEx.ToLowerOnSelf(System.String)">
            <summary>
            Converts all Unicode characters in this string instance to their lowercase equivalents. The characters without lowercase equivalent will not be converted.
            </summary>
            <param name="str">This string instance.</param>
            <returns>The original string instance with every character converted to their lowercase equivalent.</returns>
        </member>
        <member name="M:System.StringEx.ReverseOnSelf(System.String)">
            <summary>
            Reverses this string instance.
            </summary>
            <param name="str">This string instance.</param>
            <returns>The reversed original string instance.</returns>
        </member>
        <member name="M:System.StringEx.Replace(System.String,System.Char[],System.Char)">
            <summary>
            Returns a new string in which all occurrences of all specified Unicode characters in this instance are replaced with another specified Unicode character.
            </summary>
            <param name="str">This string instance.</param>
            <param name="oldChars">The Unicode characters to be replaced.</param>
            <param name="newChar">The Unicode character to replace all occurrences of characters in <paramref name="oldChars"/>.</param>
            <returns>A string that is equivalent to this instance except that all instances of <paramref name="oldChars"/> are replaced with <paramref name="newChar"/>. 
            If none of <paramref name="oldChars"/> is not found in the current instance, the method returns a duplicate of the current instance. </returns>
        </member>
        <member name="M:System.StringEx.Replace(System.String,System.String,System.String,System.Int32,System.Int32,System.StringComparison)">
            <summary>
            Returns a new string (except the case when no replacements are made and the original string is returned) in which all occurrences of a specified string in the specified searching scope of this instance are replaced with another specified string.
            By default, the case-sensitive rules and the current culture are used to perform the replaces.
            </summary>
            <param name="str">This string instance.</param>
            <param name="oldValue">The string to be replaced.</param>
            <param name="newValue">The string to replace the occurrences of <paramref name="oldValue" />.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">The number of characters to search. The parameter determines the search ending position along with <paramref name="startIndex" />.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <returns>
            A string that is equivalent to the current string except that all instances of <paramref name="oldValue" /> are replaced with <paramref name="newValue" /> in the specified searching scope.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if <paramref name="startIndex" /> or <paramref name="startIndex" /> + <paramref name="length" /> does not indicate a valid position in the string.</exception>
        </member>
        <member name="M:System.StringEx.ReplaceOrdinal(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Returns a new string (except the case when no replacements are made and the original string is returned) in which all occurrences of a specified string in the specified searching scope of this instance are replaced with another specified string.
            The search for substrings uses case-sensitive ordinal rules. Use this method to perform fast and linguistically independent replaces.
            </summary>
            <param name="str">This string instance.</param>
            <param name="oldValue">The string to be replaced.</param>
            <param name="newValue">The string to replace the occurrences of <paramref name="oldValue" />.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">The number of characters to search. The parameter determines the search ending position along with <paramref name="startIndex" />.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <returns>
            A string that is equivalent to the current string except that all instances of <paramref name="oldValue" /> are replaced with <paramref name="newValue" /> in the specified searching scope.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if <paramref name="startIndex" /> or <paramref name="startIndex" /> + <paramref name="length" /> does not indicate a valid position in the string.</exception>
        </member>
        <member name="M:System.StringEx.Replace(System.String,System.String,System.String,System.Int32,System.StringComparison)">
            <summary>
            Returns a new string (except the case when no replacements are made and the original string is returned) in which all occurrences of a specified string in the specified searching scope of this instance are replaced with another specified string.
            By default, the case-sensitive rules and the current culture are used to perform the replaces.
            </summary>
            <param name="str">This string instance.</param>
            <param name="oldValue">The string to be replaced.</param>
            <param name="newValue">The string to replace the occurrences of <paramref name="oldValue" />.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <returns>
            A string that is equivalent to the current string except that all instances of <paramref name="oldValue" /> are replaced with <paramref name="newValue" /> in the specified searching scope.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if <paramref name="startIndex" /> or <paramref name="startIndex" /> + <paramref name="length" /> does not indicate a valid position in the string.</exception>
        </member>
        <member name="M:System.StringEx.ReplaceOrdinal(System.String,System.String,System.String,System.Int32)">
            <summary>
            Returns a new string (except the case when no replacements are made and the original string is returned) in which all occurrences of a specified string in the specified searching scope of this instance are replaced with another specified string.
            The search for substrings uses case-sensitive ordinal rules. Use this method to perform fast and linguistically independent replaces.
            </summary>
            <param name="str">This string instance.</param>
            <param name="oldValue">The string to be replaced.</param>
            <param name="newValue">The string to replace the occurrences of <paramref name="oldValue" />.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <returns>
            A string that is equivalent to the current string except that all instances of <paramref name="oldValue" /> are replaced with <paramref name="newValue" /> in the specified searching scope.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if <paramref name="startIndex" /> or <paramref name="startIndex" /> + <paramref name="length" /> does not indicate a valid position in the string.</exception>
        </member>
        <member name="M:System.StringEx.Replace(System.String,System.String,System.String,System.Int32,System.Int32,System.StringComparison,System.Int32@)">
            <summary>
            Returns a new string (except the case when no replacements are made and the original string is returned) in which all occurrences of a specified string in the specified searching scope of this instance are replaced with another specified string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="oldValue">The string to be replaced.</param>
            <param name="newValue">The string to replace the occurrences of <paramref name="oldValue" />.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">The number of characters to search. The parameter determines the search ending position along with <paramref name="startIndex" />.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <param name="countOfReplacements">Returns the number of replacements that are made.</param>
            <returns>
            A string that is equivalent to the current string except that all instances of <paramref name="oldValue" /> are replaced with <paramref name="newValue" /> in the specified searching scope.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if <paramref name="startIndex" /> or <paramref name="startIndex" /> + <paramref name="length" /> does not indicate a valid position in the string.</exception>
        </member>
        <member name="M:System.StringEx.Replace(System.String,System.String,System.String,System.Int32,System.StringComparison,System.Int32@)">
            <summary>
            Returns a new string (except the case when no replacements are made and the original string is returned) in which all occurrences of a specified string in the specified searching scope of this instance are replaced with another specified string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="oldValue">The string to be replaced.</param>
            <param name="newValue">The string to replace the occurrences of <paramref name="oldValue" />.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <param name="countOfReplacements">Returns the number of replacements that are made.</param>
            <returns>
            A string that is equivalent to the current string except that all instances of <paramref name="oldValue" /> are replaced with <paramref name="newValue" /> in the specified searching scope.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if <paramref name="startIndex" /> or <paramref name="startIndex" /> + <paramref name="length" /> does not indicate a valid position in the string.</exception>
        </member>
        <member name="M:System.StringEx.Replace(System.String,System.String,System.String,System.StringComparison,System.Int32@)">
            <summary>
            Returns a new string (except the case when no replacements are made and the original string is returned) in which all occurrences of a specified string in the specified searching scope of this instance are replaced with another specified string.
            </summary>
            <param name="str">This string instance.</param>
            <param name="oldValue">The string to be replaced.</param>
            <param name="newValue">The string to replace the occurrences of <paramref name="oldValue" />.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <param name="countOfReplacements">Returns the number of replacements that are made.</param>
            <returns>
            A string that is equivalent to the current string except that all instances of <paramref name="oldValue" /> are replaced with <paramref name="newValue" /> in the specified searching scope.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if <paramref name="startIndex" /> or <paramref name="startIndex" /> + <paramref name="length" /> does not indicate a valid position in the string.</exception>
        </member>
        <member name="M:System.StringEx.Replace(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns a new string (except the case when no replacements are made and the original string is returned) in which all occurrences of a specified string in the specified searching scope of this instance are replaced with another specified string.
            The search for substrings uses case-sensitive rules and the current culture.
            </summary>
            <param name="str">This string instance.</param>
            <param name="oldValue">The string to be replaced.</param>
            <param name="newValue">The string to replace the occurrences of <paramref name="oldValue" />.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">The number of characters to search. The parameter determines the search ending position along with <paramref name="startIndex" />.</param>
            <param name="countOfReplacements">Returns the number of replacements that are made.</param>
            <returns>
            A string that is equivalent to the current string except that all instances of <paramref name="oldValue" /> are replaced with <paramref name="newValue" /> in the specified searching scope.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if <paramref name="startIndex" /> or <paramref name="startIndex" /> + <paramref name="length" /> does not indicate a valid position in the string.</exception>
        </member>
        <member name="M:System.StringEx.Replace(System.String,System.String,System.String,System.Int32,System.Int32@)">
            <summary>
            Returns a new string (except the case when no replacements are made and the original string is returned) in which all occurrences of a specified string in the specified searching scope of this instance are replaced with another specified string.
            The search for substrings uses case-sensitive rules and the current culture.
            </summary>
            <param name="str">This string instance.</param>
            <param name="oldValue">The string to be replaced.</param>
            <param name="newValue">The string to replace the occurrences of <paramref name="oldValue" />.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="countOfReplacements">Returns the number of replacements that are made.</param>
            <returns>
            A string that is equivalent to the current string except that all instances of <paramref name="oldValue" /> are replaced with <paramref name="newValue" /> in the specified searching scope.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if <paramref name="startIndex" /> or <paramref name="startIndex" /> + <paramref name="length" /> does not indicate a valid position in the string.</exception>
        </member>
        <member name="M:System.StringEx.Replace(System.String,System.String,System.String,System.Int32@)">
            <summary>
            Returns a new string (except the case when no replacements are made and the original string is returned) in which all occurrences of a specified string in the specified searching scope of this instance are replaced with another specified string.
            The search for substrings uses case-sensitive rules and the current culture.
            </summary>
            <param name="str">This string instance.</param>
            <param name="oldValue">The string to be replaced.</param>
            <param name="newValue">The string to replace the occurrences of <paramref name="oldValue" />.</param>
            <param name="countOfReplacements">Returns the number of replacements that are made.</param>
            <returns>
            A string that is equivalent to the current string except that all instances of <paramref name="oldValue" /> are replaced with <paramref name="newValue" /> in the specified searching scope.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if <paramref name="startIndex" /> or <paramref name="startIndex" /> + <paramref name="length" /> does not indicate a valid position in the string.</exception>
        </member>
        <member name="M:System.StringEx.ReplaceOrdinal(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns a new string (except the case when no replacements are made and the original string is returned) in which all occurrences of a specified string in the specified searching scope of this instance are replaced with another specified string.
            The search for substrings uses case-sensitive ordinal rules. Use this method to perform fast and linguistically independent replaces.
            </summary>
            <param name="str">This string instance.</param>
            <param name="oldValue">The string to be replaced.</param>
            <param name="newValue">The string to replace the occurrences of <paramref name="oldValue" />.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="length">The number of characters to search. The parameter determines the search ending position along with <paramref name="startIndex" />.</param>
            <param name="countOfReplacements">Returns the number of replacements that are made.</param>
            <returns>
            A string that is equivalent to the current string except that all instances of <paramref name="oldValue" /> are replaced with <paramref name="newValue" /> in the specified searching scope.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if <paramref name="startIndex" /> or <paramref name="startIndex" /> + <paramref name="length" /> does not indicate a valid position in the string.</exception>
        </member>
        <member name="M:System.StringEx.ReplaceOrdinal(System.String,System.String,System.String,System.Int32,System.Int32@)">
            <summary>
            Returns a new string (except the case when no replacements are made and the original string is returned) in which all occurrences of a specified string in the specified searching scope of this instance are replaced with another specified string.
            The search for substrings uses case-sensitive ordinal rules. Use this method to perform fast and linguistically independent replaces.
            </summary>
            <param name="str">This string instance.</param>
            <param name="oldValue">The string to be replaced.</param>
            <param name="newValue">The string to replace the occurrences of <paramref name="oldValue" />.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="countOfReplacements">Returns the number of replacements that are made.</param>
            <returns>
            A string that is equivalent to the current string except that all instances of <paramref name="oldValue" /> are replaced with <paramref name="newValue" /> in the specified searching scope.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if <paramref name="startIndex" /> or <paramref name="startIndex" /> + <paramref name="length" /> does not indicate a valid position in the string.</exception>
        </member>
        <member name="M:System.StringEx.ReplaceOrdinal(System.String,System.String,System.String,System.Int32@)">
            <summary>
            Returns a new string (except the case when no replacements are made and the original string is returned) in which all occurrences of a specified string in the specified searching scope of this instance are replaced with another specified string.
            The search for substrings uses case-sensitive ordinal rules. Use this method to perform fast and linguistically independent replaces.
            </summary>
            <param name="str">This string instance.</param>
            <param name="oldValue">The string to be replaced.</param>
            <param name="newValue">The string to replace the occurrences of <paramref name="oldValue" />.</param>
            <param name="countOfReplacements">Returns the number of replacements that are made.</param>
            <returns>
            A string that is equivalent to the current string except that all instances of <paramref name="oldValue" /> are replaced with <paramref name="newValue" /> in the specified searching scope.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if <paramref name="startIndex" /> or <paramref name="startIndex" /> + <paramref name="length" /> does not indicate a valid position in the string.</exception>
        </member>
        <member name="M:System.StringEx.StartsWith(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Determines if a substring of the current string instance 
            starts with the target string specified by <paramref name="value"/>.
            The method performs an ordinal comparison between strings.
            </summary>
            <param name="source">This string instance.</param>
            <param name="startIndex">The start position of the substring.</param>
            <param name="value">The string instance to compare.</param>
            <param name="ignoreCase">Indicates whether the comparison is case-sensitive.</param>
            <returns><c>true</c> if the specified substring starts with the target string; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.StartsWith(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Determines if a substring of the current string instance
            starts with the target string (or a substring of this target string) specified by <paramref name="target" />.
            The method performs an ordinal comparison between strings.
            </summary>
            <param name="source">This string instance.</param>
            <param name="startIndex">The start position of the substring of the current string instance.</param>
            <param name="target">The target string instance to compare.</param>
            <param name="targetStartIndex">The start position of the substring of the target string instance.</param>
            <param name="targetLength">The length of the substring of the target string specified by <paramref name="target"/>.</param>
            <param name="ignoreCase">Indicates whether the comparison is case-sensitive.</param>
            <returns>
              <c>true</c> if the specified substring starts with the target substring (or a substring of this target string); otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.StringEx.StartsWith(System.String,System.Int32,System.String,System.Int32,System.Boolean)">
            <summary>
            Determines if a substring of the current string instance
            starts with the target string (or a substring of this target string) specified by <paramref name="target" />.
            The method performs an ordinal comparison between strings.
            </summary>
            <param name="source">This string instance.</param>
            <param name="startIndex">The start position of the substring of the current string instance.</param>
            <param name="target">The target string instance to compare.</param>
            <param name="targetStartIndex">The start position of the substring of the target string instance.</param>
            <param name="ignoreCase">Indicates whether the comparison is case-sensitive.</param>
            <returns>
              <c>true</c> if the specified substring starts with the target substring (or a substring of this target string); otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.StringEx.StartsWith(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
            <summary>
            Determines if a substring of the current string instance
            starts with the target string (or a substring of this target string) specified by <paramref name="target" />.
            </summary>
            <param name="source">This string instance.</param>
            <param name="startIndex">The start position of the substring of the current string instance.</param>
            <param name="target">The target string instance to compare.</param>
            <param name="targetStartIndex">The start position of the substring of the target string instance.</param>
            <param name="targetLength">The length of the substring of the target string specified by <paramref name="target" />.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the comparison.</param>
            <returns>
              <c>true</c> if the specified substring starts with the target substring (or a substring of this target string); otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Occurs when at least one of <paramref name="startIndex"/>, <paramref name="targetStartIndex"/> and <paramref name="targetLength"/> is assigned an invalid value.
            </exception>
            <exception cref="T:System.ArgumentNullException">Occurs when the argument <paramref name="target"/> is <c>null</c>.</exception>
        </member>
        <member name="M:System.StringEx.StartsWith(System.String,System.Int32,System.String,System.Int32,System.StringComparison)">
            <summary>
            Determines if a substring of the current string instance
            starts with the target string (or a substring of this target string) specified by <paramref name="target" />.
            </summary>
            <param name="source">This string instance.</param>
            <param name="startIndex">The start position of the substring of the current string instance.</param>
            <param name="target">The target string instance to compare.</param>
            <param name="targetStartIndex">The start position of the substring of the target string instance.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the comparison.</param>
            <returns>
              <c>true</c> if the specified substring starts with the target substring (or a substring of this target string); otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Occurs when either <paramref name="startIndex"/> or <paramref name="targetStartIndex"/> is assigned an invalid value.
            </exception>
        </member>
        <member name="M:System.StringEx.StartsWith(System.String,System.Int32,System.String,System.StringComparison)">
            <summary>
            Determines if a substring of the current string instance starts with the target string specified by <paramref name="value" />.
            </summary>
            <param name="source">This string instance.</param>
            <param name="startIndex">The start position of the substring.</param>
            <param name="value">The string instance to compare.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the comparison.</param>
            <returns>
              <c>true</c> if the specified substring starts with the target string; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when <paramref name="startIndex"/> is assigned an invalid value.</exception>
        </member>
        <member name="M:System.StringEx.StartsWithAny(System.String,System.Collections.Generic.IEnumerable{System.String},System.StringComparison)">
            <summary>
            Determines if the beginning of this string instance matches any element of the specified string sequence.
            </summary>
            <param name="source">This string instance.</param>
            <param name="values">The sequence of strings to compare.</param>
            <param name="comparisonType">Specifies how the beginning of this string is compared with strings in the specified sequence.</param>
            <returns><c>true</c> if any of the strings in the sequence matches the beginning of the current string instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.StringEx.SubstringWithTrim(System.String,System.Int32,System.Int32)">
            <summary>
            Retrieves a substring from this instance and removes white spaces at both ends of the substring.
            </summary>
            <param name="str">This string instance.</param>
            <param name="startIndex">The zero-based starting character position of a substring in this instance.</param>
            <param name="length">The number of characters in the substring.</param>
            <returns>A substring starting from position <paramref name="startIndex" /> to position <pamref name="startIndex" /> + <paramref name="length" /> - 1 with white spaces removed from both ends of the substring.</returns>
        </member>
        <member name="M:System.StringEx.SubstringWithTrim(System.String,System.Int32)">
            <summary>
            Retrieves a substring from this instance and removes white spaces at both ends of the substring.
            </summary>
            <param name="str">This string instance.</param>
            <param name="startIndex">The zero-based starting character position of a substring in this instance.</param>
            <returns>A substring starting from position <paramref name="startIndex" /> to the end of the current string instance with white spaces removed from both ends of the substring.</returns>
        </member>
        <member name="T:System.MultipleStringSearch">
            <summary>
            Provides methods (Aho-Corasick algorithm) to search occurrences of multiple keywords. These methods are most efficient when there are many short keywords distinguishable by the beginning few characters.
            <para>NOTE this class does not support case-insensitive or culture-sensitive search. To perform case-insensitive search, you may first lower-case both the keywords and the target text.</para>
            </summary>
        </member>
        <member name="M:System.MultipleStringSearch.InnerNode.#ctor(System.MultipleStringSearch.InnerNode,System.Char)">
            <summary>
            Initialize tree node with specified character
            </summary>
            <param name="parent">Parent node</param>
            <param name="c">Character</param>
        </member>
        <member name="M:System.MultipleStringSearch.InnerNode.AddResult(System.String,System.Int32)">
            <summary>
            Adds pattern ending in this node
            </summary>
            <param name="result">Pattern</param>
        </member>
        <member name="M:System.MultipleStringSearch.InnerNode.AddTransition(System.MultipleStringSearch.InnerNode)">
            <summary>
            Adds transition node
            </summary>
            <param name="node">Node</param>
        </member>
        <member name="M:System.MultipleStringSearch.InnerNode.GetTransition(System.Char)">
            <summary>
            Returns transition to specified character (if exists)
            </summary>
            <param name="c">Character</param>
            <returns>Returns TreeNode or null</returns>
        </member>
        <member name="M:System.MultipleStringSearch.InnerNode.ContainsTransition(System.Char)">
            <summary>
            Returns true if node contains transition to specified character
            </summary>
            <param name="c">Character</param>
            <returns>True if transition exists</returns>
        </member>
        <member name="M:System.MultipleStringSearch.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.MultipleStringSearch"/> class.
            </summary>
            <param name="keywords">The keywords.</param>
        </member>
        <member name="M:System.MultipleStringSearch.FindAll(System.String,System.Int32)">
            <summary>
            Searches the specified text and returns all occurrences of any keyword.
            </summary>
            <param name="text">The text to search.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>
            An array of <see cref="T:System.StringSearchResult" /> objects that store the search result; null if the search fails.
            </returns>
        </member>
        <member name="M:System.MultipleStringSearch.FindFirst(System.String,System.Int32)">
            <summary>
            Searches the specified text and returns the first occurrence of any keyword.
            </summary>
            <param name="text">The text to search.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>
            A <see cref="T:System.StringSearchResult" /> object that stores the search result; null if the search fails.
            </returns>
        </member>
        <member name="M:System.MultipleStringSearch.ContainsAny(System.String,System.Int32)">
            <summary>
            Searches the specified text and determines if it contains any occurrence of any keyword.
            </summary>
            <param name="text">The text to search.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>
              <c>true</c> if the text searched contains any occurrence of any keyword; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:System.SpecialStringSplit">
            <summary>
            Specifies some special way to split a string.
            </summary>
        </member>
        <member name="F:System.SpecialStringSplit.GetASCIIParts">
            <summary>
            Gets all ASCII segments. For example, "i*" "1ove" "you[" will be extracted from "i*我1ove爱you[你们".
            </summary>
        </member>
        <member name="F:System.SpecialStringSplit.GetNonASCIIParts">
            <summary>
            Gets all non-ASCII segments. For example, "我" "爱" "你们" will be extracted from "i*我1ove爱you[你们".
            </summary>
        </member>
        <member name="F:System.SpecialStringSplit.SplitASCIIPartsAndNonASCIIParts">
            <summary>
            Splits into ASCII segments and non-ASCII segments. For example, "i*我1ove爱you[你们" will be split into "i*" "我" "love" "爱" "you[" "你们".
            </summary>
        </member>
        <member name="F:System.SpecialStringSplit.SplitASCIIPartsAndNonASCIIChars">
            <summary>
            Splits into ASCII segments and non-ASCII characters. For example, "i*我1ove爱you[你们" will be split into "i*" "我" "love" "爱" "you[" "你" "们".
            </summary>
        </member>
        <member name="T:System.StringSplitResult">
            <summary>
            Stores the result of a string split.
            </summary>
        </member>
        <member name="P:System.StringSplitResult.SplitText">
            <summary>
            Gets the substring split from the original string.
            </summary>
            <value>
            The substring split from the original string.
            </value>
        </member>
        <member name="P:System.StringSplitResult.SeparatorIndex">
            <summary>
            Gets index of the separator. The value of this property can be -1, indicating the current split is at the end of the original string.
            </summary>
            <value>
            The index of the separator.
            </value>
        </member>
        <member name="P:System.StringSplitResult.Separator">
            <summary>
            Gets the separator. The value of this property can be a <see cref="T:System.Char"/> or a <see cref="T:System.String"/>.
            </summary>
            <value>
            The separator.
            </value>
        </member>
        <member name="M:System.StringSplitResult.#ctor(System.String,System.Object,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.StringSplitResult"/> class.
            </summary>
            <param name="splitText">The substring split from the original string.</param>
            <param name="separator">The separator that splits the substring from the original string.</param>
            <param name="separatorIndex">The index of the separator.</param>
        </member>
        <member name="M:System.StringSplitResult.ToString">
            <summary>
            Converts this object to its equivalent string representation.
            </summary>
            <returns>A new string instance which is a concatenation of property <see cref="P:System.StringSplitResult.SplitText"/> and <see cref="P:System.StringSplitResult.Separator"/> if the value of <see cref="P:System.StringSplitResult.Separator"/> is not '\0'; 
            otherwise, the value of property <see cref="P:System.StringSplitResult.SplitText"/>.</returns>
        </member>
        <member name="M:System.StringSplitResult.GetHashCode">
            <summary>
            Returns the hash code for this object. NOTE that this method does not count <see cref="P:System.StringSplitResult.SeparatorIndex"/> property, and so two <see cref="T:System.StringSplitResult" /> objects determined "not equal" by <see cref="M:System.StringSplitResult.Equals(System.Object)"/> method may generate the same hash code.
            </summary>
            <returns>
            The hash code for this object.
            </returns>
        </member>
        <member name="M:System.StringSplitResult.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.StringSplitResult" /> object.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this <see cref="T:System.StringSplitResult" /> object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.StringSplitResult" /> object, in which case the argument <paramref name="obj"/> is also a <see cref="T:System.StringSplitResult" /> object and its properties <see cref="P:System.StringSplitResult.SplitText"/>, <paramref name="Separator" /> and <paramref name="SeparatorIndex" /> are equal to the corresponding properties of this object; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:System.StringReaderSplitResult">
            <summary>
            Stores the result of a string split. The substring split from the original string is represented by a <see cref="!:System.StringReader"/>.
            </summary>
        </member>
        <member name="P:System.StringReaderSplitResult.SplitReader">
            <summary>
            Gets the <see cref="!:System.StringReader"/> object representing the substring split from the original string.
            </summary>
            <value>
            A <see cref="!:System.StringReader"/> object representing the substring split from the original string.
            </value>
        </member>
        <member name="P:System.StringReaderSplitResult.SeparatorIndex">
            <summary>
            Gets index of the separator. The value of this property can be -1, indicating the current split is at the end of the original string.
            </summary>
            <value>
            The index of the separator.
            </value>
        </member>
        <member name="P:System.StringReaderSplitResult.Separator">
            <summary>
            Gets the separator. The value of this property can be a <see cref="T:System.Char"/> or a <see cref="T:System.String"/>.
            </summary>
            <value>
            The separator.
            </value>
        </member>
        <member name="M:System.StringReaderSplitResult.#ctor(System.Text.StringReader,System.Object,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.StringReaderSplitResult"/> class.
            </summary>
            <param name="substringReader">A <see cref="!:System.StringReader"/> object representing the substring split from the original string.</param>
            <param name="separator">The separator that splits the substring from the original string.</param>
            <param name="separatorIndex">The index of the separator.</param>
        </member>
        <member name="M:System.StringReaderSplitResult.ToString">
            <summary>
            Converts this object to its equivalent string representation.
            </summary>
            <returns>A new string instance which is a concatenation of property <see cref="N:System.Text"/> and <see cref="P:System.StringReaderSplitResult.Separator"/> if the value of <see cref="P:System.StringReaderSplitResult.Separator"/> is not '\0'; 
            otherwise, the value of property <see cref="N:System.Text"/>.</returns>
        </member>
        <member name="M:System.StringReaderSplitResult.GetHashCode">
            <summary>
            Returns the hash code for this object. NOTE that this method does not count <see cref="P:System.StringReaderSplitResult.SeparatorIndex"/> property, and so two <see cref="T:System.StringReaderSplitResult" /> objects determined "not equal" by <see cref="M:System.StringReaderSplitResult.Equals(System.Object)"/> method may generate the same hash code.
            </summary>
            <returns>
            The hash code for this object.
            </returns>
        </member>
        <member name="M:System.StringReaderSplitResult.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.StringReaderSplitResult" /> object.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this <see cref="T:System.StringReaderSplitResult" /> object.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.StringReaderSplitResult" /> object, in which case the argument <paramref name="obj"/> is also a <see cref="T:System.StringReaderSplitResult" /> object, and its properties <paramref name="Separator" /> and <paramref name="SeparatorIndex" /> are equal to the corresponding properties of this object, and the reading scope of its property <see cref="P:System.StringReaderSplitResult.SplitReader"/> equals the reading scope of this object's <see cref="P:System.StringReaderSplitResult.SplitReader"/> property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:System.HorizontalAlignment">
            <summary>Specifies how an object is horizontally aligned.</summary>
        </member>
        <member name="T:System.StringRetrievalOption">
            <summary>
            Provides options for string retrieval.
            </summary>
        </member>
        <member name="F:System.StringRetrievalOption.StartIndex">
            <summary>
            Indicating where to start to search the locator.
            </summary>
        </member>
        <member name="F:System.StringRetrievalOption.Locator">
            <summary>
            Delimits the beginning of the retrieval area.
            </summary>
        </member>
        <member name="F:System.StringRetrievalOption.Boundary">
            <summary>
            Delimits the end of the retrieval area.
            </summary>
        </member>
        <member name="F:System.StringRetrievalOption.StartIndicator">
            <summary>
            Indicates the start of the string to retrieve.
            </summary>
        </member>
        <member name="F:System.StringRetrievalOption.EndIndicator">
            <summary>
            Indicates the end of the string to retrieve.
            </summary>
        </member>
        <member name="F:System.StringRetrievalOption.IncludeStartIndicator">
            <summary>
            Set this true if the start indicator should be included in the retrieved string; otherwise, false.
            </summary>
        </member>
        <member name="F:System.StringRetrievalOption.IncludeEndIndicator">
            <summary>
            Set this true if the end indicator should be included in the retrieved string; otherwise, false.
            </summary>
        </member>
        <member name="F:System.StringRetrievalOption.MaximumReturn">
            <summary>
            Indicates at most how many strings are retrieved.
            </summary>
        </member>
        <member name="M:System.StringRetrievalOption.#ctor">
            <summary>
            Initializes a new instance of System.StringRetrievalOption class.
            </summary>
        </member>
        <member name="M:System.StringRetrievalOption.#ctor(System.String[],System.String[],System.Int32)">
            <summary>
            Initializes a new instance of System.StringRetrievalOption class.
            </summary>
            <param name="startIndicator">Indicates the start of the string to retrieve.</param>
            <param name="endIndicator">Indicates the end of the string to retrieve.</param>
            <param name="maximumReturn">Indicates at most how many strings are retrieved.</param>
        </member>
        <member name="M:System.StringRetrievalOption.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of System.StringRetrievalOption class.
            </summary>
            <param name="startIndicator">Indicates the start of the string to retrieve.</param>
            <param name="endIndicator">Indicates the end of the string to retrieve.</param>
            <param name="maximumReturn">Indicates at most how many strings are retrieved.</param>
        </member>
        <member name="M:System.StringRetrievalOption.#ctor(System.String[],System.String,System.Int32)">
            <summary>
            Initializes a new instance of System.StringRetrievalOption class.
            </summary>
            <param name="startIndicator">Indicates the start of the string to retrieve.</param>
            <param name="endIndicator">Indicates the end of the string to retrieve.</param>
            <param name="maximumReturn">Indicates at most how many strings are retrieved.</param>
        </member>
        <member name="M:System.StringRetrievalOption.#ctor(System.String,System.String[],System.Int32)">
            <summary>
            Initializes a new instance of System.StringRetrievalOption class.
            </summary>
            <param name="startIndicator">Indicates the start of the string to retrieve.</param>
            <param name="endIndicator">Indicates the end of the string to retrieve.</param>
            <param name="maximumReturn">Indicates at most how many strings are retrieved.</param>
        </member>
        <member name="T:System.StringSearchResult">
            <summary>
            Stores the result of a substring search (usually by the <c>IndexOfAny</c> method).
            </summary>
        </member>
        <member name="F:System.StringSearchResult.Position">
            <summary>
            The position of the found substring (property <c>Value</c>) in the original string.
            </summary>
        </member>
        <member name="F:System.StringSearchResult.Value">
            <summary>
            The found substring.
            </summary>
        </member>
        <member name="F:System.StringSearchResult.HitIndex">
            <summary>
            The index of the found substring in the string array to search.
            </summary>
        </member>
        <member name="T:System.IndexOfAllMode">
            <summary>
            Specifies how to perform the IndexOfAll method.
            </summary>
        </member>
        <member name="F:System.IndexOfAllMode.Normal">
            <summary>
            Returns the indexes of the first occurrences of all target strings.
            <para>
            For example, searching "a", "b", "c" in "babaca" will return 1, 0, 4.
            </para>
            </summary>
        </member>
        <member name="F:System.IndexOfAllMode.Sequential">
            <summary>
            Linearly searches the original string and returns the indexes of the first occurrences of target strings sequentially.
            <para>
            For example, searching "a", "b", "c" in "babaca" will return 1, 2, 4.
            </para>
            </summary>
        </member>
        <member name="T:System.StringSeekMode">
            <summary>
            Specifies how to determine a search is successful when seeking a variety of targets in a string instance.
            </summary>
        </member>
        <member name="F:System.StringSeekMode.Any">
            <summary>
            The search is successful if any of the targets is hit.
            </summary>
        </member>
        <member name="F:System.StringSeekMode.All">
            <summary>
            The search is successful if all the targets are hit.
            </summary>
        </member>
        <member name="F:System.StringSeekMode.First">
            <summary>
            The search is successful if the first target is hit.
            </summary>
        </member>
        <member name="F:System.StringSeekMode.Last">
            <summary>
            The search is successful if the last target is hit.
            </summary>
        </member>
        <member name="F:System.StringSeekMode.SequentialAll">
            <summary>
            The search is successful if all the targets are hit sequentially.
            <para>For string "aa, bb, cc, dd" as example, if the targets are {"bb", "cc"}, then the search will succeed; 
            if the targets are {"cc", "bb"} the search will fail.</para>
            </summary>
        </member>
        <member name="T:System.StringSeekOption">
            <summary>
            Provides options for string string search.
            </summary>
        </member>
        <member name="F:System.StringSeekOption.StartPosition">
            <summary>
            Indicating where to start to search the start indicator and the end indicator.
            </summary>
        </member>
        <member name="F:System.StringSeekOption.StartIndicator">
            <summary>
            Indicates the start of the string to search.
            </summary>
        </member>
        <member name="F:System.StringSeekOption.EndIndicator">
            <summary>
            Indicates the end of the string to search.
            </summary>
        </member>
        <member name="F:System.StringSeekOption.Values">
            <summary>
            The values to search.
            </summary>
        </member>
        <member name="F:System.StringSeekOption.Mode">
            <summary>
            Indicates searching method.
            </summary>
        </member>
        <member name="T:System.SubString">
            <summary>
            Represents a substring of a string instance.
            </summary>
        </member>
        <member name="M:System.SubString.#ctor(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of System.Substring.
            </summary>
            <param name="source">The source string to which this substring belongs.</param>
            <param name="startIndex">Indicates the position of this substring in the source string.</param>
            <param name="endIndex">Indicates the position after the last character of this substring in the source string.</param>
            <param name="newInstance">Indicates whether to create a new stirng instance. 
            <para>If set true, the substring will be copied to a new string instance; 
            otherwise, only start and end positions are recorded in this object. By default, this value is set true.</para>
            <para>If you are intended to operate on a large amount of substrings, set this value to false to save time and system memory.</para></param>
        </member>
        <member name="M:System.SubString.ToString(System.Boolean)">
            <summary>
            Gets a System.String instance with the same value as the substring this System.SubString object represents.
            </summary>
            <param name="cacheString">Indicating whether to cache the returned System.String instance.
            <para>If this parameter is set true, the returned string representation will be stored for future use 
            (next time this reserved string instance will be immediately returned).</para></param>
            <returns>A System.String representation of this substring.</returns>
        </member>
        <member name="M:System.SubString.ToString">
            <summary>
            Gets a System.String instance with the same value as the substring this System.SubString object represents.
            </summary>
        </member>
        <member name="P:System.SubString.StartIndex">
            <summary>
            Gets the position of this substring in the source string.
            </summary>
        </member>
        <member name="P:System.SubString.EndIndex">
            <summary>
            Gets the position after the last character of this substring in the source string.
            </summary>
        </member>
        <member name="P:System.SubString.Length">
            <summary>
            Gets the length of this substring.
            </summary>
        </member>
        <member name="M:System.SubString.GetHashCode">
            <summary>
            Returns the hash code for this substring. 
            This hash code is exactly the same as the hash code for a System.String with the same value this System.SubString represents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.SubString.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current substring. This method will return true if
            <para>1. <paramref name="obj"/> is a System.SubString representing the same substring.</para>
            <para>2. <paramref name="obj"/> is a System.String with the same value as the substring this System.SubString represents.</para>
            </summary>
            <param name="obj">The System.Object to compare with the current substring.</param>
            <returns>true if the specified Object is equal to the current substring; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.RegexPatterns">
            <summary>
            Provides some useful regular expressions.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.RegexPatterns.ApacheLogLine">
            <summary>
            Gets the pattern matching an apache log line. The groups indexed by 1-10 represents hostname, timestamp, verb, request, protocol, protocol version, response, size, referrer, and agent information.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.RegexPatterns.IPAddress">
            <summary>
            Gets the pattern matching any IP address without access to each number.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.RegexPatterns.IPAddressWithAccessToEachNumber">
            <summary>
            Gets the pattern matching any IP address with access to each number.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.RegexPatterns.GetHTMLMarkPattern(System.String[])">
            <summary>
            Gets a pattern matching both open and close HTML marks of specified HTML tags.
            </summary>
            <param name="tags">The HTML tags used to create the pattern. Use null if you want to match all HTML marks. Please make sure these tags are legal.</param>
            <returns>A pattern matching both open and close HTML marks of the specified HTML tags.</returns>
        </member>
        <member name="P:System.Text.RegularExpressions.RegexPatterns.EMailAddress">
            <summary>
            Gets a pattern matching any typical Email address.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.RegexPatterns.HTMLMark">
            <summary>
            Gets a pattern matching any HTML mark.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.RegexPatterns.ChineseCharacter">
            <summary>
            Gets a pattern matching any Chinese character.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.RegexPatterns.DoubleByteCharacter">
            <summary>
            Gets a pattern matching any double-byte (i.e. non-ASCII) character.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.RegexPatterns.TypicalEnglishWord">
            <summary>
            Gets a pattern matching any typical English word (i.e. only letters, "'" and "-").
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.RegexPatterns.EnglishWord">
            <summary>
            Gets a pattern matching any English word that consists of letters, numbers, "'" and "-".
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.RegexPatterns.CompiledAt">
            <summary>
            Gets the compiled <see cref="T:System.Text.RegularExpressions.Regex"/> object for <see cref="F:System.Text.RegularExpressions.RegexPatterns.At"/>.
            </summary>
            <value>The compiled <see cref="T:System.Text.RegularExpressions.Regex"/> object for <see cref="F:System.Text.RegularExpressions.RegexPatterns.At"/>.</value>
        </member>
        <member name="P:System.Text.RegularExpressions.RegexPatterns.CompiledTag">
            <summary>
            Gets the compiled <see cref="T:System.Text.RegularExpressions.Regex"/> object for <see cref="F:System.Text.RegularExpressions.RegexPatterns.Tag"/>.
            </summary>
            <value>The compiled <see cref="T:System.Text.RegularExpressions.Regex"/> object for <see cref="F:System.Text.RegularExpressions.RegexPatterns.Tag"/>.</value>
        </member>
        <member name="P:System.Text.RegularExpressions.RegexPatterns.CompiledASCIILetters">
            <summary>
            Gets the compiled <see cref="T:System.Text.RegularExpressions.Regex"/> object for <see cref="F:System.Text.RegularExpressions.RegexPatterns.ASCIILetters"/>.
            </summary>
            <value>The compiled <see cref="T:System.Text.RegularExpressions.Regex"/> object for <see cref="F:System.Text.RegularExpressions.RegexPatterns.ASCIILetters"/>.</value>
        </member>
        <member name="P:System.Text.RegularExpressions.RegexPatterns.CompiledASCIIDigits">
            <summary>
            Gets the compiled <see cref="T:System.Text.RegularExpressions.Regex"/> object for <see cref="F:System.Text.RegularExpressions.RegexPatterns.ASCIIDigits"/>.
            </summary>
            <value>The compiled <see cref="T:System.Text.RegularExpressions.Regex"/> object for <see cref="F:System.Text.RegularExpressions.RegexPatterns.ASCIIDigits"/>.</value>
        </member>
        <member name="P:System.Text.RegularExpressions.RegexPatterns.CompiledASCIILettersAndDigits">
            <summary>
            Gets the compiled <see cref="T:System.Text.RegularExpressions.Regex"/> object for <see cref="F:System.Text.RegularExpressions.RegexPatterns.ASCIILettersAndDigits"/>.
            </summary>
            <value>The compiled <see cref="T:System.Text.RegularExpressions.Regex"/> object for <see cref="F:System.Text.RegularExpressions.RegexPatterns.ASCIILettersAndDigits"/>.</value>
        </member>
        <member name="T:System.Text.RegularExpressions.RegexEx">
            <summary>
            Provides extension methods for regular expressions.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.RegexEx.IsMatchWhole(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Gets a value indicating if this <see cref="T:System.Text.RegularExpressions.Regex"/> matches the entire <paramref name="value"/>.
            </summary>
            <param name="regex">This regex.</param>
            <param name="value">The value to match.</param>
            <returns><c>true</c> if this <see cref="T:System.Text.RegularExpressions.Regex"/> matches the entire <paramref name="value"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.RegexEx.REGMatchWhole(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.Int32,System.Int32)">
            <summary>
            Checks whether this string or its substring entirely matches the specified regular expression.
            </summary>
            <param name="str">A System.String object.</param>
            <param name="regPattern">A regular expression.</param>
            <param name="options">Regular expression options.</param>
            <param name="startIndex">A zero-based character position in the current string that defines the leftmost position to be searched.</param>
            <param name="length">The number of characters to include in the search.</param>
            <returns>true if this string conforms to the specified regular expression; otherwise, false.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.RegexEx.REGMatchWhole(System.String,System.Text.RegularExpressions.Regex,System.Int32,System.Int32)">
            <summary>
            Checks whether this string or its substring entirely matches the specified <see cref="T:System.Text.RegularExpressions.Regex"/>.
            </summary>
            <param name="str">A System.String object.</param>
            <param name="regPattern">A regular expression represented by a <see cref="T:System.Text.RegularExpressions.Regex"/> object.</param>
            <param name="startIndex">A zero-based character position in the current string that defines the leftmost position to be searched.</param>
            <param name="length">The number of characters to include in the search. <c>0</c> indicates all remaining characters starting from <paramref name="startIndex"/>.</param>
            <returns><c>true</c> if the specified substring entirely matches the specified regular expression represented by a <see cref="T:System.Text.RegularExpressions.Regex"/> object; otherwise, false.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.RegexEx.REGMatchWhole(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Checks whether this string entirely matches the specified <see cref="T:System.Text.RegularExpressions.Regex"/>.
            </summary>
            <param name="str">A System.String object.</param>
            <param name="regPattern">A regular expression represented by a <see cref="T:System.Text.RegularExpressions.Regex"/> object.</param>
            <returns><c>true</c> if this string entirely matches the specified regular expression represented by a <see cref="T:System.Text.RegularExpressions.Regex"/> object; otherwise, false.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.RegexEx.REGContains(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.Int32,System.Int32)">
            <summary>
            Checks whether at least one substring of this string instance conforms to the specified regular expression.
            </summary>
            <param name="str">A System.String object.</param>
            <param name="regPattern">A regular expression.</param>
            <param name="options">Regular expression options.</param>
            <param name="startIndex">A zero-based character position in the current string that defines the leftmost position to be searched.</param>
            <param name="length">The number of characters to include in the search.</param>
            <returns>true if at least one substring of this string instance conforms to the specified regular expression; otherwise, false.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.RegexEx.REGContains(System.String,System.Text.RegularExpressions.Regex,System.Int32,System.Int32)">
            <summary>
            Checks whether at least one substring of this string instance conforms to the specified regular expression.
            </summary>
            <param name="str">A System.String object.</param>
            <param name="regPattern">A regular expression represented by a <c>System.Text.RegularExpressions.RegEx</c> object.</param>
            <param name="startIndex">A zero-based character position in the current string that defines the leftmost position to be searched.</param>
            <param name="length">The number of characters to include in the search.</param>
            <returns>true if at least one substring of this string instance conforms to the specified regular expression represented by a <c>System.Text.RegularExpressions.RegEx</c> object; 
            otherwise, false.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.RegexEx.REGStartsWith(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.Int32,System.Int32)">
            <summary>
            Checks whether the beginning of this string (or a specified substring of this string instance) conforms to the specified regular expression.
            </summary>
            <param name="str">A System.String object.</param>
            <param name="regPattern">A regular expression.</param>
            <param name="options">Regular expression options.</param>
            <param name="startIndex">A zero-based character position in the current string that defines the leftmost position to be searched.</param>
            <param name="length">The number of characters to include in the search.</param>
            <returns>true if the beginning of this string (or the specified substring of this string instance) conforms to the specified regular expression; otherwise, false.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.RegexEx.REGStartsWith(System.String,System.String,System.Text.RegularExpressions.Match@,System.Text.RegularExpressions.RegexOptions,System.Int32,System.Int32)">
            <summary>
            Checks whether the beginning of this string (or a specified substring of this string instance) conforms to the specified regular expression.
            </summary>
            <param name="str">A System.String object.</param>
            <param name="regPattern">A regular expression.</param>
            <param name="match">Outputs the <see cref="T:System.Text.RegularExpressions.Match"/> object if <paramref name="regPattern"/> is matched at the beginning of the string.</param>
            <param name="options">Regular expression options.</param>
            <param name="startIndex">A zero-based character position in the current string that defines the leftmost position to be searched.</param>
            <param name="length">The number of characters to include in the search.</param>
            <returns>true if the beginning of this string (or the specified substring of this string instance) conforms to the specified regular expression; otherwise, false.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.RegexEx.REGStartsWith(System.String,System.Text.RegularExpressions.Regex,System.Int32,System.Int32)">
            <summary>
            Checks whether the beginning of this string (or a specified substring of this string instance) conforms to the specified regular expression.
            </summary>
            <param name="str">A System.String object.</param>
            <param name="regPattern">A regular expression represented by a <c>System.Text.RegularExpressions.RegEx</c> object.</param>
            <param name="startIndex">A zero-based character position in the current string that defines the leftmost position to be searched.</param>
            <param name="length">The number of characters to include in the search.</param>
            <returns>true if the beginning of this string (or the specified substring of this string instance) conforms to the specified regular expression
            represented by a <c>System.Text.RegularExpressions.RegEx</c> object; otherwise, false.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.RegexEx.REGStartsWith(System.String,System.Text.RegularExpressions.Regex,System.Text.RegularExpressions.Match@,System.Int32,System.Int32)">
            <summary>
            Checks whether the beginning of this string (or a specified substring of this string instance) conforms to the specified regular expression.
            </summary>
            <param name="str">A System.String object.</param>
            <param name="regPattern">A regular expression represented by a <c>System.Text.RegularExpressions.RegEx</c> object.</param>
            <param name="match">Outputs the <see cref="T:System.Text.RegularExpressions.Match"/> object if <paramref name="regPattern"/> is matched at the beginning of the string.</param>
            <param name="startIndex">A zero-based character position in the current string that defines the leftmost position to be searched.</param>
            <param name="length">The number of characters to include in the search.</param>
            <returns>true if the beginning of this string (or the specified substring of this string instance) conforms to the specified regular expression
            represented by a <c>System.Text.RegularExpressions.RegEx</c> object; otherwise, false.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.RegexEx.REGEndsWith(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.Int32,System.Int32)">
            <summary>
            Checks whether the end of this string (or a specified substring of this string instance) conforms to the specified regular expression.
            </summary>
            <param name="str">A System.String object.</param>
            <param name="regPattern">A regular expression.</param>
            <param name="options">Regular expression options.</param>
            <param name="startIndex">A zero-based character position in the current string that defines the leftmost position to be searched.</param>
            <param name="length">The number of characters to include in the search.</param>
            <returns>true if the end of this string (or the specified substring of this string instance) conforms to the specified regular expression; otherwise, false.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.RegexEx.REGEndsWith(System.String,System.String,System.Text.RegularExpressions.Match@,System.Text.RegularExpressions.RegexOptions,System.Int32,System.Int32)">
            <summary>
            Checks whether the end of this string (or a specified substring of this string instance) conforms to the specified regular expression.
            </summary>
            <param name="str">A System.String object.</param>
            <param name="regPattern">A regular expression.</param>
            <param name="match">Outputs the <see cref="T:System.Text.RegularExpressions.Match"/> object if <paramref name="regPattern"/> is matched at the end of the string.</param>
            <param name="options">Regular expression options.</param>
            <param name="startIndex">A zero-based character position in the current string that defines the leftmost position to be searched.</param>
            <param name="length">The number of characters to include in the search.</param>
            <returns>true if the end of this string (or the specified substring of this string instance) conforms to the specified regular expression; otherwise, false.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.RegexEx.REGEndsWith(System.String,System.Text.RegularExpressions.Regex,System.Int32,System.Int32)">
            <summary>
            Checks whether the end of this string (or a specified substring of this string instance) conforms to the specified regular expression.
            </summary>
            <param name="str">A System.String object.</param>
            <param name="regPattern">A regular expression represented by a <c>System.Text.RegularExpressions.RegEx</c> object.</param>
            <param name="startIndex">A zero-based character position in the current string that defines the leftmost position to be searched.</param>
            <param name="length">The number of characters to include in the search.</param>
            <returns>true if the end of this string (or the specified substring of this string instance) conforms to the specified regular expression
            represented by a <c>System.Text.RegularExpressions.RegEx</c> object; otherwise, false.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.RegexEx.REGEndsWith(System.String,System.Text.RegularExpressions.Regex,System.Text.RegularExpressions.Match@,System.Int32,System.Int32)">
            <summary>
            Checks whether the end of this string (or a specified substring of this string instance) conforms to the specified regular expression.
            </summary>
            <param name="str">A System.String object.</param>
            <param name="regPattern">A regular expression represented by a <c>System.Text.RegularExpressions.RegEx</c> object.</param>
            <param name="match">Outputs the <see cref="T:System.Text.RegularExpressions.Match"/> object if <paramref name="regPattern"/> is matched at the end of the string.</param>
            <param name="startIndex">A zero-based character position in the current string that defines the leftmost position to be searched.</param>
            <param name="length">The number of characters to include in the search.</param>
            <returns>true if the end of this string (or the specified substring of this string instance) conforms to the specified regular expression
            represented by a <c>System.Text.RegularExpressions.RegEx</c> object; otherwise, false.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.RegexEx.ReplaceByWord(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Replaces a word in this string by a specified replacement. 
            This method only supports string in word-based (not character-based, like Chinese or Japanese) language.
            </summary>
            <param name="str"></param>
            <param name="word">The word to replace.</param>
            <param name="replacement">The replacement word.</param>
            <param name="options">Regular expression options.</param>
            <returns>The string with the word replaced.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.RegexEx.ReplaceByWord(System.String,System.String,System.String)">
            <summary>
            Replaces a word in this string by a specified replacement. 
            This method only supports string in word-based (not character-based, like Chinese or Japanese) language.
            </summary>
            <param name="str"></param>
            <param name="word">The word to replace.</param>
            <param name="replacement">The replacement word.</param>
            <returns>The string with the word replaced.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.RegexEx.RemoveExcessiveBlanks(System.String)">
            <summary>
            Shrinks all blank spaces in this string to a single space.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.RegularExpressions.RegexEx.REGContains(System.String,System.Int32,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Checks whether a substring of this string contains a section that conforms to a given regular expression pattern.
            </summary>
            <param name="str">A System.String object.</param>
            <param name="startIdx">The position of the substring to check.</param>
            <param name="regPattern">A regular expression pattern.</param>
            <param name="options">Regular expression options.</param>
            <returns>true if the substring contains a section that conforms to the given pattern; otherwise, false.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.RegexEx.REGContains(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Checks whether this string contains a section that conforms to a given regular expression pattern.
            </summary>
            <param name="str">A System.String object.</param>
            <param name="regPattern">A regular expression pattern.</param>
            <param name="options">Regular expression options.</param>
            <returns>true if the string contains a section that conforms to the given pattern; otherwise, false.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.RegexEx.REGContains(System.String,System.String)">
            <summary>
            Checks whether this string contains a section that conforms to a given regular expression pattern.
            </summary>
            <param name="str">A System.String object.</param>
            <param name="regPattern">A regular expression pattern.</param>
            <returns>true if the string contains a section that conforms to the given pattern; otherwise, false.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.RegexEx.REGReplace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Replaces sections in this string that matches a given regular expression pattern by another specified string.
            </summary>
            <param name="str">A System.String object.</param>
            <param name="regPattern">A regular expression pattern.</param>
            <param name="replacement">A replacement string.</param>
            <param name="options">Regular expression options.</param>
            <returns>The replaced string.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.RegexEx.REGReplace(System.String,System.String,System.String)">
            <summary>
            Replaces sections in this string that matches a given regular expression pattern by another specified string.
            </summary>
            <param name="str">A System.String object.</param>
            <param name="regPattern">A regular expression pattern.</param>
            <param name="replacement">A replacement string.</param>
            <returns>The replaced string.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.RegexEx.REGRemove(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Removes sections in this string that matches a given regular expression pattern.
            </summary>
            <param name="str">A System.String object.</param>
            <param name="regPattern">A regular expression pattern.</param>
            <param name="options">Regular expression options.</param>
            <returns>The processed string.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.RegexEx.REGRemove(System.String,System.String)">
            <summary>
            Removes sections in this string that matches a given regular expression pattern.
            </summary>
            <param name="str">A System.String object.</param>
            <param name="regPattern">A regular expression pattern.</param>
            <returns>The processed string.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.RegexEx.REGMatch(System.String,System.Int32,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Finds the first match of a given regular expression pattern.
            </summary>
            <param name="str">A System.String object.</param>
            <param name="startIdx">The position in the string where the finding starts.</param>
            <param name="regPattern">A regular expression pattern.</param>
            <param name="options">Regular expression options.</param>
            <returns>The position in the string where the match is found.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.RegexEx.REGMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Finds the first match of a given regular expression pattern.
            </summary>
            <param name="str">A System.String object.</param>
            <param name="regPattern">A regular expression pattern.</param>
            <param name="options">Regular expression options.</param>
            <returns>The position in the string where the match is found.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.RegexEx.REGMatch(System.String,System.String)">
            <summary>
            Finds the first match of a given regular expression pattern.
            </summary>
            <param name="str">A System.String object.</param>
            <param name="regPattern">A regular expression pattern.</param>
            <returns>The position in the string where the match is found.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.RegexEx.REGMatches(System.String,System.Int32,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Finds all matches of a given regular expression pattern in this string.
            </summary>
            <param name="str">A System.String object.</param>
            <param name="startIdx">The position in the string where the finding starts.</param>
            <param name="regPattern">A regular expression pattern.</param>
            <param name="options">Regular expression options.</param>
            <returns>The position in the string where the match is found.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.RegexEx.REGMatches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Finds all matches of a given regular expression pattern in this string.
            </summary>
            <param name="str">A System.String object.</param>
            <param name="regPattern">A regular expression pattern.</param>
            <param name="options">Regular expression options.</param>
            <returns>The position in the string where the match is found.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.RegexEx.REGMatches(System.String,System.String)">
            <summary>
            Finds all matches of a given regular expression pattern in this string.
            </summary>
            <param name="str">A System.String object.</param>
            <param name="regPattern">A regular expression pattern.</param>
            <returns>The position in the string where the match is found.</returns>
        </member>
        <member name="T:System.Text.StringBuilderCache">
            <summary>
            Provides two cached <see cref="T:System.Text.StringBuilder"/> instances for frequent use of <see cref="T:System.Text.StringBuilder"/> class to build short strings (The maximum number of characters is defined by <see cref="F:System.Text.StringBuilderCache.MaxCacheSize"/>.).
            </summary>
        </member>
        <member name="F:System.Text.StringBuilderCache.MaxCacheSize">
            <summary>
            The maximum cache size.
            </summary>
        </member>
        <member name="M:System.Text.StringBuilderCache.Acquire(System.Int32)">
            <summary>
            Returns a cached <see cref="T:System.Text.StringBuilder"/> instance if <paramref name="capacity"/> is equal to or smaller than the current cache size, or a new <see cref="T:System.Text.StringBuilder"/> instance otherwise. The returned instance must be released by either calling <see cref="M:System.Text.StringBuilderCache.Release(System.Text.StringBuilder)"/> or <see cref="M:System.Text.StringBuilderCache.GetStringAndRelease(System.Text.StringBuilder)"/>.
            </summary>
            <param name="capacity">The intended capacity for the returned <see cref="T:System.Text.StringBuilder"/> instance. If this capacity exceeds the current capacity of the cached <see cref="T:System.Text.StringBuilder"/> instance, a new instance will be returned.</param>
            <returns>A cached <see cref="T:System.Text.StringBuilder"/> instance or a new <see cref="T:System.Text.StringBuilder"/> instance.</returns>
        </member>
        <member name="M:System.Text.StringBuilderCache.Acquire2(System.Int32)">
            <summary>
            Returns a cached <see cref="T:System.Text.StringBuilder"/> instance if <paramref name="capacity"/> is equal to or smaller than the current cache size, or a new <see cref="T:System.Text.StringBuilder"/> instance otherwise. The returned instance must be released by either calling <see cref="M:System.Text.StringBuilderCache.Release2(System.Text.StringBuilder)"/> or <see cref="M:System.Text.StringBuilderCache.GetStringAndRelease2(System.Text.StringBuilder)"/>.
            </summary>
            <param name="capacity">The intended capacity for the returned <see cref="T:System.Text.StringBuilder"/> instance. If this capacity exceeds the current capacity of the cached <see cref="T:System.Text.StringBuilder"/> instance, a new instance will be returned.</param>
            <returns>A cached <see cref="T:System.Text.StringBuilder"/> instance or a new <see cref="T:System.Text.StringBuilder"/> instance.</returns>
        </member>
        <member name="M:System.Text.StringBuilderCache.GetStringAndRelease(System.Text.StringBuilder)">
            <summary>
            Releases a <see cref="T:System.Text.StringBuilder"/> instance acquired by the <see cref="M:System.Text.StringBuilderCache.Acquire(System.Int32)"/> method and returns the string instance it builds.
            </summary>
            <param name="toRelease">The <see cref="T:System.Text.StringBuilder"/> instance to release.</param>
            <returns>The string built by the <see cref="T:System.Text.StringBuilder"/>.</returns>
        </member>
        <member name="M:System.Text.StringBuilderCache.Release(System.Text.StringBuilder)">
            <summary>
            Releases a <see cref="T:System.Text.StringBuilder"/> instance acquired by the <see cref="M:System.Text.StringBuilderCache.Acquire(System.Int32)"/> method.
            </summary>
            <param name="toRelease">The <see cref="T:System.Text.StringBuilder"/> instance to release.</param>
        </member>
        <member name="M:System.Text.StringBuilderCache.GetStringAndRelease2(System.Text.StringBuilder)">
            <summary>
            Releases a <see cref="T:System.Text.StringBuilder"/> instance acquired by the <see cref="M:System.Text.StringBuilderCache.Acquire2(System.Int32)"/> method and returns the string instance it builds.
            </summary>
            <param name="toRelease">The <see cref="T:System.Text.StringBuilder"/> instance to release.</param>
            <returns>The string built by the <see cref="T:System.Text.StringBuilder"/>.</returns>
        </member>
        <member name="M:System.Text.StringBuilderCache.Release2(System.Text.StringBuilder)">
            <summary>
            Releases a <see cref="T:System.Text.StringBuilder"/> instance acquired by the <see cref="M:System.Text.StringBuilderCache.Acquire2(System.Int32)"/> method.
            </summary>
            <param name="toRelease">The <see cref="T:System.Text.StringBuilder"/> instance to release.</param>
        </member>
        <member name="T:System.Text.StringReader">
            <summary>
            Provides rich methods to extract information from a string instance.
            </summary>
        </member>
        <member name="P:System.Text.StringReader.UnderlyingString">
            <summary>
            Gets the underlying string instance that this string reader is currently reading.
            </summary>
            <value>
            The underlying string.
            </value>
        </member>
        <member name="P:System.Text.StringReader.EndPosition">
            <summary>
            Gets the position next to the last character within the reading scope.
            </summary>
            <value>
            The position that defines the end of the reading scope.
            </value>
        </member>
        <member name="P:System.Text.StringReader.CurrentPosition">
            <summary>
            Gets the reader's current position. The reader's reading scope is from this position to the character previous to the <see cref="P:System.Text.StringReader.EndPosition"/>.
            </summary>
            <value>
            The reader's current position.
            </value>
        </member>
        <member name="P:System.Text.StringReader.ComparisonType">
            <summary>
            Gets or sets the culture, case, and sort rules to be used in string operations.
            By default, this property is set <c>Ordinal</c> out of efficiency consideration.
            </summary>
            <value>
            An enumeration value that indicates the culture, case, and sort rules to be used in string operations.
            </value>
        </member>
        <member name="P:System.Text.StringReader.EOF">
            <summary>
            Gets a value indicating whether the reader's current reading scope is empty (<see cref="P:System.Text.StringReader.CurrentPosition"/> equals <see cref="P:System.Text.StringReader.EndPosition"/>).
            </summary>
            <value>
              <c>true</c> if the reader's current reading scope is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Text.StringReader.IsEmptyOrBlank">
            <summary>
            Gets a value indicating whether the current reading scope is empty or contains only whitespace characters.
            </summary>
            <value><c>true</c> if this instance is empty or contains only whitespace characters; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Text.StringReader.Length">
            <summary>
            Gets the length of the current reading scope defined by <see cref="P:System.Text.StringReader.CurrentPosition"/> and <see cref="P:System.Text.StringReader.EndPosition"/>.
            </summary>
            <value>The length of the reading scope defined by <see cref="P:System.Text.StringReader.CurrentPosition"/> and <see cref="P:System.Text.StringReader.EndPosition"/>.</value>
        </member>
        <member name="P:System.Text.StringReader.First">
            <summary>
            Gets the first character of the reading scope.
            </summary>
            <value>The first character of the reading scope.</value>
        </member>
        <member name="P:System.Text.StringReader.Previous">
            <summary>
            Gets the character immediately before the reader's current position. Requires <see cref="P:System.Text.StringReader.CurrentPosition"/> not to equal zero.
            </summary>
            <value>
            The character immediately before the reader's current position.
            </value>
        </member>
        <member name="P:System.Text.StringReader.Next">
            <summary>
            Gets the character immediately after the reader's current position.
            </summary>
            <value>
            The character immediately after the reader's current position.
            </value>
        </member>
        <member name="P:System.Text.StringReader.Last">
            <summary>
            Gets the last character of the reading scope.
            </summary>
            <value>The last character of the reading scope.</value>
        </member>
        <member name="P:System.Text.StringReader.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Char"/> of the underlying string instance using an index relative to the reader's current position.
            For example, 0 indicates the character at the reader's current position, 
            1 indicates the character next to the reader's current position, 
            and -1 indicates the character previous to the reader's current position.
            </summary>
            <value>
            A <see cref="T:System.Char"/> of the underlying string instance.
            </value>
            <param name="index">The index relative to the reader's current position.</param>
            <returns></returns>
            <exception cref="T:System.IndexOutOfRangeException">Occurs when the <paramref name="index"/> is out of range.</exception>
        </member>
        <member name="M:System.Text.StringReader.SubstringBeforeCurrentPosition(System.Int32)">
            <summary>
            Gets a substring starting from the specified <paramref name="prevPos" /> to the character previous to the <see cref="P:System.Text.StringReader.CurrentPosition" />. <para>Note this method returns <c>null</c> if <paramref name="prevPos" /> equals <see cref="P:System.Text.StringReader.CurrentPosition" />.</para>
            </summary>
            <param name="prevPos">Provides a position prior to the reader's <see cref="P:System.Text.StringReader.CurrentPosition"/>.</param>
            <returns>A substring starting from the specified <paramref name="prevPos" /> to the character previous to the <see cref="P:System.Text.StringReader.CurrentPosition" />. Note the first character of the current reading scope is not contained in the returned substring. <c>null</c> is returned if <paramref name="prevPos" /> equals <see cref="P:System.Text.StringReader.CurrentPosition" />.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="prevPos" /> is larger than <see cref="P:System.Text.StringReader.CurrentPosition" />.</exception>
        </member>
        <member name="M:System.Text.StringReader.InnerSubstringBeforeCurrentPosition(System.Int32)">
            <summary>
            For internal use only. The internal version of <see cref="M:System.Text.StringReader.SubstringBeforeCurrentPosition(System.Int32)"/> without argument check.
            </summary>
            <param name="prevPos">Provides a position prior to the reader's <see cref="P:System.Text.StringReader.CurrentPosition"/>.</param>
            <returns>A substring starting from the specified <paramref name="prevPos" /> to the character previous to the <see cref="P:System.Text.StringReader.CurrentPosition" />. Note the first character of the current reading scope is not contained in the returned substring. <c>null</c> is returned if <paramref name="prevPos" /> equals <see cref="P:System.Text.StringReader.CurrentPosition" />.</returns>
        </member>
        <member name="M:System.Text.StringReader.InnerSubstringBeforeCurrentPositionWithTrimEnd(System.Int32)">
            <summary>
            For internal use only. The same as <see cref="M:System.Text.StringReader.SubstringBeforeCurrentPosition(System.Int32)"/> except that the white spaces at the end of returned string are trimmed.
            </summary>
            <param name="prevPos">Provides a position prior to the reader's <see cref="P:System.Text.StringReader.CurrentPosition"/>.</param>
            <returns>A substring starting from the specified <paramref name="prevPos" /> to the character previous to the <see cref="P:System.Text.StringReader.CurrentPosition" />. Note the first character of the current reading scope is not contained in the returned substring. <c>null</c> is returned if <paramref name="prevPos" /> equals <see cref="P:System.Text.StringReader.CurrentPosition" />.</returns>
        </member>
        <member name="M:System.Text.StringReader.TrimStart">
            <summary>
            Advances the reader's position to the first non-white-space character within the reading scope. If there exists no non-white-space character, then <see cref="P:System.Text.StringReader.EOF"/> will be <c>true</c> after executing this method.
            </summary>
        </member>
        <member name="M:System.Text.StringReader.TrimEnd">
            <summary>
            Regresses the reader's end position to the last non-white-space character within the reading scope. If there exists no non-white-space character, then <see cref="P:System.Text.StringReader.EOF"/> will be <c>true</c> after executing this method.
            </summary>
        </member>
        <member name="M:System.Text.StringReader.Trim">
            <summary>
            Advances the reader's position to the first non-white-space character as well as regresses the reader's end position to the last non-whilte-space within the reading scope. If there exists no non-white-space character, then <see cref="P:System.Text.StringReader.EOF"/> will be <c>true</c> after executing this method.
            </summary>
        </member>
        <member name="M:System.Text.StringReader.InternalCreate(System.String,System.Int32,System.Int32)">
            <summary>
            For internal use only. Creates a new <see cref="T:System.Text.StringReader"/> instance with the specified <paramref name="startIndex"/> and <paramref name="endIndex"/>.
            </summary>
            <param name="s">The string instance to read.</param>
            <param name="startIndex">Specifies the initial position of the reader.</param>
            <param name="endIndex">Specifies the end position of the reading scope.</param>
            <returns>A new <see cref="T:System.Text.StringReader"/> instance.</returns>
        </member>
        <member name="M:System.Text.StringReader.#ctor">
            <summary>
            For internal use only. Initializes a new instance of the <see cref="T:System.Text.StringReader"/> class.
            </summary>
        </member>
        <member name="M:System.Text.StringReader.#ctor(System.String,System.StringComparison)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.StringReader"/> class.
            </summary>
            <param name="s">The string instance to read.</param>
            <param name="comparisonType">Specifies a <see cref="T:System.StringComparison"/> value for string comparisons in various methods of the <see cref="T:System.Text.StringReader"/> class.</param>
        </member>
        <member name="M:System.Text.StringReader.#ctor(System.Text.StringReader)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.StringReader"/> class from a <see cref="T:System.Text.StringReader"/> instance. This constructor copies <see cref="P:System.Text.StringReader.UnderlyingString"/>, <see cref="P:System.Text.StringReader.CurrentPosition"/>, <see cref="P:System.Text.StringReader.EndPosition"/> and <see cref="P:System.Text.StringReader.ComparisonType"/> of <paramref name="anotherReader"/> to the new instance, but does not copy <see cref="!:MarkedPosition"/> property.
            </summary>
            <param name="anotherReader">Another <see cref="T:System.Text.StringReader"/> instance.</param>
        </member>
        <member name="M:System.Text.StringReader.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.StringReader"/> class.
            </summary>
            <param name="s">The string instance to read.</param>
            <param name="startIndex">
            Specifies the initial position of the reader.
            </param>
            <param name="length">
            Specifies the maximum number of characters this reader can read from its initial position.
            This argument together with <paramref name="startIndex"/> determines this reader's reading scope.
            </param>
        </member>
        <member name="M:System.Text.StringReader.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.StringReader"/> class.
            </summary>
            <param name="s">The string instance to read.</param>
            <param name="startIndex">
            Specifies the initial position of the reader. 
            The reader's reading scope is from this initial position to the end of the underlying string.
            </param>
        </member>
        <member name="M:System.Text.StringReader.Advance">
            <summary>
            Advances the reader's position to the next character if the reader's current reading scope is not empty.
            </summary>
        </member>
        <member name="M:System.Text.StringReader.Advance(System.Int32)">
            <summary>
            Adds an integer <paramref name="advance"/> to the reader's current position.
            </summary>
        </member>
        <member name="M:System.Text.StringReader.AdvanceToNextNonWhiteSpace">
            <summary>
            Advances the reader to the position of the next non-whitespace character.
            </summary>
        </member>
        <member name="M:System.Text.StringReader.AdvanceChar">
            <summary>
            Advances the reader's position to the next character if the reader's current reading scope is not empty.
            </summary>
            <returns><c>true</c> if the reader's current reading scope is not empty and the reader's position is advanced, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Text.StringReader.Read">
            <summary>
            If the current reading scope is non-empty (<see cref="P:System.Text.StringReader.EOF"/> is <c>false</c>), returns the character at the reader's current position and advances the reader's position to the next character; otherwise returns <c>'\0'</c>.
            </summary>
            <returns>The character at the reader's current position if the reader's current reading scope is not empty; '\0' if the reader has reached the end of the reading scope.</returns>
        </member>
        <member name="M:System.Text.StringReader.Read(System.Char@)">
            <summary>
            If the current reading scope is non-empty (<see cref="P:System.Text.StringReader.EOF"/> is <c>false</c>), reads the character at the reader's current position to <paramref name="c"/>, advances the reader's position to the next character and retruns <c>true</c>; otherwise, returns <c>false</c> and <paramref name="c"/> is set '\0'.
            </summary>
            <param name="c">The character at the reader's current position if the reader's current reading scope is not empty; '\0' if the reader has reached the end of the reading scope.</param>
            <returns><c>true</c> if the reader's current reading scope is not empty; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Text.StringReader.Read(System.Char,System.Boolean)">
            <summary>
            Determines whether the <paramref name="keyChr"/> character equals the first character (first non-whitespace character if <paramref name="ignoreWhiteSpaces"/> is set <c>true</c>) of the reader's reading scope without considering <see cref="P:System.Text.StringReader.ComparisonType"/>.
            If so, the reader advances to the next character; otherwise, the reader remains where it was if <paramref name="ignoreWhiteSpaces"/> is set <c>false</c>, or the reader stops at the first non-whitespace character if <paramref name="ignoreWhiteSpaces"/> is set <c>true</c>.
            </summary>
            <param name="keyChr">The character to be compared with the first character (first non-whitespace character if <paramref name="ignoreWhiteSpaces"/> is set <c>true</c>) of the reader's reading scope.</param>
            <param name="ignoreWhiteSpaces">If set to <c>true</c>, the white spaces at the beginning of the reader's current reading scope will be ignored.</param>
            <returns>
              <c>true</c> if the target character equals the first character (first non-whitespace character if <paramref name="ignoreWhiteSpaces"/> is set <c>true</c>) of the reader's reading scope; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.Read(System.Char[],System.Boolean)">
            <summary>
            Determines whether the first character (first non-whitespace character if <paramref name="ignoreWhiteSpaces"/> is set <c>true</c>) of the reader's reading scope is in the specified <paramref name="keyChrs"/> without considering <see cref="P:System.Text.StringReader.ComparisonType"/>.
            If so, the reader advances to the next character; otherwise, the reader remains where it was if <paramref name="ignoreWhiteSpaces"/> is set <c>false</c>, or the reader stops at the first non-whitespace character if <paramref name="ignoreWhiteSpaces"/> is set <c>true</c>.
            </summary>
            <param name="keyChrs">The characters to check against the first character (first non-whitespace character if <paramref name="ignoreWhiteSpaces"/> is set <c>true</c>) of the reader's reading scope.</param>
            <param name="ignoreWhiteSpaces">If set to <c>true</c>, the white spaces at the beginning of the reader's current reading scope will be ignored.</param>
            <returns>
            The index of the first character (first non-whitespace character if <paramref name="ignoreWhiteSpaces"/> is set <c>true</c>) in the array <paramref name="keyChrs"/>; or -1 if none of <paramref name="keyChrs"/> is encountered.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadNonLetterOrDigit">
            <summary>
            Reads the non-letter and non-digit character (defined by <see cref="M:System.Char.IsLetterOrDigit(System.Char)"/>) at the reader's current position (<see cref="P:System.Text.StringReader.First"/>) and advances the reader's position to the next character. If <see cref="P:System.Text.StringReader.First"/> is a letter or digit, the reader remains where it was.
            </summary>
            <returns><c>true</c> if the character at the reader's current position is a letter or digit; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadWhiteSpace">
            <summary>
            Tries reading the whitespace character (defined by <see cref="M:System.Char.IsWhiteSpace(System.Char)"/>) at the reader's current position (<see cref="P:System.Text.StringReader.First"/>) and advances the reader's position to the next character. If <see cref="P:System.Text.StringReader.First"/> is not a whitespace, the reader remains where it was.
            </summary>
            <returns><c>true</c> if the character at the reader's current position is a white space; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadWhiteSpace(System.Char@)">
            <summary>
            Tries reading the whitespace character (defined by <see cref="M:System.Char.IsWhiteSpace(System.Char)" />) at the reader's current position (<see cref="P:System.Text.StringReader.First" />), returns the whitespace character, and advances the reader's position to the next character. If <see cref="P:System.Text.StringReader.First" /> is not a whitespace, the reader remains where it was.
            </summary>
            <param name="whitespace">Returns the whitespace character if there is one at the beginning of the reading scope.</param>
            <returns>
              <c>true</c> if the character at the reader's current position is a white space; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadWhiteSpace(System.Int32,System.Boolean)">
            <summary>
            Tries reading a number of whitespace characters (defined by <see cref="M:System.Char.IsWhiteSpace(System.Char)" />) at the beginning of the current reading scope; if successful, the reader advances; otherwise the reader keeps its current position and returns <c>false</c>
            </summary>
            <param name="len">The number of white spaces expected to be at the beginning of the reading scope.</param>
            <param name="breaksOnNewLine">if set to <c>true</c>, then breaks the white space reading on a new line character.</param>
            <returns>
              <c>true</c> if the specified number of white spaces exist at the beginning of the current reading scope; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadWhiteSpace(System.Int32,System.String@,System.Boolean)">
            <summary>
            Tries reading a number of whitespace characters (defined by <see cref="M:System.Char.IsWhiteSpace(System.Char)" />) at the beginning of the current reading scope; if successful, the reader advances and returns the whiite spaces; otherwise the reader keeps its current position and returns <c>false</c>.
            </summary>
            <param name="len">The number of white spaces expected to read.</param>
            <param name="whitespace">Returns a string consisting of the white spaces.</param>
            <param name="breaksOnNewLine">if set to <c>true</c>, then breaks the white space reading on a new line character.</param>
            <returns>
              <c>true</c> if the specified number of white spaces exist at the beginning of the current reading scope; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.Char,System.Boolean,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered.
            The <see cref="P:System.Text.StringReader.CurrentPosition"/> after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychar">The reader stops when this character is encountered.</param>
            <param name="doubleKeycharEscape">if set to <c>true</c>, an occurrence of double <paramref name="keychar"/> will be an escape of the <paramref name="keychar"/>. For example, if the <paramref name="keychar"/> is single quote <c>'</c>, then the double <c>'</c> in <c>'ab''cd'</c> is an escape of <c>'</c> if this parameter is set <c>true</c>.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>If <see cref="F:System.Text.StringReader.ReadOptions.ReadToEnd"/> is specified in <paramref name="options" />, then a substring starting from the current position of the reading scope to the position of the first occurrence of <paramref name="keychar" /> within the search scope when the keychar is found, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found. If <see cref="F:System.Text.StringReader.ReadOptions.ReadToEnd"/> is not specified, then <c>null</c> is returned if <paramref name="keychar"/> is not found.
            <para>If <see cref="F:System.Text.StringReader.ReadOptions.StopAfterKey"/> is specified, then the reader stops at the position after the encountered <paramref name="keychar" />; otherwise the reader stops at the position of the encountered <paramref name="keychar" />.</para>
            <para>The <paramref name="keychar" /> is not included in the returned substring if <see cref="F:System.Text.StringReader.ReadOptions.DiscardKey"/> is specified.</para>
            <para>The white spaces at the beginning of the substring will be trimmed if <see cref="F:System.Text.StringReader.ReadOptions.TrimStart"/> is specified, and the white spaces at the end of the substring will be trimmed if <see cref="F:System.Text.StringReader.ReadOptions.TrimEnd"/> is specified. <see cref="F:System.String.Empty" /> will be returned if the length of the substring after trim is 0.</para></returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToWhiteSpace(System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until the first whitespace is encountered.
            The <see cref="P:System.Text.StringReader.CurrentPosition"/> after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="options">Specifies the reading options.</param>
            <returns>If <see cref="F:System.Text.StringReader.ReadOptions.ReadToEnd"/> is specified in <paramref name="options" />, then a substring starting from the current position of the reading scope to the position of the first whitespace within the search scope, or a substring starting from the current position of the reading scope to the end of the scope if no whitespace is found;
            If <see cref="F:System.Text.StringReader.ReadOptions.ReadToEnd"/> is not specified, then <c>null</c> is returned if no whitespace is found.
            <para>If <see cref="F:System.Text.StringReader.ReadOptions.StopAfterKey"/> is specified, then the reader stops at the position after the first whitespace; otherwise the reader stops at the position of the encountered whitespace.</para>
            <para>The whitespace is included in the returned substring if neither <see cref="F:System.Text.StringReader.ReadOptions.DiscardKey"/> nor <see cref="F:System.Text.StringReader.ReadOptions.TrimEnd"/> is specified.</para>
            <para>The whitespaces at the beginning of the returned substring will be trimmed if <see cref="F:System.Text.StringReader.ReadOptions.TrimStart"/> is specified; <see cref="F:System.String.Empty" /> will be returned if the length of the substring after trim is 0.</para></returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToWhiteSpaceOrChar(System.Char,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until the first whitespace or a character of <paramref name="keyChr"/> is encountered.
            The <see cref="P:System.Text.StringReader.CurrentPosition"/> after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keyChr">An additional character that can stop the reading.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>If <see cref="F:System.Text.StringReader.ReadOptions.ReadToEnd"/> is specified in <paramref name="options" />, then a substring starting from the current position of the reading scope to the position of the first whitespace or <paramref name="keyChr"/> within the search scope, or a substring starting from the current position of the reading scope to the end of the scope if neither whitespace nor <paramref name="keyChr"/> is found;
            If <see cref="F:System.Text.StringReader.ReadOptions.ReadToEnd"/> is not specified, then <c>null</c> is returned if neither whitespace nor <paramref name="keyChr"/> is found.
            <para>If <see cref="F:System.Text.StringReader.ReadOptions.StopAfterKey"/> is specified, then the reader stops at the position after the first whitespace; otherwise the reader stops at the position of the encountered whitespace or <paramref name="keyChr"/>.</para>
            <para>The whitespace or <paramref name="keyChr"/> is included in the returned substring if neither <see cref="F:System.Text.StringReader.ReadOptions.DiscardKey"/> nor <see cref="F:System.Text.StringReader.ReadOptions.TrimEnd"/> is specified.</para>
            <para>The whitespaces at the beginning of the returned substring will be trimmed if <see cref="F:System.Text.StringReader.ReadOptions.TrimStart"/> is specified; <see cref="F:System.String.Empty" /> will be returned if the length of the substring after trim is 0.</para></returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToWhiteSpaceOrChar(System.Char[],System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until the first whitespace or a character in <paramref name="keyChrs"/> is encountered.
            The <see cref="P:System.Text.StringReader.CurrentPosition"/> after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keyChrs">Additional characters that can stop the reading.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>If <see cref="F:System.Text.StringReader.ReadOptions.ReadToEnd"/> is specified in <paramref name="options" />, then a substring starting from the current position of the reading scope to the position of the first whitespace or <paramref name="keyChrs"/> within the search scope, or a substring starting from the current position of the reading scope to the end of the scope if neither whitespace nor <paramref name="keyChrs"/> is found;
            If <see cref="F:System.Text.StringReader.ReadOptions.ReadToEnd"/> is not specified, then <c>null</c> is returned if neither whitespace nor a character in <paramref name="keyChrs"/> is found.
            <para>If <see cref="F:System.Text.StringReader.ReadOptions.StopAfterKey"/> is specified, then the reader stops at the position after the first whitespace; otherwise the reader stops at the position of the encountered whitespace or a character in <paramref name="keyChrs"/>.</para>
            <para>The whitespace or a character in <paramref name="keyChrs"/> is included in the returned substring if neither <see cref="F:System.Text.StringReader.ReadOptions.DiscardKey"/> nor <see cref="F:System.Text.StringReader.ReadOptions.TrimEnd"/> is specified.</para>
            <para>The whitespaces at the beginning of the returned substring will be trimmed if <see cref="F:System.Text.StringReader.ReadOptions.TrimStart"/> is specified; <see cref="F:System.String.Empty" /> will be returned if the length of the substring after trim is 0.</para></returns>
        </member>
        <member name="M:System.Text.StringReader.Count(System.Char,System.Boolean)">
            <summary>
            Counts the number of occurrences of the specified <paramref name="keyChr"/> character that appears at the beginning of the current reading scope until the first <paramref name="keyChr"/> character is encountered (first non-white-space non-<paramref name="keyChr"/> character if <paramref name="ignoreWhiteSpaces"/> is set <c>true</c>). The reader will advance the position to the non-<paramref name="keyChr"/> character that stops the counting.
            </summary>
            <param name="keyChr">The target character.</param>
            <param name="ignoreWhiteSpaces">If set to <c>true</c>, the white spaces at the beginning of the reader's current reading scope will be ignored.</param>
            <returns>The number of occurrences of the specified <paramref name="keyChr"/> character that appears at the beginning of the current reading scope.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadChar(System.Char,System.Boolean)">
            <summary>
            Determines whether the <paramref name="keyChr"/> character equals the first character (first non-whitespace character if <paramref name="ignoreWhiteSpaces"/> is set <c>true</c>) of the reader's reading scope, considering <see cref="P:System.Text.StringReader.ComparisonType"/>.
            If so, the reader advances to the next character; otherwise, the reader remains where it was if <paramref name="ignoreWhiteSpaces"/> is set <c>false</c>, or the reader stops at the first non-whitespace character if <paramref name="ignoreWhiteSpaces"/> is set <c>true</c>.
            </summary>
            <param name="keyChr">The target character.</param>
            <param name="ignoreWhiteSpaces">If set to <c>true</c>, the white spaces at the beginning of the reader's current reading scope will be ignored.</param>
            <returns>
              <c>true</c> if the target character equals the first character (first non-whitespace character if <paramref name="ignoreWhiteSpaces"/> is set <c>true</c>) of the reader's reading scope when considering <see cref="P:System.Text.StringReader.ComparisonType"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadChar(System.Char[],System.Boolean)">
            <summary>
            Determines whether the first character (first non-whitespace character if <paramref name="ignoreWhiteSpaces"/> is set <c>true</c>) of the reader's reading scope is in the specified <paramref name="keyChrs"/>.
            If so, the reader advances to the next character; otherwise, the reader remains where it was if <paramref name="ignoreWhiteSpaces"/> is set <c>false</c>, or the reader stops at the first non-whitespace character if <paramref name="ignoreWhiteSpaces"/> is set <c>true</c>.
            </summary>
            <param name="keyChrs">The characters to check against the first character (first non-whitespace character if <paramref name="ignoreWhiteSpaces"/> is set <c>true</c>) of the reader's reading scope.</param>
            <param name="ignoreWhiteSpaces">If set to <c>true</c>, the white spaces at the beginning of the reader's current reading scope will be ignored.</param>
            <returns>
            The index of the first character (first non-whitespace character if <paramref name="ignoreWhiteSpaces"/> is set <c>true</c>) in the array <paramref name="keyChrs"/>; or -1 if none of <paramref name="keyChrs"/> is encountered.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.Read(System.String,System.Boolean)">
            <summary>
            Determines whether a substring specified by <paramref name="keyStr" /> is at the reader's current position without considering <see cref="P:System.Text.StringReader.ComparisonType"/> (equivalent to <see cref="F:System.StringComparison.Ordinal"/>).
            If so, the reader advances to the end of this substring; otherwise, the reader remains where it was.
            </summary>
            <param name="keyStr">The target substring.</param>
            <param name="ignoreWhiteSpaces">If set to <c>true</c>, the white spaces at the beginning of the reader's current reading scope will be ignored.</param>
            <returns><c>true</c> if the target substring is at the reader's current position (with white spaces ignored if <paramref name="ignoreWhiteSpaces"/> is set <c>true</c>) and the reader has advanced to the end of this substring;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Text.StringReader.Read(System.String[],System.Int32,System.Boolean)">
            <summary>
            Determines whether one of the substrings specified by <paramref name="keyStrs" /> is at the reader's current position without considering <see cref="P:System.Text.StringReader.ComparisonType" /> (equivalent to <see cref="F:System.StringComparison.Ordinal" />). If so, the reader advances to the end of this substring and returns the index of the hit substring; otherwise, the reader remains where it was and returns <c>-1</c>.
            </summary>
            <param name="keyStrs">The target substrings.</param>
            <param name="index">Substring in <paramref name="keyStrs"/> starting at and after this index are matched against the beginning of the reader's current reading scope.</param>
            <param name="ignoreWhiteSpaces">If set to <c>true</c>, the white spaces at the beginning of the reader's current reading scope will be ignored.</param>
            <returns>The index of matched key substring if one of <paramref name="keyStrs" /> is at the reader's current position (with white spaces ignored if <paramref name="ignoreWhiteSpaces" /> is set <c>true</c>) and the reader has advanced to the end of this substring;
            otherwise, <c>-1</c>.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadIgCase(System.String,System.Boolean)">
            <summary>
            Determines whether a substring specified by <paramref name="keyStr" /> is at the reader's current position without considering both case and <see cref="P:System.Text.StringReader.ComparisonType"/> (equivalent to <see cref="F:System.StringComparison.OrdinalIgnoreCase"/>).
            <para>If so, the reader advances to the end of this substring; otherwise, the reader remains where it was.</para>
            </summary>
            <param name="keyStr">The target substring.</param>
            <param name="ignoreWhiteSpaces">If set to <c>true</c>, the white spaces at the beginning of the reader's current reading scope will be ignored.</param>
            <returns><c>true</c> if the target substring is at the reader's current position (with white spaces ignored if <paramref name="ignoreWhiteSpaces"/> is set <c>true</c>) and the reader has advanced to the end of this substring;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadIgCase(System.String[],System.Int32,System.Boolean)">
            <summary>
            Determines whether one of the substrings specified by <paramref name="keyStrs" /> is at the reader's current position without considering both case and <see cref="P:System.Text.StringReader.ComparisonType" /> (equivalent to <see cref="F:System.StringComparison.OrdinalIgnoreCase" />).
            <para>If so, the reader advances to the end of this substring and returns the index of the hit substring; otherwise, the reader remains where it was.</para>
            </summary>
            <param name="keyStrs">The target substrings.</param>
            <param name="index">Substring in <paramref name="keyStrs"/> starting at and after this index are matched against the beginning of the reader's current reading scope.</param>
            <param name="ignoreWhiteSpaces">If set to <c>true</c>, the white spaces at the beginning of the reader's current reading scope will be ignored.</param>
            <returns><c>true</c> if one of <paramref name="keyStrs" /> is at the reader's current position (with white spaces ignored if <paramref name="ignoreWhiteSpaces" /> is set <c>true</c>) and the reader has advanced to the end of this substring;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadString(System.String,System.Boolean)">
            <summary>
            Determines whether a substring specified by <paramref name="keyStr" /> is at the reader's current position.
            If so, the reader advances to the end of this substring; otherwise, the reader remains where it was.
            </summary>
            <param name="keyStr">The target substring.</param>
            <param name="ignoreWhiteSpaces">If set to <c>true</c>, the white spaces at the beginning of the reader's current reading scope will be ignored.</param>
            <returns><c>true</c> if the target substring is at the reader's current position (with white spaces ignored if <paramref name="ignoreWhiteSpaces"/> is set <c>true</c>) and the reader has advanced to the end of this substring;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Text.StringReader.CountChar(System.Char,System.Boolean)">
            <summary>
            Counts the number of occurrences of the specified <paramref name="keyChr"/> character that appears at the beginning of the current reading scope until the first <paramref name="keyChr"/> character is encountered (first non-white-space non-<paramref name="keyChr"/> character if <paramref name="ignoreWhiteSpaces"/> is set <c>true</c>). Comparison of characters will consider <see cref="P:System.Text.StringReader.ComparisonType"/>. The reader will advance the position to the non-<paramref name="keyChr"/> character that stops the counting.
            </summary>
            <param name="keyChr">The target character.</param>
            <param name="ignoreWhiteSpaces">If set to <c>true</c>, the white spaces at the beginning of the reader's current reading scope will be ignored.</param>
            <returns>The number of occurrences of the specified <paramref name="keyChr"/> character that appears at the beginning of the current reading scope, considering <see cref="P:System.Text.StringReader.ComparisonType"/>.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadChar(System.Func{System.Char,System.Boolean},System.Boolean)">
            <summary>
            Determines whether the first character (first non-whitespace character if <paramref name="ignoreWhiteSpaces"/> is set <c>true</c>) of the reader's reading scope satisfies the specified <paramref name="predicate"/>.
            If so, the reader advances to the next character; otherwise, the reader remains where it was if <paramref name="ignoreWhiteSpaces"/> is set <c>false</c>, or the reader stops at the first non-whitespace character if <paramref name="ignoreWhiteSpaces"/> is set <c>true</c>.
            </summary>
            <param name="predicate">The predicate to check against the first character (first non-whitespace character if <paramref name="ignoreWhiteSpaces"/> is set <c>true</c>) of the reader's reading scope.</param>
            <param name="ignoreWhiteSpaces">If set to <c>true</c>, the white spaces at the beginning of the reader's current reading scope will be ignored.</param>
            <returns>
            If the first character (first non-whitespace character if <paramref name="ignoreWhiteSpaces"/> is set <c>true</c>) of the reader's reading scope satisfies the specified <paramref name="predicate"/>, then this method returns that character; otherwise, this method returns '\0'.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadString(System.Func{System.Char,System.Boolean})">
            <summary>
            Advances the reader and reads consecutive characters satisfying a specified <paramref name="predicate"/>.
            The read will stop at the first encountered character that does not satisfy the <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A method used to test each character.</param>
            <returns>A string instance consists of consecutive characters satisfying the specified <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:System.Text.StringReader.Read(System.String,System.Char,System.Boolean,System.Boolean)">
            <summary>
            If the reader's current reading scope starts with <paramref name="keyWord" /> followed by either <see cref="P:System.Text.StringReader.EOF" /> or a <paramref name="keyChr" />, then reads <paramref name="keyWord" /> from the beginning of the current reading scope and advances the reader to the character at or after <paramref name="keyChr" /> (depending on <paramref name="stopAfterWordSeparator"/>), without considering <see cref="P:System.Text.StringReader.ComparisonType" /> (equivalent to <see cref="F:System.StringComparison.Ordinal" />).
            </summary>
            <param name="keyWord">The target substring.</param>
            <param name="keyChr">The <paramref name="keyWord"/> is expected to be followed by this character.</param>
            <param name="ignoreWhiteSpaces">If set to <c>true</c>, the white spaces at the beginning of the reader's current reading scope will be ignored.</param>
            <param name="stopAfterWordSeparator">If set to <c>true</c>, the reader stops after <paramref name="keyChr"/> if the reading is successful; otherwise, the reader stops at <paramref name="keyChr"/> if the reading is successful.</param>
            <returns><c>true</c> if the reader's current reading scope starts with <paramref name="keyWord" /> followed by <paramref name="keyChr"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadIgCase(System.String,System.Char,System.Boolean,System.Boolean)">
            <summary>
            If the reader's current reading scope starts with <paramref name="keyWord" /> followed by either <see cref="P:System.Text.StringReader.EOF" /> or a <paramref name="keyChr" />, then reads <paramref name="keyWord" /> from the beginning of the current reading scope and advances the reader to the character at or after <paramref name="keyChr" /> (depending on <paramref name="stopAfterWordSeparator"/>), without considering both case and <see cref="P:System.Text.StringReader.ComparisonType" /> (equivalent to <see cref="F:System.StringComparison.OrdinalIgnoreCase" />).
            </summary>
            <param name="keyWord">The target substring.</param>
            <param name="keyChr">The <paramref name="keyWord"/> is expected to be followed by this character.</param>
            <param name="ignoreWhiteSpaces">If set to <c>true</c>, the white spaces at the beginning of the reader's current reading scope will be ignored.</param>
            <param name="stopAfterWordSeparator">If set to <c>true</c>, the reader stops after <paramref name="keyChr"/> if the reading is successful; otherwise, the reader stops at <paramref name="keyChr"/> if the reading is successful.</param>
            <returns><c>true</c> if the reader's current reading scope starts with <paramref name="keyWord" /> followed by <paramref name="keyChr"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Text.StringReader.Read(System.String,System.Func{System.Char,System.Boolean},System.Boolean,System.Boolean)">
            <summary>
            If the reader's current reading scope starts with <paramref name="keyWord" /> followed by either <see cref="P:System.Text.StringReader.EOF" /> or character satisfying <paramref name="isWordSeparator" />, then reads <paramref name="keyWord" /> from the beginning of the current reading scope and advances the reader to the character at or after the character satisfying <paramref name="isWordSeparator" /> (depending on <paramref name="stopAfterWordSeparator"/>), without considering <see cref="P:System.Text.StringReader.ComparisonType" /> (equivalent to <see cref="F:System.StringComparison.Ordinal" />).
            </summary>
            <param name="keyWord">The target substring.</param>
            <param name="isWordSeparator">A predicate that defines what characters are expected to follow <paramref name="keyWord"/>.</param>
            <param name="ignoreWhiteSpaces">If set to <c>true</c>, the white spaces at the beginning of the reader's current reading scope will be ignored.</param>
            <param name="stopAfterWordSeparator">If set to <c>true</c>, the reader stops after the character defined by <paramref name="isWordSeparator"/> if the reading is successful; otherwise, the reader stops at the character satisfying <paramref name="isWordSeparator"/> if the reading is successful.</param>
            <returns><c>true</c> if the reader's current reading scope starts with <paramref name="keyWord" /> followed by a characater defined by <paramref name="isWordSeparator"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadIgCase(System.String,System.Func{System.Char,System.Boolean},System.Boolean,System.Boolean)">
            <summary>
            If the reader's current reading scope starts with <paramref name="keyWord" /> followed by either <see cref="P:System.Text.StringReader.EOF" /> or character satisfying <paramref name="isWordSeparator" />, then reads <paramref name="keyWord" /> from the beginning of the current reading scope and advances the reader to the character at or after the character satisfying <paramref name="isWordSeparator" /> (depending on <paramref name="stopAfterWordSeparator"/>), without considering both case and <see cref="P:System.Text.StringReader.ComparisonType" /> (equivalent to <see cref="F:System.StringComparison.OrdinalIgnoreCase" />).
            </summary>
            <param name="keyWord">The target substring.</param>
            <param name="isWordSeparator">A predicate that defines what characters are expected to follow <paramref name="keyWord"/>.</param>
            <param name="ignoreWhiteSpaces">If set to <c>true</c>, the white spaces at the beginning of the reader's current reading scope will be ignored.</param>
            <param name="stopAfterWordSeparator">If set to <c>true</c>, the reader stops after the character defined by <paramref name="isWordSeparator"/> if the reading is successful; otherwise, the reader stops at the character satisfying <paramref name="isWordSeparator"/> if the reading is successful.</param>
            <returns><c>true</c> if the reader's current reading scope starts with <paramref name="keyWord" /> followed by a characater defined by <paramref name="isWordSeparator"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadFollowedByNonLetterOrDigit(System.String,System.Boolean,System.Boolean)">
            <summary>
            If the reader's current reading scope starts with <paramref name="keyWord" /> followed by either <see cref="P:System.Text.StringReader.EOF" /> or a non-letter non-digit character (defined by <see cref="M:System.Char.IsLetterOrDigit(System.Char)" />), then reads <paramref name="keyWord" /> from the beginning of the current reading scope and advances the reader to the character after the non-letter non-digit character, without considering <see cref="P:System.Text.StringReader.ComparisonType" /> (equivalent to <see cref="F:System.StringComparison.Ordinal" />).
            </summary>
            <param name="keyWord">The target substring.</param>
            <param name="ignoreWhiteSpaces">If set to <c>true</c>, the white spaces at the beginning of the reader's current reading scope will be ignored.</param>
            <param name="stopAfterWordSeparator">If set to <c>true</c>, the reader stops after non-letter non-digit character if the reading is successful; otherwise, the reader stops at the non-letter non-digit if the reading is successful.</param>
            <returns><c>true</c> if the reader's current reading scope starts with <paramref name="keyWord" /> followed by a non-letter non-digit character, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadIgCaseFollowedByNonLetterOrDigit(System.String,System.Boolean,System.Boolean)">
            <summary>
            If the reader's current reading scope starts with <paramref name="keyWord" /> followed by either <see cref="P:System.Text.StringReader.EOF" /> or a non-letter non-digit character (defined by <see cref="M:System.Char.IsLetterOrDigit(System.Char)" />), then reads <paramref name="keyWord" /> from the beginning of the current reading scope and advances the reader to the character after the non-letter non-digit character, without considering both case and <see cref="P:System.Text.StringReader.ComparisonType" /> (equivalent to <see cref="F:System.StringComparison.OrdinalIgnoreCase" />).
            </summary>
            <param name="keyWord">The target substring.</param>
            <param name="ignoreWhiteSpaces">If set to <c>true</c>, the white spaces at the beginning of the reader's current reading scope will be ignored.</param>
            <param name="stopAfterWordSeparator">If set to <c>true</c>, the reader stops after non-letter non-digit character if the reading is successful; otherwise, the reader stops at the non-letter non-digit if the reading is successful.</param>
            <returns><c>true</c> if the reader's current reading scope starts with <paramref name="keyWord" /> followed by a non-letter non-digit character, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadFollowedByWhiteSpace(System.String,System.Boolean)">
            <summary>
            If the reader's current reading scope starts with <paramref name="keyWord"/> followed by either <see cref="P:System.Text.StringReader.EOF"/> or a whitespace character (defined by <see cref="M:System.Char.IsLetterOrDigit(System.Char)"/>), then reads <paramref name="keyWord"/> from the beginning of the current reading scope and advances the reader to the character after the whitespace character, without considering <see cref="P:System.Text.StringReader.ComparisonType"/> (equivalent to <see cref="F:System.StringComparison.Ordinal"/>).
            </summary>
            <param name="keyWord">The target substring.</param>
            <param name="ignoreWhiteSpaces">If set to <c>true</c>, the white spaces at the beginning of the reader's current reading scope will be ignored.</param>
            <returns><c>true</c> if the reader's current reading scope starts with <paramref name="keyWord"/> followed by a whitespace character, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadIgCaseFollowedByWhiteSpace(System.String,System.Boolean)">
            <summary>
            If the reader's current reading scope starts with <paramref name="keyWord"/> followed by either <see cref="P:System.Text.StringReader.EOF"/> or a whitespace character (defined by <see cref="M:System.Char.IsLetterOrDigit(System.Char)"/>), then reads <paramref name="keyWord"/> from the beginning of the current reading scope and advances the reader to the character after the whitespace character, without considering both case and <see cref="P:System.Text.StringReader.ComparisonType"/> (equivalent to <see cref="F:System.StringComparison.OrdinalIgnoreCase"/>).
            </summary>
            <param name="keyWord">The target substring.</param>
            <param name="ignoreWhiteSpaces">If set to <c>true</c>, the white spaces at the beginning of the reader's current reading scope will be ignored.</param>
            <returns><c>true</c> if the reader's current reading scope starts with <paramref name="keyWord"/> followed by a whitespace character, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadString(System.String,System.Char,System.Boolean,System.Boolean)">
            <summary>
            If the reader's current reading scope starts with <paramref name="keyWord" /> followed by either <see cref="P:System.Text.StringReader.EOF" /> or a <paramref name="keyChr" />, then reads <paramref name="keyWord" /> from the beginning of the current reading scope and advances the reader to the character at or after <paramref name="keyChr" /> (depending on <paramref name="stopAfterWordSeparator"/>).
            </summary>
            <param name="keyWord">The target substring.</param>
            <param name="keyChr">The <paramref name="keyWord"/> is expected to be followed by this character.</param>
            <param name="ignoreWhiteSpaces">If set to <c>true</c>, the white spaces at the beginning of the reader's current reading scope will be ignored.</param>
            <param name="stopAfterWordSeparator">If set to <c>true</c>, the reader stops after <paramref name="keyChr"/> if the reading is successful; otherwise, the reader stops at <paramref name="keyChr"/> if the reading is successful.</param>
            <returns><c>true</c> if the reader's current reading scope starts with <paramref name="keyWord" /> followed by <paramref name="keyChr"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadString(System.String,System.Func{System.Char,System.Boolean},System.Boolean,System.Boolean)">
            <summary>
            If the reader's current reading scope starts with <paramref name="keyWord" /> followed by either <see cref="P:System.Text.StringReader.EOF" /> or character satisfying <paramref name="isWordSeparator" />, then reads <paramref name="keyWord" /> from the beginning of the current reading scope and advances the reader to the character at or after the character satisfying <paramref name="isWordSeparator" /> (depending on <paramref name="stopAfterWordSeparator"/>).
            </summary>
            <param name="keyWord">The target substring.</param>
            <param name="isWordSeparator">A predicate that defines what characters are expected to follow <paramref name="keyWord"/>.</param>
            <param name="ignoreWhiteSpaces">If set to <c>true</c>, the white spaces at the beginning of the reader's current reading scope will be ignored.</param>
            <param name="stopAfterWordSeparator">If set to <c>true</c>, the reader stops after the character defined by <paramref name="isWordSeparator"/> if the reading is successful; otherwise, the reader stops at the character satisfying <paramref name="isWordSeparator"/> if the reading is successful.</param>
            <returns><c>true</c> if the reader's current reading scope starts with <paramref name="keyWord" /> followed by a characater defined by <paramref name="isWordSeparator"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadStringFollowedByNonLetterOrDigit(System.String,System.Boolean)">
            <summary>
            If the reader's current reading scope starts with <paramref name="keyWord"/> followed by either <see cref="P:System.Text.StringReader.EOF"/> or a non-letter non-digit character (defined by <see cref="M:System.Char.IsLetterOrDigit(System.Char)"/>), then reads <paramref name="keyWord"/> from the beginning of the current reading scope and advances the reader to the character after the non-letter non-digit character.
            </summary>
            <param name="keyWord">The target substring.</param>
            <param name="ignoreWhiteSpaces">If set to <c>true</c>, the white spaces at the beginning of the reader's current reading scope will be ignored.</param>
            <returns><c>true</c> if the reader's current reading scope starts with <paramref name="keyWord"/> followed by a non-letter non-digit character, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadStringFollowedByWhiteSpace(System.String,System.Boolean)">
            <summary>
            If the reader's current reading scope starts with <paramref name="keyWord"/> followed by either <see cref="P:System.Text.StringReader.EOF"/> or a whitespace character (defined by <see cref="M:System.Char.IsLetterOrDigit(System.Char)"/>), then reads <paramref name="keyWord"/> from the beginning of the current reading scope and advances the reader to the character after the whitespace character.
            </summary>
            <param name="keyWord">The target substring.</param>
            <param name="ignoreWhiteSpaces">If set to <c>true</c>, the white spaces at the beginning of the reader's current reading scope will be ignored.</param>
            <returns><c>true</c> if the reader's current reading scope starts with <paramref name="keyWord"/> followed by a whitespace character, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReverseRead">
            <summary>
            Reads the last character of the reader's reading scope and shrinks the end of the reading scope to the previous character.
            </summary>
            <returns>The last character of the reader's reading scope if the reading scope is not empty; '\0' if the reader has reached the end of the reading scope.</returns>
        </member>
        <member name="M:System.Text.StringReader.Regress">
            <summary>
            Moves the end of the reading scope to the previous character if the reader's current reading scope is not empty.
            </summary>
        </member>
        <member name="M:System.Text.StringReader.RegressChar">
            <summary>
            Moves the end of the reading scope to the previous character if the reader's current reading scope is not empty.
            </summary>
            <returns><c>true</c> if the reader's current reading scope is not empty and the end position of the scope is moved to the previous character, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReverseReadChar(System.Char,System.Boolean)">
            <summary>
            Determines whether the <paramref name="target"/> character equals the last character (last non-whitespace character if <paramref name="ignoreWhiteSpaces"/> is set <c>true</c>) of the reader's reading scope.
            If so, the end of the reader's reading scope shrinks to the previous character; otherwise, the reading scope remains the same if <paramref name="ignoreWhiteSpaces"/> is set <c>false</c>, or the end of the reading scope is moved to the position of the last non-whitespace character if <paramref name="ignoreWhiteSpaces"/> is set <c>true</c>.
            </summary>
            <param name="target">The target character.</param>
            <param name="ignoreWhiteSpaces"><c>true</c> if all white-spaces are ignored before the <paramref name="target"/> character is encountered.</param>
            <returns>
              <c>true</c> if the target character equals the last character (last non-whitespace character if <paramref name="ignoreWhiteSpaces"/> is set <c>true</c>) of the reader's reading scope; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReverseReadChar(System.Func{System.Char,System.Boolean},System.Boolean)">
            <summary>
            Determines whether the last character (last non-whitespace character if <paramref name="ignoreWhiteSpaces"/> is set <c>true</c>) of the reader's reading scope satisfies the specified <paramref name="predicate"/>.
            If so, the end of the reader's reading scope shrinks to the previous character; otherwise, the reading scope remains the same if <paramref name="ignoreWhiteSpaces"/> is set <c>false</c>, or the end of the reading scope is moved to the position of the last non-whitespace character if <paramref name="ignoreWhiteSpaces"/> is set <c>true</c>.
            </summary>
            <param name="predicate">The predicate to test the character at the end of the reader's reading scope.</param>
            <param name="ignoreWhiteSpaces"><c>true</c> if all white-spaces are ignored before a character satisfying the <paramref name="predicate"/> is encountered.</param>
            <returns>
            If the last character (last non-whitespace character if <paramref name="ignoreWhiteSpaces"/> is set <c>true</c>) of the reader's reading scope satisfies the specified <paramref name="predicate"/>, then this method returns that character; otherwise, this method returns '\0'.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReverseReadChar(System.Char[],System.Boolean)">
            <summary>
            Determines whether the last character (last non-whitespace character if <paramref name="ignoreWhiteSpaces"/> is set <c>true</c>) of the reader's reading scope is in the specified <paramref name="targets"/>.
            If so, the end of the reader's reading scope shrinks to the previous character; otherwise, the reader remains where it was if <paramref name="ignoreWhiteSpaces"/> is set <c>false</c>, or the end of the reader's reading scope is moved to the position of the last non-whitespace character if <paramref name="ignoreWhiteSpaces"/> is set <c>true</c>.
            </summary>
            <param name="targets">The characters to check against the last character (last non-whitespace character if <paramref name="ignoreWhiteSpaces"/> is set <c>true</c>) of the reader's reading scope.</param>
            <param name="ignoreWhiteSpaces"><c>true</c> if all white-spaces are ignored before a target character is encountered.</param>
            <returns>
            The index of the last character (last non-whitespace character if <paramref name="ignoreWhiteSpaces"/> is set <c>true</c>) in the array <paramref name="targets"/>; or -1 if none of <paramref name="targets"/> is encountered.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToEnd">
            <summary>
            Advances this reader to the end of the search scope and returns a substring starting from the current position to the end of the search scope. NOTE that after executing this method, this reader is marked <see cref="P:System.Text.StringReader.EOF"/> and is no longer readable.
            </summary>
            <returns>A substring of the underlying string of this reader, starting from the current position to the end of the reading scope, if the current reader is not marked EOF; otherwise, <see cref="F:System.String.Empty"/>.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToEndWithTrim">
            <summary>
            Advances this reader to the end of the search scope and returns a trimmed substring starting from the current position to the end of the search scope. NOTE that after executing this method, this reader is marked <see cref="P:System.Text.StringReader.EOF"/> and is no longer readable.
            </summary>
            <returns>A substring of the underlying string of this reader, starting from the current position to the end of the reading scope, if the current reader is not marked EOF; otherwise. NOTE that the white spaces at both ends of the substring are removed. If the current reader is marked EOF, then <see cref="F:System.String.Empty"/> will be returned.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToEndAsReader">
            <summary>
            Advances this reader to the end of the search scope and returns a new reader that encapsulates a substring starting from the current position to the end of the search scope. NOTE that after executing this method, the current reader is marked <see cref="P:System.Text.StringReader.EOF"/> and is no longer readable.
            </summary>
            <returns>A new reader encapsulating a substring of the underlying string of the current reader, starting from the current position to the end of the reading scope. NOTE that if the current reader is marked EOF, the returned reader is also marked EOF, of course.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToEndWithTrimAsReader">
            <summary>
            Advances this reader to the end of the search scope and returns a new reader that encapsulates a trimmed substring starting from the current position to the end of the search scope. NOTE that after executing this method, the current reader is marked <see cref="P:System.Text.StringReader.EOF"/> and is no longer readable.
            </summary>
            <returns>A new reader encapsulating a substring of the underlying string of the current reader, starting from the current position to the end of the reading scope. The white spaces at both ends of the substring are removed. NOTE that if the current reader is marked EOF, the returned reader is also marked EOF, of course.</returns>
        </member>
        <member name="M:System.Text.StringReader.op_Implicit(System.Text.StringReader)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="!:System.StringReader"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="reader">The <see cref="!:System.StringReader"/> to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:System.Text.StringReader.op_Implicit(System.String)~System.Text.StringReader">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="!:System.StringReader"/>.
            </summary>
            <param name="str">The <see cref="T:System.String"/> to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadUnsignedInteger(System.Boolean)">
            <summary>
            Reads an unsigned integer from the beginning of the current reading scope. This method only supports ASCII digits.
            </summary>
            <param name="discardFirstNonDigitIfReadingSucceeds">If set to <c>true</c>, the reader advances to the position after the first non-digit character if any integer is read; otherwise, the reader stops at the encountered non-digit character.</param>
            <returns>The unsinged integer read from the current reading scope if there is one; otherwise <c>-1</c>.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadUnsignedDecimal(System.Boolean)">
            <summary>
            Reads an unsigned (non-negative) decimal from the beginning of the current reading scope of the <see cref="P:System.Text.StringReader.UnderlyingString"/> represented by ASCII characters. For reading with the sign, use <see cref="M:System.Text.StringReader.ReadDecimal(System.Boolean)"/>.
            </summary>
            <param name="discardFirstNonDigitIfReadingSucceeds">If set to <c>true</c>, and if the reading of decimal succeeds, the first non-ASCII-digit character will be discarded after reading.</param>
            <returns>An unsigned (non-negative) decimal read from the current reading scope of the <see cref="P:System.Text.StringReader.UnderlyingString"/>.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadDecimal(System.Boolean)">
            <summary>
            Reads a decimal from the beginning of the current reading scope of the <see cref="P:System.Text.StringReader.UnderlyingString"/> represented by ASCII characters with its sign. For reading without the sign, use <see cref="M:System.Text.StringReader.ReadUnsignedDecimal(System.Boolean)"/>.
            </summary>
            <param name="discardFirstNonDigitIfReadingSucceeds">If set to <c>true</c>, and if the reading of decimal succeeds, the first non-ASCII-digit character will be discarded after reading.</param>
            <returns>A decimal read from the current reading scope of the <see cref="P:System.Text.StringReader.UnderlyingString"/> if such decimal exists; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadASCIILettersAndDigits(System.Char[])">
            <summary>
            Reads a string consisting of ASCII letters and digits, plus characters specified in <paramref name="additionalChars"/> at the beginning of the reading scope.
            </summary>
            <param name="additionalChars">Specifies additional characters to read.</param>
            <returns>A string at the beginning of the current reading scope, consisting of ASCII letters and digits plus <paramref name="additionalChars"/>.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadVariableName">
            <summary>
            Reads a variable name from this reader. The valid first character of the variable name can either be a ASCII letter, or '_'; and a valid variable name character (except the first character) can either be a ASCII letter or ASCII digit or '_'.
            </summary>
            <returns>A variable name read from this reader.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadWASReferenceName">
            <summary>
            Reads a WAS reference name from this reader. The valid first character of the variable name can either be a ASCII letter, or '_'; and a valid variable name character (except the first character) can either be a ASCII letter or ASCII digit or '_' or '-'.
            </summary>
            <returns>A variable name read from this reader.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadVariableName(System.Func{System.Char,System.Boolean},System.Func{System.Char,System.Boolean})">
            <summary>
            Reads a variable name from this reader. The valid first character of the variable name is defined by the <paramref name="isValidVariableFirstChr"/>, and a valid variable name character (except the first character) is defined by <paramref name="isValidVariableChr"/>.
            </summary>
            <returns>A variable name read from this reader.</returns>
        </member>
        <member name="M:System.Text.StringReader.GetSplitEnumerator(System.Func{System.Char,System.Boolean},System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings of the current reading scope that are delimited by Unicode characters satisfying the specified <paramref name="predicate" />.
            </summary>
            <param name="predicate">A method to test each Unicode character of the current reading scope.
            Any character that passes this test will be used as a separator.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should not be returned; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned; for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para>
            </param>
            <returns>
            An object that can iterate through substrings of the current reading scope that are delimited by Unicode characters satisfying the specified <paramref name="predicate" />.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.GetSplitReaderEnumerator(System.Func{System.Char,System.Boolean},System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings (represented by <see cref="T:System.Text.StringReader"/> objects) of the current reading scope that are delimited by Unicode characters satisfying the specified <paramref name="predicate" />.
            </summary>
            <param name="predicate">A method to test each Unicode character of the current reading scope. Any character that passes this test will be used as a separator.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should not be returned; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned; for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para>
            </param>
            <returns>
            An object that can iterate through substrings (represented by <see cref="T:System.Text.StringReader"/> objects) of the current reading scope that are delimited by Unicode characters satisfying the specified <paramref name="predicate" />.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.GetSplitEnumerator(System.Char,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings of the current reading scope that are delimited by the specified Unicode character as the separator.
            </summary>
            <param name="separator">A Unicode character as the separator.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should not be returned; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>
            NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned; for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para>
            </param>
            <returns>
            An object that can iterate through substrings of the current reading scope that are delimited by the specified <paramref name="separator"/>.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.GetSplitReaderEnumerator(System.Char,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings (represented by <see cref="T:System.Text.StringReader"/> objects) of the current reading scope that are delimited by the specified Unicode character as the separator.
            </summary>
            <param name="separator">A Unicode character as the separator.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should not be returned; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>
            NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned; for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para>
            </param>
            <returns>
            An object that can iterate through substrings (represented by <see cref="T:System.Text.StringReader"/> objects) of the current reading scope that are delimited by the specified <paramref name="separator"/>.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.GetSplitEnumerator(System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings of the current reading scope that are delimited by the specified Unicode characters as the separators.
            </summary>
            <param name="separators">Unicode characters as the separators.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should not be returned; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned; for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <returns>
            An object that can iterate through substrings of the current reading scope that are delimited by the specified <paramref name="separators"/>.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.GetSplitReaderEnumerator(System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings (represented by <see cref="T:System.Text.StringReader"/> objects) of the current reading scope that are delimited by the specified Unicode character as the separator.
            </summary>
            <param name="separators">Unicode characters as the separators.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should not be returned; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>
            NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned; for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para>
            </param>
            <returns>
            An object that can iterate through substrings (represented by <see cref="T:System.Text.StringReader"/> objects) of the current reading scope that are delimited by the specified <paramref name="separator"/>.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.GetSplitEnumeratorEx(System.Func{System.Char,System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through information about substrings of the current reading scope that are delimited by Unicode characters satisfying the specified <paramref name="predicate" />.
            </summary>
            <param name="predicate">A method to test each Unicode character of the current reading scope.
            Any character that passes this test will be used as a separator.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should not be returned; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned; for example, "ab,   ,cd" split by comma ',' is "ab" and "cd".</para>
            </param>
            <returns>
            An object that can iterate through information about substrings of the current reading scope that are delimited by Unicode characters satisfying the specified <paramref name="predicate" />.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.GetSplitReaderEnumeratorEx(System.Func{System.Char,System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through information about substrings of the current reading scope that are delimited by Unicode characters satisfying the specified <paramref name="predicate" />.
            </summary>
            <param name="predicate">A method to test each Unicode character of the current reading scope. Any character that passes this test will be used as a separator.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should not be returned; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned; for example, "ab,   ,cd" split by comma ',' is "ab" and "cd".</para>
            </param>
            <returns>
            An object that can iterate through information about substrings of the current reading scope that are delimited by Unicode characters satisfying the specified <paramref name="predicate" />.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.GetSplitEnumeratorEx(System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through informaiton about substrings of the current reading scope that are delimited by the specified Unicode characters as the separators.
            </summary>
            <param name="separators">Unicode characters as the separators.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should not be returned; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned; for example, "ab,   ,cd" split by comma ',' is "ab" and "cd".</para></param>
            <returns>
            An object that can iterate through informaiton about substrings of the current reading scope that are delimited by the specified <paramref name="separators"/>.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.GetSplitReaderEnumeratorEx(System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through information about substrings of the current reading scope that are delimited by the specified Unicode character as the separator.
            </summary>
            <param name="separators">Unicode characters as the separators.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should not be returned; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>
            NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned; for example, "ab,   ,cd" split by comma ',' is "ab" and "cd".</para>
            </param>
            <returns>
            An object that can iterate through information about substrings of the current reading scope that are delimited by the specified <paramref name="separator"/>.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.GetSplitEnumeratorWithQuotes(System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings of the current reading scope
            that are delimited by Unicode characters outside quotes and satisfying the specified <paramref name="predicate" />.
            </summary>
            <param name="predicate">A function to test each Unicode character of the current string. Any character that passes this test will be used as a separator.</param>
            <param name="leftQuote">The left quote paired by <paramref name="rightQuote" /> to escape separators.</param>
            <param name="rightQuote">The right quote paired by <paramref name="leftQuote" /> to escape separators.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned; for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para>
            </param>
            <returns>
            An object that can iterate through substrings in the current string instance (or a part of the current string instance)
            that are delimited by Unicode characters outside quotes and satisfying the specified predicate.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.Text.StringReader.GetSplitEnumeratorWithQuotes(System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings of the current reading scope
            that are delimited by Unicode characters outside quotes and satisfying the specified <paramref name="predicate" />.
            </summary>
            <param name="predicate">A function to test each Unicode character of the current string. Any character that passes this test will be used as a separator.</param>
            <param name="leftQuotes">An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a character satisfying the <paramref name="predicate" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a character satisfying the <paramref name="predicate" /> is encountered inside a pair of quotes.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned; for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para>
            </param>
            <returns>
            An object that can iterate through substrings in the current string instance (or a part of the current string instance)
            that are delimited by Unicode characters outside quotes and satisfying the specified predicate.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.Text.StringReader.GetSplitReaderEnumeratorWithQuotes(System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings (represented by <see cref="T:System.Text.StringReader"/> objects) of the current reading scope
            that are delimited by Unicode characters outside quotes and satisfying the specified <paramref name="predicate" />.
            </summary>
            <param name="predicate">A function to test each Unicode character of the current string. Any character that passes this test will be used as a separator.</param>
            <param name="leftQuote">The left quote paired by <paramref name="rightQuote" /> to escape separators.</param>
            <param name="rightQuote">The right quote paired by <paramref name="leftQuote" /> to escape separators.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned; for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para>
            </param>
            <returns>
            An object that can iterate through substrings (represented by <see cref="T:System.Text.StringReader"/> objects) in the current string instance (or a part of the current string instance)
            that are delimited by Unicode characters outside quotes and satisfying the specified predicate.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.Text.StringReader.GetSplitReaderEnumeratorWithQuotes(System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings (represented by <see cref="T:System.Text.StringReader"/> objects) of the current reading scope
            that are delimited by Unicode characters outside quotes and satisfying the specified <paramref name="predicate" />.
            </summary>
            <param name="predicate">A function to test each Unicode character of the current string. Any character that passes this test will be used as a separator.</param>
            <param name="leftQuotes">An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a character satisfying the <paramref name="predicate" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a character satisfying the <paramref name="predicate" /> is encountered inside a pair of quotes.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned; for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para>
            </param>
            <returns>
            An object that can iterate through substrings (represented by <see cref="T:System.Text.StringReader"/> objects) in the current string instance (or a part of the current string instance)
            that are delimited by Unicode characters outside quotes and satisfying the specified predicate.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.Text.StringReader.GetSplitEnumeratorWithQuotes(System.Char,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings of the current reading scope that are delimited by Unicode characters outside quotes.
            </summary>
            <param name="separator">A Unicode character as the separator.</param>
            <param name="leftQuote">The left quote paired by <paramref name="rightQuote" /> to escape separators.</param>
            <param name="rightQuote">The right quote paired by <paramref name="leftQuote" /> to escape separators.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned; for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para>
            </param>
            <returns>
            An object that can iterate through substrings in the current string instance (or a part of the current string instance) that are delimited by Unicode characters outside quotes.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.Text.StringReader.GetSplitEnumeratorWithQuotes(System.Char,System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings of the current reading scope
            that are delimited by Unicode characters outside quotes and satisfying the specified <paramref name="predicate" />.
            </summary>
            <param name="separator">A Unicode character as the separator.</param>
            <param name="leftQuotes">An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a character satisfying the <paramref name="predicate" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a character satisfying the <paramref name="predicate" /> is encountered inside a pair of quotes.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned; for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para>
            </param>
            <returns>
            An object that can iterate through substrings in the current string instance (or a part of the current string instance) that are delimited by Unicode characters outside quotes.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.Text.StringReader.GetSplitReaderEnumeratorWithQuotes(System.Char,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings (represented by <see cref="T:System.Text.StringReader"/> objects) of the current reading scope that are delimited by Unicode characters outside quotes.
            </summary>
            <param name="separator">A Unicode character as the separator.</param>
            <param name="leftQuote">The left quote paired by <paramref name="rightQuote" /> to escape separators.</param>
            <param name="rightQuote">The right quote paired by <paramref name="leftQuote" /> to escape separators.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned; for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para>
            </param>
            <returns>
            An object that can iterate through substrings (represented by <see cref="T:System.Text.StringReader"/> objects) in the current string instance (or a part of the current string instance) that are delimited by Unicode characters outside quotes.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.Text.StringReader.GetSplitReaderEnumeratorWithQuotes(System.Char,System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings (represented by <see cref="T:System.Text.StringReader"/> objects) of the current reading scope
            that are delimited by Unicode characters outside quotes and satisfying the specified <paramref name="predicate" />.
            </summary>
            <param name="separator">A Unicode character as the separator.</param>
            <param name="leftQuotes">An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a character satisfying the <paramref name="predicate" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a character satisfying the <paramref name="predicate" /> is encountered inside a pair of quotes.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned; for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para>
            </param>
            <returns>
            An object that can iterate through substrings (represented by <see cref="T:System.Text.StringReader"/> objects) in the current string instance (or a part of the current string instance) that are delimited by Unicode characters outside quotes.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.Text.StringReader.GetSplitEnumeratorWithQuotes(System.Char[],System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings of the current reading scope that are delimited by Unicode characters outside quotes.
            </summary>
            <param name="separators">Unicode characters as the separators.</param>
            <param name="leftQuote">The left quote paired by <paramref name="rightQuote" /> to escape separators.</param>
            <param name="rightQuote">The right quote paired by <paramref name="leftQuote" /> to escape separators.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned; for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para>
            </param>
            <returns>
            An object that can iterate through substrings in the current string instance (or a part of the current string instance) that are delimited by Unicode characters outside quotes.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.Text.StringReader.GetSplitEnumeratorWithQuotes(System.Char[],System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings of the current reading scope
            that are delimited by Unicode characters outside quotes and satisfying the specified <paramref name="predicate" />.
            </summary>
            <param name="separators">Unicode characters as the separators.</param>
            <param name="leftQuotes">An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a character satisfying the <paramref name="predicate" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a character satisfying the <paramref name="predicate" /> is encountered inside a pair of quotes.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned; for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para>
            </param>
            <returns>
            An object that can iterate through substrings in the current string instance (or a part of the current string instance) that are delimited by Unicode characters outside quotes.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.Text.StringReader.GetSplitReaderEnumeratorWithQuotes(System.Char[],System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings (represented by <see cref="T:System.Text.StringReader"/> objects) of the current reading scope that are delimited by Unicode characters outside quotes.
            </summary>
            <param name="separators">Unicode characters as the separators.</param>
            <param name="leftQuote">The left quote paired by <paramref name="rightQuote" /> to escape separators.</param>
            <param name="rightQuote">The right quote paired by <paramref name="leftQuote" /> to escape separators.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned; for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para>
            </param>
            <returns>
            An object that can iterate through substrings (represented by <see cref="T:System.Text.StringReader"/> objects) in the current string instance (or a part of the current string instance) that are delimited by Unicode characters outside quotes.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.Text.StringReader.GetSplitReaderEnumeratorWithQuotes(System.Char[],System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Gets an object that can iterate through substrings (represented by <see cref="T:System.Text.StringReader"/> objects) of the current reading scope
            that are delimited by Unicode characters outside quotes and satisfying the specified <paramref name="predicate" />.
            </summary>
            <param name="separators">Unicode characters as the separators.</param>
            <param name="leftQuotes">An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a character satisfying the <paramref name="predicate" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a character satisfying the <paramref name="predicate" /> is encountered inside a pair of quotes.</param>
            <param name="removeEmptyEntries"><c>true</c> if empty strings should be removed from the returned substrings; otherwise <c>false</c>.</param>
            <param name="trim">Indicates whether the returned substrings are trimmed.
            <para>NOTE that if <paramref name="removeEmptyEntries" /> is set <c>true</c>, then a substring containing only white spaces will not be returned; for example, in this case "ab,   ,cd" split by comma ',' is "ab" and "cd".</para>
            </param>
            <returns>
            An object that can iterate through substrings (represented by <see cref="T:System.Text.StringReader"/> objects) in the current string instance (or a part of the current string instance) that are delimited by Unicode characters outside quotes.
            </returns>
            <exception cref="T:System.FormatException">Occurs when there is a quote mismatch in the string instance.</exception>
        </member>
        <member name="M:System.Text.StringReader.GetComboEnumerator(System.Char,System.Char,System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Views the current reading scope as a combination expression and returns an enumerator that can iterate through certain combinations. For detailed remarks, <see cref="!:String.GetComboEnumerator" />.
            </summary>
            <param name="parameterGroupSeparator">A Unicode character used as the separator to delimit different types of arguments.</param>
            <param name="parameterSeparator">A Unicode character used as the separator to delimit different arguments of the same type.</param>
            <param name="parameterLeftBracket">A Unicode character right paired by the <paramref name="parameterRightBracket" /> to bracket the argument part.</param>
            <param name="parameterRightBracket">A Unicode character left paired by the <paramref name="parameterLeftBracket" /> to bracket the argument part.</param>
            <param name="leftQuote">A Unicode character right paired by the <paramref name="rightQuote" /> to escape <paramref name="parameterGroupSeparator" /> and <paramref name="parameterSeparator" />.</param>
            <param name="rightQuote">A Unicode character left paired by the <paramref name="leftQuote" /> to escape <paramref name="parameterGroupSeparator" /> and <paramref name="parameterSeparator" />.</param>
            <returns>An enumerator object that can be used to iterate through combinations.</returns>
            <exception cref="T:System.FormatException">Occurs the current reading scope cannot be parsed as a combination expression.</exception>
        </member>
        <member name="M:System.Text.StringReader.GetComboEnumerator``1(System.Func{System.String,``0},System.Char,System.Char,System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Views the current reading scope as a combination expression and returns an enumerator that can iterate through certain combinations. This overload supports build-in data conversion from <see cref="T:System.String"/> to another output type <typeparamref name="T"/>. For detailed remarks, <see cref="!:String.GetComboEnumerator" />.
            </summary>
            <typeparam name="T">The type of objects generated by the returned enumerator.</typeparam>
            <param name="converter">Provides a method that converts each string instance of a combination to an object of type <typeparamref name="T"/>.</param>
            <param name="parameterGroupSeparator">A Unicode character used as the separator to delimit different types of arguments.</param>
            <param name="parameterSeparator">A Unicode character used as the separator to delimit different arguments of the same type.</param>
            <param name="parameterLeftBracket">A Unicode character right paired by the <paramref name="parameterRightBracket" /> to bracket the argument part.</param>
            <param name="parameterRightBracket">A Unicode character left paired by the <paramref name="parameterLeftBracket" /> to bracket the argument part.</param>
            <param name="leftQuote">A Unicode character right paired by the <paramref name="rightQuote" /> to escape <paramref name="parameterGroupSeparator" /> and <paramref name="parameterSeparator" />.</param>
            <param name="rightQuote">A Unicode character left paired by the <paramref name="leftQuote" /> to escape <paramref name="parameterGroupSeparator" /> and <paramref name="parameterSeparator" />.</param>
            <returns>An enumerator object that can be used to iterate through combinations.</returns>
            <exception cref="T:System.FormatException">Occurs the current reading scope cannot be parsed as a combination expression.</exception>
        </member>
        <member name="M:System.Text.StringReader.GetKeyValuePairEnumerator(System.Char,System.Char,System.Char,System.Char,System.Boolean)">
            <summary>
            Gets an enumerator that iterates through key/value pairs represented by this <see cref="T:System.Text.StringReader"/> if its reading scope follows certain syntax.
            </summary>
            <param name="keyDelimiter">The Unicode character that delimits key and value in each pair. In each pair, only the first character that equals this argument will be recognized as a delimiter, and it cannot be escaped.</param>
            <param name="pairDelimiter">The Unicode character that delimits key/value pairs. This delimiter is escapable.</param>
            <param name="leftQuote">The Unicode character as the left escaping quote for <paramref name="pairDelimiter" />. Use '\0' to indicate the escape is disabled.</param>
            <param name="rightQuote">The Unicode character as the right escape quote for <paramref name="pairDelimiter" />.</param>
            <param name="trimValue"><c>true</c> if the white spaces at both ends of the value of each returned pair is trimmed; otherwise, <c>false</c>.</param>
            <returns>
            An enumerator that iterates through key/value pairs represented by this <see cref="T:System.Text.StringReader"/>.
            </returns>
            <remarks>
            To parse the current reading scope as key/value pairs, the reading scope must follow the syntax <c>(&lt;key&gt; &lt;key/value delimiter&gt; [&lt;left escaping quote&gt;]&lt;value&gt; &lt;pair delimiter&gt;[&lt;right escaping quote&gt;]) (...n)</c>.
            <para>If the <paramref name="pairDelimiter" /> is ';' (default value) and the escape is disabled, this string must follow the syntax <c>(&lt;key&gt; = &lt;value&gt;;) (...n)</c>, which is exactly the same as a standard database connection string.</para>
            </remarks>
        </member>
        <member name="M:System.Text.StringReader.GetKeyValuePairReaderEnumerator(System.Char,System.Char,System.Char,System.Char,System.Boolean)">
            <summary>
            Gets an enumerator that iterates through key/value pairs represented by this <see cref="T:System.Text.StringReader"/> if its reading scope follows certain syntax.
            </summary>
            <param name="keyDelimiter">The Unicode character that delimits key and value in each pair. In each pair, only the first character that equals this argument will be recognized as a delimiter, and it cannot be escaped.</param>
            <param name="pairDelimiter">The Unicode character that delimits key/value pairs. This delimiter is escapable.</param>
            <param name="leftQuote">The Unicode character as the left escaping quote for <paramref name="pairDelimiter" />. Use '\0' to indicate the escape is disabled.</param>
            <param name="rightQuote">The Unicode character as the right escape quote for <paramref name="pairDelimiter" />.</param>
            <param name="trimValue"><c>true</c> if the white spaces at both ends of the value of each returned pair is trimmed; otherwise, <c>false</c>.</param>
            <returns>
            An enumerator that iterates through key/value pairs represented by this <see cref="T:System.Text.StringReader"/>. In each returned pair, the value is represented by a <see cref="T:System.Text.StringReader"/>.
            </returns>
            <remarks>
            To parse the current reading scope as key/value pairs, the reading scope must follow the syntax <c>(&lt;key&gt; &lt;key/value delimiter&gt; [&lt;left escaping quote&gt;]&lt;value&gt; &lt;pair delimiter&gt;[&lt;right escaping quote&gt;]) (...n)</c>.
            <para>If the <paramref name="pairDelimiter" /> is ';' (default value) and the escape is disabled, this string must follow the syntax <c>(&lt;key&gt; = &lt;value&gt;;) (...n)</c>, which is exactly the same as a standard database connection string.</para>
            </remarks>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.Func{System.Char,System.Boolean},System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character satisfying <paramref name="predicate"/> is encountered.
            The reader's position after executing this method depends on the <paramref name="options"/>.
            </summary>
            <param name="predicate">A method to test each character.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            If <c>ReadeOptions.ReadToEnd</c> is specified in <paramref name="options"/>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <c>ReadeOptions.ReadToEnd</c> is not specified, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>The position of this reader after executing this method depends on if <c>ReadOptions.StopAfterKey"</c> is specified. If <c>ReadOptions.StopAfterKey"</c> is specified, then the character satisfying the <paramref name="predicate" /> is included in the returned substring if <c>ReadOptions.DiscardKey</c> is also selected.</para>
            <para>NOTE that the white spaces at the beginning of the substring will be trimmed if <c>ReadeOptions.TrimStart</c> is specified, and the white spaces at the end of the substring will be trimmed if <c>ReadeOptions.TrimEnd</c> is specified. Also NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrim(System.Func{System.Char,System.Boolean},System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying the <paramref name="predicate" /> is encountered.
            The current reader stops at the position immediately after the first character satisfying the <paramref name="predicate" /> and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="predicate">A method to test each character.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if no character satisfying the <paramref name="predicate"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrim(System.Func{System.Char,System.Boolean},System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying the <paramref name="predicate" /> is encountered.
            The current reader stops at the position immediately after the first character satisfying the <paramref name="predicate" /> and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="predicate">A method to test each character.</param>
            <param name="discardKeychar">If set to <c>true</c>, the key char
            will be discarded and not be included in the returned substring.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope 
            if no character satisfying the <paramref name="predicate"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that whether the character is included in the returned substring depends on <paramref name="discardKeychar"/>, and the white spaces at both ends of the substring will be trimmed. Also NOTE <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBefore(System.Func{System.Char,System.Boolean},System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying <paramref name="predicate" /> (called key char) is encountered.
            The current reader stops at the position of the first character satisfying the <paramref name="predicate" />.
            </summary>
            <param name="predicate">A method to test each character.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope 
            if no character satisfying the <paramref name="predicate"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfter(System.Func{System.Char,System.Boolean},System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying <paramref name="predicate" /> (called key char) is encountered.
            The current reader stops at the position immediately after the first character satisfying the <paramref name="predicate" />.
            </summary>
            <param name="predicate">A method to test each character.</param>
            <param name="discardKeychar">If set to <c>true</c>, the key char
            will be discarded and not be included in the returned substring.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope 
            if no character satisfying the <paramref name="predicate"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that whether the character is included in the returned substring depends on <paramref name="discardKeychar"/>, and <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character satisfying <paramref name="predicate" /> (called key char) is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="predicate">A method to test each character.</param>
            <param name="leftQuote">The left quote. The reader will not stop when an key char is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when an key char is encountered inside a pair of quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            If <c>ReadeOptions.ReadToEnd</c> is specified in <paramref name="options"/>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <c>ReadeOptions.ReadToEnd</c> is not specified, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>The position of this reader after executing this method depends on if <c>ReadOptions.StopAfterKey"</c> is specified. If <c>ReadOptions.StopAfterKey"</c> is specified, then the character satisfying the <paramref name="predicate" /> is included in the returned substring if <c>ReadOptions.DiscardKey</c> is also selected.</para>
            <para>NOTE that the white spaces at the beginning of the substring will be trimmed if <c>ReadeOptions.TrimStart</c> is specified, and the white spaces at the end of the substring will be trimmed if <c>ReadeOptions.TrimEnd</c> is specified. Also NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrim(System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying <paramref name="predicate" /> (called key char) is encountered outside quotes.
            The current reader stops at the position of the first character of this indicator and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="predicate">A method to test each character.</param>
            <param name="leftQuote">The left quote. The reader will not stop when an key char is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when an key char is encountered inside a pair of quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope 
            if no character satisfying the <paramref name="predicate"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrim(System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying <paramref name="predicate" /> (called key char) is encountered outside quotes.
            The current reader stops at the position immediately after the position of the key char and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="predicate">A method to test each character.</param>
            <param name="leftQuote">The left quote. The reader will not stop when an key char is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when an key char is encountered inside a pair of quotes.</param>
            <param name="discardKeychar">If set to <c>true</c>, the key char
            will be discarded and not be included in the returned substring.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope 
            if no character satisfying the <paramref name="predicate"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found (whether the character is included in the returned substring depends on <paramref name="discardKeychar"/>), or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBefore(System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying <paramref name="predicate" /> (called key char) is encountered outside quotes.
            The current reader stops at the position of the first character of this indicator.
            </summary>
            <param name="predicate">A method to test each character.</param>
            <param name="leftQuote">The left quote. The reader will not stop when an key char is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when an key char is encountered inside a pair of quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope 
            if no character satisfying the <paramref name="predicate"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfter(System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying <paramref name="predicate" /> (called key char) is encountered outside quotes.
            The current reader stops at the position immediately after the position of the key char.
            </summary>
            <param name="predicate">A method to test each character.</param>
            <param name="leftQuote">The left quote. The reader will not stop when an key char is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when an key char is encountered inside a pair of quotes.</param>
            <param name="discardKeychar">If set to <c>true</c>, the key char
            will be discarded and not be included in the returned substring.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope 
            if no character satisfying the <paramref name="predicate"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that whether the character is included in the returned substring depends on <paramref name="discardKeychar"/>, and <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character satisfying <paramref name="predicate" /> (called key char) is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="predicate">A method to test each character.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a character satisfying the <paramref name="predicate"/> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a character satisfying the <paramref name="predicate"/> is encountered inside a pair of quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            If <c>ReadeOptions.ReadToEnd</c> is specified in <paramref name="options"/>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <c>ReadeOptions.ReadToEnd</c> is not specified, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>The position of this reader after executing this method depends on if <c>ReadOptions.StopAfterKey"</c> is specified. If <c>ReadOptions.StopAfterKey"</c> is specified, then the character satisfying the <paramref name="predicate" /> is included in the returned substring if <c>ReadOptions.DiscardKey</c> is also selected.</para>
            <para>NOTE that the white spaces at the beginning of the substring will be trimmed if <c>ReadeOptions.TrimStart</c> is specified, and the white spaces at the end of the substring will be trimmed if <c>ReadeOptions.TrimEnd</c> is specified. Also NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrim(System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying <paramref name="predicate" /> (called key char) is encountered outside quotes.
            The current reader stops at the position of the first character of this indicator and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="predicate">A method to test each character.</param>
            <param name="leftQuotes">An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a character satisfying the <paramref name="predicate" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a character satisfying the <paramref name="predicate" /> is encountered inside a pair of quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope 
            if no character satisfying the <paramref name="predicate"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrim(System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying <paramref name="predicate" /> (called key char) is encountered outside quotes.
            The current reader stops at the position immediately after the position of the key char and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="predicate">A method to test each character.</param>
            <param name="leftQuotes">An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a character satisfying the <paramref name="predicate" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a character satisfying the <paramref name="predicate" /> is encountered inside a pair of quotes.</param>
            <param name="discardKeychar">If set to <c>true</c>, the character satisfying the <paramref name="predicate" />
            will be discarded and not be included in the returned substring.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope 
            if no character satisfying the <paramref name="predicate"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found (whether the character is included in the returned substring depends on <paramref name="discardKeychar"/>), or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBefore(System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying <paramref name="predicate" /> (called key char) is encountered outside quotes.
            The current reader stops at the position of the first character of this indicator.
            </summary>
            <param name="predicate">A method to test each character.</param>
            <param name="leftQuotes">An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a character satisfying the <paramref name="predicate" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a character satisfying the <paramref name="predicate" /> is encountered inside a pair of quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope 
            if no character satisfying the <paramref name="predicate"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfter(System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying <paramref name="predicate" /> (called key char) is encountered outside quotes.
            The current reader stops at the position immediately after the position of the key char.
            </summary>
            <param name="predicate">A method to test each character.</param>
            <param name="leftQuotes">An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a character satisfying the <paramref name="predicate" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a character satisfying the <paramref name="predicate" /> is encountered inside a pair of quotes.</param>
            <param name="discardKeychar">If set to <c>true</c>, the character satisfying the <paramref name="predicate" />
            will be discarded and not be included in the returned substring.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope 
            if no character satisfying the <paramref name="predicate"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that whether the character is included in the returned substring depends on <paramref name="discardKeychar"/>, and <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Char,System.Char,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (called key char) is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            If <c>ReadeOptions.ReadToEnd</c> is specified in <paramref name="options"/>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <c>ReadeOptions.ReadToEnd</c> is not specified, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>The position of this reader after executing this method depends on if <c>ReadOptions.StopAfterKey"</c> is specified. If <c>ReadOptions.StopAfterKey"</c> is specified, then the character satisfying the <paramref name="predicate" /> is included in the returned substring if <c>ReadOptions.DiscardKey</c> is also selected.</para>
            <para>NOTE that the white spaces at the beginning of the substring will be trimmed if <c>ReadeOptions.TrimStart</c> is specified, and the white spaces at the end of the substring will be trimmed if <c>ReadeOptions.TrimEnd</c> is specified. Also NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrim(System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (called key char) is encountered outside quotes.
            The current reader stops at the position of the key char and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="predicate"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found (whether the character is included in the returned substring depends on <paramref name="discardKeychar"/>), or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrim(System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (called key char) is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar">If set to <c>true</c>, the <paramref name="predicate" />
            will be discarded and not be included in the returned substring.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="predicate"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found (whether the character is included in the returned substring depends on <paramref name="discardKeychar"/>), or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBefore(System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (called key char) is encountered outside quotes.
            The current reader stops at the position of the key char.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="predicate"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfter(System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (called key char) is encountered outside quotes.
            The current reader stops at the position immediately after the position of the key char.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar">If set to <c>true</c>, the <paramref name="predicate" /> will be discarded and not be included in the returned substring.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="predicate"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that whether the character is included in the returned substring depends on <paramref name="discardKeychar"/>, and <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Char[],System.Char[],System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (called key char) is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            If <c>ReadeOptions.ReadToEnd</c> is specified in <paramref name="options"/>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <c>ReadeOptions.ReadToEnd</c> is not specified, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>The position of this reader after executing this method depends on if <c>ReadOptions.StopAfterKey"</c> is specified. If <c>ReadOptions.StopAfterKey"</c> is specified, then the character satisfying the <paramref name="predicate" /> is included in the returned substring if <c>ReadOptions.DiscardKey</c> is also selected.</para>
            <para>NOTE that the white spaces at the beginning of the substring will be trimmed if <c>ReadeOptions.TrimStart</c> is specified, and the white spaces at the end of the substring will be trimmed if <c>ReadeOptions.TrimEnd</c> is specified. Also NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrim(System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (called key char) is encountered outside quotes.
            The current reader stops at the position of the key char and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="predicate"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found (whether the character is included in the returned substring depends on <paramref name="discardKeychar"/>), or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrim(System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (called key char) is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar">If set to <c>true</c>, the <paramref name="predicate" />
            will be discarded and not be included in the returned substring.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="predicate"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found (whether the character is included in the returned substring depends on <paramref name="discardKeychar"/>), or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBefore(System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (called key char) is encountered outside quotes.
            The current reader stops at the position of the key char.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="predicate"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfter(System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (called key char) is encountered outside quotes.
            The current reader stops at the position immediately after the position of the key char.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar">If set to <c>true</c>, the <paramref name="predicate" /> will be discarded and not be included in the returned substring.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="predicate"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that whether the character is included in the returned substring depends on <paramref name="discardKeychar"/>, and <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Char,System.Char,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (called key char) is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            If <c>ReadeOptions.ReadToEnd</c> is specified in <paramref name="options"/>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <c>ReadeOptions.ReadToEnd</c> is not specified, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>The position of this reader after executing this method depends on if <c>ReadOptions.StopAfterKey"</c> is specified. If <c>ReadOptions.StopAfterKey"</c> is specified, then the character satisfying the <paramref name="predicate" /> is included in the returned substring if <c>ReadOptions.DiscardKey</c> is also selected.</para>
            <para>NOTE that the white spaces at the beginning of the substring will be trimmed if <c>ReadeOptions.TrimStart</c> is specified, and the white spaces at the end of the substring will be trimmed if <c>ReadeOptions.TrimEnd</c> is specified. Also NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrim(System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (called key char) is encountered outside quotes.
            The current reader stops at the position of the key char and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="predicate"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found (whether the character is included in the returned substring depends on <paramref name="discardKeychar"/>), or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrim(System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (called key char) is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar">If set to <c>true</c>, the <paramref name="predicate" />
            will be discarded and not be included in the returned substring.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="predicate"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found (whether the character is included in the returned substring depends on <paramref name="discardKeychar"/>), or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBefore(System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (called key char) is encountered outside quotes.
            The current reader stops at the position of the key char.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="predicate"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfter(System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (called key char) is encountered outside quotes.
            The current reader stops at the position immediately after the position of the key char.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar">If set to <c>true</c>, the <paramref name="predicate" />
            will be discarded and not be included in the returned substring.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="predicate"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that whether the character is included in the returned substring depends on <paramref name="discardKeychar"/>, and <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Char[],System.Char[],System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (called key char) is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            If <c>ReadeOptions.ReadToEnd</c> is specified in <paramref name="options"/>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <c>ReadeOptions.ReadToEnd</c> is not specified, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>The position of this reader after executing this method depends on if <c>ReadOptions.StopAfterKey"</c> is specified. If <c>ReadOptions.StopAfterKey"</c> is specified, then the character satisfying the <paramref name="predicate" /> is included in the returned substring if <c>ReadOptions.DiscardKey</c> is also selected.</para>
            <para>NOTE that the white spaces at the beginning of the substring will be trimmed if <c>ReadeOptions.TrimStart</c> is specified, and the white spaces at the end of the substring will be trimmed if <c>ReadeOptions.TrimEnd</c> is specified. Also NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrim(System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (called key char) is encountered outside quotes.
            The current reader stops at the position of the key char and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="predicate"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found (whether the character is included in the returned substring depends on <paramref name="discardKeychar"/>), or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrim(System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (called key char) is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar">If set to <c>true</c>, the <paramref name="predicate" />
            will be discarded and not be included in the returned substring.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="predicate"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found (whether the character is included in the returned substring depends on <paramref name="discardKeychar"/>), or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBefore(System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (called key char) is encountered outside quotes.
            The current reader stops at the position of the key char.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="predicate"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfter(System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (called key char) is encountered outside quotes.
            The current reader stops at the position immediately after the position of the key char.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar">If set to <c>true</c>, the <paramref name="predicate" />
            will be discarded and not be included in the returned substring.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="predicate"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that whether the character is included in the returned substring depends on <paramref name="discardKeychar"/>, and <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.Char,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar"/> is encountered.
            The current position after executing this method depends on the <paramref name="options"/>.
            </summary>
            <param name="keychar">The reader stops when this character is encountered.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            If <c>ReadeOptions.ReadToEnd</c> is specified in <paramref name="options"/>, then a substring starting from the current position of the reading scope to the position of the first occurrence of <paramref name="keychar"/> within the search scope when the keychar is found, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found.
            <para>If <c>ReadeOptions.ReadToEnd</c> is not specified, then a substring starting from the current position of the reading scope to the position of the first occurrence of <paramref name="keychar"/> within the search scope when the keychar is found, or <c>null</c> if such character is not found.</para>
            <para>The position of this reader after executing this method depends on if <c>ReadOptions.StopAfterKey</c> is specified. If <c>ReadOptions.StopAfterKey</c> is specified, then the <paramref name="keychar"/> is included in the returned substring if <c>ReadOptions.DiscardKey</c> is also selected.</para>
            <para>NOTE that the white spaces at the beginning of the substring will be trimmed if <c>ReadeOptions.TrimStart</c> is specified, and the white spaces at the end of the substring will be trimmed if <c>ReadeOptions.TrimEnd</c> is specified. Also NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrim(System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered.
            The reader stops at the position of the encountered keychar and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keychar">The reader stops when this character is encountered.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrim(System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered.
            The reader stops at the position next to the <paramref name="keychar" /> and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keychar">The reader stops when this character is encountered.</param>
            <param name="discardKeychar"><c>true</c> if the <paramref name="keychar" /> should be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that whether the <paramref name="keychar" /> is included in the returned substring depends on <paramref name="discardKeychar"/>, and the white spaces at both ends of the substring will be trimmed. Also NOTE <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBefore(System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered.
            The reader stops at the position of the encountered keychar.
            </summary>
            <param name="keychar">The reader stops when this character is encountered.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfter(System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered.
            The reader stops at the position next to the encountered keychar.
            </summary>
            <param name="keychar">The reader stops when this character is encountered.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that whether the <paramref name="keychar" /> is included in the returned substring depends on <paramref name="discardKeychar"/>, and <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.Char,System.Char,System.Char,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychar">The reader stops when this character is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            If <c>ReadeOptions.ReadToEnd</c> is specified in <paramref name="options"/>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <c>ReadeOptions.ReadToEnd</c> is not specified, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>The position of this reader after executing this method depends on if <see cref="F:System.Text.StringReader.ReadOptions.StopAfterKey"/> is specified. If <see cref="F:System.Text.StringReader.ReadOptions.StopAfterKey"/> is specified, then the <paramref name="keychar"/> is included in the returned substring if <see cref="F:System.Text.StringReader.ReadOptions.DiscardKey"/> is also selected.</para>
            <para>NOTE the white spaces at the beginning of the substring will be trimmed if <c>ReadeOptions.TrimStart</c> is specified, and the white spaces at the end of the substring will be trimmed if <c>ReadeOptions.TrimEnd</c> is specified. Also NOTE <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.Char,System.Char,System.Char,System.Char,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychar">The reader stops when this character is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="quoteEscape">A character for escaping the quotes in the string. Note the escaped quotes will not be solved in the returned string of this method.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            If <c>ReadeOptions.ReadToEnd</c> is specified in <paramref name="options" />, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <c>ReadeOptions.ReadToEnd</c> is not specified, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para><para>The position of this reader after executing this method depends on if <see cref="F:System.Text.StringReader.ReadOptions.StopAfterKey" /> is specified. If <see cref="F:System.Text.StringReader.ReadOptions.StopAfterKey" /> is specified, then the <paramref name="keychar" /> is included in the returned substring if <see cref="F:System.Text.StringReader.ReadOptions.DiscardKey" /> is also selected.</para><para>NOTE the white spaces at the beginning of the substring will be trimmed if <c>ReadeOptions.TrimStart</c> is specified, and the white spaces at the end of the substring will be trimmed if <c>ReadeOptions.TrimEnd</c> is specified. Also NOTE <see cref="F:System.String.Empty" /> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrim(System.Char,System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The reader stops at the position of the first character of this Keychar and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keychar">The reader stops when this character is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrim(System.Char,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The reader stops at the position next to the last character of the encountered keyword and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keychar">The reader stops when this character is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="discardKeychar">If set to <c>true</c>, the <paramref name="keychar" />
            will be discarded and not be included in the returned substring.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the <pararef name="keychar" /> is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and the white spaces at both ends of the substring will be trimmed. Also NOTE <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBefore(System.Char,System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The reader stops at the position of the encountered keychar.
            </summary>
            <param name="keychar">The reader stops when this character is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfter(System.Char,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The reader stops at the position next to the encountered keychar.
            </summary>
            <param name="keychar">The reader stops when this character is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="discardKeychar">If set to <c>true</c>, the <paramref name="keychar" />
            will be discarded and not be included in the returned substring.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the <pararef name="keychar" /> is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.Char,System.Char[],System.Char[],System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychar">The reader stops when this character is encountered.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            If <c>ReadeOptions.ReadToEnd</c> is specified in <paramref name="options"/>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <c>ReadeOptions.ReadToEnd</c> is not specified, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>The position of this reader after executing this method depends on if <c>ReadOptions.StopAfterKey</c> is specified. If <c>ReadOptions.StopAfterKey</c> is specified, then the character satisfying the <paramref name="predicate" /> is included in the returned substring if <c>ReadOptions.DiscardKey</c> is also selected.</para>
            <para>NOTE that the white spaces at the beginning of the substring will be trimmed if <c>ReadeOptions.TrimStart</c> is specified, and the white spaces at the end of the substring will be trimmed if <c>ReadeOptions.TrimEnd</c> is specified. Also NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrim(System.Char,System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The reader stops at the position of the first character of this Keychar and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keychar">The reader stops when this character is encountered.</param>
            <param name="leftQuotes">An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrim(System.Char,System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The reader stops at the position next to the last character of the encountered keyword and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keychar">The reader stops when this character is encountered.</param>
            <param name="leftQuotes">An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the <pararef name="keychar" /> is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and the white spaces at both ends of the substring will be trimmed. Also NOTE <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBefore(System.Char,System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The reader stops at the position of the encountered keychar.
            </summary>
            <param name="Keychar">The reader stops when this character is encountered.</param>
            <param name="leftQuotes">An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfter(System.Char,System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The reader stops at the position next to the encountered keychar.
            </summary>
            <param name="Keychar">The reader stops when this character is encountered.</param>
            <param name="leftQuotes">An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="discardKeychar">If set to <c>true</c>, the <paramref name="keychar" />
            will be discarded and not be included in the returned substring.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the <pararef name="keychar" /> is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.Char,System.Char,System.Char,System.Char,System.Char,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            If <c>ReadeOptions.ReadToEnd</c> is specified in <paramref name="options"/>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <c>ReadeOptions.ReadToEnd</c> is not specified, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>The position of this reader after executing this method depends on if <c>ReadOptions.StopAfterKey</c> is specified. If <c>ReadOptions.StopAfterKey</c> is specified, then the character satisfying the <paramref name="predicate" /> is included in the returned substring if <c>ReadOptions.DiscardKey</c> is also selected.</para>
            <para>NOTE that the white spaces at the beginning of the substring will be trimmed if <c>ReadeOptions.TrimStart</c> is specified, and the white spaces at the end of the substring will be trimmed if <c>ReadeOptions.TrimEnd</c> is specified. Also NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrim(System.Char,System.Char,System.Char,System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position of the encountered keychar and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrim(System.Char,System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the <pararef name="keychar" /> is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and the white spaces at both ends of the substring will be trimmed. Also NOTE <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBefore(System.Char,System.Char,System.Char,System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position of the <paramref name="keychar"/>
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfter(System.Char,System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position immediately after the position of the <paramref name="keychar" />.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the <pararef name="keychar" /> is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.Char,System.Char,System.Char,System.Char[],System.Char[],System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            If <c>ReadeOptions.ReadToEnd</c> is specified in <paramref name="options"/>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <c>ReadeOptions.ReadToEnd</c> is not specified, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>The position of this reader after executing this method depends on if <c>ReadOptions.StopAfterKey</c> is specified. If <c>ReadOptions.StopAfterKey</c> is specified, then the character satisfying the <paramref name="predicate" /> is included in the returned substring if <c>ReadOptions.DiscardKey</c> is also selected.</para>
            <para>NOTE that the white spaces at the beginning of the substring will be trimmed if <c>ReadeOptions.TrimStart</c> is specified, and the white spaces at the end of the substring will be trimmed if <c>ReadeOptions.TrimEnd</c> is specified. Also NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrim(System.Char,System.Char,System.Char,System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position of the encountered keychar and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrim(System.Char,System.Char,System.Char,System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the <pararef name="keychar" /> is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and the white spaces at both ends of the substring will be trimmed. Also NOTE <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBefore(System.Char,System.Char,System.Char,System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position of the <paramref name="keychar"/>
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfter(System.Char,System.Char,System.Char,System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position immediately after the position of the <paramref name="keychar" />.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the <pararef name="keychar" /> is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.Char,System.Char[],System.Char[],System.Char,System.Char,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            If <c>ReadeOptions.ReadToEnd</c> is specified in <paramref name="options"/>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <c>ReadeOptions.ReadToEnd</c> is not specified, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>The position of this reader after executing this method depends on if <c>ReadOptions.StopAfterKey</c> is specified. If <c>ReadOptions.StopAfterKey</c> is specified, then the character satisfying the <paramref name="predicate" /> is included in the returned substring if <c>ReadOptions.DiscardKey</c> is also selected.</para>
            <para>NOTE that the white spaces at the beginning of the substring will be trimmed if <c>ReadeOptions.TrimStart</c> is specified, and the white spaces at the end of the substring will be trimmed if <c>ReadeOptions.TrimEnd</c> is specified. Also NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrim(System.Char,System.Char[],System.Char[],System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position of the encountered keychar and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrim(System.Char,System.Char[],System.Char[],System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the <pararef name="keychar" /> is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and the white spaces at both ends of the substring will be trimmed. Also NOTE <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBefore(System.Char,System.Char[],System.Char[],System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position of the <paramref name="keychar"/>
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfter(System.Char,System.Char[],System.Char[],System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position immediately after the position of the <paramref name="keychar" />.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the <pararef name="keychar" /> is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.Char,System.Char[],System.Char[],System.Char[],System.Char[],System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            If <c>ReadeOptions.ReadToEnd</c> is specified in <paramref name="options"/>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <c>ReadeOptions.ReadToEnd</c> is not specified, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>The position of this reader after executing this method depends on if <c>ReadOptions.StopAfterKey</c> is specified. If <c>ReadOptions.StopAfterKey</c> is specified, then the character satisfying the <paramref name="predicate" /> is included in the returned substring if <c>ReadOptions.DiscardKey</c> is also selected.</para>
            <para>NOTE that the white spaces at the beginning of the substring will be trimmed if <c>ReadeOptions.TrimStart</c> is specified, and the white spaces at the end of the substring will be trimmed if <c>ReadeOptions.TrimEnd</c> is specified. Also NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrim(System.Char,System.Char[],System.Char[],System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position of the encountered keychar and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrim(System.Char,System.Char[],System.Char[],System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the <pararef name="keychar" /> is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and the white spaces at both ends of the substring will be trimmed. Also NOTE <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBefore(System.Char,System.Char[],System.Char[],System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position of the <paramref name="keychar"/>
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfter(System.Char,System.Char[],System.Char[],System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position immediately after the position of the <paramref name="keychar" />.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of the <paramref name="keychar" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the <pararef name="keychar" /> is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.Char[],System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars"/> is encountered.
            The reader's position after executing this method depends on the <paramref name="options"/>.
            </summary>
            <param name="keychars">The reader stops when any of these characters is encountered.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            If <c>ReadeOptions.ReadToEnd</c> is specified in <paramref name="options"/>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found.
            <para>If <c>ReadeOptions.ReadToEnd</c> is not specified, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>The position of this reader after executing this method depends on if <c>ReadOptions.StopAfterKey</c> is specified. If <c>ReadOptions.StopAfterKey</c> is specified, then the character satisfying the <paramref name="predicate" /> is included in the returned substring if <c>ReadOptions.DiscardKey</c> is also selected.</para>
            <para>NOTE that the white spaces at the beginning of the substring will be trimmed if <c>ReadeOptions.TrimStart</c> is specified, and the white spaces at the end of the substring will be trimmed if <c>ReadeOptions.TrimEnd</c> is specified. Also NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrim(System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered.
            The reader stops at the position of the first character of this Keychar and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any of these characters is encountered.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrim(System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered.
            The reader stops at the position next to the last character of the encountered keyword and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any of these characters is encountered.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the encountered keychar is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and the white spaces at both ends of the substring will be trimmed. Also NOTE <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBefore(System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars"/> is encountered.
            The reader stops at the position of the encountered keychar.
            </summary>
            <param name="keychars">The reader stops when any of these characters is encountered.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfter(System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars"/> is encountered.
            The reader stops at the position next to the encountered keychar.
            </summary>
            <param name="keychars">The reader stops when any of these characters is encountered.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that whether the encountered keychar is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.Char[],System.Char,System.Char,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychars">The reader stops when any of these characters is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            If <c>ReadeOptions.ReadToEnd</c> is specified in <paramref name="options"/>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <c>ReadeOptions.ReadToEnd</c> is not specified, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>The position of this reader after executing this method depends on if <c>ReadOptions.StopAfterKey</c> is specified. If <c>ReadOptions.StopAfterKey</c> is specified, then the character satisfying the <paramref name="predicate" /> is included in the returned substring if <c>ReadOptions.DiscardKey</c> is also selected.</para>
            <para>NOTE that the white spaces at the beginning of the substring will be trimmed if <c>ReadeOptions.TrimStart</c> is specified, and the white spaces at the end of the substring will be trimmed if <c>ReadeOptions.TrimEnd</c> is specified. Also NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrim(System.Char[],System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The reader stops at the position of the first character of this Keychar and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any of these characters is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrim(System.Char[],System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The reader stops at the position next to the last character of the encountered keyword and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any of these characters is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the encountered keychar is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and the white spaces at both ends of the substring will be trimmed. Also NOTE <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBefore(System.Char[],System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The reader stops at the position of the encountered keychar.
            </summary>
            <param name="keychars">The reader stops when any of these characters is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <para>NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfter(System.Char[],System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The reader stops at the position next to the encountered keychar.
            </summary>
            <param name="keychars">The reader stops when any of these characters is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when any of the <paramref name="keychars"/> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when any of the <paramref name="keychars"/> is encountered inside a pair of quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the encountered keychar is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.Char[],System.Char[],System.Char[],System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychars">The reader stops when any of these characters is encountered.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            If <c>ReadeOptions.ReadToEnd</c> is specified in <paramref name="options"/>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <c>ReadeOptions.ReadToEnd</c> is not specified, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>The position of this reader after executing this method depends on if <c>ReadOptions.StopAfterKey</c> is specified. If <c>ReadOptions.StopAfterKey</c> is specified, then the character satisfying the <paramref name="predicate" /> is included in the returned substring if <c>ReadOptions.DiscardKey</c> is also selected.</para>
            <para>NOTE that the white spaces at the beginning of the substring will be trimmed if <c>ReadeOptions.TrimStart</c> is specified, and the white spaces at the end of the substring will be trimmed if <c>ReadeOptions.TrimEnd</c> is specified. Also NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrim(System.Char[],System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The reader stops at the position of the first character of this Keychar and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any of these characters is encountered.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrim(System.Char[],System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The reader stops at the position next to the last character of the encountered keyword and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any of these characters is encountered.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the encountered keychar is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and the white spaces at both ends of the substring will be trimmed. Also NOTE <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBefore(System.Char[],System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The reader stops at the position of the encountered keychar.
            </summary>
            <param name="keychars">The reader stops when any of these characters is encountered.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <para>NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfter(System.Char[],System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The reader stops at the position next to the encountered keychar.
            </summary>
            <param name="keychars">The reader stops when any of these characters is encountered.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the encountered keychar is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.Char[],System.Char,System.Char,System.Char,System.Char,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            If <c>ReadeOptions.ReadToEnd</c> is specified in <paramref name="options"/>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <c>ReadeOptions.ReadToEnd</c> is not specified, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>The position of this reader after executing this method depends on if <c>ReadOptions.StopAfterKey</c> is specified. If <c>ReadOptions.StopAfterKey</c> is specified, then the character satisfying the <paramref name="predicate" /> is included in the returned substring if <c>ReadOptions.DiscardKey</c> is also selected.</para>
            <para>NOTE that the white spaces at the beginning of the substring will be trimmed if <c>ReadeOptions.TrimStart</c> is specified, and the white spaces at the end of the substring will be trimmed if <c>ReadeOptions.TrimEnd</c> is specified. Also NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrim(System.Char[],System.Char,System.Char,System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the <paramref name="keychars" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrim(System.Char[],System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the encountered keychar is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and the white spaces at both ends of the substring will be trimmed. Also NOTE <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBefore(System.Char[],System.Char,System.Char,System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the encountered character of the <paramref name="keychars"/>
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <para>NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfter(System.Char[],System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the position of the <paramref name="keychar" />.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the encountered keychar is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.Char[],System.Char,System.Char,System.Char[],System.Char[],System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            If <c>ReadeOptions.ReadToEnd</c> is specified in <paramref name="options"/>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <c>ReadeOptions.ReadToEnd</c> is not specified, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>The position of this reader after executing this method depends on if <c>ReadOptions.StopAfterKey</c> is specified. If <c>ReadOptions.StopAfterKey</c> is specified, then the character satisfying the <paramref name="predicate" /> is included in the returned substring if <c>ReadOptions.DiscardKey</c> is also selected.</para>
            <para>NOTE that the white spaces at the beginning of the substring will be trimmed if <c>ReadeOptions.TrimStart</c> is specified, and the white spaces at the end of the substring will be trimmed if <c>ReadeOptions.TrimEnd</c> is specified. Also NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrim(System.Char[],System.Char,System.Char,System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the <paramref name="keychars" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrim(System.Char[],System.Char,System.Char,System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the encountered keychar is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and the white spaces at both ends of the substring will be trimmed. Also NOTE <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBefore(System.Char[],System.Char,System.Char,System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the encountered character of the <paramref name="keychars"/>
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <para>NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfter(System.Char[],System.Char,System.Char,System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the position of the <paramref name="keychar" />.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the encountered keychar is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.Char[],System.Char[],System.Char[],System.Char,System.Char,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            If <c>ReadeOptions.ReadToEnd</c> is specified in <paramref name="options"/>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <c>ReadeOptions.ReadToEnd</c> is not specified, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>The position of this reader after executing this method depends on if <c>ReadOptions.StopAfterKey</c> is specified. If <c>ReadOptions.StopAfterKey</c> is specified, then the character satisfying the <paramref name="predicate" /> is included in the returned substring if <c>ReadOptions.DiscardKey</c> is also selected.</para>
            <para>NOTE that the white spaces at the beginning of the substring will be trimmed if <c>ReadeOptions.TrimStart</c> is specified, and the white spaces at the end of the substring will be trimmed if <c>ReadeOptions.TrimEnd</c> is specified. Also NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrim(System.Char[],System.Char[],System.Char[],System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the <paramref name="keychars" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrim(System.Char[],System.Char[],System.Char[],System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the encountered keychar is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and the white spaces at both ends of the substring will be trimmed. Also NOTE <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBefore(System.Char[],System.Char[],System.Char[],System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the encountered character of the <paramref name="keychars"/>
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <para>NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfter(System.Char[],System.Char[],System.Char[],System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the position of the encountered character of the <paramref name="keychars" />.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the encountered keychar is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.Char[],System.Char[],System.Char[],System.Char[],System.Char[],System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            If <c>ReadeOptions.ReadToEnd</c> is specified in <paramref name="options"/>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <c>ReadeOptions.ReadToEnd</c> is not specified, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>The position of this reader after executing this method depends on if <c>ReadOptions.StopAfterKey</c> is specified. If <c>ReadOptions.StopAfterKey</c> is specified, then the character satisfying the <paramref name="predicate" /> is included in the returned substring if <c>ReadOptions.DiscardKey</c> is also selected.</para>
            <para>NOTE that the white spaces at the beginning of the substring will be trimmed if <c>ReadeOptions.TrimStart</c> is specified, and the white spaces at the end of the substring will be trimmed if <c>ReadeOptions.TrimEnd</c> is specified. Also NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrim(System.Char[],System.Char[],System.Char[],System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the <paramref name="keychars" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrim(System.Char[],System.Char[],System.Char[],System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the encountered keychar is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and the white spaces at both ends of the substring will be trimmed. Also NOTE <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBefore(System.Char[],System.Char[],System.Char[],System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the encountered character of the <paramref name="keychars"/>
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <para>NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfter(System.Char[],System.Char[],System.Char[],System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the position of the encountered character of the <paramref name="keychars" />.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the encountered keychar is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.Char[],System.Int32@,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars"/> is encountered.
            The reader's position after executing this method depends on the <paramref name="options"/>.
            </summary>
            <param name="keychars">The reader stops when any of these characters is encountered.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            If <c>ReadeOptions.ReadToEnd</c> is specified in <paramref name="options"/>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found.
            <para>If <c>ReadeOptions.ReadToEnd</c> is not specified, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>The position of this reader after executing this method depends on if <c>ReadOptions.StopAfterKey</c> is specified. If <c>ReadOptions.StopAfterKey</c> is specified, then the character satisfying the <paramref name="predicate" /> is included in the returned substring if <c>ReadOptions.DiscardKey</c> is also selected.</para>
            <para>NOTE that the white spaces at the beginning of the substring will be trimmed if <c>ReadeOptions.TrimStart</c> is specified, and the white spaces at the end of the substring will be trimmed if <c>ReadeOptions.TrimEnd</c> is specified. Also NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrim(System.Char[],System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered.
            The reader stops at the position of the first character of this Keychar and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any of these characters is encountered.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrim(System.Char[],System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered.
            The reader stops at the position next to the last character of the encountered keyword and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any of these characters is encountered.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the encountered keychar is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and the white spaces at both ends of the substring will be trimmed. Also NOTE <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBefore(System.Char[],System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars"/> is encountered.
            The reader stops at the position of the encountered keychar.
            </summary>
            <param name="keychars">The reader stops when any of these characters is encountered.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfter(System.Char[],System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars"/> is encountered.
            The reader stops at the position next to the encountered keychar.
            </summary>
            <param name="keychars">The reader stops when any of these characters is encountered.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found, or <c>null</c> if such character is not found.</para>
            <para>NOTE that whether the encountered keychar is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.Char[],System.Char,System.Char,System.Int32@,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychars">The reader stops when any of these characters is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            If <c>ReadeOptions.ReadToEnd</c> is specified in <paramref name="options"/>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <c>ReadeOptions.ReadToEnd</c> is not specified, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>The position of this reader after executing this method depends on if <c>ReadOptions.StopAfterKey</c> is specified. If <c>ReadOptions.StopAfterKey</c> is specified, then the character satisfying the <paramref name="predicate" /> is included in the returned substring if <c>ReadOptions.DiscardKey</c> is also selected.</para>
            <para>NOTE that the white spaces at the beginning of the substring will be trimmed if <c>ReadeOptions.TrimStart</c> is specified, and the white spaces at the end of the substring will be trimmed if <c>ReadeOptions.TrimEnd</c> is specified. Also NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrim(System.Char[],System.Char,System.Char,System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The reader stops at the position of the first character of this Keychar and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any of these characters is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrim(System.Char[],System.Char,System.Char,System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The reader stops at the position next to the last character of the encountered keyword and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any of these characters is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the encountered keychar is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and the white spaces at both ends of the substring will be trimmed. Also NOTE <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBefore(System.Char[],System.Char,System.Char,System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The reader stops at the position of the encountered keychar.
            </summary>
            <param name="keychars">The reader stops when any of these characters is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <para>NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfter(System.Char[],System.Char,System.Char,System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The reader stops at the position next to the encountered keychar.
            </summary>
            <param name="keychars">The reader stops when any of these characters is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when any of the <paramref name="keychars"/> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when any of the <paramref name="keychars"/> is encountered inside a pair of quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the encountered keychar is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.Char[],System.Char[],System.Char[],System.Int32@,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychars">The reader stops when any of these characters is encountered.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            If <c>ReadeOptions.ReadToEnd</c> is specified in <paramref name="options"/>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <c>ReadeOptions.ReadToEnd</c> is not specified, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>The position of this reader after executing this method depends on if <c>ReadOptions.StopAfterKey</c> is specified. If <c>ReadOptions.StopAfterKey</c> is specified, then the character satisfying the <paramref name="predicate" /> is included in the returned substring if <c>ReadOptions.DiscardKey</c> is also selected.</para>
            <para>NOTE that the white spaces at the beginning of the substring will be trimmed if <c>ReadeOptions.TrimStart</c> is specified, and the white spaces at the end of the substring will be trimmed if <c>ReadeOptions.TrimEnd</c> is specified. Also NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrim(System.Char[],System.Char[],System.Char[],System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The reader stops at the position of the first character of this Keychar and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any of these characters is encountered.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrim(System.Char[],System.Char[],System.Char[],System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The reader stops at the position next to the last character of the encountered keyword and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any of these characters is encountered.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the encountered keychar is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and the white spaces at both ends of the substring will be trimmed. Also NOTE <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBefore(System.Char[],System.Char[],System.Char[],System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The reader stops at the position of the encountered keychar.
            </summary>
            <param name="keychars">The reader stops when any of these characters is encountered.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <para>NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfter(System.Char[],System.Char[],System.Char[],System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The reader stops at the position next to the encountered keychar.
            </summary>
            <param name="keychars">The reader stops when any of these characters is encountered.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the encountered keychar is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.Char[],System.Char,System.Char,System.Char,System.Char,System.Int32@,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            If <c>ReadeOptions.ReadToEnd</c> is specified in <paramref name="options"/>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <c>ReadeOptions.ReadToEnd</c> is not specified, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>The position of this reader after executing this method depends on if <c>ReadOptions.StopAfterKey</c> is specified. If <c>ReadOptions.StopAfterKey</c> is specified, then the character satisfying the <paramref name="predicate" /> is included in the returned substring if <c>ReadOptions.DiscardKey</c> is also selected.</para>
            <para>NOTE that the white spaces at the beginning of the substring will be trimmed if <c>ReadeOptions.TrimStart</c> is specified, and the white spaces at the end of the substring will be trimmed if <c>ReadeOptions.TrimEnd</c> is specified. Also NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrim(System.Char[],System.Char,System.Char,System.Char,System.Char,System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the <paramref name="keychars" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrim(System.Char[],System.Char,System.Char,System.Char,System.Char,System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the encountered keychar is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and the white spaces at both ends of the substring will be trimmed. Also NOTE <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBefore(System.Char[],System.Char,System.Char,System.Char,System.Char,System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the encountered character of the <paramref name="keychars"/>
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <para>NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfter(System.Char[],System.Char,System.Char,System.Char,System.Char,System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the position of the <paramref name="keychar" />.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the encountered keychar is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.Char[],System.Char,System.Char,System.Char[],System.Char[],System.Int32@,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            If <c>ReadeOptions.ReadToEnd</c> is specified in <paramref name="options"/>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <c>ReadeOptions.ReadToEnd</c> is not specified, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>The position of this reader after executing this method depends on if <c>ReadOptions.StopAfterKey</c> is specified. If <c>ReadOptions.StopAfterKey</c> is specified, then the character satisfying the <paramref name="predicate" /> is included in the returned substring if <c>ReadOptions.DiscardKey</c> is also selected.</para>
            <para>NOTE that the white spaces at the beginning of the substring will be trimmed if <c>ReadeOptions.TrimStart</c> is specified, and the white spaces at the end of the substring will be trimmed if <c>ReadeOptions.TrimEnd</c> is specified. Also NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrim(System.Char[],System.Char,System.Char,System.Char[],System.Char[],System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the <paramref name="keychars" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrim(System.Char[],System.Char,System.Char,System.Char[],System.Char[],System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the encountered keychar is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and the white spaces at both ends of the substring will be trimmed. Also NOTE <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBefore(System.Char[],System.Char,System.Char,System.Char[],System.Char[],System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the encountered character of the <paramref name="keychars"/>
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <para>NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfter(System.Char[],System.Char,System.Char,System.Char[],System.Char[],System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the position of the <paramref name="keychar" />.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the encountered keychar is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.Char[],System.Char[],System.Char[],System.Char,System.Char,System.Int32@,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            If <c>ReadeOptions.ReadToEnd</c> is specified in <paramref name="options"/>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <c>ReadeOptions.ReadToEnd</c> is not specified, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>The position of this reader after executing this method depends on if <c>ReadOptions.StopAfterKey</c> is specified. If <c>ReadOptions.StopAfterKey</c> is specified, then the character satisfying the <paramref name="predicate" /> is included in the returned substring if <c>ReadOptions.DiscardKey</c> is also selected.</para>
            <para>NOTE that the white spaces at the beginning of the substring will be trimmed if <c>ReadeOptions.TrimStart</c> is specified, and the white spaces at the end of the substring will be trimmed if <c>ReadeOptions.TrimEnd</c> is specified. Also NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrim(System.Char[],System.Char[],System.Char[],System.Char,System.Char,System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the <paramref name="keychars" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrim(System.Char[],System.Char[],System.Char[],System.Char,System.Char,System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the encountered keychar is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and the white spaces at both ends of the substring will be trimmed. Also NOTE <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBefore(System.Char[],System.Char[],System.Char[],System.Char,System.Char,System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the encountered character of the <paramref name="keychars"/>
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <para>NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfter(System.Char[],System.Char[],System.Char[],System.Char,System.Char,System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the position of the encountered character of the <paramref name="keychars" />.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the encountered keychar is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.Char[],System.Char[],System.Char[],System.Char[],System.Char[],System.Int32@,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            If <c>ReadeOptions.ReadToEnd</c> is specified in <paramref name="options"/>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <c>ReadeOptions.ReadToEnd</c> is not specified, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>The position of this reader after executing this method depends on if <c>ReadOptions.StopAfterKey</c> is specified. If <c>ReadOptions.StopAfterKey</c> is specified, then the character satisfying the <paramref name="predicate" /> is included in the returned substring if <c>ReadOptions.DiscardKey</c> is also selected.</para>
            <para>NOTE that the white spaces at the beginning of the substring will be trimmed if <c>ReadeOptions.TrimStart</c> is specified, and the white spaces at the end of the substring will be trimmed if <c>ReadeOptions.TrimEnd</c> is specified. Also NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrim(System.Char[],System.Char[],System.Char[],System.Char[],System.Char[],System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the <paramref name="keychars" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrim(System.Char[],System.Char[],System.Char[],System.Char[],System.Char[],System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the encountered keychar is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and the white spaces at both ends of the substring will be trimmed. Also NOTE <see cref="F:System.String.Empty"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBefore(System.Char[],System.Char[],System.Char[],System.Char[],System.Char[],System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the encountered character of the <paramref name="keychars"/>
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <para>NOTE that <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfter(System.Char[],System.Char[],System.Char[],System.Char[],System.Char[],System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the position of the encountered character of the <paramref name="keychars" />.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or a substring starting from the current position of the reading scope to the end of the search scope if such character is not found outside quotes.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a substring starting from the current position of the reading scope to the position of the first occurrence of any of the <paramref name="keychars" /> within the search scope when such character is found outside quotes, or <c>null</c> if such character is not found outside quotes.</para>
            <para>NOTE that whether the encountered keychar is inclueded in the returned substring depends on <paramref name="discardKeychar"/>, and <see cref="F:System.String.Empty"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.Func{System.Char,System.Boolean},System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character satisfying <paramref name="predicate"/> is encountered.
            The reader's position after executing this method depends on the <paramref name="options"/>.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            If <c>ReadeOptions.ReadToEnd</c> is specified in <paramref name="options"/>, then a new reader will be returned encapsulating either a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <c>ReadeOptions.ReadToEnd</c> is not specified, then a new reader will be returned encapsulating a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope. When such character cannot be found, a <c>null</c> reference will be returned.</para>
            <para>The position of this reader after executing this method depends on if <c>ReadOptions.StopAfterKey</c> is specified. If <c>ReadOptions.StopAfterKey</c> is specified, then the character satisfying the <paramref name="predicate" /> is included in the returned new reader if <c>ReadOptions.DiscardKey</c> is also selected.</para>
            <para>NOTE that the white spaces at the beginning of the substring will be trimmed if <c>ReadeOptions.TrimStart</c> is specified, and the white spaces at the end of the substring will be trimmed if <c>ReadeOptions.TrimEnd</c> is specified. Also NOTE that <see cref="P:System.Text.StringReader.EmptyReader"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.Func{System.Char,System.Boolean},System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying <paramref name="predicate"/> is encountered.
            The current reader stops at the position of the key char and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope 
            if no character satisfying the <paramref name="predicate"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a new reader will be returned encapsulating either a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a new reader will be returned encapsulating a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found. When such character cannot be found, a <c>null</c> reference will be returned.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="P:System.Text.StringReader.EmptyReader"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.Func{System.Char,System.Boolean},System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying <paramref name="predicate" /> (key char) is encountered.
            The current reader stops at the position immediately after the encountered key char and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char.</param>
            <param name="discardKeychar"><c>true</c> if the key char will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a new reader will be returned encapsulating either a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a new reader will be returned encapsulating a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found. When such character cannot be found, a <c>null</c> reference will be returned.</para>
            <para>NOTE that whether the character is included in the returned new reader depends on <paramref name="discardKeychar"/>, and the white spaces at both ends of the substring will be trimmed. Also NOTE <see cref="P:System.Text.StringReader.EmptyReader"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.Func{System.Char,System.Boolean},System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying <paramref name="predicate"/> is encountered.
            The current reader stops at the position of the key char.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if no character satisfying the <paramref name="predicate"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a new reader will be returned encapsulating either a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a new reader will be returned encapsulating a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found. When such character cannot be found, a <c>null</c> reference will be returned.</para>
            <para>NOTE that <see cref="P:System.Text.StringReader.EmptyReader"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.Func{System.Char,System.Boolean},System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying <paramref name="predicate" /> (key char) is encountered.
            The current reader stops at the position immediately after the position of the key char.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char.</param>
            <param name="discardKeychar"><c>true</c> if the key char will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope 
            if no character satisfying the <paramref name="predicate"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a new reader will be returned encapsulating either a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a new reader will be returned encapsulating a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found. When such character cannot be found, a <c>null</c> reference will be returned.</para>
            <para>NOTE that whether the character is included in the returned new reader depends on <paramref name="discardKeychar"/>, and <see cref="P:System.Text.StringReader.EmptyReader"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character satisfying <paramref name="predicate" /> (key char) is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char.</param>
            <param name="leftQuote">The left quote. The reader will not stop when a key char is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when a key char is encountered inside a pair of quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            If <c>ReadeOptions.ReadToEnd</c> is specified in <paramref name="options"/>, then a new reader will be returned encapsulating either a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <c>ReadeOptions.ReadToEnd</c> is not specified, then a new reader will be returned encapsulating a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope. When such character cannot be found, a <c>null</c> reference will be returned.</para>
            <para>The position of this reader after executing this method depends on if <c>ReadOptions.StopAfterKey</c> is specified. If <c>ReadOptions.StopAfterKey</c> is specified, then the character satisfying the <paramref name="predicate" /> is included in the returned new reader if <c>ReadOptions.DiscardKey</c> is also selected.</para>
            <para>NOTE that the white spaces at the beginning of the substring will be trimmed if <c>ReadeOptions.TrimStart</c> is specified, and the white spaces at the end of the substring will be trimmed if <c>ReadeOptions.TrimEnd</c> is specified. Also NOTE that <see cref="P:System.Text.StringReader.EmptyReader"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying <paramref name="predicate" /> (key char) is encountered outside quotes.
            The current reader stops at the position of the key char and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char.</param>
            <param name="leftQuote">The left quote. The reader will not stop when a key char is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when a key char is encountered inside a pair of quotes.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a new reader will be returned encapsulating either a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a new reader will be returned encapsulating a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found. When such character cannot be found, a <c>null</c> reference will be returned.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="P:System.Text.StringReader.EmptyReader"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying <paramref name="predicate" /> (key char) is encountered outside quotes.
            The current reader stops at the position immediately after the encountered key char and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char.</param>
            <param name="leftQuote">The left quote. The reader will not stop when a key char is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when a key char is encountered inside a pair of quotes.</param>
            <param name="discardKeychar">If set to <c>true</c>, the predicate
            will be discarded and not be included in the returned substring.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a new reader will be returned encapsulating either a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a new reader will be returned encapsulating a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found. When such character cannot be found, a <c>null</c> reference will be returned.</para>
            <para>NOTE that whether the character is included in the returned new reader depends on <paramref name="discardKeychar"/>, and the white spaces at both ends of the substring will be trimmed. Also NOTE <see cref="P:System.Text.StringReader.EmptyReader"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying <paramref name="predicate" /> (key char) is encountered outside quotes.
            The current reader stops at the position of the key char.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char.</param>
            <param name="leftQuote">The left quote. The reader will not stop when a key char is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when a key char is encountered inside a pair of quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if no character satisfying the <paramref name="predicate"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a new reader will be returned encapsulating either a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a new reader will be returned encapsulating a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found. When such character cannot be found, a <c>null</c> reference will be returned.</para>
            <para>NOTE that <see cref="P:System.Text.StringReader.EmptyReader"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying <paramref name="predicate" /> (key char) is encountered outside quotes.
            The current reader stops at the position immediately after the position of the key char.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char.</param>
            <param name="leftQuote">The left quote. The reader will not stop when a key char is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when a key char is encountered inside a pair of quotes.</param>
            <param name="discardKeychar"><c>true</c> if the key char will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if no character satisfying the <paramref name="predicate"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a new reader will be returned encapsulating either a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a new reader will be returned encapsulating a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found. When such character cannot be found, a <c>null</c> reference will be returned.</para>
            <para>NOTE that whether the character is included in the returned new reader depends on <paramref name="discardKeychar"/>, and <see cref="P:System.Text.StringReader.EmptyReader"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character satisfying <paramref name="predicate" /> (key char) is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a key char is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a key char is encountered inside a pair of quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            If <c>ReadeOptions.ReadToEnd</c> is specified in <paramref name="options"/>, then a new reader will be returned encapsulating either a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <c>ReadeOptions.ReadToEnd</c> is not specified, then a new reader will be returned encapsulating a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope. When such character cannot be found, a <c>null</c> reference will be returned.</para>
            <para>The position of this reader after executing this method depends on if <c>ReadOptions.StopAfterKey</c> is specified. If <c>ReadOptions.StopAfterKey</c> is specified, then the character satisfying the <paramref name="predicate" /> is included in the returned new reader if <c>ReadOptions.DiscardKey</c> is also selected.</para>
            <para>NOTE that the white spaces at the beginning of the substring will be trimmed if <c>ReadeOptions.TrimStart</c> is specified, and the white spaces at the end of the substring will be trimmed if <c>ReadeOptions.TrimEnd</c> is specified. Also NOTE that <see cref="P:System.Text.StringReader.EmptyReader"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying <paramref name="predicate" /> (key char) is encountered outside quotes.
            The current reader stops at the position of the key char and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a key char is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a key char is encountered inside a pair of quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope 
            if no character satisfying the <paramref name="predicate"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a new reader will be returned encapsulating either a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a new reader will be returned encapsulating a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found. When such character cannot be found, a <c>null</c> reference will be returned.</para>
            <para>NOTE that the white spaces at both ends of the substring will be trimmed. Also <see cref="P:System.Text.StringReader.EmptyReader"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying <paramref name="predicate" /> (key char) is encountered outside quotes.
            The current reader stops at the position immediately after the encountered key char and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a key char is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a key char is encountered inside a pair of quotes.</param>
            <param name="discardKeychar"><c>true</c> if the key char will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope 
            if no character satisfying the <paramref name="predicate"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a new reader will be returned encapsulating either a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a new reader will be returned encapsulating a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found. When such character cannot be found, a <c>null</c> reference will be returned.</para>
            <para>NOTE that whether the character is included in the returned new reader depends on <paramref name="discardKeychar"/>, and the white spaces at both ends of the substring will be trimmed. Also NOTE <see cref="P:System.Text.StringReader.EmptyReader"/> will be returned if the length of the substring after trim is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying <paramref name="predicate" /> (key char) is encountered outside quotes.
            The current reader stops at the position of the key char.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a key char is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a key char is encountered inside a pair of quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if no character satisfying the <paramref name="predicate"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a new reader will be returned encapsulating either a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a new reader will be returned encapsulating a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found. When such character cannot be found, a <c>null</c> reference will be returned.</para>
            <para>NOTE that <see cref="P:System.Text.StringReader.EmptyReader"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying <paramref name="predicate" /> (key char) is encountered outside quotes.
            The current reader stops at the position immediately after the position of the key char.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a key char is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a key char is encountered inside a pair of quotes.</param>
            <param name="discardKeychar"><c>true</c> if the key char will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if no character satisfying the <paramref name="predicate"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            If <paramref name="readToEndIfKeycharNotFound"/> is <c>true</c>, then a new reader will be returned encapsulating either a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found, or a substring starting from the current position of the underlying string instance to the end of the search scope if such character is not found.
            <para>If <paramref name="readToEndIfKeycharNotFound"/> is <c>false</c>, then a new reader will be returned encapsulating a substring starting from the current position of the underlying string instance to the position of the first character satisfying the <paramref name="predicate" /> within the search scope when such character is found. When such character cannot be found, a <c>null</c> reference will be returned.</para>
            <para>NOTE that whether the character is included in the returned new reader depends on <paramref name="discardKeychar"/>, and <see cref="P:System.Text.StringReader.EmptyReader"/> will be returned if the length of the substring is 0.</para>
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Char,System.Char,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (key char) is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (key char) is encountered outside quotes.
            The current reader stops at the position of the key char and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the key char is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (key char) is encountered outside quotes.
            The current reader stops at the position immediately after the encountered key char and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the key char will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the key char is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (key char) is encountered outside quotes.
            The current reader stops at the position of the key char.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the key char is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (key char) is encountered outside quotes.
            The current reader stops at the position immediately after the position of the key char.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the key char will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the key char is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Char[],System.Char[],System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (key char) is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (key char) is encountered outside quotes.
            The current reader stops at the position of the key char and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the key char is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (key char) is encountered outside quotes.
            The current reader stops at the position immediately after the encountered key char and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the key char will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the key char is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (key char) is encountered outside quotes.
            The current reader stops at the position of the key char.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the key char is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (key char) is encountered outside quotes.
            The current reader stops at the position immediately after the position of the key char.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the key char will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the key char is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Char,System.Char,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (key char) is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (key char) is encountered outside quotes.
            The current reader stops at the position of the key char and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the key char is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (key char) is encountered outside quotes.
            The current reader stops at the position immediately after the encountered key char and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the key char will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the key char is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (key char) is encountered outside quotes.
            The current reader stops at the position of the key char.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the key char is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (key char) is encountered outside quotes.
            The current reader stops at the position immediately after the position of the key char.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the key char will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the key char is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Char[],System.Char[],System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (key char) is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (key char) is encountered outside quotes.
            The current reader stops at the position of the key char and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the key char is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (key char) is encountered outside quotes.
            The current reader stops at the position immediately after the encountered key char and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the key char will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the key char is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (key char) is encountered outside quotes.
            The current reader stops at the position of the key char.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the key char is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character satisfying the specified <paramref name="predicate" /> (key char) is encountered outside quotes.
            The current reader stops at the position immediately after the position of the key char.
            </summary>
            <param name="predicate">A method to test each character of the reading scope and determines whether it is a key char. The reader will not stop when a key char is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the key char will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the key char is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.Char,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a specified character <paramref name="keychar"/> is encountered.
            The reader's position after executing this method depends on the <paramref name="options"/>.
            </summary>
            <param name="keychar">The reader stops when this character is encountered.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>A new string reader that encapsulates a substring read from the underlying string instance of the current reader.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a specified character <paramref name="keychar" /> is encountered.
            The current reader stops at the position of the <paramref name="keychar" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychar">The reader stops when this character is encountered.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a specified character <paramref name="keychar" /> is encountered.
            The current reader stops at the position immediately after the <paramref name="keychar" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychar">The reader stops when this character is encountered.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a specified character <paramref name="keychar" /> is encountered.
            The current reader stops at the position of the <paramref name="keychar"/>.
            </summary>
            <param name="keychar">The reader stops when this character is encountered.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a specified character <paramref name="keychar" /> is encountered.
            The current reader stops at the position immediately after the <paramref name="keychar" />.
            </summary>
            <param name="keychar">The reader stops when this character is encountered.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.Char,System.Char,System.Char,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes.</param>
            <param name="leftQuote">The left quote. The reader will not stop when the <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when the <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.Char,System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position of the <paramref name="keychar" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes.</param>
            <param name="leftQuote">The left quote. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.Char,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes.</param>
            <param name="leftQuote">The left quote. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.Char,System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position of the <paramref name="keychar"/>
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes.</param>
            <param name="leftQuote">The left quote. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.Char,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position immediately after the position of the <paramref name="keychar" />.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes.</param>
            <param name="leftQuote">The left quote. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.Char,System.Char[],System.Char[],System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="indicator" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="indicator">The reader stops when this character is encountered outside quotes.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when the <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when the <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.Char,System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="indicator" /> is encountered outside quotes.
            The current reader stops at the position of the <paramref name="keyChar" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="indicator">The reader stops when this character is encountered outside quotes.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when the <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when the <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.Char,System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="indicator" /> is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="indicator">The reader stops when this character is encountered outside quotes.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when the <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when the <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="discardKeychar">If set to <c>true</c>, the <paramref name="indicator" /> will be discarded and not be included in the returned substring.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.Char,System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="indicator" /> is encountered outside quotes.
            The current reader stops at the position of the <paramref name="keychar"/>
            </summary>
            <param name="indicator">The reader stops when this character is encountered outside quotes.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when the <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when the <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.Char,System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="indicator" /> is encountered outside quotes.
            The current reader stops at the position immediately after the position of the <paramref name="keychar" />.
            </summary>
            <param name="indicator">The reader stops when this character is encountered outside quotes.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when the <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when the <paramref name="keychar" /> is encountered inside a pair of quotes.</param>
            <param name="discardKeychar">If set to <c>true</c>, the <paramref name="indicator" /> will be discarded and not be included in the returned substring.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.Char,System.Char,System.Char,System.Char,System.Char,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.Char,System.Char,System.Char,System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position of the <paramref name="keychar" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.Char,System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.Char,System.Char,System.Char,System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position of the <paramref name="keychar"/>
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.Char,System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position immediately after the position of the <paramref name="keychar" />.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.Char,System.Char,System.Char,System.Char[],System.Char[],System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.Char,System.Char,System.Char,System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position of the <paramref name="keychar" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.Char,System.Char,System.Char,System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.Char,System.Char,System.Char,System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position of the <paramref name="keychar"/>
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.Char,System.Char,System.Char,System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position immediately after the position of the <paramref name="keychar" />.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.Char,System.Char[],System.Char[],System.Char,System.Char,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.Char,System.Char[],System.Char[],System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position of the <paramref name="keychar" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.Char,System.Char[],System.Char[],System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.Char,System.Char[],System.Char[],System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position of the <paramref name="keychar"/>
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.Char,System.Char[],System.Char[],System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position immediately after the position of the <paramref name="keychar" />.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.Char,System.Char[],System.Char[],System.Char[],System.Char[],System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.Char,System.Char[],System.Char[],System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position of the <paramref name="keychar" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.Char,System.Char[],System.Char[],System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.Char,System.Char[],System.Char[],System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position of the <paramref name="keychar"/>
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.Char,System.Char[],System.Char[],System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychar" /> is encountered outside quotes.
            The current reader stops at the position immediately after the position of the <paramref name="keychar" />.
            </summary>
            <param name="keychar">The reader stops when this character is encountered outside quotes. The reader will not stop when an <paramref name="keychar" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychar"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.Char[],System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader until any character specified in <paramref name="keychars"/> is encountered.
            The reader's position after executing this method depends on the <paramref name="options"/>.
            </summary>
            <param name="keychars">An array of characters indicating where the current reader stops advancing.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>A new string reader that encapsulates a substring read from the underlying string instance of the current reader.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars"/> is encountered.
            The current reader stops at the position of the encountered character of <paramref name="keychars" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">An array of characters indicating where the current reader stops advancing.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is found; otherwise, <c>false</c>.</param>
            <returns>A new string reader that encapsulates a substring read from the underlying string instance of the current reader.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars"/> is encountered.
            The current reader stops at the position immediately after the encountered character of <paramref name="keychars" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">An array of characters indicating where the current reader stops advancing.</param>
            <param name="discardKeychar">If set to <c>true</c>, the encountered character of <paramref name="keychars"/> will be discarded and not be included in the returned substring.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars"/> is encountered.
            The current reader stops at the position of the encountered keychar.
            </summary>
            <param name="keychars">An array of characters indicating where the current reader stops advancing.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is found; otherwise, <c>false</c>.</param>
            <returns>A new string reader that encapsulates a substring read from the underlying string instance of the current reader.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars"/> is encountered.
            The current reader stops at the position immediately after the encountered keychar .
            </summary>
            <param name="keychars">An array of characters indicating where the current reader stops advancing.</param>
            <param name="discardKeychar">If set to <c>true</c>, the encountered character of <paramref name="keychars"/> will be discarded and not be included in the returned substring.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.Char[],System.Char,System.Char,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychars">An array of characters indicating where the current reader stops advancing.</param>
            <param name="leftQuote">The left quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.Char[],System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the encountered character of <paramref name="keychars" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">An array of characters indicating where the current reader stops advancing.</param>
            <param name="leftQuote">The left quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.Char[],System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the encountered character of <paramref name="keychars" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">An array of characters indicating where the current reader stops advancing.</param>
            <param name="leftQuote">The left quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="discardKeychar">If set to <c>true</c>, the encountered character of <paramref name="keychars"/> will be discarded and not be included in the returned substring.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.Char[],System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the encountered character of <paramref name="keychars" />.
            </summary>
            <param name="keychars">An array of characters indicating where the current reader stops advancing.</param>
            <param name="leftQuote">The left quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.Char[],System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the encountered character of <paramref name="keychars" />.
            </summary>
            <param name="keychars">An array of characters indicating where the current reader stops advancing.</param>
            <param name="leftQuote">The left quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="discardKeychar">If set to <c>true</c>, the <paramref name="indicator" /> will be discarded and not be included in the returned substring.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.Char[],System.Char[],System.Char[],System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychars">An array of characters indicating where the current reader stops advancing.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.Char[],System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the encountered character of <paramref name="keychars" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">An array of characters indicating where the current reader stops advancing.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.Char[],System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the encountered character of <paramref name="keychars" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">An array of characters indicating where the current reader stops advancing.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="discardKeychar">If set to <c>true</c>, the encountered character of <paramref name="keychars"/> will be discarded and not be included in the returned substring.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.Char[],System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the encountered character of <paramref name="keychars" />.
            </summary>
            <param name="keychars">An array of characters indicating where the current reader stops advancing.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.Char[],System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the encountered character of <paramref name="keychars" />.
            </summary>
            <param name="keychars">An array of characters indicating where the current reader stops advancing.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="discardKeychar">If set to <c>true</c>, the encountered element of <paramref name="keychars" /> will be discarded and not be included in the returned substring.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.Char[],System.Char,System.Char,System.Char,System.Char,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.Char[],System.Char,System.Char,System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the <paramref name="keychars" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.Char[],System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.Char[],System.Char,System.Char,System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the encountered character of the <paramref name="keychars"/>
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.Char[],System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the position of the <paramref name="keychar" />.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.Char[],System.Char,System.Char,System.Char[],System.Char[],System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.Char[],System.Char,System.Char,System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the <paramref name="keychars" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.Char[],System.Char,System.Char,System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.Char[],System.Char,System.Char,System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the encountered character of the <paramref name="keychars"/>
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.Char[],System.Char,System.Char,System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the position of the <paramref name="keychar" />.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.Char[],System.Char[],System.Char[],System.Char,System.Char,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.Char[],System.Char[],System.Char[],System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the <paramref name="keychars" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.Char[],System.Char[],System.Char[],System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.Char[],System.Char[],System.Char[],System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the encountered character of the <paramref name="keychars"/>
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.Char[],System.Char[],System.Char[],System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the position of the encountered character of the <paramref name="keychars" />.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.Char[],System.Char[],System.Char[],System.Char[],System.Char[],System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.Char[],System.Char[],System.Char[],System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the <paramref name="keychars" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.Char[],System.Char[],System.Char[],System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.Char[],System.Char[],System.Char[],System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the encountered character of the <paramref name="keychars"/>
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.Char[],System.Char[],System.Char[],System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the position of the encountered character of the <paramref name="keychars" />.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.Char[],System.Int32@,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader until any character specified in <paramref name="keychars"/> is encountered.
            The reader's position after executing this method depends on the <paramref name="options"/>.
            </summary>
            <param name="keychars">An array of characters indicating where the current reader stops advancing.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>A new string reader that encapsulates a substring read from the underlying string instance of the current reader.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.Char[],System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars"/> is encountered.
            The current reader stops at the position of the encountered character of <paramref name="keychars" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">An array of characters indicating where the current reader stops advancing.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is found; otherwise, <c>false</c>.</param>
            <returns>A new string reader that encapsulates a substring read from the underlying string instance of the current reader.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.Char[],System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars"/> is encountered.
            The current reader stops at the position immediately after the encountered character of <paramref name="keychars" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">An array of characters indicating where the current reader stops advancing.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="discardKeychar">If set to <c>true</c>, the encountered character of <paramref name="keychars"/> will be discarded and not be included in the returned substring.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.Char[],System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars"/> is encountered.
            The current reader stops at the position of the encountered keychar.
            </summary>
            <param name="keychars">An array of characters indicating where the current reader stops advancing.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is found; otherwise, <c>false</c>.</param>
            <returns>A new string reader that encapsulates a substring read from the underlying string instance of the current reader.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.Char[],System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars"/> is encountered.
            The current reader stops at the position immediately after the encountered keychar .
            </summary>
            <param name="keychars">An array of characters indicating where the current reader stops advancing.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="discardKeychar">If set to <c>true</c>, the encountered character of <paramref name="keychars"/> will be discarded and not be included in the returned substring.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.Char[],System.Char,System.Char,System.Int32@,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychars">An array of characters indicating where the current reader stops advancing.</param>
            <param name="leftQuote">The left quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.Char[],System.Char,System.Char,System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the encountered character of <paramref name="keychars" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">An array of characters indicating where the current reader stops advancing.</param>
            <param name="leftQuote">The left quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.Char[],System.Char,System.Char,System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the encountered character of <paramref name="keychars" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">An array of characters indicating where the current reader stops advancing.</param>
            <param name="leftQuote">The left quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="discardKeychar">If set to <c>true</c>, the encountered character of <paramref name="keychars"/> will be discarded and not be included in the returned substring.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.Char[],System.Char,System.Char,System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the encountered character of <paramref name="keychars" />.
            </summary>
            <param name="keychars">An array of characters indicating where the current reader stops advancing.</param>
            <param name="leftQuote">The left quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.Char[],System.Char,System.Char,System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the encountered character of <paramref name="keychars" />.
            </summary>
            <param name="keychars">An array of characters indicating where the current reader stops advancing.</param>
            <param name="leftQuote">The left quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="discardKeychar">If set to <c>true</c>, the <paramref name="indicator" /> will be discarded and not be included in the returned substring.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.Char[],System.Char[],System.Char[],System.Int32@,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychars">An array of characters indicating where the current reader stops advancing.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.Char[],System.Char[],System.Char[],System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the encountered character of <paramref name="keychars" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">An array of characters indicating where the current reader stops advancing.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.Char[],System.Char[],System.Char[],System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the encountered character of <paramref name="keychars" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">An array of characters indicating where the current reader stops advancing.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="discardKeychar">If set to <c>true</c>, the encountered character of <paramref name="keychars"/> will be discarded and not be included in the returned substring.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.Char[],System.Char[],System.Char[],System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the encountered character of <paramref name="keychars" />.
            </summary>
            <param name="keychars">An array of characters indicating where the current reader stops advancing.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.Char[],System.Char[],System.Char[],System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any character specified in <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the encountered character of <paramref name="keychars" />.
            </summary>
            <param name="keychars">An array of characters indicating where the current reader stops advancing.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when any of the <paramref name="keychars" /> is encountered inside a pair of quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="discardKeychar">If set to <c>true</c>, the encountered element of <paramref name="keychars" /> will be discarded and not be included in the returned substring.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keychars"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.Char[],System.Char,System.Char,System.Char,System.Char,System.Int32@,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.Char[],System.Char,System.Char,System.Char,System.Char,System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the <paramref name="keychars" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.Char[],System.Char,System.Char,System.Char,System.Char,System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.Char[],System.Char,System.Char,System.Char,System.Char,System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the encountered character of the <paramref name="keychars"/>
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.Char[],System.Char,System.Char,System.Char,System.Char,System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the position of the <paramref name="keychar" />.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.Char[],System.Char,System.Char,System.Char[],System.Char[],System.Int32@,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.Char[],System.Char,System.Char,System.Char[],System.Char[],System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the <paramref name="keychars" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.Char[],System.Char,System.Char,System.Char[],System.Char[],System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.Char[],System.Char,System.Char,System.Char[],System.Char[],System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the encountered character of the <paramref name="keychars"/>
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.Char[],System.Char,System.Char,System.Char[],System.Char[],System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the position of the <paramref name="keychar" />.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.Char[],System.Char[],System.Char[],System.Char,System.Char,System.Int32@,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.Char[],System.Char[],System.Char[],System.Char,System.Char,System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the <paramref name="keychars" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.Char[],System.Char[],System.Char[],System.Char,System.Char,System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.Char[],System.Char[],System.Char[],System.Char,System.Char,System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the encountered character of the <paramref name="keychars"/>
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.Char[],System.Char[],System.Char[],System.Char,System.Char,System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the position of the encountered character of the <paramref name="keychars" />.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.Char[],System.Char[],System.Char[],System.Char[],System.Char[],System.Int32@,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.Char[],System.Char[],System.Char[],System.Char[],System.Char[],System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the <paramref name="keychars" /> and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.Char[],System.Char[],System.Char[],System.Char[],System.Char[],System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.Char[],System.Char[],System.Char[],System.Char[],System.Char[],System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position of the encountered character of the <paramref name="keychars"/>
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.Char[],System.Char[],System.Char[],System.Char[],System.Char[],System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until a character specified by <paramref name="keychars" /> is encountered outside quotes.
            The current reader stops at the position immediately after the position of the encountered character of the <paramref name="keychars" />.
            </summary>
            <param name="keychars">The reader stops when any character in this array is encountered outside quotes. The reader will not stop when an element of the <paramref name="keychars" /> is encountered inside a pair of primary/secondary quotes.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keychar in the <paramref name="keychars"/>.</param>
            <param name="discardKeychar"><c>true</c> if the encountered keychar will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeycharNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keychars"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.String,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a substring specified by <paramref name="indicator" /> is encountered.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="indicator">The reader stops when an occurrence of this string instance is encountered.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            A substring read from the underlying string instance.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrim(System.String)">
            <summary>
            Advances the reader and reads until a substring specified by <paramref name="indicator"/> is encountered.
            The reader stops at the position of the first character of this indicator and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="indicator">The reader stops when an occurrence of this string instance is encountered.</param>
            <returns>A substring read from the underlying string instance.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrim(System.String,System.Boolean)">
            <summary>
            Advances the reader and reads until a substring specified by <paramref name="indicator" /> is encountered.
            The reader stops at the position next to the last character of the encountered keyword and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="indicator">The reader stops when an occurrence of this string instance is encountered.</param>
            <param name="discardIndicator">If set to <c>true</c>, the <paramref name="indicator"/> 
            will be discarded and not be included in the returned substring.</param>
            <returns>
            A substring read from the underlying string instance.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBefore(System.String)">
            <summary>
            Advances the reader and reads until a substring specified by <paramref name="indicator"/> is encountered.
            The reader stops at the position of the first character of this indicator.
            </summary>
            <param name="indicator">The reader stops when an occurrence of this string instance is encountered.</param>
            <returns>A substring read from the underlying string instance.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfter(System.String,System.Boolean)">
            <summary>
            Advances the reader and reads until a substring specified by <paramref name="indicator" /> is encountered.
            The reader stops at the position next to the last character of this indicator.
            </summary>
            <param name="indicator">The reader stops when an occurrence of this string instance is encountered.</param>
            <param name="discardIndicator">If set to <c>true</c>, the <paramref name="indicator"/> 
            will be discarded and not be included in the returned substring.</param>
            <returns>
            A substring read from the underlying string instance.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.String[],System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="indicators"/> is encountered.
            The reader's position after executing this method depends on the <paramref name="options"/>.
            </summary>
            <param name="indicators">The reader stops an occurrence of this string instances is encountered.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>A substring read from the underlying string instance.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrim(System.String[])">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="indicators"/> is encountered.
            The reader stops at the position of the first character of this indicator and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="indicators">The reader stops an occurrence of this string instances is encountered.</param>
            <returns>A substring read from the underlying string instance.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrim(System.String[],System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="indicators"/> is encountered.
            The reader stops at the position next to the last character of the encountered keyword and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="indicators">The reader stops an occurrence of this string instances is encountered.</param>
            <param name="discardIndicator">If set to <c>true</c>, the <paramref name="indicator"/> 
            will be discarded and not be included in the returned substring.</param>
            <returns>
            A substring read from the underlying string instance.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBefore(System.String[])">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="indicators"/> is encountered.
            The reader stops at the position of the first character of this indicator.
            </summary>
            <param name="indicators">The reader stops an occurrence of this string instances is encountered.</param>
            <returns>A substring read from the underlying string instance.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfter(System.String[],System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="indicators"/> is encountered.
            The reader stops at the position next to the last character of this indicator.
            </summary>
            <param name="indicators">The reader stops an occurrence of this string instances is encountered.</param>
            <param name="discardIndicator">If set to <c>true</c>, the <paramref name="indicator"/> 
            will be discarded and not be included in the returned substring.</param>
            <returns>
            A substring read from the underlying string instance.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.String,System.Char,System.Char,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a substring specified by <paramref name="indicator" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="indicator">The reader stops when an occurrence of this string instance is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            A substring read from the underlying string instance.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrim(System.String,System.Char,System.Char)">
            <summary>
            Advances the reader and reads until a substring specified by <paramref name="indicator" /> is encountered outside quotes.
            The reader stops at the position of the first character of this indicator and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="indicator">The reader stops when an occurrence of this string instance is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <returns>
            A substring read from the underlying string instance.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrim(System.String,System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a substring specified by <paramref name="indicator" /> is encountered outside quotes.
            The reader stops at the position next to the last character of the encountered keyword and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="indicator">The reader stops when an occurrence of this string instance is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <param name="discardIndicator">If set to <c>true</c>, the <paramref name="indicator" />
            will be discarded and not be included in the returned substring.</param>
            <returns>
            A substring read from the underlying string instance.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBefore(System.String,System.Char,System.Char)">
            <summary>
            Advances the reader and reads until a substring specified by <paramref name="indicator" /> is encountered outside quotes.
            The reader stops at the position of the first character of this indicator.
            </summary>
            <param name="indicator">The reader stops when an occurrence of this string instance is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <returns>
            A substring read from the underlying string instance.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfter(System.String,System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a substring specified by <paramref name="indicator" /> is encountered outside quotes.
            The reader stops at the position next to the last character of this indicator.
            </summary>
            <param name="indicator">The reader stops when an occurrence of this string instance is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <param name="discardIndicator">If set to <c>true</c>, the <paramref name="indicator" />
            will be discarded and not be included in the returned substring.</param>
            <returns>
            A substring read from the underlying string instance.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.String,System.Char[],System.Char[],System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until a substring specified by <paramref name="indicator" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="indicator">The reader stops when an occurrence of this string instance is encountered.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            A substring read from the underlying string instance.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrim(System.String,System.Char[],System.Char[])">
            <summary>
            Advances the reader and reads until a substring specified by <paramref name="indicator" /> is encountered outside quotes.
            The reader stops at the position of the first character of this indicator and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="indicator">The reader stops when an occurrence of this string instance is encountered.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <returns>
            A substring read from the underlying string instance.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrim(System.String,System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a substring specified by <paramref name="indicator" /> is encountered outside quotes.
            The reader stops at the position next to the last character of the encountered keyword and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="indicator">The reader stops when an occurrence of this string instance is encountered.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <param name="discardIndicator">If set to <c>true</c>, the <paramref name="indicator" />
            will be discarded and not be included in the returned substring.</param>
            <returns>
            A substring read from the underlying string instance.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBefore(System.String,System.Char[],System.Char[])">
            <summary>
            Advances the reader and reads until a substring specified by <paramref name="indicator" /> is encountered outside quotes.
            The reader stops at the position of the first character of this indicator.
            </summary>
            <param name="indicator">The reader stops when an occurrence of this string instance is encountered.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <returns>
            A substring read from the underlying string instance.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfter(System.String,System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a substring specified by <paramref name="indicator" /> is encountered outside quotes.
            The reader stops at the position next to the last character of this indicator.
            </summary>
            <param name="indicator">The reader stops when an occurrence of this string instance is encountered.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <param name="discardIndicator">If set to <c>true</c>, the <paramref name="indicator" />
            will be discarded and not be included in the returned substring.</param>
            <returns>
            A substring read from the underlying string instance.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.String[],System.Char,System.Char,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="indicators" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="indicators">The reader stops an occurrence of this string instances is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            A substring read from the underlying string instance.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrim(System.String[],System.Char,System.Char)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="indicators" /> is encountered outside quotes.
            The reader stops at the position of the first character of this indicator and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="indicators">The reader stops an occurrence of this string instances is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <returns>
            A substring read from the underlying string instance.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrim(System.String[],System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="indicators" /> is encountered outside quotes.
            The reader stops at the position next to the last character of the encountered keyword and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="indicators">The reader stops an occurrence of this string instances is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <param name="discardIndicator">If set to <c>true</c>, the <paramref name="indicator" />
            will be discarded and not be included in the returned substring.</param>
            <returns>
            A substring read from the underlying string instance.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBefore(System.String[],System.Char,System.Char)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="indicators" /> is encountered outside quotes.
            The reader stops at the position of the first character of this indicator.
            </summary>
            <param name="indicators">The reader stops an occurrence of this string instances is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <returns>
            A substring read from the underlying string instance.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfter(System.String[],System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="indicators" /> is encountered outside quotes.
            The reader stops at the position next to the last character of this indicator.
            </summary>
            <param name="indicators">The reader stops an occurrence of this string instances is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <param name="discardIndicator">If set to <c>true</c>, the <paramref name="indicator" />
            will be discarded and not be included in the returned substring.</param>
            <returns>
            A substring read from the underlying string instance.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadTo(System.String[],System.Char[],System.Char[],System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="indicators" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="indicators">The reader stops an occurrence of this string instances is encountered.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            A substring read from the underlying string instance.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrim(System.String[],System.Char[],System.Char[])">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="indicators" /> is encountered outside quotes.
            The reader stops at the position of the first character of this indicator and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="indicators">The reader stops an occurrence of this string instances is encountered.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <returns>
            A substring read from the underlying string instance.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrim(System.String[],System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="indicators" /> is encountered outside quotes.
            The reader stops at the position next to the last character of the encountered keyword and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="indicators">The reader stops an occurrence of this string instances is encountered.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <param name="discardIndicator">If set to <c>true</c>, the <paramref name="indicator" />
            will be discarded and not be included in the returned substring.</param>
            <returns>
            A substring read from the underlying string instance.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBefore(System.String[],System.Char[],System.Char[])">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="indicators" /> is encountered outside quotes.
            The reader stops at the position of the first character of this indicator.
            </summary>
            <param name="indicators">The reader stops an occurrence of this string instances is encountered.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <returns>
            A substring read from the underlying string instance.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfter(System.String[],System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="indicators" /> is encountered outside quotes.
            The reader stops at the position next to the last character of this indicator.
            </summary>
            <param name="indicators">The reader stops an occurrence of this string instances is encountered.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when an <paramref name="indicator" /> is encountered inside a pair of quotes.</param>
            <param name="discardIndicator">If set to <c>true</c>, the <paramref name="indicator" />
            will be discarded and not be included in the returned substring.</param>
            <returns>
            A substring read from the underlying string instance.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.String,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until the specified <paramref name="keyword"/> is encountered.
            The reader's position after executing this method depends on the <paramref name="options"/>.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>A new string reader that encapsulates a substring read from the underlying string instance of the current reader.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.String,System.Boolean)">
            <summary>
            Advances the reader and reads until the specified <paramref name="keyword"/> is encountered.
            The reader stops at the position of the first character of this Keyword and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keyword"/> is not found; otherwise, <c>false</c>.</param>
            <returns>A new string reader that encapsulates a substring read from the underlying string instance of the current reader.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.String,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until the specified <paramref name="keyword" /> is encountered.
            The reader stops at the position next to the last character of the encountered keyword and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keyword"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.String,System.Boolean)">
            <summary>
            Advances the reader and reads until the specified <paramref name="keyword"/> is encountered.
            The reader stops at the position of the first character of this Keyword.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keyword"/> is not found; otherwise, <c>false</c>.</param>
            <returns>A new string reader that encapsulates a substring read from the underlying string instance of the current reader.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.String,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until the specified <paramref name="keyword" /> is encountered.
            The reader stops at the position next to the last character of this Keyword.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keyword"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.String,System.Char,System.Char,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until the <paramref name="keyword" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="leftQuote">The left quote. The reader will not stop when a keyword is encountered inside quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when a keyword is encountered inside quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.String,System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until the <paramref name="keyword" /> is encountered outside quotes.
            The reader stops at the position of the first character of this Keyword and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="leftQuote">The left quote. The reader will not stop when a keyword is encountered inside quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when a keyword is encountered inside quotes.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keyword"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.String,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until the <paramref name="keyword" /> is encountered outside quotes.
            The reader stops at the position next to the last character of the encountered keyword and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="leftQuote">The left quote. The reader will not stop when a keyword is encountered inside quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when a keyword is encountered inside quotes.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keyword"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.String,System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until the <paramref name="keyword" /> is encountered outside quotes.
            The reader stops at the position of the first character of this Keyword.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="leftQuote">The left quote. The reader will not stop when a keyword is encountered inside quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when a keyword is encountered inside quotes.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keyword"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.String,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until the <paramref name="keyword" /> is encountered outside quotes.
            The reader stops at the position next to the last character of this Keyword.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="leftQuote">The left quote. The reader will not stop when a keyword is encountered inside quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when a keyword is encountered inside quotes.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keyword"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.String,System.Char[],System.Char[],System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until the <paramref name="keyword" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.String,System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until the <paramref name="keyword" /> is encountered outside quotes.
            The reader stops at the position of the first character of this Keyword and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keyword"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.String,System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until the <paramref name="keyword" /> is encountered outside quotes.
            The reader stops at the position next to the last character of the encountered keyword and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="leftQuotes">An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keyword"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.String,System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until the <paramref name="keyword" /> is encountered outside quotes.
            The reader stops at the position of the first character of the encountered keyword.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="leftQuotes">An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keyword"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.String,System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until the <paramref name="keyword" /> is encountered outside quotes.
            The reader stops at the position next to the last character of the encountered keyword.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="leftQuotes">An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keyword"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.String,System.Char,System.Char,System.Char,System.Char,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until the specified keyword is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="options">>Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.String,System.Char,System.Char,System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until the specified keyword is encountered outside quotes.
            The current reader stops at the position of the keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keyword"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.String,System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until the specified keyword is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keyword"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.String,System.Char,System.Char,System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until the specified keyword is encountered outside quotes. The current reader stops at the position of the keyword.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keyword"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.String,System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until the specified keyword is encountered outside quotes. The current reader stops at the position immediately after the last character of the encountered keyword.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keyword"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.String,System.Char,System.Char,System.Char[],System.Char[],System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until the specified keyword is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="options">>Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.String,System.Char,System.Char,System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until the specified keyword is encountered outside quotes.
            The current reader stops at the position of the keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keyword"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.String,System.Char,System.Char,System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until the specified keyword is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keyword"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.String,System.Char,System.Char,System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until the specified keyword is encountered outside quotes. The current reader stops at the position of the keyword.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keyword"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.String,System.Char,System.Char,System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until the specified keyword is encountered outside quotes. The current reader stops at the position immediately after the last character of the encountered keyword.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keyword"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.String,System.Char[],System.Char[],System.Char,System.Char,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until the specified keyword is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="options">>Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.String,System.Char[],System.Char[],System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until the specified keyword is encountered outside quotes.
            The current reader stops at the position of the keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keyword"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.String,System.Char[],System.Char[],System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until the specified keyword is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keyword"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.String,System.Char[],System.Char[],System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until the specified keyword is encountered outside quotes. The current reader stops at the position of the keyword.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keyword"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.String,System.Char[],System.Char[],System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until the specified keyword is encountered outside quotes. The current reader stops at the position immediately after the last character of the encountered keyword.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keyword"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.String,System.Char[],System.Char[],System.Char[],System.Char[],System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until the specified keyword is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="options">>Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.String,System.Char[],System.Char[],System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until the specified keyword is encountered outside quotes.
            The current reader stops at the position of the keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keyword"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.String,System.Char[],System.Char[],System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until the specified keyword is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keyword"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.String,System.Char[],System.Char[],System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until the specified keyword is encountered outside quotes. The current reader stops at the position of the keyword.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keyword"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.String,System.Char[],System.Char[],System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until the specified keyword is encountered outside quotes. The current reader stops at the position immediately after the last character of the encountered keyword.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if the <paramref name="keyword"/> is not found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.String[],System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.String[],System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered.
            The reader stops at the position of the first character of this Keyword and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.String[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords"/> is encountered.
            The reader stops at the position next to the last character of the encountered keyword and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.String[],System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords"/> is encountered.
            The reader stops at the position of the first character of this Keyword.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>A new string reader that encapsulates a substring read from the underlying string instance of the current reader.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.String[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords"/> is encountered.
            The reader stops at the position next to the last character of this Keyword.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.String[],System.Char,System.Char,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" />  is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.String[],System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" />  is encountered outside quotes.
            The reader stops at the position of the first character of this Keyword and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.String[],System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" />  is encountered outside quotes.
            The reader stops at the position next to the last character of the encountered keyword and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.String[],System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" />  is encountered outside quotes.
            The reader stops at the position of the first character of this Keyword.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.String[],System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" />  is encountered outside quotes.
            The reader stops at the position next to the last character of this Keyword.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.String[],System.Char[],System.Char[],System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" />  is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="Keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="keywords">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="keywords" />.
            The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.String[],System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" />  is encountered outside quotes.
            The reader stops at the position of the first character of this Keyword and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.String[],System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" />  is encountered outside quotes.
            The reader stops at the position next to the last character of the encountered keyword and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.String[],System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" />  is encountered outside quotes.
            The reader stops at the position of the first character of the encountered keyword.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="leftQuotes">An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.String[],System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" />  is encountered outside quotes.
            The reader stops at the position next to the last character of the encountered keyword.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.String[],System.Char,System.Char,System.Char,System.Char,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="options">>Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.String[],System.Char,System.Char,System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes.
            The current reader stops at the position of the keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.String[],System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.String[],System.Char,System.Char,System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes. The current reader stops at the position of the keyword.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.String[],System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes. The current reader stops at the position immediately after the last character of the encountered keyword.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.String[],System.Char,System.Char,System.Char[],System.Char[],System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes. The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="options">>Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.String[],System.Char,System.Char,System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes. The current reader stops at the position of the keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.String[],System.Char,System.Char,System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes. The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.String[],System.Char,System.Char,System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes. The current reader stops at the position of the keyword.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.String[],System.Char,System.Char,System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes. The current reader stops at the position immediately after the last character of the encountered keyword.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.String[],System.Char[],System.Char[],System.Char,System.Char,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="options">>Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.String[],System.Char[],System.Char[],System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes.
            The current reader stops at the position of the keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.String[],System.Char[],System.Char[],System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.String[],System.Char[],System.Char[],System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes. The current reader stops at the position of the keyword.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.String[],System.Char[],System.Char[],System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes. The current reader stops at the position immediately after the last character of the encountered keyword.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.String[],System.Char[],System.Char[],System.Char[],System.Char[],System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="options">>Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.String[],System.Char[],System.Char[],System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes.
            The current reader stops at the position of the keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.String[],System.Char[],System.Char[],System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.String[],System.Char[],System.Char[],System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes. The current reader stops at the position of the keyword.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.String[],System.Char[],System.Char[],System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes. The current reader stops at the position immediately after the last character of the encountered keyword.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.String[],System.Int32@,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="hitIndex">Returns the index of the encountered keyword in the <paramref name="keywords"/>.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.String[],System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered.
            The reader stops at the position of the first character of this Keyword and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="hitIndex">Returns the index of the encountered keyword in the <paramref name="keywords"/>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.String[],System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered.
            The reader stops at the position next to the last character of the encountered keyword and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="hitIndex">Returns the index of the encountered keyword in the <paramref name="keywords"/>.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.String[],System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered.
            The reader stops at the position of the first character of this Keyword.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="hitIndex">Returns the index of the encountered keyword in the <paramref name="keywords"/>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.String[],System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered.
            The reader stops at the position next to the last character of this Keyword.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="hitIndex">Returns the index of the encountered keyword in the <paramref name="keywords"/>.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.String[],System.Char,System.Char,System.Int32@,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" />  is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keyword in the <paramref name="keywords"/>.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.String[],System.Char,System.Char,System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" />  is encountered outside quotes.
            The reader stops at the position of the first character of this Keyword and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keyword in the <paramref name="keywords"/>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.String[],System.Char,System.Char,System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" />  is encountered outside quotes.
            The reader stops at the position next to the last character of the encountered keyword and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keyword in the <paramref name="keywords"/>.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.String[],System.Char,System.Char,System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" />  is encountered outside quotes.
            The reader stops at the position of the first character of this Keyword.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keyword in the <paramref name="keywords"/>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.String[],System.Char,System.Char,System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" />  is encountered outside quotes.
            The reader stops at the position next to the last character of this Keyword.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="leftQuote">The left quote. The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="rightQuote">The right quote. The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keyword in the <paramref name="keywords"/>.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.String[],System.Char[],System.Char[],System.Int32@,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" />  is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="leftQuotes">An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keyword in the <paramref name="keywords"/>.</param>
            <param name="options">Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.String[],System.Char[],System.Char[],System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" />  is encountered outside quotes.
            The reader stops at the position of the first character of this Keyword and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="leftQuotes">An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keyword in the <paramref name="keywords"/>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.String[],System.Char[],System.Char[],System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" />  is encountered outside quotes.
            The reader stops at the position next to the last character of the encountered keyword and the white-spaces at both ends of the returned substring will be trimmed.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="leftQuotes">An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keyword in the <paramref name="keywords"/>.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.String[],System.Char[],System.Char[],System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" />  is encountered outside quotes.
            The reader stops at the position of the first character of the encountered keyword.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="leftQuotes">An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keyword in the <paramref name="keywords"/>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.String[],System.Char[],System.Char[],System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" />  is encountered outside quotes.
            The reader stops at the position next to the last character of the encountered keyword.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="leftQuotes">An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a keyword is encountered inside a pair of quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keyword in the <paramref name="keywords"/>.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.String[],System.Char,System.Char,System.Char,System.Char,System.Int32@,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keyword in the <paramref name="keywords"/>.</param>
            <param name="options">>Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.String[],System.Char,System.Char,System.Char,System.Char,System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes.
            The current reader stops at the position of the keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keyword in the <paramref name="keywords"/>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.String[],System.Char,System.Char,System.Char,System.Char,System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keyword in the <paramref name="keywords"/>.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.String[],System.Char,System.Char,System.Char,System.Char,System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes. The current reader stops at the position of the keyword.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keyword in the <paramref name="keywords"/>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.String[],System.Char,System.Char,System.Char,System.Char,System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes. The current reader stops at the position immediately after the last character of the encountered keyword.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keyword in the <paramref name="keywords"/>.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.String[],System.Char,System.Char,System.Char[],System.Char[],System.Int32@,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keyword in the <paramref name="keywords"/>.</param>
            <param name="options">>Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.String[],System.Char,System.Char,System.Char[],System.Char[],System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes.
            The current reader stops at the position of the keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keyword in the <paramref name="keywords"/>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.String[],System.Char,System.Char,System.Char[],System.Char[],System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keyword in the <paramref name="keywords"/>.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.String[],System.Char,System.Char,System.Char[],System.Char[],System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes. The current reader stops at the position of the keyword.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keyword in the <paramref name="keywords"/>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.String[],System.Char,System.Char,System.Char[],System.Char[],System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes. The current reader stops at the position immediately after the last character of the encountered keyword.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuote">Specifies the Unicode character as the primary left quote.</param>
            <param name="primaryRightQuote">Specifies the Unicode character as the primary right quote.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keyword in the <paramref name="keywords"/>.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.String[],System.Char[],System.Char[],System.Char,System.Char,System.Int32@,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keyword in the <paramref name="keywords"/>.</param>
            <param name="options">>Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.String[],System.Char[],System.Char[],System.Char,System.Char,System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes.
            The current reader stops at the position of the keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keyword in the <paramref name="keywords"/>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.String[],System.Char[],System.Char[],System.Char,System.Char,System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keyword in the <paramref name="keywords"/>.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.String[],System.Char[],System.Char[],System.Char,System.Char,System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes. The current reader stops at the position of the keyword.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keyword in the <paramref name="keywords"/>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.String[],System.Char[],System.Char[],System.Char,System.Char,System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes. The current reader stops at the position immediately after the last character of the encountered keyword.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keyword in the <paramref name="keywords"/>.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToAsReader(System.String[],System.Char[],System.Char[],System.Char[],System.Char[],System.Int32@,System.Text.StringReader.ReadOptions)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes.
            The reader's position after executing this method depends on the <paramref name="options" />.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keyword in the <paramref name="keywords"/>.</param>
            <param name="options">>Specifies the reading options.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeWithTrimAsReader(System.String[],System.Char[],System.Char[],System.Char[],System.Char[],System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes.
            The current reader stops at the position of the keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keyword in the <paramref name="keywords"/>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterWithTrimAsReader(System.String[],System.Char[],System.Char[],System.Char[],System.Char[],System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes.
            The current reader stops at the position immediately after the last character of the encountered keyword and the white-spaces at both ends of the returned new reader will be trimmed.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keyword in the <paramref name="keywords"/>.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadBeforeAsReader(System.String[],System.Char[],System.Char[],System.Char[],System.Char[],System.Int32@,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes. The current reader stops at the position of the keyword.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keyword in the <paramref name="keywords"/>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadAfterAsReader(System.String[],System.Char[],System.Char[],System.Char[],System.Char[],System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader and reads until any substring specified in <paramref name="keywords" /> is encountered outside quotes. The current reader stops at the position immediately after the last character of the encountered keyword.
            </summary>
            <param name="keywords">The reader stops when any of these keywords is encountered.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="hitIndex">Returns the index of the encountered keyword in the <paramref name="keywords"/>.</param>
            <param name="discardKeyword"><c>true</c> if the keyword will be discarded and not be included in the returned substring; otherwise, <c>false</c>.</param>
            <param name="readToEndIfKeywordNotFound"><c>true</c> if the reader should read to the end of the reading scope if none of the <paramref name="keywords"/> is found; otherwise, <c>false</c>.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToMatchAsReader(System.Boolean)">
            <summary>
            Advances the reader and reads until a match of the reader's current character is found.
            The reader's current character is the character of the underlying string at the reader's current position.
            </summary>
            <param name="discardMatch">If set to <c>true</c>, the matched pair of characters will not be included in the returned substring.</param>
            <returns>A new string reader that encapsulates a substring read from the underlying string instance of the current reader.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToMatchAsReader(System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a match of the reader's current character is found.
            The reader's current character is the character of the underlying string at the reader's current position.
            </summary>
            <param name="matchedCharacter">Defines the character that matches the reader's current character.</param>
            <param name="discardMatch">If set to <c>true</c>, the matched pair of characters will not be included in the returned substring.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToMatchAsReader(System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a match of the reader's current character outside quotes is found.
            The reader's current character is the character of the underlying string at the reader's current position.
            </summary>
            <param name="leftQuote">The left quote. Any match that occurs between a pair of quotes will be ignored.</param>
            <param name="rightQuote">The right quote. Any match that occurs between a pair of quotes will be ignored.</param>
            <param name="discardMatch">If set to <c>true</c>, the matched pair of characters will not be included in the returned substring.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToMatchAsReader(System.Char,System.Char,System.Char,System.Boolean)">
            <summary>
            Advances the reader and reads until a match of the reader's current character outside quotes is found.
            The reader's current character is the character of the underlying string at the reader's current position.
            </summary>
            <param name="matchedCharacter">Defines the character that matches the reader's current character.</param>
            <param name="leftQuote">The left quote. Any match that occurs between a pair of quotes will be ignored.</param>
            <param name="rightQuote">The right quote. Any match that occurs between a pair of quotes will be ignored.</param>
            <param name="discardMatch">If set to <c>true</c>, the matched pair of characters will not be included in the returned substring.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToMatchAsReader(System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a match of the reader's current character outside quotes is found.
            The reader's current character is the character of the underlying string at the reader's current position.
            </summary>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a match is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a match is encountered inside a pair of quotes.</param>
            <param name="discardMatch">If set to <c>true</c>, the matched pair of characters will not be included in the returned substring.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadToMatchAsReader(System.Char,System.Char[],System.Char[],System.Boolean)">
            <summary>
            Advances the reader and reads until a match of the reader's current character outside quotes is found.
            The reader's current character is the character of the underlying string at the reader's current position.
            </summary>
            <param name="matchedCharacter">Defines the character that matches the reader's current character.</param>
            <param name="leftQuotes">
            An array of Unicode characters as the left quotes.
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a match is encountered inside a pair of quotes.</param>
            <param name="rightQuotes">
            An array of Unicode characters as the right quotes.
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a match is encountered inside a pair of quotes.</param>
            <param name="discardMatch">If set to <c>true</c>, the matched pair of characters will not be included in the returned substring.</param>
            <returns>
            A new string reader that encapsulates a substring read from the underlying string instance of the current reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.RemoveMatchedEnds(System.Char,System.Char,System.Boolean)">
            <summary>
            If the first character (the first non-whitespace character if <paramref name="ignoreWhiteSpaces"/> is <c>true</c>) of the reading scope equals <paramref name="value1"/> and the last character (the last non-whitespace character if <paramref name="ignoreWhiteSpaces"/> is <c>true</c>) of the reading scope equals <paramref name="rightQuote"/>, then they are removed from the reading scope.
            </summary>
            <param name="value1">The character to match against the first character of the reading scope.</param>
            <param name="value2">The character to match against the last character of the reading scope.</param>
            <param name="ignoreWhiteSpaces"><c>true</c> if white spaces at both ends of the reading scope will be trimmed before trying to match characters; otherwise, <c>false</c>. NOTE that if this argument is set <c>true</c>, the white spaces will be trimmed even if the first character and the last character of the trimmed reading scope are not matched.</param>
            <returns><c>true</c> if the first character (the first non-whitespace character if <paramref name="ignoreWhiteSpaces"/> is <c>true</c>) of the reading scope equals <paramref name="value1"/> and the last character (the last non-whitespace character if <paramref name="ignoreWhiteSpaces"/> is <c>true</c>) of the reading scope equals <paramref name="rightQuote"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Text.StringReader.RemoveBrackets(System.Boolean)">
            <summary>
            Removes the first character and the last character of the reading scope if they are matched brackets.
            Matched brackets include '[' and ']', '(' and ')', '{' and '}', '&lt;' and '&gt;'.
            </summary>
            <param name="ignoreSpaces"><c>true</c> if white spaces at both ends of the reading scope will be trimmed before trying to find matched characters; otherwise, <c>false</c>. NOTE that if this argument is set <c>true</c>, the white spaces will be trimmed even if the first character and the last character of the trimmed reading scope are not matched brackets.</param>
        </member>
        <member name="M:System.Text.StringReader.RemoveBracketsAndQuotes(System.Boolean)">
            <summary>
            Removes the first character and the last character of the reading scope if they are matched quotes and brackets.
            Matched quotes and brackets include a pair of single-quotes ('''), a pair of double-quotes ('"'), '[' and ']', '(' and ')', '{' and '}', '&lt;' and '&gt;'.
            </summary>
            <param name="ignoreSpaces"><c>true</c> if white spaces at both ends of the reading scope will be trimmed before trying to find matched characters; otherwise, <c>false</c>. NOTE that if this argument is set <c>true</c>, the white spaces will be trimmed even if the first character and the last character of the trimmed reading scope are not matched quotes and brackets.</param>
        </member>
        <member name="M:System.Text.StringReader.RemoveQuotes(System.Boolean)">
            <summary>
            Removes the first character and the last character of the reading scope if they are matched quotes.
            Matched quotes include a pair of single-quotes ('''), a pair of double-quotes ('"').
            </summary>
            <param name="ignoreSpaces"><c>true</c> if white spaces at both ends of the reading scope will be trimmed before trying to find matched characters; otherwise, <c>false</c>. NOTE that if this argument is set <c>true</c>, the white spaces will be trimmed even if the first character and the last character of the trimmed reading scope are not matched quotes.</param>
        </member>
        <member name="M:System.Text.StringReader.RemoveSquareBrackets(System.Boolean)">
            <summary>
            Removes the first character and the last character of the reading scope if they are a pair of square brackets ('[' and  ']').
            </summary>
            <param name="ignoreSpaces"><c>true</c> if white spaces at both ends of the reading scope will be trimmed before trying to find matched characters; otherwise, <c>false</c>. NOTE that if this argument is set <c>true</c>, the white spaces will be trimmed even if the first character and the last character of the trimmed reading scope are not a pair of square brackets.</param>
        </member>
        <member name="M:System.Text.StringReader.RemoveAngleBrackets(System.Boolean)">
            <summary>
            Removes the first character and the last character of the reading scope if they are a pair of angle brackets ('&lt;' and  '&gt;').
            </summary>
            <param name="ignoreSpaces"><c>true</c> if white spaces at both ends of the reading scope will be trimmed before trying to find matched characters; otherwise, <c>false</c>. NOTE that if this argument is set <c>true</c>, the white spaces will be trimmed even if the first character and the last character of the trimmed reading scope are not a pair of angle brackets.</param>
        </member>
        <member name="M:System.Text.StringReader.RemoveRoundBrackets(System.Boolean)">
            <summary>
            Removes the first character and the last character of the reading scope if they are a pair of round brackets ('(' and  ')').
            </summary>
            <param name="ignoreSpaces"><c>true</c> if white spaces at both ends of the reading scope will be trimmed before trying to find matched characters; otherwise, <c>false</c>. NOTE that if this argument is set <c>true</c>, the white spaces will be trimmed even if the first character and the last character of the trimmed reading scope are not a pair of round brackets.</param>
        </member>
        <member name="M:System.Text.StringReader.RemoveBraces(System.Boolean)">
            <summary>
            Removes the first character and the last character of the reading scope if they are a pair of braces ('{' and  '}').
            </summary>
            <param name="ignoreSpaces"><c>true</c> if white spaces at both ends of the reading scope will be trimmed before trying to find matched characters; otherwise, <c>false</c>. NOTE that if this argument is set <c>true</c>, the white spaces will be trimmed even if the first character and the last character of the trimmed reading scope are not a pair of braces.</param>
        </member>
        <member name="M:System.Text.StringReader.SeekTo(System.Func{System.Char,System.Boolean},System.Boolean,System.Boolean)">
            <summary>
            Advances the reader until a character satisfying <paramref name="predicate"/> is encountered.
            </summary>
            <param name="predicate">A method to test each character.</param>
            <param name="skipKeychar">
            <c>true</c> if the reader stops at the position next to the first encountered character satisfying the <paramref name="predicate"/>;
            <c>false</c> if the reader stops at the position of such a character.
            </param>
            <param name="seekToEndIfKeycharNotFound">
            <c>true</c> if the reader should advance to the end of the reading scope if no character satisfying the <paramref name="predicate"/> is found;
            <c>false</c> if the reader should stand still if such a character cannot be found.
            </param>
            <returns><c>true</c> if the reader has advanced to a character satisfying the specified <paramref name="predicate"/>; <c>false</c> if no such character is found.</returns>
        </member>
        <member name="M:System.Text.StringReader.SeekTo(System.Func{System.Char,System.Boolean},System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader until a character satisfying <paramref name="predicate" /> is encountered outside quotes.
            </summary>
            <param name="predicate">A method to test each character.</param>
            <param name="leftQuote">
            The left quote that works together with <paramref name="rightQuote"/> to escape the <paramref name="predicate"/>. 
            The reader will not stop when a character satisfying the <paramref name="predicate"/> is encountered inside a pair of quotes.
            </param>
            <param name="rightQuote">
            The left quote that works together with <paramref name="leftQuote"/> to escape the <paramref name="predicate"/>. 
            The reader will not stop when a character satisfying the <paramref name="predicate"/> is encountered inside a pair of quotes.
            </param>
            <param name="skipKeychar"><c>true</c> if the reader stops at the position next to the first encountered character satisfying the <paramref name="predicate" />;
            <c>false</c> if the reader stops at the position of such a character.</param>
            <param name="seekToEndIfKeycharNotFound"><c>true</c> if the reader should advance to the end of the reading scope if no character satisfying the <paramref name="predicate" /> is found;
            <c>false</c> if the reader should stand still if such a character cannot be found.</param>
            <returns>
            <c>true</c> if the reader is advanced to a character outside quotes satisfying the specified <paramref name="predicate" />; <c>false</c> if no such character is found.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.SeekTo(System.Func{System.Char,System.Boolean},System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader until a character satisfying <paramref name="predicate" /> is encountered outside quotes.
            </summary>
            <param name="predicate">A method to test each character.</param>
            <param name="leftQuotes">
            The left quotes that work together with <paramref name="rightQuotes"/> to escape the <paramref name="predicate"/>. 
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a character satisfying the <paramref name="predicate"/> is encountered inside a pair of quotes.
            </param>
            <param name="rightQuotes">
            The left quotes that work together with <paramref name="leftQuotes"/> to escape the <paramref name="predicate"/>. 
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a character satisfying the <paramref name="predicate"/> is encountered inside a pair of quotes.
            </param>
            <param name="skipKeychar"><c>true</c> if the reader stops at the position next to the first encountered character satisfying the <paramref name="predicate" />;
            <c>false</c> if the reader stops at the position of such a character.</param>
            <param name="seekToEndIfKeycharNotFound"><c>true</c> if the reader should advance to the end of the reading scope if no character satisfying the <paramref name="predicate" /> is found;
            <c>false</c> if the reader should stand still if such a character cannot be found.</param>
            <returns>
            <c>true</c> if the reader is advanced to a character outside quotes satisfying the specified <paramref name="predicate" />; <c>false</c> if no such character is found.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.SeekTo(System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader until an occurrence of the specified character is encountered.
            </summary>
            <param name="keychar">The reader stops when this character is encountered.</param>
            <param name="skipKeychar">
            <c>true</c> if the reader stops at the position next to the encountered <paramref name="keychar"/>;
            <c>false</c> if the reader stops at the position of the encountered <paramref name="keychar"/>.
            </param>
            <param name="seekToEndIfKeycharNotFound">
            <c>true</c> if the reader should advance to the end of the reading scope if <paramref name="keychar"/> is not found.
            <c>false</c> if the reader should stand still if such a character cannot be found.
            </param>
            <returns>
            <c>true</c> if an occurrence <paramref name="keychar" /> is found and the reader has advanced to that character; <c>false</c> if no such character is found.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.SeekTo(System.Char,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader until an occurrence of the specified character is encountered outside quotes.
            </summary>
            <param name="keychar">The reader stops when this character is encountered.</param>
            <param name="leftQuote">
            The left quote that works together with <paramref name="rightQuote"/> to escape the <paramref name="keychar"/>. 
            The reader will not stop when a keychar is encountered inside a pair of quotes.
            </param>
            <param name="rightQuote">
            The left quote that works together with <paramref name="leftQuote"/> to escape the <paramref name="keychar"/>. 
            The reader will not stop when a keychar is encountered inside a pair of quotes.
            </param>
            <param name="skipKeychar">
            <c>true</c> if the reader stops at the position next to the encountered <paramref name="keychar"/>;
            <c>false</c> if the reader stops at the position of the encountered <paramref name="keychar"/>.
            </param>
            <param name="seekToEndIfKeycharNotFound">
            <c>true</c> if the reader should advance to the end of the reading scope if <paramref name="keychar"/> is not found.
            <c>false</c> if the reader should stand still if such a character cannot be found.
            </param>
            <returns>
            <c>true</c> if an occurrence <paramref name="keychar" /> is found outside quotes and the reader is advanced to that character; <c>false</c> if no such character is found.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.SeekTo(System.Char,System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader until an occurrence of the specified character is encountered outside quotes.
            </summary>
            <param name="keychar">The reader stops when this character is encountered.</param>
            <param name="leftQuotes">
            The left quotes that work together with <paramref name="rightQuotes"/> to escape the <paramref name="predicate"/>. 
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a character satisfying the <paramref name="predicate"/> is encountered inside a pair of quotes.
            </param>
            <param name="rightQuotes">
            The left quotes that work together with <paramref name="leftQuotes"/> to escape the <paramref name="predicate"/>. 
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a character satisfying the <paramref name="predicate"/> is encountered inside a pair of quotes.
            </param>
            <param name="skipKeychar">
            <c>true</c> if the reader stops at the position next to the encountered <paramref name="keychar"/>;
            <c>false</c> if the reader stops at the position of the encountered <paramref name="keychar"/>.
            </param>
            <param name="seekToEndIfKeycharNotFound">
            <c>true</c> if the reader should advance to the end of the reading scope if <paramref name="keychar"/> is not found.
            <c>false</c> if the reader should stand still if such a character cannot be found.
            </param>
            <returns>
            <c>true</c> if an occurrence <paramref name="keychar" /> is found outside quotes and the reader is advanced to that character; <c>false</c> if no such character is found.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.SeekTo(System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader until an occurrence of any of the specified characters is encountered.
            </summary>
            <param name="keychars">The reader stops when any of these characters is encountered.</param>
            <param name="skipKeychar">
            <c>true</c> if the reader stops at the position next to the encountered keychar.
            <c>false</c> if the reader stops at the position of the encountered keychar.
            </param>
            <param name="seekToEndIfKeycharNotFound">
            <c>true</c> if the reader should advance to the end of the reading scope if none of <paramref name="keychars"/> is found.
            <c>false</c> if the reader should stand still if such a character cannot be found.
            </param>
            <returns>
            <c>true</c> if an occurrence of any of the <paramref name="keywords" /> is found and the reader is advanced to that character; 
            <c>false</c> if no such character is found.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.SeekTo(System.Char[],System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader until an occurrence of any of the specified characters is encountered outside quotes.
            </summary>
            <param name="keychars">The reader stops when any of these characters is encountered.</param>
            <param name="leftQuote">
            The left quote that works together with <paramref name="rightQuote"/> to escape the <paramref name="keychars"/>. 
            The reader will not stop when a keychar is encountered inside a pair of quotes.
            </param>
            <param name="rightQuote">
            The left quote that works together with <paramref name="leftQuote"/> to escape the <paramref name="keychars"/>. 
            The reader will not stop when a keychar is encountered inside a pair of quotes.
            </param>
            <param name="skipKeychar">
            <c>true</c> if the reader stops at the position next to the encountered keychar.
            <c>false</c> if the reader stops at the position of the encountered keychar.
            </param>
            <param name="seekToEndIfKeycharNotFound">
            <c>true</c> if the reader should advance to the end of the reading scope if none of <paramref name="keychars"/> is found.
            <c>false</c> if the reader should stand still if such a character cannot be found.
            </param>
            <returns>
            '\0' if none of <paramref name="keychars"/> is found; ohterwise, the encountered keychar.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.SeekTo(System.Char[],System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader until an occurrence of any of the specified characters is encountered outside quotes.
            </summary>
            <param name="keychars">The reader stops when any of these characters is encountered.</param>
            <param name="leftQuotes">
            The left quotes that work together with <paramref name="rightQuotes"/> to escape the <paramref name="predicate"/>. 
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a character satisfying the <paramref name="predicate"/> is encountered inside a pair of quotes.
            </param>
            <param name="rightQuotes">
            The left quotes that work together with <paramref name="leftQuotes"/> to escape the <paramref name="predicate"/>. 
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a character satisfying the <paramref name="predicate"/> is encountered inside a pair of quotes.
            </param>
            <param name="skipKeychar">
            <c>true</c> if the reader stops at the position next to the encountered keychar.
            <c>false</c> if the reader stops at the position of the encountered keychar.
            </param>
            <param name="seekToEndIfKeycharNotFound">
            <c>true</c> if the reader should advance to the end of the reading scope if none of <paramref name="keychars"/> is found.
            <c>false</c> if the reader should stand still if such a character cannot be found.
            </param>
            <returns>
            '\0' if none of <paramref name="keychars"/> is found; ohterwise, the encountered keychar.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.SeekTo(System.String,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader until an occurrence of the specified string is encountered.
            </summary>
            <param name="keyword">The reader stops when this string is encountered.</param>
            <param name="skipKeyword">
            <c>true</c> if the reader stops at the position next to the last character of the encountered keyword.
            <c>false</c> if the reader stops at the position of the first character of the encountered keyword.
            </param>
            <param name="seekToEndIfKeywordNotFound">
            <c>true</c> if the reader should advance to the end of the reading scope if <paramref name="keyword"/> is not found.
            <c>false</c> if the reader should stand still if such a keyword cannot be found.
            </param>
            <returns>
            <c>true</c> if an occurrence of <paramref name="keyword" /> is encountered and the reader is advanced to that keyword; <c>false</c> if no such keyword is found.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.SeekTo(System.String,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader until an occurrence of the specified string is encountered outside quotes.
            </summary>
            <param name="keyword">The reader stops when this string is encountered.</param>
            <param name="leftQuote">
            The left quote that works together with <paramref name="rightQuote"/> to escape the <paramref name="keyword"/>. 
            The reader will not stop when a keyword is encountered inside a pair of quotes.
            </param>
            <param name="rightQuote">
            The left quote that works together with <paramref name="leftQuote"/> to escape the <paramref name="keyword"/>. 
            The reader will not stop when a keyword is encountered inside a pair of quotes.
            </param>
            <param name="skipKeyword">
            <c>true</c> if the reader stops at the position next to the last character of the encountered keyword.
            <c>false</c> if the reader stops at the position of the first character of the encountered keyword.
            </param>
            <param name="seekToEndIfKeywordNotFound">
            <c>true</c> if the reader should advance to the end of the reading scope if <paramref name="keyword"/> is not found.
            <c>false</c> if the reader should stand still if such a keyword cannot be found.
            </param>
            <returns>
            <c>true</c> if an occurrence of <paramref name="keyword" /> is encountered outside quotes and the reader is advanced to that keyword; <c>false</c> if no such keyword is found.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.SeekTo(System.String,System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader until an occurrence of the specified string is encountered outside quotes.
            </summary>
            <param name="keyword">The reader stops when this string is encountered.</param>
            <param name="leftQuotes">
            The left quotes that work together with <paramref name="rightQuotes"/> to escape the <paramref name="predicate"/>. 
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a character satisfying the <paramref name="predicate"/> is encountered inside a pair of quotes.
            </param>
            <param name="rightQuotes">
            The left quotes that work together with <paramref name="leftQuotes"/> to escape the <paramref name="predicate"/>. 
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a character satisfying the <paramref name="predicate"/> is encountered inside a pair of quotes.
            </param>
            <param name="skipKeyword">
            <c>true</c> if the reader stops at the position next to the last character of the encountered keyword.
            <c>false</c> if the reader stops at the position of the first character of the encountered keyword.
            </param>
            <param name="seekToEndIfKeywordNotFound">
            <c>true</c> if the reader should advance to the end of the reading scope if <paramref name="keyword"/> is not found.
            <c>false</c> if the reader should stand still if such a keyword cannot be found.
            </param>
            <returns>
            <c>true</c> if an occurrence of <paramref name="keyword" /> is encountered outside quotes and the reader is advanced to that keyword; <c>false</c> if no such keyword is found.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.SeekTo(System.String[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader until an occurrence of any of the specified strings is encountered.
            </summary>
            <param name="keywords">The reader stops when any of these strings is encountered.</param>
            <param name="skipKeyword">
            <c>true</c> if the reader stops at the position next to the last character of the encountered keyword.
            <c>false</c> if the reader stops at the position of the first character of the encountered keyword.
            </param>
            <param name="seekToEndIfKeywordNotFound">
            <c>true</c> if the reader should advance to the end of the reading scope if none of <paramref name="keywords"/> is found.
            <c>false</c> if the reader should stand still if such a keyword cannot be found.
            </param>
            <returns>
            <c>true</c> if an occurrence of any of the <paramref name="keywords" /> is found and the reader is advanced to that keyword; 
            <c>false</c> if no such keyword is found.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.SeekTo(System.String[],System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader until an occurrence of any of the specified strings is encountered outside quotes.
            </summary>
            <param name="keywords">The reader stops when any of these strings is encountered.</param>
            <param name="leftQuote">
            The left quote that works together with <paramref name="rightQuote"/> to escape the <paramref name="keywords"/>. 
            The reader will not stop when a keyword is encountered inside a pair of quotes.
            </param>
            <param name="rightQuote">
            The left quote that works together with <paramref name="leftQuote"/> to escape the <paramref name="keywords"/>. 
            The reader will not stop when a keyword is encountered inside a pair of quotes.
            </param>
            <param name="skipKeyword">
            <c>true</c> if the reader stops at the position next to the last character of the encountered keyword.
            <c>false</c> if the reader stops at the position of the first character of the encountered keyword.
            </param>
            <param name="seekToEndIfKeywordNotFound">
            <c>true</c> if the reader should advance to the end of the reading scope if none of <paramref name="keywords"/> is found.
            <c>false</c> if the reader should stand still if such a keyword cannot be found.
            </param>
            <returns>
            <c>true</c> if an occurrence of any of the <paramref name="keywords" /> is encountered outside quotes and the reader is advanced to that keyword; 
            <c>false</c> if no such keyword is found.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.SeekTo(System.String[],System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader until an occurrence of any of the specified <paramref name="keywords"/> is encountered outside quotes.
            </summary>
            <param name="keywords">The reader stops when any of these strings is encountered.</param>
            <param name="leftQuotes">
            The left quotes that work together with <paramref name="rightQuotes"/> to escape the <paramref name="predicate"/>. 
            A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="rightQuotes" />.
            The reader will not stop when a character satisfying the <paramref name="predicate"/> is encountered inside a pair of quotes.
            </param>
            <param name="rightQuotes">
            The left quotes that work together with <paramref name="leftQuotes"/> to escape the <paramref name="predicate"/>. 
            A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="leftQuotes" />.
            The reader will not stop when a character satisfying the <paramref name="predicate"/> is encountered inside a pair of quotes.
            </param>
            <param name="skipKeyword">
            <c>true</c> if the reader stops at the position next to the last character of the encountered keyword.
            <c>false</c> if the reader stops at the position of the first character of the encountered keyword.
            </param>
            <param name="seekToEndIfKeywordNotFound">
            <c>true</c> if the reader should advance to the end of the reading scope if none of <paramref name="keywords"/> is found.
            <c>false</c> if the reader should stand still if such a keyword cannot be found.
            </param>
            <returns>
            THe index of the encountered keyword in the <paramref name="keywords" />, if any ouccrrance of the <paramref name="keywords"/> is encountered outside quotes and the reader has advanced to that keyword; 
            -1 if no keyword is encountered.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.SeekTo(System.String[],System.Char[],System.Char[],System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Advances the reader until an occurrence of any of the specified <paramref name="keywords"/> is encountered outside quotes.
            </summary>
            <param name="keywords">The reader stops when any of these strings is encountered.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuote">Specifies the Unicode character as the secondary left quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuote">Specifies the Unicode character as the secondary right quote. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="skipKeyword">
            <c>true</c> if the reader stops at the position next to the last character of the encountered keyword.
            <c>false</c> if the reader stops at the position of the first character of the encountered keyword.
            </param>
            <param name="seekToEndIfKeywordNotFound">
            <c>true</c> if the reader should advance to the end of the reading scope if none of <paramref name="keywords"/> is found.
            <c>false</c> if the reader should stand still if such a keyword cannot be found.
            </param>
            <returns>
            THe index of the encountered keyword in the <paramref name="keywords" />, if any ouccrrance of the <paramref name="keywords"/> is encountered outside quotes and the reader has advanced to that keyword; 
            -1 if no keyword is encountered.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.SeekTo(System.String[],System.Char[],System.Char[],System.Char[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Advances the reader until an occurrence of any of the specified <paramref name="keywords"/> is encountered outside quotes.
            </summary>
            <param name="keywords">The reader stops when any of these strings is encountered.</param>
            <param name="primaryLeftQuotes">Specifies an array of Unicode characters as the primary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="primaryRightQuotes" />.</param>
            <param name="primaryRightQuotes">Specifies an array of Unicode characters as the primary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="primaryLeftQuotes" />.</param>
            <param name="secondaryLeftQuotes">Specifies an array of Unicode characters as the secondary left quotes. A left quote of an index of this array corresponds to the right quote of that index of the array specified by <paramref name="secondaryRightQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="secondaryRightQuotes">Specifies an array of Unicode characters as the secondary right quotes. A right quote of an index of this array corresponds to the left quote of that index of the array specified by <paramref name="secondaryLeftQuotes" />. Secondary quotes are escaped when they are inside a pair of primary quotes.</param>
            <param name="skipKeyword">
            <c>true</c> if the reader stops at the position next to the last character of the encountered keyword.
            <c>false</c> if the reader stops at the position of the first character of the encountered keyword.
            </param>
            <param name="seekToEndIfKeywordNotFound">
            <c>true</c> if the reader should advance to the end of the reading scope if none of <paramref name="keywords"/> is found.
            <c>false</c> if the reader should stand still if such a keyword cannot be found.
            </param>
            <returns>
            THe index of the encountered keyword in the <paramref name="keywords" />, if any ouccrrance of the <paramref name="keywords"/> is encountered outside quotes and the reader has advanced to that keyword; 
            -1 if no keyword is encountered.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.SeekToNextLine(System.Boolean)">
            <summary>
            Advances the reader to the beginning of the next line. If the current line is the last line, the reader advances to the end of the underlying string.
            </summary>
            <param name="skipBlankLines"><c>true</c> to indicate the reader should skip all blank lines it encounters before a non-empty line is reached.
            If no non-empty line is found, the reader will advance to the end of the underlying string.
            </param>
        </member>
        <member name="M:System.Text.StringReader.ReadIndentedBlock(System.Int32,System.Text.StringReader.TrimMode,System.Boolean)">
            <summary>
            Reads an indented block from the underlying string. An indented block consists of several lines where each line starts with some white space. The number of whitespace characters is at least <paramref name="indentLevel"/>.
            </summary>
            <param name="indentLevel">The indent level indicating the number of spaces ahead of the text in each line of this indented block.</param>
            <param name="trimStart"><see cref="F:System.Text.StringReader.TrimMode.NoTrim"/> if the white spaces at the start of every line of the block should be be trimmed; <see cref="F:System.Text.StringReader.TrimMode.KeepIndent"/> if a number of whitespaces is preserved while others are trimmed where the number is <paramref name="indentLevel"/>; <see cref="F:System.Text.StringReader.TrimMode.TrimAll"/> if all white spaces are trimmed.</param>
            <param name="trimEnd"><c>true</c> if all white spaces at the end of every line of the block are trimmed.</param>
            <returns></returns>
        </member>
        <member name="M:System.Text.StringReader.ReadWhitespaces">
            <summary>
            Advances the reader and reads all spaces from the reader's current position until a non-whitespace character is encountered.
            </summary>
            <returns>The whitespace characters read from the underlying string.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadInlineWhitespaces">
            <summary>
            Advances the reader and reads all spaces from the reader's current position until a non-whitespace character or a character in <see cref="P:System.Environment.NewLine"/> is encountered.
            </summary>
            <returns>The whitespace characters read from the underlying string.</returns>
        </member>
        <member name="M:System.Text.StringReader.ReadInlineWhitespaces(System.Boolean@)">
            <summary>
            Advances the reader and reads all spaces from the reader's current position until a non-whitespace character or a character in <see cref="P:System.Environment.NewLine" /> is encountered.
            </summary>
            <param name="linebreak">returns a <see cref="T:System.Boolean"/> indicating if the white spaces are followed by a new-line character.</param>
            <returns>
            The whitespace characters read from the underlying string.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.ReadNonWhitespaces">
            <summary>
            Advances the reader and reads all non-space characters from the reader's current position until a white-space character is encountered.
            </summary>
            <returns>The non-space characters read from the underlying string.</returns>
        </member>
        <member name="M:System.Text.StringReader.Skip(System.Func{System.Char,System.Boolean})">
            <summary>
            Advances the reader until a character not satisfying the specified <paramref name="predicate"/> is encountered.
            </summary>
            <param name="predicate">A method used to test each character.</param>
            <returns>The number of characters the reader has advanced.</returns>
        </member>
        <member name="M:System.Text.StringReader.SkipSpaces">
            <summary>
            Advances the reader until a non-space character is encountered.
            </summary>
            <returns>The number of white-spaces the reader has advanced.</returns>
        </member>
        <member name="M:System.Text.StringReader.SkipNonSpaces">
            <summary>
            Advances the reader until a white-space character is encountered.
            </summary>
            <returns>The number of non-space characters the reader has advanced.</returns>
        </member>
        <member name="M:System.Text.StringReader.ToString">
            <summary>
            Returns a substring of the underlying string instance of this reader, starting from the current position to the limit of this reader.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that is a substring of the underlying string instance of this reader.
            </returns>
        </member>
        <member name="M:System.Text.StringReader.Equals(System.String)">
            <summary>
            Determines whether the current scope of the underlying string equals a specified string instance.
            </summary>
            <param name="value">The value to compare.</param>
            <returns><c>true</c> if the current scope of the underlying string equals the specified <paramref name="value"/>.</returns>
        </member>
        <member name="T:System.Text.StringReader.ReadOptions">
            <summary>
            Specifies options for <see cref="M:System.Text.StringReader.ReadTo(System.Char,System.Boolean,System.Text.StringReader.ReadOptions)"/> methods.
            </summary>
        </member>
        <member name="F:System.Text.StringReader.ReadOptions.Default">
            <summary>
            The reader stops at the position of the keychar or the first character of the keyword.
            </summary>
        </member>
        <member name="F:System.Text.StringReader.ReadOptions.StopAfterKey">
            <summary>
            The reader stops at the position next to the keychar or the last character of the keyword.
            This option overrides <see cref="F:System.Text.StringReader.ReadOptions.Default"/> if both are specified.
            </summary>
        </member>
        <member name="F:System.Text.StringReader.ReadOptions.DiscardKey">
            <summary>
            The keychar or the keyword will not be included in the returned string.
            </summary>
        </member>
        <member name="F:System.Text.StringReader.ReadOptions.TrimStart">
            <summary>
            The white spaces at the beginning of the returned string will be removed.
            </summary>
        </member>
        <member name="F:System.Text.StringReader.ReadOptions.TrimEnd">
            <summary>
            The white spaces at the end of the returned string will be removed.
            </summary>
        </member>
        <member name="F:System.Text.StringReader.ReadOptions.ReadToEnd">
            <summary>
            The read will advance and read to the end of the reading scope if the keychar or keyword is not found.
            </summary>
        </member>
        <member name="F:System.Text.StringReader.ReadOptions.InLine">
            <summary>
            The search stays within a line and stops when an <see cref="P:System.Environment.NewLine"/> is encountered.
            </summary>
        </member>
        <member name="T:System.Text.StringReader`1">
            <summary>
            Provides rich methods to extract information from a string instance, with a state property and related methods to facilitate construction of an automaton.
            </summary>
            <typeparam name="TState">The type of the state object.</typeparam>
            <seealso cref="!:System.StringReader" />
        </member>
        <member name="M:System.Text.StringReader`1.#ctor(`0,`0,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.StringReader`1" /> class.
            </summary>
            <param name="initialState">Provides the initial state.</param>
            <param name="endState">Provides the end state.</param>
            <param name="s">The string instance to read.</param>
            <param name="startIndex">Specifies the initial position of the reader.</param>
            <param name="length">Specifies the maximum number of characters this reader can read from its initial position.
            This argument together with <paramref name="startIndex" /> determines this reader's reading scope.</param>
        </member>
        <member name="M:System.Text.StringReader`1.#ctor(`0,`0,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.StringReader`1" /> class.
            </summary>
            <param name="initialState">Provides the initial state.</param>
            <param name="endState">Provides the end state.</param>
            <param name="s">The string instance to read.</param>
            <param name="startIndex">Specifies the initial position of the reader.</param>
        </member>
        <member name="M:System.Text.StringReader`1.#ctor(`0,`0,System.Text.StringReader)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.StringReader`1" /> class from a <see cref="T:System.Text.StringReader" /> instance. This constructor copies <see cref="P:System.Text.StringReader.UnderlyingString" />, <see cref="P:System.Text.StringReader.CurrentPosition" />, <see cref="P:System.Text.StringReader.EndPosition" /> and <see cref="P:System.Text.StringReader.ComparisonType" /> of <paramref name="reader" /> to the new instance, but does not copy <see cref="!:StringReader.MarkedPosition" /> property.
            </summary>
            <param name="initialState">Provides the initial state.</param>
            <param name="endState">Provides the end state.</param>
            <param name="reader">Provides a <see cref="T:System.Text.StringReader" /> instance.</param>
        </member>
        <member name="M:System.Text.StringReader`1.#ctor(`0,`0,System.String,System.StringComparison)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.StringReader`1" /> class.
            </summary>
            <param name="initialState">Provides the initial state.</param>
            <param name="endState">Provides the end state.</param>
            <param name="s">The string instance to read.</param>
            <param name="comparisonType">Specifies a <see cref="T:System.StringComparison" /> value for string comparisons in various methods of the <see cref="T:System.Text.StringReader" /> class.</param>
        </member>
        <member name="P:System.Text.StringReader`1.State">
            <summary>
            Gets the reading state.
            </summary>
            <value>The reading state.</value>
        </member>
        <member name="P:System.Text.StringReader`1.InitialState">
            <summary>
            Gets the initial state of this <see cref="T:System.Text.StringReader`1"/>.
            </summary>
            <value>The initial state of this <see cref="T:System.Text.StringReader`1"/>.</value>
        </member>
        <member name="P:System.Text.StringReader`1.EndState">
            <summary>
            Gets the end state of this <see cref="T:System.Text.StringReader`1"/>.
            </summary>
            <value>The end state of this <see cref="T:System.Text.StringReader`1"/>.</value>
        </member>
        <member name="P:System.Text.StringReader`1.EOS">
            <summary>
            Gets a value indicating whether this <see cref="T:System.Text.StringReader`1"/> is at its end state.
            </summary>
            <value><c>true</c> if this <see cref="T:System.Text.StringReader`1"/> is at its end state; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:System.Text.StringReader`1.SetState(`0)">
            <summary>
            Sets the reading state.
            </summary>
            <param name="state">An object representing the reading state.</param>
        </member>
        <member name="M:System.Text.StringReader`1.Reset">
            <summary>
            Resets this <see cref="T:System.Text.StringReader`1"/> to its initial state.
            </summary>
        </member>
        <member name="M:System.Text.StringReader`1.Advance(`0,`0)">
            <summary>
            Advances the reader to the position of the first non-whitespace character in the reader's scope. The <see cref="P:System.Text.StringReader`1.State"/> will be set to <paramref name="epsilonState"/> if the current reading scope is empty or contains only whitespace characters, and set to <paramref name="nonEpsilonState"/> otherwise.
            </summary>
            <param name="epsilonState">The state to set if the current reading scope is empty or contains only whitespace characters.</param>
            <param name="nonEpsilonState">The state to set if the current reading scope contains at least one non-whitespace character.</param>
        </member>
        <member name="M:System.Text.StringReader`1.Read(`0,`0)">
            <summary>
            Reads the first non-whitespace character in the reader's scope and advances the reader to the position after the first non-whitespace character. The <see cref="P:System.Text.StringReader`1.State"/> will be set to <paramref name="epsilonState"/> if the current reading scope is empty or contains only whitespace characters, and set to <paramref name="nonEpsilonState"/> otherwise.
            </summary>
            <param name="epsilonState">The state to set if the current reading scope is empty or contains only whitespace characters.</param>
            <param name="nonEpsilonState">The state to set if the current reading scope contains at least one non-whitespace character.</param>
            <returns>If there eists a non-whitespace character in the reader's scope, this method returns the first non-whitespace character; otherwise, this method returns '\0'.</returns>
        </member>
        <member name="T:System_Extension_Library.System.ArrayEx.ArrayExResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System_Extension_Library.System.ArrayEx.ArrayExResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System_Extension_Library.System.ArrayEx.ArrayExResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System_Extension_Library.System.ArrayEx.ArrayExResources.ERR_ArrayEx_IncorrectWeights">
            <summary>
              Looks up a localized string similar to The weight configuration is incorrect..
            </summary>
        </member>
        <member name="P:System_Extension_Library.System.ArrayEx.ArrayExResources.ERR_ArrayEx_ShuffleCopyNonNull_EmptyDestination">
            <summary>
              Looks up a localized string similar to The destination list should be empty..
            </summary>
        </member>
        <member name="P:System_Extension_Library.System.ArrayEx.ArrayExResources.ERR_ArrayEx_UnableToCreateDistinctRandomArray">
            <summary>
              Looks up a localized string similar to The value of &quot;range&quot; is smaller than the length of the random array, so the elements cannot be distinct from each other..
            </summary>
        </member>
        <member name="T:System_Extension_Library.System.StringEx.StringExResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System_Extension_Library.System.StringEx.StringExResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System_Extension_Library.System.StringEx.StringExResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System_Extension_Library.System.StringEx.StringExResources.ERR_Quotes_QuoteMismatch">
            <summary>
              Looks up a localized string similar to Quote mismatch detected..
            </summary>
        </member>
        <member name="P:System_Extension_Library.System.StringEx.StringExResources.ERR_Scan_InvalidCharacterInAlignment">
            <summary>
              Looks up a localized string similar to Only &apos;-&apos; and digit characters &apos;0&apos;-&apos;9&apos; are allowed to specify the alignment..
            </summary>
        </member>
        <member name="T:DoNetExtension.System.Collections.Generic.GenericResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DoNetExtension.System.Collections.Generic.GenericResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DoNetExtension.System.Collections.Generic.GenericResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DoNetExtension.System.Collections.Generic.GenericResources.ERR_ArrayDictionary_ExceedsCapacity">
            <summary>
              Looks up a localized string similar to The capacity of array dictionary is fixed at {0}. This array dictionary is now full and cannot accept new items..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.Collections.Generic.GenericResources.ERR_ArrayDictionary_IndexOutOfBoundary">
            <summary>
              Looks up a localized string similar to Index out of boundary. This array list only contains {0} items while the index is {1}..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.Collections.Generic.GenericResources.ERR_BiDictionary_SynchronizationFailed">
            <summary>
              Looks up a localized string similar to Sychronization between the key-value dictionary and the value-key dictionary failed..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.Collections.Generic.GenericResources.ERR_Common_KeyConflict">
            <summary>
              Looks up a localized string similar to Key &quot;{0}&quot; already exists in this dictionary..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.Collections.Generic.GenericResources.ERR_Common_KeyNotFound">
            <summary>
              Looks up a localized string similar to The key &quot;{0}&quot; does not exist in this dictionary..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.Collections.Generic.GenericResources.ERR_Common_PathAlreadyExist">
            <summary>
              Looks up a localized string similar to Path already exists..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.Collections.Generic.GenericResources.ERR_DictionaryOnStream_HashStreamMustBeEmpty">
            <summary>
              Looks up a localized string similar to The stream for hasing must be empty..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.Collections.Generic.GenericResources.ERR_Heap_EmptyHeap">
            <summary>
              Looks up a localized string similar to Unable to pop element because the heap is empty..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.Collections.Generic.GenericResources.ERR_ReadOnlyArrayDictionary_ReadOnly">
            <summary>
              Looks up a localized string similar to A ReadOnlyArrayDictionary is read-only. Key-value pairs cannot be added, updated or removed..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.Collections.Generic.GenericResources.ERR_Tree_NotParent">
            <summary>
              Looks up a localized string similar to Cannot remove a node that is not a child..
            </summary>
        </member>
        <member name="T:DoNetExtension.System.GeneralResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DoNetExtension.System.GeneralResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DoNetExtension.System.GeneralResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DoNetExtension.System.GeneralResources.ERR_ArgumentOutOfRange">
            <summary>
              Looks up a localized string similar to Make sure the argument &quot;{0}&quot; is between {1} ({2}) and {3} ({4})..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.GeneralResources.ERR_ArrayLengthMustBeEqualToASpecificValue">
            <summary>
              Looks up a localized string similar to The length of array &quot;{0}&quot; must be equal to {1}..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.GeneralResources.ERR_ConvertShortcuts_ParsingError">
            <summary>
              Looks up a localized string similar to Error occurs when parsing &quot;{0}&quot; as a {1}. Please make sure the value to parse is in a correct format..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.GeneralResources.ERR_EmptyArray">
            <summary>
              Looks up a localized string similar to Array &quot;{0}&quot; is empty..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.GeneralResources.ERR_EmptyCollection">
            <summary>
              Looks up a localized string similar to Collection &quot;{0}&quot; is empty..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.GeneralResources.ERR_EmptyList">
            <summary>
              Looks up a localized string similar to List &quot;{0}&quot; is empty..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.GeneralResources.ERR_EqualArrayLengthRequired">
            <summary>
              Looks up a localized string similar to The length of array &quot;{0}&quot; must be equal to the length of array &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.GeneralResources.ERR_IndexOutOfRange">
            <summary>
              Looks up a localized string similar to Make sure the index is no smaller than {0} and no larger than {1}..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.GeneralResources.ERR_InvalidBitPosition">
            <summary>
              Looks up a localized string similar to The position of a bit is not valid..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.GeneralResources.ERR_InvalidLength">
            <summary>
              Looks up a localized string similar to Make sure the specified length is a valid value..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.GeneralResources.ERR_InvalidMinMax">
            <summary>
              Looks up a localized string similar to The value of parameter {0} must be no larger than the value of parameter {1}..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.GeneralResources.ERR_InvalidOutOfRange">
            <summary>
              Looks up a localized string similar to Value range for parameter {0} is from {1} to {2}..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.GeneralResources.ERR_InvalidValue">
            <summary>
              Looks up a localized string similar to Value for parameter {0} is invalid..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.GeneralResources.ERR_KeyAlreadyExist">
            <summary>
              Looks up a localized string similar to An object with the same key already exists..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.GeneralResources.ERR_MisMatch">
            <summary>
              Looks up a localized string similar to Mismatch to &quot;{0}&quot; at position {1} detected..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.GeneralResources.ERR_NonNegativeArgumentRequired">
            <summary>
              Looks up a localized string similar to Argument &quot;{0}&quot; must be non-negative..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.GeneralResources.ERR_NonNegativeValueRequired">
            <summary>
              Looks up a localized string similar to Value of &quot;{0}&quot; must be non-negative..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.GeneralResources.ERR_NullArray">
            <summary>
              Looks up a localized string similar to Array &quot;{0}&quot; is null..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.GeneralResources.ERR_NullCollection">
            <summary>
              Looks up a localized string similar to Collection &quot;{0}&quot; is null..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.GeneralResources.ERR_NullList">
            <summary>
              Looks up a localized string similar to List &quot;{0}&quot; is null..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.GeneralResources.ERR_PositiveArgumentRequired">
            <summary>
              Looks up a localized string similar to Argument &quot;{0}&quot; must be positive..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.GeneralResources.ERR_PositiveValueRequired">
            <summary>
              Looks up a localized string similar to Value of &quot;{0}&quot; must be positive..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.GeneralResources.ERR_ProgrammingError">
            <summary>
              Looks up a localized string similar to A programming error occurs..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.GeneralResources.ERR_StringEx_InvalidEscape">
            <summary>
              Looks up a localized string similar to The Unicode character used for escape is invalid..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.GeneralResources.ERR_StringEx_InvalidSearchTarget">
            <summary>
              Looks up a localized string similar to Make sure no value to search is also the escape character or a quote character..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.GeneralResources.ERR_Substring_InvalidStartIndex">
            <summary>
              Looks up a localized string similar to The start index of a substring must be non-negative and less than the length of the original string..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.GeneralResources.ERR_ValueIllegallyLargerThanAnother">
            <summary>
              Looks up a localized string similar to {0}  must be smaller or equal to the {1}.
            </summary>
        </member>
        <member name="P:DoNetExtension.System.GeneralResources.ERR_ValueMustInclusivelyBetween">
            <summary>
              Looks up a localized string similar to {0} must be inclusively between {1} and {2}.
            </summary>
        </member>
        <member name="P:DoNetExtension.System.GeneralResources.ERR_ValueOutOfRange_L_S">
            <summary>
              Looks up a localized string similar to Value of &quot;{0}&quot; must be larger than {1} and smaller than {2}..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.GeneralResources.ERR_ValueOutOfRange_L_SE">
            <summary>
              Looks up a localized string similar to Value of &quot;{0}&quot; must be larger than {1} and smaller than or equal to {2}..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.GeneralResources.ERR_ValueOutOfRange_LE_S">
            <summary>
              Looks up a localized string similar to Value of &quot;{0}&quot; must be larger than or equal to {1} and smaller than {2}..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.GeneralResources.ERR_ValueOutOfRange_LE_SE">
            <summary>
              Looks up a localized string similar to Value of &quot;{0}&quot; must be larger than or equal to {1} and smaller than or equal to {2}..
            </summary>
        </member>
        <member name="T:DoNetExtension.System.IO.IOResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DoNetExtension.System.IO.IOResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DoNetExtension.System.IO.IOResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DoNetExtension.System.IO.IOResources.ERR_EliasCode_OnlyNonNegativeIntegerAllowed">
            <summary>
              Looks up a localized string similar to The integer to be coded must be non-negative..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.IO.IOResources.ERR_FRecordStream_Empty">
            <summary>
              Looks up a localized string similar to This operation is invalid when the current record stream is empty..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.IO.IOResources.ERR_FRecordStream_EmptyOrNotLoaded">
            <summary>
              Looks up a localized string similar to Make sure necessary information is loaded before this operation (call LoadInfo method first). Also make sure the current record stream is not empty and there exists at least one data block..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.IO.IOResources.ERR_FRecordStream_InvalidBaseStream">
            <summary>
              Looks up a localized string similar to Base stream must be seekable, readable and writable..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.IO.IOResources.ERR_FRecordStream_NotLoaded">
            <summary>
              Looks up a localized string similar to Necessary information must be loaded before this operation. Call LoadInfo method first..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.IO.IOResources.ERR_IRecord_InvalidSectionLength">
            <summary>
              Looks up a localized string similar to Length of a section must be positive..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.IO.IOResources.ERR_IRecord_NotCompatible">
            <summary>
              Looks up a localized string similar to Those two System.IO.IRecord objects are not compatible. Compatible records must be based on same System.IO.Stream and have the same section length..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.IO.IOResources.ERR_IRecord_NotLoaded">
            <summary>
              Looks up a localized string similar to The section information has not been loaded..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.IO.IOResources.ERR_IRecordManager_IRecordNotCompatible">
            <summary>
              Looks up a localized string similar to Not in the same info-stream and data-stream and without the same section length, the System.IO.IRecord object is not compatible with the System.IO.IRecordManager object..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.IO.IOResources.ERR_RecordStream_CannotRead">
            <summary>
              Looks up a localized string similar to The underlying stream does not support reading..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.IO.IOResources.ERR_RecordStream_CannotWrite">
            <summary>
              Looks up a localized string similar to The underlying stream does not support writing..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.IO.IOResources.ERR_RecordStream_InvalidCount">
            <summary>
              Looks up a localized string similar to count must be positive..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.IO.IOResources.ERR_RecordStream_InvalidCreation">
            <summary>
              Looks up a localized string similar to This record has been created before. You cannot create it twice..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.IO.IOResources.ERR_RecordStream_InvalidLength">
            <summary>
              Looks up a localized string similar to The total length of the data in the stream must not exceeds the stream&apos;s current capacity..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.IO.IOResources.ERR_RecordStream_InvalidOffset">
            <summary>
              Looks up a localized string similar to offset must not be negative..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.IO.IOResources.ERR_RecordStream_InvalidOffsetAndCount">
            <summary>
              Looks up a localized string similar to The sum of offset and count is larger than the buffer length..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.IO.IOResources.ERR_RecordStream_InvalidPosition">
            <summary>
              Looks up a localized string similar to The position exceeds the length of this stream..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.IO.IOResources.ERR_RecordStream_UpdateNotSaved">
            <summary>
              Looks up a localized string similar to New data has been written into this record stream, and you must save them or abandon them before you unload this record..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.IO.IOResources.ERR_StreamExtension_DataIrrecognizable">
            <summary>
              Looks up a localized string similar to The data at the current position of the stream is irrecognizable or contaminated..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.IO.IOResources.ERR_StreamExtension_DataNotEnough">
            <summary>
              Looks up a localized string similar to The data read from the stream is not enough for the decoding operation..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.IO.IOResources.ERR_StreamExtension_InvalidCheckCode">
            <summary>
              Looks up a localized string similar to A integer check code must be positive..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.IO.IOResources.ERR_StreamExtension_InvalidSizeOfData">
            <summary>
              Looks up a localized string similar to The specified size of data to read is invalid. For this method, the size must be {0}..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.IO.IOResources.ERR_Text4GLimit">
            <summary>
              Looks up a localized string similar to The length of the written string in Unicode should not exceeds 4G..
            </summary>
        </member>
        <member name="T:DoNetExtension.System.Text.RegexResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DoNetExtension.System.Text.RegexResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DoNetExtension.System.Text.RegexResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DoNetExtension.System.Text.RegexResources.NL_CHN_InitializtionFailed_EX">
            <summary>
              Looks up a localized string similar to ICT Chinese Lexical Analysis System Initialization failed..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.Text.RegexResources.NL_CHN_ShutdownFailed_EX">
            <summary>
              Looks up a localized string similar to ICT Chinese Lexical Analysis System shutdown failed..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.Text.RegexResources.NL_CHN_UserWordFileDoesNotExist_EX">
            <summary>
              Looks up a localized string similar to The specified user-word file does not exist..
            </summary>
        </member>
        <member name="P:DoNetExtension.System.Text.RegexResources.REG_ApacheLogline">
            <summary>
              Looks up a localized string similar to (.+)? ?(.+) - - \[(.+)\] &quot;(.+) (.+) (.+)/(.+)&quot; ([0-9]+) ([0-9]+) &quot;(.+)&quot; &quot;(.+)&quot;.
            </summary>
        </member>
        <member name="P:DoNetExtension.System.Text.RegexResources.REG_ChineseCharacter">
            <summary>
              Looks up a localized string similar to [\u4e00-\u9fa5]+.
            </summary>
        </member>
        <member name="P:DoNetExtension.System.Text.RegexResources.REG_DoubleByteCharacter">
            <summary>
              Looks up a localized string similar to [^\x00-\xff]+.
            </summary>
        </member>
        <member name="P:DoNetExtension.System.Text.RegexResources.REG_EmailAddress">
            <summary>
              Looks up a localized string similar to \b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b.
            </summary>
        </member>
        <member name="P:DoNetExtension.System.Text.RegexResources.REG_EmailAddress_0">
            <summary>
              Looks up a localized string similar to (\w[\w\-^@]+\.?)+@serversuffix.
            </summary>
        </member>
        <member name="P:DoNetExtension.System.Text.RegexResources.REG_EmailAddress_1">
            <summary>
              Looks up a localized string similar to \w+(\.[a-zA-Z^@]{2,3})+.
            </summary>
        </member>
        <member name="P:DoNetExtension.System.Text.RegexResources.REG_EnglishWordWithNumber">
            <summary>
              Looks up a localized string similar to \b[a-zA-Z0-9&apos;\-]+\b.
            </summary>
        </member>
        <member name="P:DoNetExtension.System.Text.RegexResources.REG_HTMLMark">
            <summary>
              Looks up a localized string similar to &lt;[^&lt;&gt;]+&gt;.
            </summary>
        </member>
        <member name="P:DoNetExtension.System.Text.RegexResources.REG_HTMLMark_0">
            <summary>
              Looks up a localized string similar to (&lt;tag&gt;)|(&lt;tag\s+[^&lt;&gt;]*&gt;)|(&lt;/tag&gt;).
            </summary>
        </member>
        <member name="P:DoNetExtension.System.Text.RegexResources.REG_IPAddress">
            <summary>
              Looks up a localized string similar to \b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b.
            </summary>
        </member>
        <member name="P:DoNetExtension.System.Text.RegexResources.REG_IPAddressWithAccessToEachNumber">
            <summary>
              Looks up a localized string similar to \b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b.
            </summary>
        </member>
        <member name="P:DoNetExtension.System.Text.RegexResources.REG_TypicalEnglishWord">
            <summary>
              Looks up a localized string similar to \b[a-zA-Z&apos;\-]+\b.
            </summary>
        </member>
    </members>
</doc>
